[{"title":"mysql集群部署","date":"2019-05-17T12:18:10.000Z","path":"2019/05/17/mysql集群部署/","content":"<p>在实际的开发环境（我的为Ubuntu）中，为了保证数据的有效性以及稳定性，需要对数据库进行冗余设计，也就是集群部署，以此来应对在实际的生产环境中出现的数据库宕机，我这里主要是看了两种mysql集群设计方案，Replication和PXC（percona-xtradb-cluster）。</p>\n<a id=\"more\"></a>\n<p>Replication方案，配置比较简单，采用主从的方式，内部机理为二进制日志进行同步，但不具备强一致性，从节点不可以作为读写节点，得不到实际保障，多用于数据备份的环境。</p>\n<p>PXC任意一个节点都可以存在读写的方案，也就是任意一个节点都可以当读或者当写。同步复制。保证强一致性。同步复制，事务在所有节点要提交都提交。要么都不提交。</p>\n<h2 id=\"Replication\"><a href=\"#Replication\" class=\"headerlink\" title=\"Replication\"></a>Replication</h2><h3 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> apt-get install mysql-server -y</span><br></pre></td></tr></table></figure>\n<h3 id=\"master\"><a href=\"#master\" class=\"headerlink\" title=\"master\"></a>master</h3><h4 id=\"编辑和修改MySql-Server的配置文件\"><a href=\"#编辑和修改MySql-Server的配置文件\" class=\"headerlink\" title=\"编辑和修改MySql Server的配置文件\"></a>编辑和修改MySql Server的配置文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 注释这句， server可以用其他网卡IP进行访问</span><br><span class=\"line\"># bind-address = 127.0.0.1</span><br></pre></td></tr></table></figure>\n<p>在文件末尾添加以下行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server-id = 1   # 不与其他地方相同</span><br><span class=\"line\">log_bin = /var/log/mysql/mysql-bin.log</span><br><span class=\"line\">log_bin_index =/var/log/mysql/mysql-bin.log.index</span><br><span class=\"line\">relay_log = /var/log/mysql/mysql-relay-bin</span><br><span class=\"line\">relay_log_index = /var/log/mysql/mysql-relay-bin.index</span><br></pre></td></tr></table></figure>\n<h4 id=\"重启mysql\"><a href=\"#重启mysql\" class=\"headerlink\" title=\"重启mysql\"></a>重启mysql</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># service mysql restart</span><br></pre></td></tr></table></figure>\n<h4 id=\"登录mysql，创建用于集群的账号\"><a href=\"#登录mysql，创建用于集群的账号\" class=\"headerlink\" title=\"登录mysql，创建用于集群的账号\"></a>登录mysql，创建用于集群的账号</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; create user &apos;replica&apos;@&apos;%&apos; identified by &apos;password&apos;;</span><br><span class=\"line\">mysql &gt; GRANT REPLICATION SLAVE ON *.* TO &apos;replica&apos;@&apos;%&apos;;</span><br><span class=\"line\">mysql &gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n<p>执行命令查看服务器状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; show master status;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>图中是我后来截的图，参数和你不一致很正常</p>\n</blockquote>\n<p><img src=\"1558098597813.png\" alt=\"1558098597813\"></p>\n<h3 id=\"Slave\"><a href=\"#Slave\" class=\"headerlink\" title=\"Slave\"></a><strong>Slave</strong></h3><h4 id=\"编辑和修改MySql-Server的配置文件-1\"><a href=\"#编辑和修改MySql-Server的配置文件-1\" class=\"headerlink\" title=\"编辑和修改MySql Server的配置文件\"></a>编辑和修改MySql Server的配置文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 注释这句， server可以用其他网卡IP进行访问</span><br><span class=\"line\"># bind-address = 127.0.0.1</span><br></pre></td></tr></table></figure>\n<p>在文件末尾添加以下行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server-id = 2  // 节点这里需要不同</span><br><span class=\"line\">log_bin = /var/log/mysql/mysql-bin.log</span><br><span class=\"line\">log_bin_index =/var/log/mysql/mysql-bin.log.index</span><br><span class=\"line\">relay_log = /var/log/mysql/mysql-relay-bin</span><br><span class=\"line\">relay_log_index = /var/log/mysql/mysql-relay-bin.index</span><br></pre></td></tr></table></figure>\n<h4 id=\"重启mysql-1\"><a href=\"#重启mysql-1\" class=\"headerlink\" title=\"重启mysql\"></a>重启mysql</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># service mysql restart</span><br></pre></td></tr></table></figure>\n<h4 id=\"登录mysql，配置从节点\"><a href=\"#登录mysql，配置从节点\" class=\"headerlink\" title=\"登录mysql，配置从节点\"></a>登录mysql，配置从节点</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; stop slave; </span><br><span class=\"line\">mysql &gt; CHANGE MASTER TO MASTER_HOST = &apos;master-ip&apos;, MASTER_USER = &apos;replica&apos;, MASTER_PASSWORD = &apos;password&apos;, MASTER_LOG_FILE = &apos;mysql-bin.000001&apos;, MASTER_LOG_POS = 753; </span><br><span class=\"line\">mysql &gt; start slave;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MASTER_HOST：主服务器的IP地址 </span><br><span class=\"line\">MASTER_USER：我们在之前步骤中创建的主服务器的复制用户。 </span><br><span class=\"line\">MASTER_PASSWORD：我们在之前步骤中创建的主服务器的复制用户密码。 </span><br><span class=\"line\">MASTER_LOG_FILE：主服务器主日志文件的值。 </span><br><span class=\"line\">MASTER_LOG_POS：主服务器的主日志位置的值。</span><br></pre></td></tr></table></figure>\n<hr>\n<p>主从节点的配置都完成，此时即可插入一些数据去查看是否配置成功了。</p>\n<h2 id=\"PXC\"><a href=\"#PXC\" class=\"headerlink\" title=\"PXC\"></a>PXC</h2><p>这里推荐一个YouTube的视频进行观看，<a href=\"https://www.youtube.com/watch?v=wIEj3FLAX8M\" target=\"_blank\" rel=\"noopener\">Install Percona XtraDB Cluster on CentOS 7 in simple easy steps</a>。</p>\n<p>可以查看GitHub视频主的仓库，<a href=\"https://github.com/justmeandopensource/percona\" target=\"_blank\" rel=\"noopener\">here</a>。</p>\n<p>可以参考<a href=\"https://www.percona.com/doc/percona-xtradb-cluster/LATEST/index.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<p>这里简略说一下Ubuntu PXC的安装。</p>\n<p>以前装过mysql需要卸载干净，然后将<code>apparmor</code>也一并卸载。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get remove apparmor</span><br></pre></td></tr></table></figure>\n<p>获取仓库包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://repo.percona.com/apt/percona-release_latest.generic_all.deb</span><br></pre></td></tr></table></figure>\n<p><code>dpkg</code>安装最新的仓库，更新。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo dpkg -i percona-release_latest.generic_all.deb</span><br><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install percona-xtradb-cluster-5.6</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以下均为转载自仓库。</p>\n</blockquote>\n<h3 id=\"Install-instructions-for-Ubuntu-18\"><a href=\"#Install-instructions-for-Ubuntu-18\" class=\"headerlink\" title=\"Install instructions for Ubuntu 18\"></a>Install instructions for Ubuntu 18</h3><h3 id=\"Assumptions\"><a href=\"#Assumptions\" class=\"headerlink\" title=\"Assumptions\"></a>Assumptions</h3><table>\n<thead>\n<tr>\n<th>Role</th>\n<th>machine name</th>\n<th>IP address</th>\n<th>Memory</th>\n<th>Operating System</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>master node 1</td>\n<td>ubuntuvm01</td>\n<td>172.42.42.101</td>\n<td>1G</td>\n<td>Ubuntu 18</td>\n</tr>\n<tr>\n<td>master node 2</td>\n<td>ubuntuvm02</td>\n<td>172.42.42.102</td>\n<td>1G</td>\n<td>Ubuntu 18</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"On-First-node\"><a href=\"#On-First-node\" class=\"headerlink\" title=\"On First node\"></a>On First node</h3><h5 id=\"Add-Percona-Repository\"><a href=\"#Add-Percona-Repository\" class=\"headerlink\" title=\"Add Percona Repository\"></a>Add Percona Repository</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://repo.percona.com/apt/percona-release_0.1-6.$(lsb_release -sc)_all.deb</span><br><span class=\"line\">dpkg -i percona-release_0.1-6.$(lsb_release -sc)_all.deb</span><br></pre></td></tr></table></figure>\n<h5 id=\"Install-Percona-XtraDB-Cluster\"><a href=\"#Install-Percona-XtraDB-Cluster\" class=\"headerlink\" title=\"Install Percona-XtraDB-Cluster\"></a>Install Percona-XtraDB-Cluster</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install -y percona-xtradb-cluster-57</span><br><span class=\"line\">systemctl stop mysql</span><br></pre></td></tr></table></figure>\n<h5 id=\"Configure-Replication-Settings\"><a href=\"#Configure-Replication-Settings\" class=\"headerlink\" title=\"Configure Replication Settings\"></a>Configure Replication Settings</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt;&gt;/etc/mysql/my.cnf&lt;&lt;EOF</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">wsrep_provider=/usr/lib/libgalera_smm.so</span><br><span class=\"line\">wsrep_cluster_name=democluster</span><br><span class=\"line\">wsrep_cluster_address=gcomm://</span><br><span class=\"line\">wsrep_node_name=centosvm01</span><br><span class=\"line\">wsrep_node_address=172.42.42.101</span><br><span class=\"line\">wsrep_sst_method=xtrabackup-v2</span><br><span class=\"line\">wsrep_sst_auth=repuser:reppassword</span><br><span class=\"line\">pxc_strict_mode=ENFORCING</span><br><span class=\"line\">binlog_format=ROW</span><br><span class=\"line\">default_storage_engine=InnoDB</span><br><span class=\"line\">innodb_autoinc_lock_mode=2</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<h5 id=\"Bootstrap-Initialize-the-Cluster\"><a href=\"#Bootstrap-Initialize-the-Cluster\" class=\"headerlink\" title=\"Bootstrap/Initialize the Cluster\"></a>Bootstrap/Initialize the Cluster</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mysql</span><br></pre></td></tr></table></figure>\n<h5 id=\"Create-Replication-User\"><a href=\"#Create-Replication-User\" class=\"headerlink\" title=\"Create Replication User\"></a>Create Replication User</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p -e &quot;create user repuser@localhost identified by &apos;reppassword&apos;&quot;</span><br><span class=\"line\">mysql -uroot -p -e &quot;grant reload, replication client, process, lock tables on *.* to repuser@localhost&quot;</span><br><span class=\"line\">mysql -uroot -p -e &quot;flush privileges&quot;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Update-Replication-configuration\"><a href=\"#Update-Replication-configuration\" class=\"headerlink\" title=\"Update Replication configuration\"></a>Update Replication configuration</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &apos;s/^wsrep_cluster_address=.*/wsrep_cluster_address=gcomm:\\/\\/172.42.42.101,172.42.42.102/&apos; /etc/mysql/my.cnf</span><br></pre></td></tr></table></figure>\n<h3 id=\"On-Second-node\"><a href=\"#On-Second-node\" class=\"headerlink\" title=\"On Second node\"></a>On Second node</h3><h5 id=\"Add-Percona-Repository-1\"><a href=\"#Add-Percona-Repository-1\" class=\"headerlink\" title=\"Add Percona Repository\"></a>Add Percona Repository</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://repo.percona.com/apt/percona-release_0.1-6.$(lsb_release -sc)_all.deb</span><br><span class=\"line\">dpkg -i percona-release_0.1-6.$(lsb_release -sc)_all.deb</span><br></pre></td></tr></table></figure>\n<h5 id=\"Install-Percona-XtraDB-Cluster-1\"><a href=\"#Install-Percona-XtraDB-Cluster-1\" class=\"headerlink\" title=\"Install Percona-XtraDB-Cluster\"></a>Install Percona-XtraDB-Cluster</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install -y percona-xtradb-cluster-57</span><br><span class=\"line\">systemctl stop mysql</span><br></pre></td></tr></table></figure>\n<h5 id=\"Configure-Replication-Settings-1\"><a href=\"#Configure-Replication-Settings-1\" class=\"headerlink\" title=\"Configure Replication Settings\"></a>Configure Replication Settings</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt;&gt;/etc/mysql/my.cnf&lt;&lt;EOF</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">wsrep_provider=/usr/lib/libgalera_smm.so</span><br><span class=\"line\">wsrep_cluster_name=democluster</span><br><span class=\"line\">wsrep_cluster_address=gcomm://172.42.42.101,172.42.42.102</span><br><span class=\"line\">wsrep_node_name=centosvm02</span><br><span class=\"line\">wsrep_node_address=172.42.42.102</span><br><span class=\"line\">wsrep_sst_method=xtrabackup-v2</span><br><span class=\"line\">wsrep_sst_auth=repuser:reppassword</span><br><span class=\"line\">pxc_strict_mode=ENFORCING</span><br><span class=\"line\">binlog_format=ROW</span><br><span class=\"line\">default_storage_engine=InnoDB</span><br><span class=\"line\">innodb_autoinc_lock_mode=2</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<h5 id=\"Start-mysql-to-join-the-cluster\"><a href=\"#Start-mysql-to-join-the-cluster\" class=\"headerlink\" title=\"Start mysql to join the cluster\"></a>Start mysql to join the cluster</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mysql</span><br></pre></td></tr></table></figure>","categories":[{"name":"mysql","slug":"mysql","permalink":"chunlife.top/categories/mysql/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"chunlife.top/tags/mysql/"},{"name":"replication","slug":"replication","permalink":"chunlife.top/tags/replication/"},{"name":"percona-xtradb-cluster","slug":"percona-xtradb-cluster","permalink":"chunlife.top/tags/percona-xtradb-cluster/"},{"name":"pxc","slug":"pxc","permalink":"chunlife.top/tags/pxc/"}]},{"title":"分布式定时任务之强杀任务","date":"2019-05-05T08:10:17.000Z","path":"2019/05/05/分布式定时任务之强杀任务/","content":"<p><a href=\"https://github.com/younglifestyle/goexamples/tree/master/cronPro\" target=\"_blank\" rel=\"noopener\">cronPro</a>，其中有一项功能为强杀任务；这里也可以借助<code>shell</code>命令来完成，通过<code>shell</code>脚本获取任务的<code>pid</code>，这样就可以通过脚本来控制程序在操作系统层面上一定会被<code>kill</code>。</p>\n<a id=\"more\"></a>\n<p>取自falcon-plus的启动脚本。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function check_pid() &#123;</span><br><span class=\"line\">    if [ -f $pidfile ];then</span><br><span class=\"line\">        pid=`cat $pidfile`</span><br><span class=\"line\">        if [ -n $pid ]; then</span><br><span class=\"line\">            running=`ps -p $pid|grep -v \"PID TTY\" |wc -l`</span><br><span class=\"line\">            return $running</span><br><span class=\"line\">        fi</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    return 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function start() &#123;</span><br><span class=\"line\">    check_pid</span><br><span class=\"line\">    running=$?</span><br><span class=\"line\">    if [ $running -gt 0 ];then</span><br><span class=\"line\">        echo -n \"$app now is running already, pid=\"</span><br><span class=\"line\">        cat $pidfile</span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\"></span><br><span class=\"line\">    nohup ./$app &amp;&gt; $logfile &amp;</span><br><span class=\"line\">    echo $! &gt; $pidfile</span><br><span class=\"line\">    echo \"$app started..., pid=$!\"</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function stop() &#123;</span><br><span class=\"line\">    pid=`cat $pidfile`</span><br><span class=\"line\">    kill $pid</span><br><span class=\"line\">    echo \"$app stoped...\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"项目","slug":"项目","permalink":"chunlife.top/categories/项目/"}],"tags":[{"name":"go","slug":"go","permalink":"chunlife.top/tags/go/"}]},{"title":"进程与线线程的翻译文章","date":"2019-04-25T02:22:20.000Z","path":"2019/04/25/面试相关题一/","content":"<ol>\n<li><h3 id=\"cap-map-是否正确-请说明理由\"><a href=\"#cap-map-是否正确-请说明理由\" class=\"headerlink\" title=\"cap(map) 是否正确? 请说明理由\"></a>cap(map) 是否正确? 请说明理由</h3></li>\n</ol>\n<p>不正确，cap是获取slice底层结构中容量（cap）的值，而在go中map结构并没有直接获取长度的函数，若需要获取则只能通过range关键字。</p>\n<ol start=\"2\">\n<li><h3 id=\"a-make-int-5-20\"><a href=\"#a-make-int-5-20\" class=\"headerlink\" title=\"a := make([]int, 5, 20)\"></a>a := make([]int, 5, 20)</h3><p>fmt.Println(a[6])<br>fmt.Println(a[6:10]) </p>\n</li>\n</ol>\n<p>编译通过，运行出错。数组越界，此slice是一个长度为5，容量为20的slice，而程序访问到了长度之外的数据。</p>\n<ol start=\"3\">\n<li><h3 id=\"列出-golang-的所有数据类型\"><a href=\"#列出-golang-的所有数据类型\" class=\"headerlink\" title=\"列出 golang 的所有数据类型\"></a>列出 golang 的所有数据类型</h3></li>\n</ol>\n<p>这道题。。。。。。</p>\n<p>bool，数字类型（整型 int 和浮点型 float32、float64，Go 语言支持整型和浮点型数字），</p>\n<p>字符串类型，</p>\n<p>派生类型</p>\n<ul>\n<li>(a) 指针类型（Pointer）</li>\n<li>(b) 数组类型</li>\n<li>(c) 结构化类型(struct)</li>\n<li>(d) Channel 类型</li>\n<li>(e) 函数类型</li>\n<li>(f) 切片类型</li>\n<li>(g) 接口类型（interface）</li>\n<li>(h) Map 类型</li>\n</ul>\n<ol start=\"4\">\n<li><h3 id=\"所有数据类型定义时候的默认值\"><a href=\"#所有数据类型定义时候的默认值\" class=\"headerlink\" title=\"所有数据类型定义时候的默认值\"></a>所有数据类型定义时候的默认值</h3></li>\n</ol>\n<p>bool为false，int为0，slice，map为nil</p>\n<ol start=\"5\">\n<li><h3 id=\"lst-int-1-2-3-4-5\"><a href=\"#lst-int-1-2-3-4-5\" class=\"headerlink\" title=\"lst := []int{1,2,3,4,5}\"></a>lst := []int{1,2,3,4,5}</h3><p>for i, v := range lst{<br>/<em> 如何判断 range 是否有拷贝 lst 一个副本? </em>/ </p>\n</li>\n</ol>\n<p>} </p>\n<p>证明条件如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> lst &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 如何判断 range 是否有拷贝 lst 一个副本? */</span></span><br><span class=\"line\">    lst = <span class=\"built_in\">append</span>(lst, <span class=\"number\">1</span>)</span><br><span class=\"line\">    fmt.Println(i, v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li><h3 id=\"哪个无法运行？为什么？如果能运行，使用什么方法能区别出来？或者说如何能使其中看起来不正确的使它不要运行？\"><a href=\"#哪个无法运行？为什么？如果能运行，使用什么方法能区别出来？或者说如何能使其中看起来不正确的使它不要运行？\" class=\"headerlink\" title=\"哪个无法运行？为什么？如果能运行，使用什么方法能区别出来？或者说如何能使其中看起来不正确的使它不要运行？\"></a>哪个无法运行？为什么？如果能运行，使用什么方法能区别出来？或者说如何能使其中看起来不正确的使它不要运行？</h3></li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> A <span class=\"keyword\">struct</span> &#123;&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a A)</span> <span class=\"title\">m</span><span class=\"params\">()</span></span> &#123; </span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"func m...\"</span>) </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *A)</span> <span class=\"title\">n</span><span class=\"params\">()</span></span> &#123; </span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"func n...\"</span>) </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">ao := A&#123;&#125; </span><br><span class=\"line\">ao.m() </span><br><span class=\"line\">ao.n() </span><br><span class=\"line\"></span><br><span class=\"line\">ap := &amp;A&#123;&#125; </span><br><span class=\"line\">ap.m() </span><br><span class=\"line\">ap.n()</span><br></pre></td></tr></table></figure>\n<p>实际运行，上下两种情况均能顺利运行。</p>\n<p>这里区分的话，可以以修改receiver的值作为判断依据。</p>\n<ol>\n<li><h3 id=\"需要屏蔽-10-万个关键字，-写算法实现\"><a href=\"#需要屏蔽-10-万个关键字，-写算法实现\" class=\"headerlink\" title=\"需要屏蔽 10 万个关键字， 写算法实现?\"></a>需要屏蔽 10 万个关键字， 写算法实现?</h3></li>\n</ol>\n<p>AC自动机（Aho-Corasick）。</p>\n<p>也可以使用<code>grep</code>。</p>\n<h3 id=\"2、Golang，empty-slice-与-nil-slice，json包如何应对？\"><a href=\"#2、Golang，empty-slice-与-nil-slice，json包如何应对？\" class=\"headerlink\" title=\"2、Golang，empty slice 与 nil slice，json包如何应对？\"></a>2、Golang，empty slice 与 nil slice，json包如何应对？</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a []<span class=\"keyword\">int</span></span><br><span class=\"line\">b := []<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\">bytes, err := json.Marshal(a)</span><br><span class=\"line\">fmt.Println(<span class=\"keyword\">string</span>(bytes), err)</span><br><span class=\"line\"></span><br><span class=\"line\">bytes, err = json.Marshal(b)</span><br><span class=\"line\">fmt.Println(<span class=\"keyword\">string</span>(bytes), err)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// null &lt;nil&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// [] &lt;nil&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"1、空struct-的使用。\"><a href=\"#1、空struct-的使用。\" class=\"headerlink\" title=\"1、空struct{}的使用。\"></a>1、空struct{}的使用。</h3><p>空struct不占用内存，也就是说即使分配切片10000个空struct，也只是占用底层结构体的大小。</p>\n<p>用途一般是：chan struct{} 比如用来实现set: map[string]struct{}</p>\n<p>空struct相等的特性在1.6之后不支持了。</p>\n<h3 id=\"2、在Go语言中结构体是否能够比较？该如何比较两个结构体？\"><a href=\"#2、在Go语言中结构体是否能够比较？该如何比较两个结构体？\" class=\"headerlink\" title=\"2、在Go语言中结构体是否能够比较？该如何比较两个结构体？\"></a>2、在Go语言中结构体是否能够比较？该如何比较两个结构体？</h3><p>相同类型的结构体能够进行比较。</p>\n","categories":[{"name":"Go","slug":"Go","permalink":"chunlife.top/categories/Go/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"}]},{"title":"进程与线线程的翻译文章","date":"2019-04-25T02:22:20.000Z","path":"2019/04/25/进程与线线程的翻译文章/","content":"<h1 id=\"A-gentle-introduction-to-multithreading\"><a href=\"#A-gentle-introduction-to-multithreading\" class=\"headerlink\" title=\"A gentle introduction to multithreading\"></a>A gentle introduction to multithreading</h1><p><a href=\"https://www.internalpointers.com/post/gentle-introduction-multithreading\" target=\"_blank\" rel=\"noopener\">https://www.internalpointers.com/post/gentle-introduction-multithreading</a></p>\n<a id=\"more\"></a>\n<p>额，才发现评论里，已经有人翻译了。时间是2019年3月份。</p>\n<p><a href=\"https://mp.weixin.qq.com/s/2d-xgWbhSgyFJ3zKPOIscg\" target=\"_blank\" rel=\"noopener\">多线程简述</a></p>\n<p><strong>转载：</strong></p>\n<p>一次一步，走进并发的世界。</p>\n<p>现代计算机有能力在同一时间执行多个操作。随着硬件的进步和操作系统的发展，这项特性让程序运行得更快，无论是在执行速度上还是在响应性上。</p>\n<p>编写利用到此特性的软件另人着迷但也需要更多技巧: 你需要明白计算机底层发生了什么。本系列第一篇将对 线程(threads) 进行概述。在这些魔法背后，线程是操作系统(os) 提供的工具之一。</p>\n<h2 id=\"进程-process-和线程-thread-对号入座\"><a href=\"#进程-process-和线程-thread-对号入座\" class=\"headerlink\" title=\"进程(process)和线程(thread): 对号入座\"></a>进程(process)和线程(thread): 对号入座</h2><p>现代操作系统能够在同一时间运行多个程序. 这也是为什么此刻你可以在浏览器中阅读本文，同时又能使用音乐播放器听音乐的原因(浏览器和播放器是两个不同的程序)。每一个运行的程序都会是一个进程(process)。操作系统知晓很多软件技巧，使得多个进程可以一起运行，并能利用好底层的硬件。无论怎样，最终的结果都是，用户 <em>感觉</em> 所有的程序是同时跑着的。</p>\n<p>多进程并非操作系统中在同一时间执行多条任务的惟一方法。每个进程内部也可能同时跑多个子任务，这被叫做 线程(threads)。可以把线程当作进程的切片。每个进程启动时至少激活了一个线程，这个线程叫做 主线程(main thread)。然后，根据程序或程序设计者的需要，额外的线程会被创建或终止。多线程(multitreading) 就是关于单个进程内跑多个线程的。</p>\n<p>例如，很有可能你用的播放器就跑了多个线程: 一个用来渲染用户界面(通常是主线程)，另一个用来播放音乐。</p>\n<p>可以把操作系统当作持有多个进程的容器，而每个容器本身也持有多个线程。本篇文章主要关注线程，完整的话题很吸引人，值得未来写一篇更深入的分析文章。</p>\n<p><img src=\"1556249590804.png\" alt=\"*Operating systems can be seen as a box that contains processes, which in turn contain one or more threads.*\"></p>\n<ol>\n<li>操作系统可以被看作包含了很多进程的盒子，而进程本身则包含了很多线程。</li>\n</ol>\n<h3 id=\"进程和线程的区别\"><a href=\"#进程和线程的区别\" class=\"headerlink\" title=\"进程和线程的区别\"></a>进程和线程的区别</h3><p>操作系统为每个进程分配了自己的一片内存。通常这片内存不与其它进程共享：你的浏览器没法访问你的播放器的内存，反之亦然。把浏览器打开2次也遵循同样的规则，操作系统把一个应用的每个实例都当作一个独立的进程，每个进程都有会分配自己的独占内存。所以，两个或多个进程之间默认无法分享数据，除非它们应用了更高级的技巧–所谓的 进程间通信 (IPC).</p>\n<p>和进程不同，线程与其所在的进程共用一片操作系统分配的内存：播放器主线程内的数据可以轻易地被音频引擎访问到，反之亦然。因此，线程之间通信更加容易。在此基础上，线程通常比进程更轻量：它们资源占用得更少，更易创建。这也是我们称呼线程 轻量化的进程(lightweight processes) 的原因。</p>\n<p>线程让你的程序在同一时间执行多个操作变得方便。没有线程，你要针对每个任务写一个程序，每个任务跑一个进程，并利用操作系统对它们进行同步。这样做更难(进程间通信是棘手的)、更慢(进程比线程的开销更重)</p>\n<h3 id=\"绿色线程，或-纤程\"><a href=\"#绿色线程，或-纤程\" class=\"headerlink\" title=\"绿色线程，或 纤程\"></a>绿色线程，或 纤程</h3><p>目前为止，我们讨论的线程都是操作系统层面的：一个进程想创建一个新线程，必须告诉操作系统。然而，不是每个平台都原生支持线程。绿色线程(green threads), 也叫 纤程(fibers) 是一类模拟，它使得多线程程序在没有多线程支持的环境下也能工作。例如，在底层操作系统没有原生线程支持的情况下，某些虚拟机会实现绿色线程。</p>\n<p>绿色线程的创建和管理都更快速，因为它们完全绕过了操作系统，但也有一些缺点。这个话题在后续的文章中会提到。</p>\n<p>绿色线程(green threads) 这个名字来自于 Sun Microsystem的绿色小组(Green Team), 90年代Java 线程库的初版即在这里设计。今天Java已不再使用绿色线程，在2000年时，他们切换到了原生线程。其它的一些语言–Go, Haskell 或 Rust, 举这几个例子 – 没有使用原生线程，而是实现了和绿色线程类似的功能。</p>\n<h2 id=\"线程的用途\"><a href=\"#线程的用途\" class=\"headerlink\" title=\"线程的用途\"></a>线程的用途</h2><p>进程为什么要使用多个线程？之前提到过，并行可以加快速度。比如，你打算在电影编辑器中渲染一部电影。编辑器可以聪明到将渲染操作分拆给多个线程，每个线程负责处理一部分数据。所以如果让一个线程来做需要1小时，那么2个线程只需要30分钟，而4个线程15分钟就行了，如此这般。</p>\n<p>事情真的这样简单吗？有3个重要的点要考虑：</p>\n<ol>\n<li>不是所有程序都需要多线程。如果你的程序执行的是顺序操作或者总是等待用户操作，多线程不会带来多少好处；</li>\n<li>引入更多线程不一定会让程序跑得更快：每个子任务必须精心设计以保证并行执行；</li>\n<li>多个线程并不能保证100%并行，即，同一时间执行：这取决于底层硬件。</li>\n</ol>\n<p>第3点至关重要：如果你的计算机不支持同一时间多个操作，操作系统必须进行模拟操作。这一点后面会说到。暂时地，我们把并发(concurrency)描述为在同一时间执行多个任务的感受(perception)，而<strong>真实的并行(true parallelism)</strong>是多个任务确确实实地在同一时间运行着。</p>\n<p><img src=\"1556249652132.png\" alt=\"*Parallelism is a subset of concurrency.*\"></p>\n<ol>\n<li>并行是并发的子集.</li>\n</ol>\n<h2 id=\"什么让并发和并行成为可能\"><a href=\"#什么让并发和并行成为可能\" class=\"headerlink\" title=\"什么让并发和并行成为可能\"></a>什么让并发和并行成为可能</h2><p> 程序的运行依赖于计算机中的中央处理器(CPU)。它由多个部分组成，主要的部分被称作 核心(core)：运算就是在这里执行的。一个核心一次只能运行一个操作。</p>\n<p>这自然就成了主要的缺点。为解决这个问题，操作系统发展出了高级技巧，让计算机有能力同时跑多个进程(或线程)，尤其在图形界面环境中，即使是单核机器。其中最重要的部分叫做 先占式多任务处理(preemptive multitasking), 这里 <strong>先占(preemption)</strong> 是这样一种能力: 中断一个任务，切换到另一个任务，稍后再恢复先前中断的任务。</p>\n<p>所以，如果你电脑的cpu只有一个核心，操作系统的职责之一就是将单核的运算能力分拆给多个进程(或线程)，让它们循环地相继执行。这给了我们一种假象，以为有多个程序在并行运行或者一个程序同时做着多件事情(多线程情况下)。这样并发便实现了，但 <em>真正的并行</em> – 同一时间跑多个进程的能力 – 仍然是缺失的。</p>\n<p>时至今日，现代cpu的核心通常不只一个，每个核心都能独立的一次执行一个操作。这意味着，有了多核心，真实的并行有了可能。比如，我自己的 Intel Core i7 有4个核心：它在同一时刻能跑4个不同的进程(或线程)。</p>\n<p>操作系统能监测到cpu的核心数并给它们分配进程或线程。线程可能被分配到任意一个核心上，而且这种调度对于程序是透明的。先占式多任务机制在所有核心都繁忙时也可能介入。这使得计算机有能力执行比核心数更多的进程和线程。</p>\n<h3 id=\"多线程应用在单核机器上：有意义吗？\"><a href=\"#多线程应用在单核机器上：有意义吗？\" class=\"headerlink\" title=\"多线程应用在单核机器上：有意义吗？\"></a>多线程应用在单核机器上：有意义吗？</h3><p>单核机器无法实现真正的并行。不过单核机器上的多线程仍然是有意义的，如果你的程序能够受益的话。当一个进程用到了多线程时，先占式多任务机制可以使你的程序正常的运行，即使某一个线程很慢或者阻塞了。</p>\n<p>比如，你在用一个桌面应用从一个慢速硬盘上读取数据。如果该桌面应用只有一个线程，在读取操作结束前，整个程序都是卡住的：在等待硬盘操作时，赋予该线程的cpu就浪费掉了。当然，除了这个程序外，操作系统还在跑着其它进程，但你在用的这个程序不会有任何进展(除了等待)。</p>\n<p>让我们以多线程方式重新思考这款程序。线程A负责访问硬盘，同时线程B负责处理用户界面。当因为硬盘读取速度慢导致线程A僵住时，线程B仍然管理着用户界面，程序不会丧失响应。这样做是可行的，因为有了2个线程后，当其中一个卡住后，操作系统可以将CPU资源切换给另一个线程使用。</p>\n<h2 id=\"线程越多，风险越多\"><a href=\"#线程越多，风险越多\" class=\"headerlink\" title=\"线程越多，风险越多\"></a>线程越多，风险越多</h2><p>上面谈到，线程和其所在进程共享内存。这使得在一个应用内线程间交换数据变得极其简单。例如，视频编辑器占有了包含视频时间线的内存区域，这片内存又被一些工作线程读取并渲染到文件中。它们只需要一个把手或指针(pointer)指向那个区域，就能够读取它的内容并写入磁盘。</p>\n<p>一切都很顺利，只要两个或多个线程只是从同一内存进行读取操作。问题发生在当有至少一个线程往共享内存执行写入操作而同时有其它线程在读取时。此时可能发生2类问题：</p>\n<ul>\n<li>数据竞争(data race) – 写线程在修改数据时，读线程在执行读入操作。如果写线程还未完成操作，读线程获取的是脏数据。</li>\n<li>竞态条件 – 读线程只应该在写线程写完后执行读取操作。如果不是这样会怎样？比数据竞争更微妙，竞态条件是关于两个或多个线程以不可预测的顺序执行任务，而实际上这些任务要以特定的顺序执行。即使没有数据竞争，程序也可能出现竞态条件。</li>\n</ul>\n<h3 id=\"线程安全的概念\"><a href=\"#线程安全的概念\" class=\"headerlink\" title=\"线程安全的概念\"></a>线程安全的概念</h3><p>没有数据竞争和竞态条件的代码被认为是线程安全的(thread-safe), 即使有多个线程同时执行的情况下。你可能注意过，一些程序库声明自己是线程安全的。如果你在写多线程程序，你会想知道第三方函数在多个线程中执行是否会导致并发问题。</p>\n<h2 id=\"数据竞争的根由\"><a href=\"#数据竞争的根由\" class=\"headerlink\" title=\"数据竞争的根由\"></a>数据竞争的根由</h2><p>我们知道一个CPU核心一次只能执行一个机器指令。这样的指令被称作原子的(atomic)，因为它不可再分了：它无法被分成多个更小的操作。在希腊语中，单词<strong>atom(ἄτομος; atomos)</strong>意即 不可切分的(uncuttable)</p>\n<p>不可切分的特点使得原子操作天生线程安全。一个线程对共享数据进行原子写操作时，操作结束前没有其它线程能读取到该次修改。相反地，当一个线程对共享数据进行原子读操作时，它读到的是该时间点上的完整的数据。一个线程不可能溜进另一个线程的原子操作，因此数据竞争不会发生。</p>\n<p>坏消息是大部分操作都是非原子的。即使诸如<code>x=1</code>这样简单的赋值，在某些硬件上都可能涉及多个原子操作，让赋值操作整体上变成非原子的。所以如果一个线程读取x而另一个线程在对x赋值时，数据竞争便产生了。</p>\n<h2 id=\"竞态条件的根由\"><a href=\"#竞态条件的根由\" class=\"headerlink\" title=\"竞态条件的根由\"></a>竞态条件的根由</h2><p>先占式多任务处理让操作系统对线程管理有了完全的控制权：它可以根据更高级的调度算法，开始、结束或暂停线程。作为程序设计者的你无法控制代码执行的时间或顺序。实际上，像下面这样的代码我们无法保证它们的执行顺序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">writer_thread.start()</span><br><span class=\"line\">reader_thread.start()</span><br></pre></td></tr></table></figure>\n<p>将上述代码执行多次，你会注意到每次表现可能都不一样：有时写线程先开始，有时读线程先开始。如果你的程序需要让写线程跑在读线程前面，你就会遇到竞态条件的问题。</p>\n<p>这类行为被称作 非确定性的(non-deterministic)：结果每次都会变，而且你无法预测。调试受竞态条件影响的程序是烦人的，因为你无法以一种可控的方式重现问题。</p>\n<h2 id=\"让线程们和谐相处-并发控制\"><a href=\"#让线程们和谐相处-并发控制\" class=\"headerlink\" title=\"让线程们和谐相处: 并发控制\"></a>让线程们和谐相处: 并发控制</h2><p>数据竞争和竞态条件都是现实世界中的问题：一些人甚至因为它而丧命(见:<a href=\"https://en.wikipedia.org/wiki/Therac-25)。调节两个或多个并发线程的手段叫并发控制\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Therac-25)。调节两个或多个并发线程的手段叫并发控制</a>(concurrency control)：操作系统和编程语言都提供了一些方案。其中最重要的有：</p>\n<ul>\n<li>同步化(synchronization) – 用来确保资源一次只会被一个线程使用。同步即是把代码的一部分标记为<em>受保护的</em>，这样一来，多个线程不能同时执行它，也就不会搞乱共享的数据了。</li>\n<li>原子操作(atomic operations) – 操作系统提供了一些特殊的指令，可以把一组非原子操作(像之前提及的赋值操作)转换成原子操作。这样，共享的数据总是处于有效状态，不管其它线程怎么访问。</li>\n<li>不可变数据(immutable data) – 把共享数据标记为不可变的，这样没有什么可以修改它：线程只允许读取，从根源上把问题解决了。上面说过，只要没有修改，多个线程就能安全的从共享内存读取数据。这也是函数式编程(functional programming) 背后的哲学。</li>\n</ul>\n<p>所有这些迷人的话题，在后续的有关并发的系列文章中都会提到。请继续关注！</p>\n","categories":[{"name":"翻译","slug":"翻译","permalink":"chunlife.top/categories/翻译/"}],"tags":[{"name":"翻译","slug":"翻译","permalink":"chunlife.top/tags/翻译/"},{"name":"多进程","slug":"多进程","permalink":"chunlife.top/tags/多进程/"}]},{"title":"docker Toolbox修改源","date":"2019-04-23T12:05:42.000Z","path":"2019/04/23/docker-Toolbox修改源/","content":"<p>最近尝试部署一些环境进行测试，使用docker可以很方便的搭建一下环境，而且可以现在都是使用docker进行现代化部署的，按理说，我是不能这么落后，连摸都不摸一下的。</p>\n<a id=\"more\"></a>\n<h2 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h2><p>使用阿里云的地址下载：<a href=\"http://mirrors.aliyun.com/docker-toolbox/windows/\" target=\"_blank\" rel=\"noopener\">阿里</a>。</p>\n<p>win 7、win 8 等需要利用 docker toolbox 来安装；win 10使用<code>docker-for-windows</code>。</p>\n<p>windows下安装是极其方便，基本就是一路next，没有需要配置的地方。</p>\n<p>需要的是安装好后的换源。</p>\n<h2 id=\"换源\"><a href=\"#换源\" class=\"headerlink\" title=\"换源\"></a>换源</h2><p>这里的源使用<a href=\"https://www.daocloud.io/mirror\" target=\"_blank\" rel=\"noopener\">daocloud</a>家的，点击链接，在网页底部可以找到。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> docker-machine ssh default</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> sudo vi /var/lib/boot2docker/profile</span><br><span class=\"line\"></span><br><span class=\"line\">然后在--label provider=virtualbox的下一行添加--registry-mirror=加速地址</span><br><span class=\"line\">// 保存并退出</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> docker-machine restart default </span><br><span class=\"line\"></span><br><span class=\"line\">// 使用docker info 即可查看设置的源</span><br></pre></td></tr></table></figure>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p><a href=\"https://blog.csdn.net/Sicily_winner/article/details/86704459\" target=\"_blank\" rel=\"noopener\">Docker虚拟机入门（二）–2.2 创建MySQL集群</a></p>\n<h2 id=\"使用到的命令\"><a href=\"#使用到的命令\" class=\"headerlink\" title=\"使用到的命令\"></a>使用到的命令</h2><blockquote>\n<p>OneNote 视图很方便即可从图片copy文字。</p>\n</blockquote>\n<p><img src=\"../Go打印结构体的field/1556022754446.png\" alt=\"test\"></p>\n","categories":[{"name":"docker","slug":"docker","permalink":"chunlife.top/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"chunlife.top/tags/docker/"}]},{"title":"golang面试题","date":"2019-04-16T07:52:06.000Z","path":"2019/04/16/golang面试题/","content":"<p>暂时废弃，未补充。</p>\n<p>收集碰到的一些题目：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> People <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tShow()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(stu *Student)</span> <span class=\"title\">Show</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">live</span><span class=\"params\">()</span> <span class=\"title\">People</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> stu *Student</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> stu == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"123\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> stu</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> live() == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"AAAAAAA\"</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"BBBBBBB\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// output :</span></span><br><span class=\"line\"><span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"comment\">// BBBBBBB</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ti := GetValue()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> i.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"keyword\">int</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">println</span>(<span class=\"string\">\"int\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"keyword\">string</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">println</span>(<span class=\"string\">\"string\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"keyword\">interface</span>&#123;&#125;:</span><br><span class=\"line\">\t\t<span class=\"built_in\">println</span>(<span class=\"string\">\"interface\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">println</span>(<span class=\"string\">\"unknown\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetValue</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 会报错 cannot type switch on non-interface value i (type int)</span></span><br><span class=\"line\"><span class=\"comment\">// func GetValue() int 更换成 func GetValue() interface&#123;&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"是否可以编译通过？如果通过，输出什么？\"><a href=\"#是否可以编译通过？如果通过，输出什么？\" class=\"headerlink\" title=\"是否可以编译通过？如果通过，输出什么？\"></a>是否可以编译通过？如果通过，输出什么？</h2><p><code>list</code>类型是<code>*[]int</code>，append要求的第一个参数是<code>slice []Type</code>。</p>\n<p>编译会失败 59.175.182.99</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlist := <span class=\"built_in\">new</span>([]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tlist = <span class=\"built_in\">append</span>(list, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tfmt.Println(list)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>可以编译通过，打印<code>0 1 zz zz 4</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tx = <span class=\"literal\">iota</span></span><br><span class=\"line\">\ty</span><br><span class=\"line\">\tz = <span class=\"string\">\"zz\"</span></span><br><span class=\"line\">\tk</span><br><span class=\"line\">\tp = <span class=\"literal\">iota</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Println(x,y,z,k,p)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"Go","slug":"Go","permalink":"chunlife.top/categories/Go/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"面试","slug":"面试","permalink":"chunlife.top/tags/面试/"}]},{"title":"分布式定时任务控制","date":"2019-04-10T11:27:18.000Z","path":"2019/04/10/分布式定时任务控制/","content":"<p><a href=\"https://github.com/younglifestyle/goexamples/tree/master/cronPro\" target=\"_blank\" rel=\"noopener\">cronPro</a>，实现分布式定时任务，配合etcd进行应用分布式程序设计。</p>\n<ul>\n<li>分布式部署；</li>\n<li>etcd配置中心设置；</li>\n<li>worker超时设置。</li>\n</ul>\n<a id=\"more\"></a>\n","categories":[{"name":"项目","slug":"项目","permalink":"chunlife.top/categories/项目/"}],"tags":[{"name":"go","slug":"go","permalink":"chunlife.top/tags/go/"}]},{"title":"golang iota枚举的例子","date":"2019-04-10T07:52:16.000Z","path":"2019/04/10/golang iota枚举的例子/","content":"<p>Go语言中没有枚举这个关键字，这会让人很不解，突然想用到的时候，会觉得很不适应。我不用不代表不要有，这可能是Go语言开发的取舍问题，追求精简，去掉不值得的地方。</p>\n<a id=\"more\"></a>\n<h2 id=\"缘起\"><a href=\"#缘起\" class=\"headerlink\" title=\"缘起\"></a>缘起</h2><p>在开源项目<code>BaiduPCS-Go</code>中，有这样的一个操作。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\t<span class=\"comment\">// B byte</span></span><br><span class=\"line\">\tB = (<span class=\"keyword\">int64</span>)(<span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">10</span> * <span class=\"literal\">iota</span>))</span><br><span class=\"line\">\t<span class=\"comment\">// KB kilobyte</span></span><br><span class=\"line\">\tKB</span><br><span class=\"line\">\t<span class=\"comment\">// MB megabyte</span></span><br><span class=\"line\">\tMB</span><br><span class=\"line\">\t<span class=\"comment\">// GB gigabyte</span></span><br><span class=\"line\">\tGB</span><br><span class=\"line\">\t<span class=\"comment\">// TB terabyte</span></span><br><span class=\"line\">\tTB</span><br><span class=\"line\">\t<span class=\"comment\">// PB petabyte</span></span><br><span class=\"line\">\tPB</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>从代码里头都可以猜到，<code>iota</code>这肯定是递增的，看定义，其初始值为<code>0</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"literal\">iota</span> <span class=\"keyword\">int</span> = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>具体对于<code>iota</code>的理解，可以参考：<a href=\"https://yourbasic.org/golang/iota/#complete-enum-type-with-strings-best-practice\" target=\"_blank\" rel=\"noopener\">4 iota enum examples</a>。</p>\n<h2 id=\"Iota基本的例子\"><a href=\"#Iota基本的例子\" class=\"headerlink\" title=\"Iota基本的例子\"></a>Iota基本的例子</h2><ul>\n<li><code>iota</code>关键字代表连续整数的常数0，1，2，…</li>\n<li>只要<code>const</code>出现在源代码中，它就会重置为0 ，</li>\n<li>并在每个<code>const</code>之后递增。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    C0 = <span class=\"literal\">iota</span></span><br><span class=\"line\">    C1 = <span class=\"literal\">iota</span></span><br><span class=\"line\">    C2 = <span class=\"literal\">iota</span></span><br><span class=\"line\">)</span><br><span class=\"line\">fmt.Println(C0, C1, C2) <span class=\"comment\">// \"0 1 2\"</span></span><br></pre></td></tr></table></figure>\n<p>这可以简化为</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tC0 = <span class=\"literal\">iota</span></span><br><span class=\"line\">\tC1</span><br><span class=\"line\">\tC2</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>在这里，我们依赖于在带括号的<code>const</code>声明中隐式重复表达式的事实——表示前面的表达式及其类型的重复。</p>\n<h2 id=\"从一开始\"><a href=\"#从一开始\" class=\"headerlink\" title=\"从一开始\"></a>从一开始</h2><p>要以1而不是0开始常量列表，可以<code>iota</code>在算术表达式中使用。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    C1 = <span class=\"literal\">iota</span> + <span class=\"number\">1</span></span><br><span class=\"line\">    C2</span><br><span class=\"line\">    C3</span><br><span class=\"line\">)</span><br><span class=\"line\">fmt.Println(C1, C2, C3) <span class=\"comment\">// \"1 2 3\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"跳过定义\"><a href=\"#跳过定义\" class=\"headerlink\" title=\"跳过定义\"></a>跳过定义</h2><p>您可以使用空白标识符跳过常量列表中的值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    C1 = <span class=\"literal\">iota</span> + <span class=\"number\">1</span></span><br><span class=\"line\">    _</span><br><span class=\"line\">    C3</span><br><span class=\"line\">    C4</span><br><span class=\"line\">)</span><br><span class=\"line\">fmt.Println(C1, C3, C4) <span class=\"comment\">// \"1 3 4\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"带字符串的完整枚举类型-最佳实践\"><a href=\"#带字符串的完整枚举类型-最佳实践\" class=\"headerlink\" title=\"带字符串的完整枚举类型[最佳实践]\"></a>带字符串的完整枚举类型[最佳实践]</h2><p>这是实现枚举类型的惯用方法：</p>\n<ul>\n<li>创建一个新的整数类型，</li>\n<li>列出其值，使用<code>iota</code>，</li>\n<li>给类型一个<code>String</code>函数。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Direction <span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    North Direction = <span class=\"literal\">iota</span></span><br><span class=\"line\">    East</span><br><span class=\"line\">    South</span><br><span class=\"line\">    West</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d Direction)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [...]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"North\"</span>, <span class=\"string\">\"East\"</span>, <span class=\"string\">\"South\"</span>, <span class=\"string\">\"West\"</span>&#125;[d]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Ex….</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> d Direction = North</span><br><span class=\"line\">fmt.Print(d)</span><br><span class=\"line\"><span class=\"keyword\">switch</span> d &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> North:</span><br><span class=\"line\">    \tfmt.Println(<span class=\"string\">\" goes up.\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> South:</span><br><span class=\"line\">    \tfmt.Println(<span class=\"string\">\" goes down.\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">    \tfmt.Println(<span class=\"string\">\" stays put.\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Output: North goes up.</span></span><br></pre></td></tr></table></figure>\n","categories":[{"name":"golang基础知识","slug":"golang基础知识","permalink":"chunlife.top/categories/golang基础知识/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"enum","slug":"enum","permalink":"chunlife.top/tags/enum/"}]},{"title":"服务器上传下载问题之分块上传（断点续传）","date":"2019-04-09T08:06:42.000Z","path":"2019/04/09/服务器上传下载问题之分块上传（断点续传）/","content":"<p>在之前的博客中，对服务器的上传下载就写过一些备忘，当时项目是对文件进行操作，涉及到一些网络文件的基础操作，由于没得网络存储，也就是依靠云的磁盘来存储数据文件。</p>\n<p>这里记录一下分块上传，也就是断点续传的实现。</p>\n<a id=\"more\"></a>\n<p>大概可以分为三个步骤：</p>\n<ol>\n<li>尝试秒传接口；</li>\n<li>初始化分块上传信息；</li>\n<li>客户端开始进行分块上传；</li>\n<li>客户端通知服务器完成分块，服务器进行分块合并操作。</li>\n</ol>\n<h1 id=\"分块上传\"><a href=\"#分块上传\" class=\"headerlink\" title=\"分块上传\"></a>分块上传</h1><h2 id=\"1、尝试秒传\"><a href=\"#1、尝试秒传\" class=\"headerlink\" title=\"1、尝试秒传\"></a>1、尝试秒传</h2><p>秒传是利用文件的哈希值，来对文件进行唯一值匹配，若能够匹配成功，则说明文件已被上传，只需要插入下mysql里面的数据即可，这也就是秒传的意思。</p>\n<p>这里在实现秒传时，在开源项目<code>BaiduPCS-Go</code>中，是需要：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"path\"</span>:           targetPath,                    <span class=\"comment\">// 上传文件的全路径名</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"content-length\"</span>: strconv.FormatInt(length, <span class=\"number\">10</span>), <span class=\"comment\">// 待秒传的文件长度</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"content-md5\"</span>:    contentMD5,                    <span class=\"comment\">// 待秒传的文件的MD5</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"slice-md5\"</span>:      sliceMD5,                      <span class=\"comment\">// 待秒传的文件前256kb的MD5</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"content-crc32\"</span>:  crc32,                         <span class=\"comment\">// 待秒传文件CRC32</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"ondup\"</span>:          <span class=\"string\">\"overwrite\"</span>,                   <span class=\"comment\">// overwrite: 表示覆盖同名文件; newcopy: 表示生成文件副本并进行重命名，命名规则为“文件名_日期.后缀”</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不过在<code>github.com/iikira/BaiduPCS-Go/blob/master/pcsutil/checksum/checksum.go</code>文件中：</p>\n<p>作者表示，这个<code>前256kb的MD5</code>和<code>CRC32</code>不是必须。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 314行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 文件大于256kb, 应该要检测秒传, 反之则不应检测秒传</span></span><br><span class=\"line\"><span class=\"comment\">// 经测试, 秒传文件并非一定要大于256KB</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> task.uploadInfo.Length &gt;= requiredSliceSize &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// do nothing</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 经过测试, 秒传文件并非需要前256kb切片的md5值, 只需格式符合即可</span></span><br><span class=\"line\">task.uploadInfo.SliceMD5Sum()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 经测试, 文件的 crc32 值并非秒传文件所必需</span></span><br><span class=\"line\"><span class=\"comment\">// task.uploadInfo.Crc32Sum()</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2、初始化分块上传信息\"><a href=\"#2、初始化分块上传信息\" class=\"headerlink\" title=\"2、初始化分块上传信息\"></a>2、初始化分块上传信息</h2><p>当客户端需要上传文件时，首先会向服务端一个接口传递文件信息，这里我们可以获取：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* @apiParam filehash  string\t文件计算的哈希计算值</span><br><span class=\"line\">* @apiParam filesize  int\t    文件大小</span><br></pre></td></tr></table></figure>\n<p>在这步操作中，我们需要填充这个结构体。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MultipleUploadInfo <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tFileHash   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tFileSize   <span class=\"keyword\">int</span></span><br><span class=\"line\">\tUploadID   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tChunkSize  <span class=\"keyword\">int</span></span><br><span class=\"line\">\tChunkCount <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upInfo := &amp;MultipartUploadInfo&#123;</span><br><span class=\"line\">    FileHash:   filehash,</span><br><span class=\"line\">    FileSize:   filesize,</span><br><span class=\"line\">    <span class=\"comment\">// UploadID，我在代码里面是使用的函数NewObjectId()，也就是MongoDB的ID生成方式，这个我在之前的博客中也做了备忘。</span></span><br><span class=\"line\">    UploadID:   username + fmt.Sprintf(<span class=\"string\">\"%x\"</span>, time.Now().UnixNano()),</span><br><span class=\"line\">    ChunkSize:  <span class=\"number\">5</span> &lt;&lt; <span class=\"number\">10</span> &lt;&lt; <span class=\"number\">10</span>, <span class=\"comment\">// 5MB</span></span><br><span class=\"line\">    <span class=\"comment\">// 5MB 为一个分块，可以根据服务器性能适当调整</span></span><br><span class=\"line\">    ChunkCount: <span class=\"keyword\">int</span>(math.Ceil(<span class=\"keyword\">float64</span>(filesize) / (<span class=\"number\">5</span> &lt;&lt; <span class=\"number\">10</span> &lt;&lt; <span class=\"number\">10</span>))),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后需要将这个数据保存下来，因为在后面的使用中需要使用到。</p>\n<p>可以存储在内存中，使用<code>map</code>进行管理（我之前是使用这种方式，所以<code>UploadID</code>我得保持唯一），同样的也可以使用<code>Redis</code>、<code>Memcached</code>，我这里使用到了<code>Map</code>，项目里头有变化。</p>\n<p>此结构体需要返回给客户端。</p>\n<h2 id=\"3、分块上传\"><a href=\"#3、分块上传\" class=\"headerlink\" title=\"3、分块上传\"></a>3、分块上传</h2><p>客户端按照分块上传信息，分块读取文件流上传给服务端，按照<code>ChunkSize</code>进行读取。</p>\n<p>上传时，附带上此次上传的<code>Chunk</code>次数。</p>\n<p>服务器将这些数据保存在一个临时目录下，按先后<code>Chunk</code>顺序进行命名，方便合并时使用。</p>\n<p>服务器同时也需要记录该<code>UploadID</code>上传的<code>Chunk</code>次数</p>\n<h2 id=\"4、合并\"><a href=\"#4、合并\" class=\"headerlink\" title=\"4、合并\"></a>4、合并</h2><p>客户端上传完成后，请求该接口（当然，也可以服务器每次接受分块都去检查分块是否已经上传完了，或者是客户端在最后一次上传时，告知服务器这是最后一次上传，这里为了拆开逻辑，故分开接口）。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1、验证ChunkCount是否匹配；</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2、验证分块文件是否对的上ChunkCount；</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3、新建一个文件，将各个分块文件，以追加的方式写入文件，不需要一次性读取到内存，使用io.copy()；</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4、上传都完成后，将文件信息保存到MySQL中。</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"断点续传-断点下载\"><a href=\"#断点续传-断点下载\" class=\"headerlink\" title=\"断点续传/断点下载\"></a>断点续传/断点下载</h1><p>这两者可以说都是上面那个过程，操作都是类似的，没有什么不一样，同样是控制分块信息，控制分块上传与下载，即使中间终端，也可以重新确认信息后接上上一次中断的过程继续开始操作。</p>\n<p>这里我偷懒没有将代码拿出来进行展示，这里仅展示逻辑了。</p>\n<h1 id=\"记录代码\"><a href=\"#记录代码\" class=\"headerlink\" title=\"记录代码\"></a>记录代码</h1><p><code>github.com/iikira/BaiduPCS-Go/blob/master/pcsutil/checksum/checksum.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Package checksum 校验本地文件包</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> checksum</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"crypto/md5\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/iikira/BaiduPCS-Go/pcsutil/converter\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"hash\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"hash/crc32\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"io\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tdefaultBufSize = <span class=\"number\">256</span> * converter.KB</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> (</span><br><span class=\"line\">\t<span class=\"comment\">// LocalFileMeta 本地文件元信息</span></span><br><span class=\"line\">\tLocalFileMeta <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tPath     <span class=\"keyword\">string</span> <span class=\"string\">`json:\"path\"`</span>     <span class=\"comment\">// 本地路径</span></span><br><span class=\"line\">\t\tLength   <span class=\"keyword\">int64</span>  <span class=\"string\">`json:\"length\"`</span>   <span class=\"comment\">// 文件大小</span></span><br><span class=\"line\">\t\tSliceMD5 []<span class=\"keyword\">byte</span> <span class=\"string\">`json:\"slicemd5\"`</span> <span class=\"comment\">// 文件前 requiredSliceLen (256KB) 切片的 md5 值</span></span><br><span class=\"line\">\t\tMD5      []<span class=\"keyword\">byte</span> <span class=\"string\">`json:\"md5\"`</span>      <span class=\"comment\">// 文件的 md5</span></span><br><span class=\"line\">\t\tCRC32    <span class=\"keyword\">uint32</span> <span class=\"string\">`json:\"crc32\"`</span>    <span class=\"comment\">// 文件的 crc32</span></span><br><span class=\"line\">\t\tModTime  <span class=\"keyword\">int64</span>  <span class=\"string\">`json:\"modtime\"`</span>  <span class=\"comment\">// 修改日期</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// LocalFileInfo LocalFile</span></span><br><span class=\"line\">\tLocalFile <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tLocalFileMeta</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbufSize <span class=\"keyword\">int</span></span><br><span class=\"line\">\t\tbuf     []<span class=\"keyword\">byte</span></span><br><span class=\"line\">\t\tFile    *os.File <span class=\"comment\">// 文件</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// SumConfig 计算文件摘要值配置</span></span><br><span class=\"line\">\tSumConfig <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tIsMD5Sum      <span class=\"keyword\">bool</span></span><br><span class=\"line\">\t\tIsSliceMD5Sum <span class=\"keyword\">bool</span></span><br><span class=\"line\">\t\tIsCRC32Sum    <span class=\"keyword\">bool</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewLocalFileInfo</span><span class=\"params\">(localPath <span class=\"keyword\">string</span>, bufSize <span class=\"keyword\">int</span>)</span> *<span class=\"title\">LocalFile</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;LocalFile&#123;</span><br><span class=\"line\">\t\tLocalFileMeta: LocalFileMeta&#123;</span><br><span class=\"line\">\t\t\tPath: localPath,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tbufSize: bufSize,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// OpenPath 检查文件状态并获取文件的大小 (Length)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lf *LocalFile)</span> <span class=\"title\">OpenPath</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> lf.File != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlf.File.Close()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> err error</span><br><span class=\"line\">\tlf.File, err = os.Open(lf.Path)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tinfo, err := lf.File.Stat()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlf.Length = info.Size()</span><br><span class=\"line\">\tlf.ModTime = info.ModTime().Unix()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Close 关闭文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lf *LocalFile)</span> <span class=\"title\">Close</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> lf.File == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> fmt.Errorf(<span class=\"string\">\"file is nil\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> lf.File.Close()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lf *LocalFile)</span> <span class=\"title\">initBuf</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> lf.buf == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> lf.bufSize != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tlf.buf = <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, lf.bufSize)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tlf.buf = <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, defaultBufSize)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lf *LocalFile)</span> <span class=\"title\">repeatRead</span><span class=\"params\">(ws ...io.Writer)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> lf.File == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlf.initBuf()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\tbegin <span class=\"keyword\">int64</span></span><br><span class=\"line\">\t\tn     <span class=\"keyword\">int</span></span><br><span class=\"line\">\t\terr   error</span><br><span class=\"line\">\t)</span><br><span class=\"line\"></span><br><span class=\"line\">\thandle := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tbegin += <span class=\"keyword\">int64</span>(n)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> k := <span class=\"keyword\">range</span> ws &#123;</span><br><span class=\"line\">\t\t\tws[k].Write(lf.buf[:n])</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 读文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tn, err = lf.File.ReadAt(lf.buf, begin)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err == io.EOF &#123;</span><br><span class=\"line\">\t\t\t\thandle()</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Printf(<span class=\"string\">\"%s\\n\"</span>, err)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\thandle()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Sum 计算文件摘要值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lf *LocalFile)</span> <span class=\"title\">Sum</span><span class=\"params\">(cfg SumConfig)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\tmd5w   hash.Hash</span><br><span class=\"line\">\t\tcrc32w hash.Hash32</span><br><span class=\"line\">\t)</span><br><span class=\"line\"></span><br><span class=\"line\">\tws := <span class=\"built_in\">make</span>([]io.Writer, <span class=\"number\">0</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cfg.IsMD5Sum &#123;</span><br><span class=\"line\">\t\tmd5w = md5.New()</span><br><span class=\"line\">\t\tws = <span class=\"built_in\">append</span>(ws, md5w)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cfg.IsCRC32Sum &#123;</span><br><span class=\"line\">\t\tcrc32w = crc32.NewIEEE()</span><br><span class=\"line\">\t\tws = <span class=\"built_in\">append</span>(ws, crc32w)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cfg.IsSliceMD5Sum &#123;</span><br><span class=\"line\">\t\tlf.SliceMD5Sum()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlf.repeatRead(ws...)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cfg.IsMD5Sum &#123;</span><br><span class=\"line\">\t\tlf.MD5 = md5w.Sum(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cfg.IsCRC32Sum &#123;</span><br><span class=\"line\">\t\tlf.CRC32 = crc32w.Sum32()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Md5Sum 获取文件的 md5 值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lf *LocalFile)</span> <span class=\"title\">Md5Sum</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlf.Sum(SumConfig&#123;</span><br><span class=\"line\">\t\tIsMD5Sum: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// SliceMD5Sum 获取文件前 requiredSliceLen (256KB) 切片的 md5 值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lf *LocalFile)</span> <span class=\"title\">SliceMD5Sum</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> lf.File == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取前 256KB 文件切片的 md5</span></span><br><span class=\"line\">\tlf.initBuf()</span><br><span class=\"line\"></span><br><span class=\"line\">\tm := md5.New()</span><br><span class=\"line\">\tn, err := lf.File.ReadAt(lf.buf, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err == io.EOF &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> md5sum</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Printf(<span class=\"string\">\"SliceMD5Sum: %s\\n\"</span>, err)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">md5sum:</span><br><span class=\"line\">\tm.Write(lf.buf[:n])</span><br><span class=\"line\">\tlf.SliceMD5 = m.Sum(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Crc32Sum 获取文件的 crc32 值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lf *LocalFile)</span> <span class=\"title\">Crc32Sum</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlf.Sum(SumConfig&#123;</span><br><span class=\"line\">\t\tIsCRC32Sum: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>github.com/iikira/BaiduPCS-Go/blob/master/pcsutil/checksum/file.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> checksum</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"bytes\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// EqualLengthMD5 检测md5和大小是否相同</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lfm *LocalFileMeta)</span> <span class=\"title\">EqualLengthMD5</span><span class=\"params\">(m *LocalFileMeta)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> lfm.Length != m.Length &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> bytes.Compare(lfm.MD5, m.MD5) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CompleteAbsPath 补齐绝对路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lfm *LocalFileMeta)</span> <span class=\"title\">CompleteAbsPath</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> filepath.IsAbs(lfm.Path) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tabsPath, err := filepath.Abs(lfm.Path)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlfm.Path = absPath</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GetFileSum 获取文件的大小, md5, 前256KB切片的 md5, crc32</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetFileSum</span><span class=\"params\">(localPath <span class=\"keyword\">string</span>, cfg *SumConfig)</span> <span class=\"params\">(lf *LocalFile, err error)</span></span> &#123;</span><br><span class=\"line\">\tfile, err := os.Open(localPath)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> file.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tfileStat, err := file.Stat()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> fileStat.IsDir() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">\"sum %s: is a directory\"</span>, localPath)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlf = &amp;LocalFile&#123;</span><br><span class=\"line\">\t\tFile: file,</span><br><span class=\"line\">\t\tLocalFileMeta: LocalFileMeta&#123;</span><br><span class=\"line\">\t\t\tPath:   localPath,</span><br><span class=\"line\">\t\t\tLength: fileStat.Size(),</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlf.Sum(*cfg)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> lf, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"Go","slug":"Go","permalink":"chunlife.top/categories/Go/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"服务器","slug":"服务器","permalink":"chunlife.top/tags/服务器/"},{"name":"上传下载","slug":"上传下载","permalink":"chunlife.top/tags/上传下载/"}]},{"title":"etcd备份导出数据","date":"2019-04-08T09:20:40.000Z","path":"2019/04/08/etcd备份导出数据/","content":"<p>一般etcd是不需要手动导出数据的，毕竟使用etcd都是使用多节点，也就是说并不需要将数据导入其他节点，当然如果你需要将本机的etcd导入到其他etcd服务器上，使用<code>etcdctl</code>可进行备份和恢复。</p>\n<p>不过这里我们有个需求，在代码里头做一个备份的接口，比较的简单的，这里直接记录一下。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> EtcdStore <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tsync.RWMutex</span><br><span class=\"line\">\tprefix    <span class=\"keyword\">string</span></span><br><span class=\"line\">\trawClient *clientv3.Client</span><br><span class=\"line\">\tkv        clientv3.KV</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *EtcdStore)</span> <span class=\"title\">ConnectEtcd</span><span class=\"params\">(addr <span class=\"keyword\">string</span>)</span> <span class=\"params\">(err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化配置</span></span><br><span class=\"line\">\tconfig := clientv3.Config&#123;</span><br><span class=\"line\">\t\tEndpoints:   []<span class=\"keyword\">string</span>&#123;addr&#125;,  <span class=\"comment\">// 集群地址</span></span><br><span class=\"line\">\t\tDialTimeout: time.Second * <span class=\"number\">2</span>, <span class=\"comment\">// 连接超时</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 建立连接</span></span><br><span class=\"line\">\te.rawClient, err = clientv3.New(config)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\te.kv = clientv3.NewKV(e.rawClient)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *EtcdStore)</span> <span class=\"title\">SetPrefixPath</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\te.prefix = path</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *EtcdStore)</span> <span class=\"title\">BackupTo</span><span class=\"params\">(to <span class=\"keyword\">string</span>)</span> <span class=\"params\">(err error)</span></span> &#123;</span><br><span class=\"line\">\te.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> e.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 建立连接</span></span><br><span class=\"line\">\ttargetEtcdClient, err := clientv3.New(clientv3.Config&#123;</span><br><span class=\"line\">\t\tEndpoints:   []<span class=\"keyword\">string</span>&#123;to&#125;,    <span class=\"comment\">// 集群地址</span></span><br><span class=\"line\">\t\tDialTimeout: time.Second * <span class=\"number\">2</span>, <span class=\"comment\">// 连接超时</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> targetEtcdClient.Close()</span><br><span class=\"line\">\tkv := clientv3.NewKV(targetEtcdClient)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// get一下`prefix`目录下的所有信息</span></span><br><span class=\"line\">\tgetResp, err := e.kv.Get(context.TODO(),</span><br><span class=\"line\">\t\te.prefix, clientv3.WithPrefix())</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, kvpair := <span class=\"keyword\">range</span> getResp.Kvs &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"keyword\">string</span>(kvpair.Key), <span class=\"keyword\">string</span>(kvpair.Value))</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建Op: operation  对操作的抽象</span></span><br><span class=\"line\">\t\tputOp := clientv3.OpPut(<span class=\"keyword\">string</span>(kvpair.Key), <span class=\"keyword\">string</span>(kvpair.Value))</span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行OP</span></span><br><span class=\"line\">\t\topResp, err := kv.Do(context.TODO(), putOp)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(err, opResp.Put().Header.Revision)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提取路径， /backup/test/1  取出`1`</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ExtractPrefix</span><span class=\"params\">(regKey, prefix <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> strings.TrimPrefix(regKey, prefix)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *EtcdStore)</span> <span class=\"title\">BackupToSpecifyDir</span><span class=\"params\">(toAddr, newPrefix <span class=\"keyword\">string</span>)</span> <span class=\"params\">(err error)</span></span> &#123;</span><br><span class=\"line\">\te.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> e.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 建立连接</span></span><br><span class=\"line\">\ttargetEtcdClient, err := clientv3.New(clientv3.Config&#123;</span><br><span class=\"line\">\t\tEndpoints:   []<span class=\"keyword\">string</span>&#123;toAddr&#125;, <span class=\"comment\">// 集群地址</span></span><br><span class=\"line\">\t\tDialTimeout: time.Second * <span class=\"number\">2</span>,  <span class=\"comment\">// 连接超时</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> targetEtcdClient.Close()</span><br><span class=\"line\">\tkv := clientv3.NewKV(targetEtcdClient)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// get一下`prefix`目录下的所有信息</span></span><br><span class=\"line\">\tgetResp, err := e.kv.Get(context.TODO(),</span><br><span class=\"line\">\t\te.prefix, clientv3.WithPrefix())</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, kvpair := <span class=\"keyword\">range</span> getResp.Kvs &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"keyword\">string</span>(kvpair.Key), <span class=\"keyword\">string</span>(kvpair.Value))</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 重组路径</span></span><br><span class=\"line\">\t\tnewEtcdPath := path.Join(newPrefix, ExtractPrefix(<span class=\"keyword\">string</span>(kvpair.Key), e.prefix))</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建Op: operation  对操作的抽象</span></span><br><span class=\"line\">\t\tputOp := clientv3.OpPut(newEtcdPath, <span class=\"keyword\">string</span>(kvpair.Value))</span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行OP</span></span><br><span class=\"line\">\t\topResp, err := kv.Do(context.TODO(), putOp)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(err, opResp.Put().Header.Revision)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"etcd","slug":"etcd","permalink":"chunlife.top/categories/etcd/"}],"tags":[{"name":"go","slug":"go","permalink":"chunlife.top/tags/go/"},{"name":"etcd备份","slug":"etcd备份","permalink":"chunlife.top/tags/etcd备份/"}]},{"title":"golang获取目录下的文件","date":"2019-04-08T08:52:20.000Z","path":"2019/04/08/golang获取目录下的文件/","content":"<p>获取目录下的文件或子目录下的文件。</p>\n<a id=\"more\"></a>\n<h5 id=\"一、遍历目录，以及子目录。\"><a href=\"#一、遍历目录，以及子目录。\" class=\"headerlink\" title=\"一、遍历目录，以及子目录。\"></a>一、遍历目录，以及子目录。</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// WalkDir 获取指定目录及所有子目录下的所有文件，可以匹配后缀过滤。 找到第一个.exe文件就返回即可</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WalkDir</span><span class=\"params\">(dirPth, suffix <span class=\"keyword\">string</span>)</span> <span class=\"params\">(files <span class=\"keyword\">string</span>, err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//files = make([]string, 0, 30)</span></span><br><span class=\"line\">\tsuffix = strings.ToLower(suffix) <span class=\"comment\">//忽略后缀匹配的大小写</span></span><br><span class=\"line\"></span><br><span class=\"line\">\terr = filepath.Walk(dirPth, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(filename <span class=\"keyword\">string</span>, fi os.FileInfo, err error)</span> <span class=\"title\">error</span></span> &#123; <span class=\"comment\">//遍历目录</span></span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"file name :\"</span>, fi.Name())</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> files != <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> fi.IsDir() &#123; <span class=\"comment\">// 忽略目录</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> strings.HasSuffix(strings.ToLower(fi.Name()), suffix) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//files = append(files, filename)</span></span><br><span class=\"line\">\t\t\tfiles = filename</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> files, err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"二、遍历目录下的文件\"><a href=\"#二、遍历目录下的文件\" class=\"headerlink\" title=\"二、遍历目录下的文件\"></a>二、遍历目录下的文件</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">listAll</span><span class=\"params\">(path <span class=\"keyword\">string</span>, suffix <span class=\"keyword\">string</span>)</span> <span class=\"params\">(fileTarget <span class=\"keyword\">string</span>, err error)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   files, err := ioutil.ReadDir(path)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span> _, fi := <span class=\"keyword\">range</span> files &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> fi.IsDir() &#123;</span><br><span class=\"line\">         <span class=\"comment\">// 目录则直接跳过</span></span><br><span class=\"line\">         <span class=\"keyword\">continue</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> strings.HasSuffix(strings.ToLower(fi.Name()), suffix) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//files = append(files, filename)</span></span><br><span class=\"line\">            fileTarget = filepath.Join(path, fi.Name())</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> fileTarget, err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":[{"name":"Go基础操作","slug":"Go基础操作","permalink":"chunlife.top/categories/Go基础操作/"}],"tags":[{"name":"go","slug":"go","permalink":"chunlife.top/tags/go/"},{"name":"file","slug":"file","permalink":"chunlife.top/tags/file/"}]},{"title":"Go按行读写文件","date":"2019-04-02T06:34:22.000Z","path":"2019/04/02/Go按行读写文件/","content":"<p>代码：</p>\n<a id=\"more\"></a>\n<p>按行写文件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f, err := os.OpenFile(fileName,</span><br><span class=\"line\">os.O_WRONLY|os.O_CREATE|os.O_TRUNC, os.ModePerm)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">w := bufio.NewWriter(f)</span><br><span class=\"line\">fmt.Fprintln(w, fmt.Sprintf(<span class=\"string\">\"start analysis log at the %s \\r\\n\"</span>, <span class=\"string\">`\"`</span>+logFileDir+<span class=\"string\">`\"`</span>))</span><br><span class=\"line\">w.Flush()</span><br></pre></td></tr></table></figure>\n<p>按行读文件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buf := bufio.NewReader(file)</span><br><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\tline, err := buf.ReadString(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">\tline = strings.TrimSpace(line)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err == io.EOF &#123; <span class=\"comment\">//读取结束，会报EOF</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"Go基础操作","slug":"Go基础操作","permalink":"chunlife.top/categories/Go基础操作/"}],"tags":[{"name":"go","slug":"go","permalink":"chunlife.top/tags/go/"},{"name":"基础","slug":"基础","permalink":"chunlife.top/tags/基础/"},{"name":"读写文件","slug":"读写文件","permalink":"chunlife.top/tags/读写文件/"}]},{"title":"etcd分布式乐观锁","date":"2019-04-01T03:15:21.000Z","path":"2019/04/01/etcd分布式乐观锁/","content":"<p>在实际应用中，我们若需要分布式的操作，大多数时候并不需要通过手动实现分布式的协议，而可以借助分布式的应用的来实现分布式应用。</p>\n<a id=\"more\"></a>\n<h2 id=\"etcd原理特性\"><a href=\"#etcd原理特性\" class=\"headerlink\" title=\"etcd原理特性\"></a>etcd原理特性</h2><p>etcd实现分布式一致性性，使用到了Raft协议。</p>\n<blockquote>\n<p><a href=\"https://github.com/aCoder2013/blog/issues/30\" target=\"_blank\" rel=\"noopener\">Etcd Raft使用入门及原理解析</a></p>\n<p><strong>Raft</strong>是一个分布式一致性算法，充分的利用了可复制状态机以及日志。其最核心的设计目标就是易于理解。在性能、错误容错等方面来看有点类似<strong>Paxos</strong>，但不同之处在于，Raft论文较为清晰的描述了其主要流程以及其中一些细节问题，而Paxos我们知道非常难以理解。</p>\n<p>当构建一个分布式系统时，一个非常重要的设计目标就是<strong>fault tolerance</strong>。如果系统基于Raft协议实现，那么当其中一个节点挂掉，或者发生了网络分区等异常情况时，只要大多数节点仍然能够正常通讯，整个集群就能够正常对外提供服务而不会挂掉。</p>\n<p>Etcd raft基本上已经实现了Raft协议的完整特性，包括:</p>\n<ul>\n<li>Leader选举</li>\n<li>日志复制</li>\n<li>日志压缩</li>\n<li>成员变更</li>\n<li>Leader和Follower都支持高效的线性只读查询请求</li>\n<li>通过batch、pipeline等手段优化日志复制、网络IO的延迟</li>\n</ul>\n</blockquote>\n<h3 id=\"etcd的重要特性\"><a href=\"#etcd的重要特性\" class=\"headerlink\" title=\"etcd的重要特性\"></a>etcd的重要特性</h3><ul>\n<li>底层存储是按key有序排列的，可以顺序遍历</li>\n<li>因为key有序，所以etcd天然支持按目录结构高效遍历</li>\n<li>支持复杂事务，提供类似if · · then … else …的事务能力 </li>\n<li>基于租约机制实现key的TTL过期</li>\n</ul>\n<h3 id=\"etcd与Raft的关系\"><a href=\"#etcd与Raft的关系\" class=\"headerlink\" title=\"etcd与Raft的关系\"></a>etcd与Raft的关系</h3><ul>\n<li>Raft是强一致的集群日志同步算法</li>\n<li>etcd是一个分布式KV存储</li>\n<li>etcd利用raft算法在集群中同步key-value</li>\n</ul>\n<p>可以理解为Raft协议对日志进行管理，etcd对K/V进行管理。为什么会这么说呢，这里需要先了解一下大多数理论（<code>quorum</code>）。</p>\n<h2 id=\"quorum模型\"><a href=\"#quorum模型\" class=\"headerlink\" title=\"quorum模型\"></a>quorum模型</h2><p>分布式系统的设计中会涉及到许多的协议、机制用来解决可靠性问题、数据一致性问题等，quorum 机制就是其中的一种。</p>\n<h3 id=\"抽屉理论\"><a href=\"#抽屉理论\" class=\"headerlink\" title=\"抽屉理论\"></a>抽屉理论</h3><ul>\n<li>一个班级60人</li>\n<li>有一个秘密，告知给班里的31个人</li>\n<li>那么随便挑选31个人</li>\n<li>一定有1个人知道秘密</li>\n</ul>\n<p>抽屉理论是对<code>quorum</code>模型的理解，实际上<code>quorum</code>模型解析的就是这样的一个机制。</p>\n<h3 id=\"quorum模型-1\"><a href=\"#quorum模型-1\" class=\"headerlink\" title=\"quorum模型\"></a>quorum模型</h3><p>集群要出现大多数，那么就需要奇数个节点，一下为三个节点的实例。<img src=\"1554101624877.png\" alt=\"日志复制\"></p>\n<ul>\n<li>① 前端像etcd中写入数据，请求传递给leader；</li>\n<li>② leader节点将<code>写日志</code>传递给子节点，当其中一个<code>follower</code>，返回日志复制成功后，则表示已成功复制给大多数（leader也算一个节点）。</li>\n<li>③ leader节点确认大多数复制成功后，本地提交用户修改操作（此时子节点并没有进行提交），并返回前端修改成功。</li>\n</ul>\n<p>leader节点在本地提交，且通知到客户端成功进行操作后，会异步的告知子节点进行提交操作，follower也将完成节点的本地提交操作。只需要保证日志能够复制给大多数即可。</p>\n<p><img src=\"1554102404533.png\" alt=\"1554102404533\"></p>\n<blockquote>\n<p>在一个 Raft 集群中只有 Leader 节点能够处理客户端的请求（如果客户端的请求发到了 Follower，Follower 将会把请求重定向到 Leader），客户端的每一个请求都包含一条被复制状态机执行的指令。</p>\n</blockquote>\n<p>更为详细的日志复制过程可以查看，<a href=\"https://gitbook.cn/books/5bb037728f7d8b7e900ff2d7/index.html\" target=\"_blank\" rel=\"noopener\">分布式锁的最佳实践之：基于 Etcd 的分布式锁</a>，其中的<code>Raft 算法之 Log replication 原理</code>。</p>\n<p><img src=\"1554102849417.png\" alt=\"Raft 算法之 Log replication 原理\"></p>\n<h2 id=\"分布式乐观锁简易测试\"><a href=\"#分布式乐观锁简易测试\" class=\"headerlink\" title=\"分布式乐观锁简易测试\"></a>分布式乐观锁简易测试</h2><p>使用etcd的租约和watch，一个用于自动释放锁，一个用于抢占锁。</p>\n<p>这篇博客有更详细的解释：<a href=\"https://segmentfault.com/a/1190000014297365\" target=\"_blank\" rel=\"noopener\">分布式锁的原理和实现详解</a></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"context\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/coreos/etcd/clientv3\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\tconfig         clientv3.Config</span><br><span class=\"line\">\t\tclient         *clientv3.Client</span><br><span class=\"line\">\t\terr            error</span><br><span class=\"line\">\t\tlease          clientv3.Lease</span><br><span class=\"line\">\t\tleaseGrantResp *clientv3.LeaseGrantResponse</span><br><span class=\"line\">\t\tleaseId        clientv3.LeaseID</span><br><span class=\"line\">\t\tkeepRespChan   &lt;-<span class=\"keyword\">chan</span> *clientv3.LeaseKeepAliveResponse</span><br><span class=\"line\">\t\tkeepResp       *clientv3.LeaseKeepAliveResponse</span><br><span class=\"line\">\t\tctx            context.Context</span><br><span class=\"line\">\t\tcancelFunc     context.CancelFunc</span><br><span class=\"line\">\t\tkv             clientv3.KV</span><br><span class=\"line\">\t\ttxn            clientv3.Txn</span><br><span class=\"line\">\t\ttxnResp        *clientv3.TxnResponse</span><br><span class=\"line\">\t)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 客户端配置</span></span><br><span class=\"line\">\tconfig = clientv3.Config&#123;</span><br><span class=\"line\">\t\tEndpoints:   []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"www.wukoon-app.com:2379\"</span>&#125;,</span><br><span class=\"line\">\t\tDialTimeout: <span class=\"number\">5</span> * time.Second,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 建立连接</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> client, err = clientv3.New(config); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// lease实现锁自动过期:</span></span><br><span class=\"line\">\t<span class=\"comment\">// op操作</span></span><br><span class=\"line\">\t<span class=\"comment\">// txn事务: if else then</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 1, 上锁 (创建租约, 自动续租, 拿着租约去抢占一个key)</span></span><br><span class=\"line\">\tlease = clientv3.NewLease(client)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 申请一个5秒的租约</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> leaseGrantResp, err = lease.Grant(context.TODO(), <span class=\"number\">5</span>); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 拿到租约的ID</span></span><br><span class=\"line\">\tleaseId = leaseGrantResp.ID</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 准备一个用于取消自动续租的context</span></span><br><span class=\"line\">\tctx, cancelFunc = context.WithCancel(context.TODO())</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 确保函数退出后, 自动续租会停止</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> cancelFunc()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> lease.Revoke(context.TODO(), leaseId)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 5秒后会取消自动续租</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> keepRespChan, err = lease.KeepAlive(ctx, leaseId); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 处理续约应答的协程</span></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> keepResp = &lt;-keepRespChan:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> keepRespChan == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tfmt.Println(<span class=\"string\">\"租约已经失效了\"</span>)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">goto</span> END</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 每秒会续租一次, 所以就会受到一次应答</span></span><br><span class=\"line\">\t\t\t\t\tfmt.Println(<span class=\"string\">\"收到自动续租应答:\"</span>, keepResp.ID)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\tEND:</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//  if 不存在key， then 设置它, else 抢锁失败</span></span><br><span class=\"line\">\tkv = clientv3.NewKV(client)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建事务</span></span><br><span class=\"line\">\ttxn = kv.Txn(context.TODO())</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 定义事务</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 如果key不存在</span></span><br><span class=\"line\">\ttxn.If(clientv3.Compare(clientv3.CreateRevision(<span class=\"string\">\"/cron/lock/job9\"</span>), <span class=\"string\">\"=\"</span>, <span class=\"number\">0</span>)).</span><br><span class=\"line\">\t\tThen(clientv3.OpPut(<span class=\"string\">\"/cron/lock/job9\"</span>, <span class=\"string\">\"xxx\"</span>, clientv3.WithLease(leaseId))).</span><br><span class=\"line\">\t\tElse(clientv3.OpGet(<span class=\"string\">\"/cron/lock/job9\"</span>)) <span class=\"comment\">// 否则抢锁失败</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 提交事务</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> txnResp, err = txn.Commit(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"comment\">// 没有问题</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 判断是否抢到了锁</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !txnResp.Succeeded &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"锁被占用:\"</span>, <span class=\"keyword\">string</span>(txnResp.Responses[<span class=\"number\">0</span>].GetResponseRange().Kvs[<span class=\"number\">0</span>].Value))</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 2, 处理业务</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"处理任务\"</span>)</span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 3, 释放锁(取消自动续租, 释放租约)</span></span><br><span class=\"line\">\t<span class=\"comment\">// defer 会把租约释放掉, 关联的KV就被删除了</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"etcd","slug":"etcd","permalink":"chunlife.top/categories/etcd/"}],"tags":[{"name":"etcd","slug":"etcd","permalink":"chunlife.top/tags/etcd/"},{"name":"分布式","slug":"分布式","permalink":"chunlife.top/tags/分布式/"},{"name":"乐观锁","slug":"乐观锁","permalink":"chunlife.top/tags/乐观锁/"}]},{"title":"es告警功能——elastalert","date":"2019-03-27T08:39:28.000Z","path":"2019/03/27/es告警功能——elastalert/","content":"<p>ElasticSearch可以使用X-Pack进行报警功能，由于其是收费使用，而当下也仅是使用告警功能。</p>\n<a id=\"more\"></a> \n<p>所以这里寻求的是开源解决方案，<strong><a href=\"https://github.com/Yelp/elastalert\" target=\"_blank\" rel=\"noopener\">elastalert</a></strong>，在GitHub中star数量5K+，已经算是很受欢迎的项目了，可以配合<code>kibana</code>进行使用，适用于所有版本的Elasticsearch，而且官方使用教程还挺详细，可以参考进行使用。</p>\n<p>使用elastalert需要预先配置rule.yaml，根据软件介绍，选择适合自身规则的软件告警规则，根据告警规则填充详细的文档。</p>\n<p>我们可以定义多个yaml，同时进行多种告警。对于每个rule.yaml，其包含一种告警发生规则，即阈值；包含一些告警方式，即email、jira等。</p>\n<h2 id=\"安装Elastalert\"><a href=\"#安装Elastalert\" class=\"headerlink\" title=\"安装Elastalert\"></a>安装Elastalert</h2><p>安装之前需要准备好Python的环境，这里已经提前安装完成，<code>Python2.7</code>。</p>\n<p>拉取最新的elastalert仓库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> pip install elastalert</span><br><span class=\"line\">或者</span><br><span class=\"line\"><span class=\"meta\">$</span> git clone https://github.com/Yelp/elastalert.git</span><br></pre></td></tr></table></figure>\n<p>安装模块：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> pip install \"setuptools&gt;=11.3\"</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo python setup.py install</span><br></pre></td></tr></table></figure>\n<p>安装成功后：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~$ ls /usr/local/bin/elastalert*</span><br><span class=\"line\">/usr/local/bin/elastalert               /usr/local/bin/elastalert-rule-from-kibana</span><br><span class=\"line\">/usr/local/bin/elastalert-create-index  /usr/local/bin/elastalert-test-rule</span><br></pre></td></tr></table></figure>\n<ul>\n<li>elastalert-create-index  ElastAlert将有关其查询及其警报的信息和元数据保存回Elasticsearch。这对于审计，调试很有用，它允许ElastAlert重新启动并从中断的位置恢复。并不实际影响ElastAlert运行，但强烈推荐这么做。</li>\n<li>elastalert-rule-from-kibana 从 Kibana 已保存的仪表盘中读取 Filtering 设置，帮助生成 <code>config.yaml</code>里的配置。不过注意，它只会读取 filtering，不包括 queries。</li>\n<li>elastalert-test-rule 测试自定义配置中的 rule 设置。</li>\n<li>elastalert运行elastalert。</li>\n</ul>\n<h2 id=\"设置Elasticsearch\"><a href=\"#设置Elasticsearch\" class=\"headerlink\" title=\"设置Elasticsearch\"></a>设置Elasticsearch</h2><blockquote>\n<p>ElastAlert将有关其查询及其警报的信息和元数据保存回Elasticsearch。这对于审计，调试很有用，它允许ElastAlert重新启动并从中断的位置恢复。并不实际影响ElastAlert运行，但强烈推荐这么做。</p>\n</blockquote>\n<p>会需要输入es host port等参数，其他默认即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ elastalert-create-index</span><br><span class=\"line\">New index name (Default elastalert_status)</span><br><span class=\"line\">Name of existing index to copy (Default None)</span><br><span class=\"line\">New index elastalert_status created</span><br><span class=\"line\">Done!</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置配置文件config-yaml和规则Rule\"><a href=\"#设置配置文件config-yaml和规则Rule\" class=\"headerlink\" title=\"设置配置文件config.yaml和规则Rule\"></a>设置配置文件config.yaml和规则Rule</h2><h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`$ cp ~/elastalert/config.yaml.example ~/elastalert/config.yaml$ vi ~/elastalert/config.yaml`</span><br></pre></td></tr></table></figure>\n<p>调试时，我仅配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This is the folder that contains the rule yaml files</span></span><br><span class=\"line\"><span class=\"comment\"># Any .yaml file will be loaded as a rule</span></span><br><span class=\"line\"><span class=\"attr\">rules_folder:</span> <span class=\"string\">example_rules</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># How often ElastAlert will query Elasticsearch</span></span><br><span class=\"line\"><span class=\"comment\"># The unit can be anything from weeks to seconds</span></span><br><span class=\"line\"><span class=\"attr\">run_every:</span></span><br><span class=\"line\"><span class=\"attr\">  minutes:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ElastAlert will buffer results from the most recent</span></span><br><span class=\"line\"><span class=\"comment\"># period of time, in case some log sources are not in real time</span></span><br><span class=\"line\"><span class=\"attr\">buffer_time:</span></span><br><span class=\"line\"><span class=\"attr\">  minutes:</span> <span class=\"number\">15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The Elasticsearch hostname for metadata writeback</span></span><br><span class=\"line\"><span class=\"comment\"># Note that every rule can have its own Elasticsearch host</span></span><br><span class=\"line\"><span class=\"attr\">es_host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The Elasticsearch port</span></span><br><span class=\"line\"><span class=\"attr\">es_port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The index on es_host which is used for metadata storage</span></span><br><span class=\"line\"><span class=\"comment\"># This can be a unmapped index, but it is recommended that you run</span></span><br><span class=\"line\"><span class=\"comment\"># elastalert-create-index to set a mapping</span></span><br><span class=\"line\"><span class=\"attr\">writeback_index:</span> <span class=\"string\">elastalert_status</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If an alert fails for some reason, ElastAlert will retry</span></span><br><span class=\"line\"><span class=\"comment\"># sending the alert until this time period has elapsed</span></span><br><span class=\"line\"><span class=\"attr\">alert_time_limit:</span></span><br><span class=\"line\"><span class=\"attr\">  days:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>配置文件上的参数意义官方都已经注释。</p>\n<p>官方文档中同样也有<a href=\"https://elastalert.readthedocs.io/en/latest/recipes/writing_filters.html#negation-and-or\" target=\"_blank\" rel=\"noopener\">注解</a>。</p>\n<h3 id=\"配置规则\"><a href=\"#配置规则\" class=\"headerlink\" title=\"配置规则\"></a>配置规则</h3><p><strong>特别重要</strong>：监控的index中都必须存在<code>@timestamp</code>字段；go语言中使用time格式进行存储。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;@timestamp&quot; : &#123;</span><br><span class=\"line\">            &quot;type&quot; : &quot;date&quot;,</span><br><span class=\"line\">            &quot;format&quot; : &quot;dateOptionalTime&quot;</span><br><span class=\"line\">          &#125;</span><br></pre></td></tr></table></figure>\n<p>基于<code>example_rules/example_percentage_match.yaml</code>更改。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Example</span> <span class=\"string\">Percentage</span> <span class=\"string\">Match</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">percentage_match</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">es_host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\"><span class=\"attr\">es_port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">index:</span> <span class=\"string\">pro_record</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">\"95% of all http requests should be successful\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">filter:</span></span><br><span class=\"line\"><span class=\"attr\">- term:</span></span><br><span class=\"line\"><span class=\"attr\">   _type:</span> <span class=\"string\">record</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">buffer_time:</span></span><br><span class=\"line\"><span class=\"attr\">  minutes:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#use_terms_query: true</span></span><br><span class=\"line\"><span class=\"attr\">query_key:</span> <span class=\"string\">[\"binx.keyword\"]</span></span><br><span class=\"line\"><span class=\"attr\">doc_type:</span> <span class=\"string\">record</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">match_bucket_filter:</span></span><br><span class=\"line\"><span class=\"attr\">- term:</span></span><br><span class=\"line\">    <span class=\"string\">binx.keyword:</span> <span class=\"string\">\"xxxxx\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#min_percentage: 1</span></span><br><span class=\"line\"><span class=\"attr\">max_percentage:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#bucket_interval:</span></span><br><span class=\"line\"><span class=\"comment\">#  minutes: 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#sync_bucket_interval: true</span></span><br><span class=\"line\"><span class=\"comment\">#allow_buffer_time_overlap: true</span></span><br><span class=\"line\"><span class=\"comment\">#use_run_every_query_size: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required)</span></span><br><span class=\"line\"><span class=\"comment\"># The alert is use when a match is found</span></span><br><span class=\"line\"><span class=\"attr\">alert:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"debug\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>文件作为演示，数据都已被更改</p>\n</blockquote>\n<p>使用<code>elastalert-test-rule</code>对规则进行测试。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`elastalert-test-rule ~/elastalert/example_rules/example_frequency.yaml`</span><br></pre></td></tr></table></figure>\n<p>正常出现<code>Successfully loaded Example Percentage Match</code>，然后实际输出也并没报错，那到这里就规则至少文件是没问题的了。</p>\n<p>参考：<a href=\"https://elastalert.readthedocs.io/en/latest/ruletypes.html#commonconfig\" target=\"_blank\" rel=\"noopener\">Rule Types and Configuration Options</a></p>\n<p>若是想要监控特定订单下的bin错误，那就需要增加查询条件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">match_bucket_filter:</span></span><br><span class=\"line\"><span class=\"attr\">- term:</span></span><br><span class=\"line\">    <span class=\"string\">order.keyword:</span> <span class=\"string\">\"TDRAM19012\"</span></span><br><span class=\"line\"><span class=\"attr\">- term:</span></span><br><span class=\"line\">    <span class=\"string\">bin.keyword:</span> <span class=\"string\">\"2142134038\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用HTTP-POST报警\"><a href=\"#使用HTTP-POST报警\" class=\"headerlink\" title=\"使用HTTP POST报警\"></a>使用HTTP POST报警</h3><p>根据官方<a href=\"https://elastalert.readthedocs.io/en/latest/ruletypes.html#rule-types\" target=\"_blank\" rel=\"noopener\">文档</a>，查看配置参数的含义：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">alert:</span> <span class=\"string\">post</span></span><br><span class=\"line\"><span class=\"attr\">http_post_url:</span> <span class=\"string\">\"http://example.com/api\"</span></span><br><span class=\"line\"><span class=\"attr\">http_post_payload:</span></span><br><span class=\"line\"><span class=\"attr\">  ip:</span> <span class=\"string\">clientip</span></span><br><span class=\"line\"><span class=\"attr\">http_post_static_payload:</span></span><br><span class=\"line\"><span class=\"attr\">  apikey:</span> <span class=\"string\">abc123</span></span><br></pre></td></tr></table></figure>\n<p><code>alert: post</code>：指定警报方式；</p>\n<p><code>http_post_url: &quot;http://example.com/api&quot;</code>：post地址，route方法同样也为<code>post</code>；</p>\n<p><code>http_post_payload</code>：这个参数表示是否需要重定义ElastAlert的键值，例如设置了<code>ip: clientip</code>，那么原来数据中的<code>clientip</code>键，将被替换成<code>ip</code>，也可以填入没有的键值，只不过value是<code>null</code>。<strong>可以不需要此参数，表示直接返回ES的数据</strong>。</p>\n<p><code>http_post_static_payload</code>：这个表示每次警报发送固定的信息，也就是每次警报都会带上<code>apikey: abc123</code>。</p>\n<p>例如在上面基础上去掉了<code>http_post_payload</code>，返回的json数据是：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"num_hits\"</span>: <span class=\"number\">1</span>, <span class=\"attr\">\"@timestamp\"</span>: <span class=\"string\">\"2019-03-28T06:54:51.043483Z\"</span>, <span class=\"attr\">\"denominator\"</span>: <span class=\"number\">1</span>, <span class=\"attr\">\"bin.keyword\"</span>: <span class=\"string\">\"2142134038\"</span>, <span class=\"attr\">\"num_matches\"</span>: <span class=\"number\">1</span>, <span class=\"attr\">\"percentage\"</span>: <span class=\"number\">100.0</span>, <span class=\"attr\">\"order\"</span>: <span class=\"string\">\"TDRAM19012\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>最后，运行命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> python -m elastalert.elastalert --config ./config.yaml</span><br></pre></td></tr></table></figure>\n<p>或者单独执行 <code>rules_folder</code> 里的某个 rule：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> python -m elastalert.elastalert --config ./config.yaml --rule ./examele_rules/example_percentage_match.yaml</span><br></pre></td></tr></table></figure>\n<p>调试时使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> python -m elastalert.elastalert --verbose --rule example_rules/example_percentage_match.yaml --config config.yaml --debug</span><br></pre></td></tr></table></figure>\n<p>启动后无error错误打印，代表程序运行成功。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>向ES index <code>pro_record</code>插入一些数据，因为制定的规则是在一分钟之内，只要有符合匹配规则的数据插入，其百分比超过100%，就将会报错。</p>\n<p>若打印出现类似于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">Percentage violation, value: 100.0 (min: None max : 1) of 1 items</span><br><span class=\"line\"></span><br><span class=\"line\">@timestamp: 2019-03-27T08:04:16.323823Z</span><br><span class=\"line\">bin.keyword: 2142134038</span><br><span class=\"line\">denominator: 1</span><br><span class=\"line\">num_hits: 21</span><br><span class=\"line\">num_matches: 9</span><br><span class=\"line\">percentage: 100.0</span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<p>表示规则已正常运行，且能成功进行匹配。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p>介绍命令 <a href=\"https://www.ctolib.com/docs/sfile/ELKstack-guide-cn/elasticsearch/other/elastalert.html\" target=\"_blank\" rel=\"noopener\">ElastAlert</a></p>\n<p>官方文档 <a href=\"https://elastalert.readthedocs.io/en/latest/recipes/writing_filters.html\" target=\"_blank\" rel=\"noopener\">Writing Filters For Rules</a></p>\n<p>对各项报警进行分析，其是使用post方式告警 <a href=\"https://4hou.win/wordpress/?cat=3634\" target=\"_blank\" rel=\"noopener\">基于Elastalert的安全告警剖析</a></p>\n<p>从安装到使用  <a href=\"https://anjia0532.github.io/2017/02/14/elasticsearch-elastalert/\" target=\"_blank\" rel=\"noopener\">ElastAlert 基于Elasticsearch的监控告警</a></p>\n</blockquote>\n","categories":[{"name":"Elastic Search","slug":"Elastic-Search","permalink":"chunlife.top/categories/Elastic-Search/"}],"tags":[{"name":"elasticsearch","slug":"elasticsearch","permalink":"chunlife.top/tags/elasticsearch/"}]},{"title":"Go执行shell命令之copy命令","date":"2019-03-22T15:22:56.000Z","path":"2019/03/22/Go执行shell命令之copy/","content":"<p>当我以为我不会遇到坑的时候，坑就在那里，不偏不移，刚好让我踩过去。之前写了关于如何调用系统命令的小结，这里果然不负我望，当场让我晓得了，总结不够到位，有瑕疵。</p>\n<a id=\"more\"></a>\n<p>项目有用到<code>cp</code>的操作，大概就是把某目录下的所有文件复制到上级目录中，也就是<code>cp -rf ./test/* ../</code>。</p>\n<p>首先看代码。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cpCmd := exec.Command(<span class=\"string\">\"cp\"</span>, <span class=\"string\">\"-rf\"</span>, <span class=\"string\">\"./test/*\"</span>, <span class=\"string\">\"../\"</span>)</span><br><span class=\"line\">cpCmd.Dir = <span class=\"string\">\"/home/tmp\"</span></span><br><span class=\"line\">err := cpCmd.Run()</span><br></pre></td></tr></table></figure>\n<p>代码看起来是没有问题的，但是运行起来，却是会报出错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp: cannot stat ‘./test/*’: No such file or directory</span><br></pre></td></tr></table></figure>\n<p>这是为何呢，若是直接在shell中运行该命令，是没有问题的，为什么在程序中运行就会出现问题呢？</p>\n<p>用力Google了一下，查到<a href=\"https://superuser.com/questions/1235420/cp-cannot-stat-some-path-no-such-file-or-directory\" target=\"_blank\" rel=\"noopener\">cp: cannot stat ‘/some/path/*’: No such file or directory</a>。</p>\n<p>大概的意思是，该<code>*</code>会被处理成字符串，而不是特殊意义上的通配符，所以，也就会被认定为一个文件或者文件夹，所以，它就报错了，大概就是这么个情况。</p>\n<p>至于程序中如何解决这种情况呢？准确的来讲，我其实是没有找到解决方式的，也就只是换了种替代方式（一个一个文件/文件夹移动）。</p>\n<p><img src=\"1553269116203.png\" alt=\"链接给的回答\"></p>\n<p>这里，还发现另一个问题，若调用命令如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cpCmd := exec.Command(<span class=\"string\">\"sh\"</span>, <span class=\"string\">\"-c\"</span>,<span class=\"string\">\"cp\"</span>, <span class=\"string\">\"-rf\"</span>, <span class=\"string\">\"./test/*\"</span>, <span class=\"string\">\"../\"</span>)</span><br></pre></td></tr></table></figure>\n<p>则程序将报出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp: missing file operand</span><br></pre></td></tr></table></figure>\n<p>同样的，很遗憾，我未能找到具体发生这个现象的原因，算起来，这算是比较坑爹的问题吧，因为是面对项目，只能说碰到了优先以解决为主，当时间不允许的情况下，赶紧避开。</p>\n<p>这里记录一下，我再找找出现问题的原因。</p>\n<p>这里放一个小的复制封装：<a href=\"https://github.com/juju/utils/blob/master/fs/copy.go\" target=\"_blank\" rel=\"noopener\">https://github.com/juju/utils/blob/master/fs/copy.go</a></p>\n","categories":[{"name":"Go基础操作","slug":"Go基础操作","permalink":"chunlife.top/categories/Go基础操作/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"Shell","slug":"Shell","permalink":"chunlife.top/tags/Shell/"}]},{"title":"go执行shell命令","date":"2019-03-21T17:28:06.000Z","path":"2019/03/22/go执行shell命令/","content":"<p>其实在之前的项目中，就有运用到调用linux中的命令，例如，借鉴<a href=\"https://github.com/open-falcon/falcon-plus\" target=\"_blank\" rel=\"noopener\">falcon</a>，里面agent更新文件是调用的wget去获取server端目录下的<code>agent</code>的<code>tar</code>包。</p>\n<a id=\"more\"></a>\n<h3 id=\"基础任务调用\"><a href=\"#基础任务调用\" class=\"headerlink\" title=\"基础任务调用\"></a>基础任务调用</h3><p>按道理来讲，官方库<code>os/exec</code>已经将这个操作封装得很好了，我们所需要做的，也就是调用API进行操作即可，这里插入一些关于API调用的流程问题。</p>\n<p>这是一个基础的调用命令的使用方式：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\tcmd *exec.Cmd</span><br><span class=\"line\">\t\toutput []<span class=\"keyword\">byte</span></span><br><span class=\"line\">\t\terr error</span><br><span class=\"line\">\t)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 生成Cmd</span></span><br><span class=\"line\">\tcmd = exec.Command(<span class=\"string\">\"/bin/bash\"</span>, <span class=\"string\">\"-c\"</span>, <span class=\"string\">\"echo 1;echo2;\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 执行了命令, 捕获了子进程的输出( pipe )</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> output, err = cmd.CombinedOutput(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 打印子进程的输出</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"keyword\">string</span>(output))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实，它借用到了Linux的进程的相关函数操作，如图：</p>\n<p><img src=\"1553186402784.png\" alt=\"任务执行原理\"></p>\n<p>也就是说，golang在调用fork，其与子进程通过管道进行了相应的连接，这是linux的基础知识——进程间通信（感觉回到了嵌入式）。</p>\n<p>也就是相当于<code>go</code>写入一个<code>command</code>交给子进程去运行，然后结果被子进程输入管道，<code>go</code>会去读取。</p>\n<p>系统调用阶段会使用到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipe():创建2个文件描述符，fd[0]可读，fd[1]可写</span><br><span class=\"line\">fork()：创建子进程，fd[1]被继承到子进程</span><br><span class=\"line\">dup2():重定向子进程stdout/stderr到fd[1]</span><br><span class=\"line\">exec()：在当前进程内，加载并执行二进制程序</span><br></pre></td></tr></table></figure>\n<p>这种调用其实是非常占用空间的，子进程会共享父进程的代码空间，数据空间则互相独立，子进程数据空间中的内容是父进程的<strong>完整拷贝</strong>，指令指针也完全相同。也就是这个的消耗资源也就是比协程消耗得更多的，基本相当于线程对协程而言了。</p>\n<h3 id=\"强制结束任务\"><a href=\"#强制结束任务\" class=\"headerlink\" title=\"强制结束任务\"></a>强制结束任务</h3><p>在实际使用中，我们需要控制任务的生命周期，有时候，我们并不需要任务继续执行下去了，这时候，我们就要使点手段来结束掉任务。</p>\n<p>可以使用如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">   <span class=\"string\">\"context\"</span></span><br><span class=\"line\">   <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">   <span class=\"string\">\"os/exec\"</span></span><br><span class=\"line\">   <span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> result <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   err    error</span><br><span class=\"line\">   output []<span class=\"keyword\">byte</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//  执行1个cmd, 让它在一个协程里去执行, 让它执行2秒: sleep 2; echo hello;</span></span><br><span class=\"line\">   <span class=\"comment\">// 1秒的时候, 我们杀死cmd</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> (</span><br><span class=\"line\">      ctx        context.Context</span><br><span class=\"line\">      cancelFunc context.CancelFunc</span><br><span class=\"line\">      cmd        *exec.Cmd</span><br><span class=\"line\">      resultChan <span class=\"keyword\">chan</span> *result</span><br><span class=\"line\">      res        *result</span><br><span class=\"line\">   )</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 创建了一个结果队列</span></span><br><span class=\"line\">   resultChan = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> *result, <span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// context:   chan byte</span></span><br><span class=\"line\">   <span class=\"comment\">// cancelFunc:  close(chan byte)</span></span><br><span class=\"line\"></span><br><span class=\"line\">   ctx, cancelFunc = context.WithCancel(context.TODO())</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> (</span><br><span class=\"line\">         output []<span class=\"keyword\">byte</span></span><br><span class=\"line\">         err    error</span><br><span class=\"line\">      )</span><br><span class=\"line\">      <span class=\"comment\">//cmd = exec.CommandContext(ctx, \"/bin/bash\", \"-c\", \"sleep 2;echo hello;\")</span></span><br><span class=\"line\">      cmd = exec.CommandContext(ctx, <span class=\"string\">`D:\\Git\\bin\\bash.exe`</span>, <span class=\"string\">\"-c\"</span>, <span class=\"string\">\"sleep 2;echo hello;\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 执行任务, 捕获输出</span></span><br><span class=\"line\">      output, err = cmd.CombinedOutput()</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 把任务输出结果, 传给main协程</span></span><br><span class=\"line\">      resultChan &lt;- &amp;result&#123;</span><br><span class=\"line\">         err:    err,</span><br><span class=\"line\">         output: output,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 继续往下走</span></span><br><span class=\"line\">   time.Sleep(<span class=\"number\">1</span> * time.Second)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 取消上下文</span></span><br><span class=\"line\">   cancelFunc()</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 在main协程里, 等待子协程的退出，并打印任务执行结果</span></span><br><span class=\"line\">   res = &lt;-resultChan</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 打印任务执行结果</span></span><br><span class=\"line\">   fmt.Println(res.err, <span class=\"keyword\">string</span>(res.output))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：若你在windows下运行该命令，运行得到的结果是（go1.11，go1.12，这俩版本linux不会出现这种情况）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exit status 1  hello</span><br></pre></td></tr></table></figure>\n<p>也就是说程序虽然被kill掉了，但命令还是执行了。</p>\n<p>博客：<a href=\"https://yuerblog.cc/2018/07/23/golang-command-context-not-exit-problem/#comment-575\" target=\"_blank\" rel=\"noopener\">golang的CommandContext取消不退出问题</a>，介绍的是在go1.10中，Linux下运行命令无法终止的情况（go1.11已被修复），但博客中有提到一个<a href=\"https://github.com/golang/go/issues/23019\" target=\"_blank\" rel=\"noopener\">issue</a>，该地址里有介绍到windows相关，我未深究这个问题的解决，毕竟我没在windows下的使用环境（大概都是运行在linux下的吧）。</p>\n<p>这里还是提一下这个问题，望了解。</p>\n","categories":[{"name":"Go","slug":"Go","permalink":"chunlife.top/categories/Go/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"Shell","slug":"Shell","permalink":"chunlife.top/tags/Shell/"}]},{"title":"slice小问题","date":"2019-03-20T16:32:33.000Z","path":"2019/03/21/slice面试题/","content":"<p>之前我有写过一篇关于slice的博客——<a href=\"https://chunlife.top/2018/10/22/slice%E7%90%86%E8%A7%A3/\">slice理解</a>。其中是对slice的底层结构，扩展，以及range关键字进行解析，而现在刚好又碰到一个关于slice的问题，算是自己粗心犯的一个错吧。</p>\n<a id=\"more\"></a>\n<h3 id=\"slice初始化\"><a href=\"#slice初始化\" class=\"headerlink\" title=\"slice初始化\"></a>slice初始化</h3><p>一般来说slice的初始化方式可以有两种：</p>\n<ul>\n<li>通过数组来初始化</li>\n<li>通过内置函数make()初始化</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s :=[]int&#123;1,2,3 &#125; </span><br><span class=\"line\">直接初始化切片，[]表示是切片类型，&#123;1,2,3&#125;初始化值依次是1,2,3.其cap=len=3</span><br><span class=\"line\">s := arr[:] </span><br><span class=\"line\">初始化切片s,是数组arr的引用</span><br><span class=\"line\">s := arr[:endIndex] </span><br><span class=\"line\">缺省startIndex时将表示从arr的第一个元素开始到第endIndex个元素</span><br></pre></td></tr></table></figure>\n<p>所以说，若是直接声明一个slice，是不可用的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s []int</span><br></pre></td></tr></table></figure>\n<p>所以，为了偷懒，我一般是使用<code>make</code>的方式。</p>\n<h3 id=\"问题出现\"><a href=\"#问题出现\" class=\"headerlink\" title=\"问题出现\"></a>问题出现</h3><p>我有些忘记了<code>make</code>函数创建slice时，返回的是一个已被填充好值的slice，但我依然习惯性的使用了append去添加元素，这样会导致slice数据出现冗余，类似于这样的代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   s := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">   s = <span class=\"built_in\">append</span>(s, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">   fmt.Println(s)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码运行结果是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0 0 0 0 0 1 2 3]</span><br></pre></td></tr></table></figure>\n<h3 id=\"为什么？\"><a href=\"#为什么？\" class=\"headerlink\" title=\"为什么？\"></a>为什么？</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">make</span><span class=\"params\">([]T, <span class=\"built_in\">len</span>, <span class=\"built_in\">cap</span>)</span> []<span class=\"title\">T</span></span></span><br></pre></td></tr></table></figure>\n<p>其中T代表被创建的切片元素的类型。函数 <code>make</code> 接受一个类型、一个长度和一个可选的容量参数。调用 <code>make</code> 时，内部会分配一个数组，然后返回数组对应的切片。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s []<span class=\"keyword\">byte</span></span><br><span class=\"line\">s = <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\">// s == []byte&#123;0, 0, 0, 0, 0&#125;</span></span><br></pre></td></tr></table></figure>\n<p>当容量参数被忽略时，它默认为指定的长度。下面是简洁的写法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<p>所以说，当继续使用<code>append</code>时，数据时直接填充在这些默认值<code>0</code>的后面的，这也就造成实际数据中出现多余的<code>0</code>，从而影响后续的操作。</p>\n<h3 id=\"附加\"><a href=\"#附加\" class=\"headerlink\" title=\"附加\"></a>附加</h3><h4 id=\"slice追加到另一个slice\"><a href=\"#slice追加到另一个slice\" class=\"headerlink\" title=\"slice追加到另一个slice\"></a>slice追加到另一个slice</h4><p>如果将一个slice追加到另一个slice中需要带上”<strong>…</strong>“，这样才能表示是将slice中的元素依次追加到另一个slice中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s :=append(s,s1...)</span><br></pre></td></tr></table></figure>\n<p>在通过下标访问元素时下标不能超过len大小，如同数组的下标不能超出len范围一样。</p>\n<h4 id=\"删除切片元素\"><a href=\"#删除切片元素\" class=\"headerlink\" title=\"删除切片元素\"></a>删除切片元素</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index ：= <span class=\"number\">5</span></span><br><span class=\"line\">ss = <span class=\"built_in\">append</span>(ss[:index], ss[index+<span class=\"number\">1</span>:]...)</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"Go","slug":"Go","permalink":"chunlife.top/categories/Go/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"slice","slug":"slice","permalink":"chunlife.top/tags/slice/"}]},{"title":"压缩zip和解压缩unzip","date":"2019-03-20T09:47:28.000Z","path":"2019/03/20/zip解压-压缩/","content":"<p>在项目中需要使用到zip压缩与解压缩的功能，这类功能应该来说是很基础了，直接引用go官方的包<code>archive/zip</code>，对于如何压缩文件夹的功能不是很熟悉，参考别人的代码加入到项目中，在实际使用中发现有些不符合预期的地方。</p>\n<a id=\"more\"></a>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>代码引用自博客——<a href=\"https://blog.csdn.net/u011304970/article/details/71131592\" target=\"_blank\" rel=\"noopener\">Go压缩解压文件夹</a></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//zipDir(\"F:\\\\dumps\", \"F:\\\\dumps.zip\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">zipDir</span><span class=\"params\">(dir, zipFile <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfz, err := os.Create(zipFile)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Debug(<span class=\"string\">\"Create zip file failed: %s\\n\"</span>, err.Error())</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fz.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tw := zip.NewWriter(fz)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> w.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tfilepath.Walk(dir, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(path <span class=\"keyword\">string</span>, info os.FileInfo, err error)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> !info.IsDir() &#123;</span><br><span class=\"line\">\t\t\tfDest, err := w.Create(path[<span class=\"built_in\">len</span>(dir)+<span class=\"number\">1</span>:])</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tlog.Printf(<span class=\"string\">\"Create failed: %s\\n\"</span>, err.Error())</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tfSrc, err := os.Open(path)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tlog.Printf(<span class=\"string\">\"Open failed: %s\\n\"</span>, err.Error())</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">defer</span> fSrc.Close()</span><br><span class=\"line\">\t\t\t_, err = io.Copy(fDest, fSrc)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tlog.Printf(<span class=\"string\">\"Copy failed: %s\\n\"</span>, err.Error())</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>压缩文件夹函数确实能够压缩文件夹，但实际使用中，我发现和我需要的效果有些出入，例如，我的目录结果为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frist/</span><br><span class=\"line\">├── second_1</span><br><span class=\"line\">│   └── 1.txt</span><br><span class=\"line\">└── second_2</span><br><span class=\"line\">    └── 1.txt</span><br><span class=\"line\">2 directories, 2 files</span><br></pre></td></tr></table></figure>\n<p>我需要连着<code>frist</code>顶级目录一起进行压缩，但事与愿违，即使传入<code>frist</code>的上一级目录，<code>zipDir</code>函数依然只会压缩<code>second_1</code>以及<code>second_2</code>；而且，当我输出的目标ZIP文件是压缩的文件夹中时，压缩包内会出现一个名为<code>zip</code>的临时文件。</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>故此，我本着不应该没人做的更好的想法（嘿嘿~），找到了<a href=\"http://blog.ralch.com/tutorial/golang-working-with-zip/\" target=\"_blank\" rel=\"noopener\">Golang: Working with ZIP archives</a>。</p>\n<p>可以压缩顶层目录，且压缩文件即使要输出到压缩目录，也不会出现什么异常。</p>\n<h3 id=\"Compressing\"><a href=\"#Compressing\" class=\"headerlink\" title=\"Compressing\"></a>Compressing</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// zipit(\"/tmp/documents\", \"/tmp/backup.zip\")</span></span><br><span class=\"line\"><span class=\"comment\">// zipit(\"/tmp/report.txt\", \"/tmp/report-2015.zip\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">zipit</span><span class=\"params\">(source, target <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tzipfile, err := os.Create(target)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> zipfile.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tarchive := zip.NewWriter(zipfile)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> archive.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tinfo, err := os.Stat(source)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> baseDir <span class=\"keyword\">string</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> info.IsDir() &#123;</span><br><span class=\"line\">\t\tbaseDir = filepath.Base(source)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfilepath.Walk(source, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(path <span class=\"keyword\">string</span>, info os.FileInfo, err error)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\theader, err := zip.FileInfoHeader(info)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> baseDir != <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\t\theader.Name = filepath.Join(baseDir, strings.TrimPrefix(path, source))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> info.IsDir() &#123;</span><br><span class=\"line\">\t\t\theader.Name += <span class=\"string\">\"/\"</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\theader.Method = zip.Deflate</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\twriter, err := archive.CreateHeader(header)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> info.IsDir() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfile, err := os.Open(path)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> file.Close()</span><br><span class=\"line\">\t\t_, err = io.Copy(writer, file)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2019-3-22-11-47-46\"><a href=\"#2019-3-22-11-47-46\" class=\"headerlink\" title=\"2019-3-22 11:47:46\"></a>2019-3-22 11:47:46</h4><p>发现一个小问题，当传入相对路径<code>./testDir</code>给函数<code>zipit</code>时，会出现两个顶层目录，是因为这行代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header.Name = filepath.Join(baseDir, strings.TrimPrefix(path, source))</span><br></pre></td></tr></table></figure>\n<p><code>strings.TrimPrefix</code>，去掉前缀</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Code:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"string\">\"¡¡¡Hello, Gophers!!!\"</span></span><br><span class=\"line\">    s = strings.TrimPrefix(s, <span class=\"string\">\"¡¡¡Hello, \"</span>)</span><br><span class=\"line\">    s = strings.TrimPrefix(s, <span class=\"string\">\"¡¡¡Howdy, \"</span>)</span><br><span class=\"line\">    fmt.Print(s)</span><br><span class=\"line\">Output:</span><br><span class=\"line\">\tGophers!!!</span><br></pre></td></tr></table></figure>\n<p>这行代码的意思也就是，去掉前缀的绝对路径，保留下要压缩文件的相对路径，但我们传入的是<code>./testDir</code>，相对于路径来说，多了<code>./</code>，所以其并不会去除成功，那么就会出现顶层目录出现两级的情况。</p>\n<p>解决方法是：</p>\n<ul>\n<li>传入相对路径时，不加<code>./</code>。</li>\n<li>检查传入的路径是否为绝对路径。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> isAbs := filepath.IsAbs(source); !isAbs &#123;</span><br><span class=\"line\">   <span class=\"comment\">//source, err = filepath.Abs(source)  // 将传入路径直接转化为绝对路径</span></span><br><span class=\"line\">   <span class=\"comment\">//if err != nil &#123;</span></span><br><span class=\"line\">   <span class=\"comment\">// return err</span></span><br><span class=\"line\">   <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">   source = filepath.Base(source)  <span class=\"comment\">// 去掉字符“./”</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>加入以上代码可以解决问题，代码中，其实可以看到我屏蔽了——<code>filepath.Abs</code>函数解决方式，这个函数调用了<code>syscall</code>，也就是说借用了系统命令，这相对而言是比<code>filepath.Base</code>更消耗资源的，因为涉及到了语言系统交互的层面，类似于<a href=\"https://chunlife.top/2019/03/22/go%E6%89%A7%E8%A1%8Cshell%E5%91%BD%E4%BB%A4/\">go执行shell命令</a>。</p>\n<h3 id=\"Extracting\"><a href=\"#Extracting\" class=\"headerlink\" title=\"Extracting\"></a>Extracting</h3><p>附上zip解压缩的代码，以便以后查看。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// unzip(\"/tmp/report-2015.zip\", \"/tmp/reports/\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">unzip</span><span class=\"params\">(archive, target <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\treader, err := zip.OpenReader(archive)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := os.MkdirAll(target, <span class=\"number\">0755</span>); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, file := <span class=\"keyword\">range</span> reader.File &#123;</span><br><span class=\"line\">\t\tpath := filepath.Join(target, file.Name)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> file.FileInfo().IsDir() &#123;</span><br><span class=\"line\">\t\t\tos.MkdirAll(path, file.Mode())</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfileReader, err := file.Open()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> fileReader.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttargetFile, err := os.OpenFile(path, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, file.Mode())</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> targetFile.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> _, err := io.Copy(targetFile, fileReader); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我在放置一篇博主的：<a href=\"http://blog.ralch.com/articles/golang-working-with-tar-and-gzip/\" target=\"_blank\" rel=\"noopener\">Golang: Working with Gzip and Tar</a></p>\n<p>这里再来一个<a href=\"https://github.com/gpmgo/gopm/tree/master/modules/cae/zip，可以直接自己用这个库，不过这个`pack`函数会自动添加一个`cae`的顶层目录，修改`Flush()`函数，去掉`&quot;cae&quot;`。\" target=\"_blank\" rel=\"noopener\">https://github.com/gpmgo/gopm/tree/master/modules/cae/zip，可以直接自己用这个库，不过这个`pack`函数会自动添加一个`cae`的顶层目录，修改`Flush()`函数，去掉`&quot;cae&quot;`。</a></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmpPath := path.Join(os.TempDir(), <span class=\"string\">\"cae\"</span>, path.Base(z.FileName))</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"Go","slug":"Go","permalink":"chunlife.top/categories/Go/"}],"tags":[{"name":"go","slug":"go","permalink":"chunlife.top/tags/go/"},{"name":"zip","slug":"zip","permalink":"chunlife.top/tags/zip/"}]},{"title":"正则表达式","date":"2019-03-19T13:04:25.000Z","path":"2019/03/19/正则表达式（速查表）/","content":"<h4 id=\"正则表达式（速查表）\"><a href=\"#正则表达式（速查表）\" class=\"headerlink\" title=\"正则表达式（速查表）\"></a>正则表达式（速查表）</h4><a id=\"more\"></a>\n<p><a href=\"https://github.com/frank-lam/2019_campus_apply/blob/master/notes/EfficiencyTools/正则表达式.md\" target=\"_blank\" rel=\"noopener\">正则表达式.md</a></p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>描述</th>\n<th>例子</th>\n<th>能匹配</th>\n<th>不能匹配</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>^</td>\n<td>行首或字符串开始</td>\n<td>^yo</td>\n<td>yo</td>\n<td>ayo</td>\n</tr>\n<tr>\n<td>$</td>\n<td>行末或字符串结束</td>\n<td>yo$</td>\n<td>yo</td>\n<td>yop</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>单词边界</td>\n<td>\\byo\\b</td>\n<td>mu yo mu</td>\n<td>muyomu</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>非单词边界</td>\n<td>\\Byo\\B</td>\n<td>muyomu</td>\n<td>mu yo mu</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>描述</th>\n<th>例子</th>\n<th>能匹配</th>\n<th>不能匹配</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>(?=xxx)</td>\n<td>正向肯定预查，从任何匹配xxx的字符串开始处匹配查找字符串</td>\n<td>yo(?=o)</td>\n<td>yoo</td>\n<td>yo</td>\n</tr>\n<tr>\n<td>(?!xxx)</td>\n<td>正向否定预查，从任何不匹配pattern的字符串开始处匹配查找字符串</td>\n<td>yo(?!o)</td>\n<td>yo</td>\n<td>yoo</td>\n</tr>\n<tr>\n<td>(?&lt;=xxx)</td>\n<td>反向肯定预查，与正向肯定预查类拟，只是方向相反</td>\n<td>(?&lt;=y)o</td>\n<td>yo</td>\n<td>yoo</td>\n</tr>\n<tr>\n<td>(?&lt;!xxx)</td>\n<td>反向否定预查，与正向否定预查类拟，只是方向相反</td>\n<td>(?&lt;!goo)d</td>\n<td>mood</td>\n<td>good</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>描述</th>\n<th>例子</th>\n<th>能匹配</th>\n<th>不能匹配</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[ ]</td>\n<td>字符集合</td>\n<td>[ace]</td>\n<td>a, c, e</td>\n<td>d</td>\n</tr>\n<tr>\n<td>[ - ]</td>\n<td>字符范围</td>\n<td>[a-c]</td>\n<td>a, b, c</td>\n<td>d</td>\n</tr>\n<tr>\n<td>[^ ]</td>\n<td>不包含的字符集合</td>\n<td>[^abc]</td>\n<td>d, e</td>\n<td>a, b, c</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配除断行外的任何字符</td>\n<td>yo.</td>\n<td>yoo, yop, yoh</td>\n<td>yo</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>空白字符，等于[\\n\\r\\f\\t ]</td>\n<td>la\\sla</td>\n<td>la la</td>\n<td>lala</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>非空白字符，等于[^\\n\\r\\f\\t]</td>\n<td>la\\sla</td>\n<td>lala</td>\n<td>la la</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>数字</td>\n<td>\\d{2}</td>\n<td>23</td>\n<td>1a</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>非数字</td>\n<td>\\D{3}</td>\n<td>yoo, abc</td>\n<td>yo1</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>单词，等于[a-z-A-Z0-9_]</td>\n<td>\\w{4}</td>\n<td>v123</td>\n<td>v12.3</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>非单词，等于[^a-z-A-Z0-9_]</td>\n<td>.$%?</td>\n<td>.$%?</td>\n<td>.ab?</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>特殊字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\n</td>\n<td>断行</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车符</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>制表符</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>垂直制表符</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换页</td>\n</tr>\n<tr>\n<td>[\\b]</td>\n<td>退格</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>描述</th>\n<th>例子</th>\n<th>能匹配</th>\n<th>不能匹配</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\</td>\n<td></td>\n<td>或，其一</td>\n<td>a\\</td>\n<td>b</td>\n<td>a, b</td>\n<td>c</td>\n</tr>\n<tr>\n<td>(xxx)</td>\n<td>匹配xxx并获取这一匹配</td>\n<td>yo(o\\</td>\n<td>p)</td>\n<td>yoo 或 yop</td>\n<td>yoh</td>\n</tr>\n<tr>\n<td>(?:xxx)</td>\n<td>匹配xxx但不获取这一匹配</td>\n<td>y(?:o)</td>\n<td>yo</td>\n<td>ya</td>\n</tr>\n<tr>\n<td>+</td>\n<td>重复1次或多次</td>\n<td>yo+</td>\n<td>yo, yooo</td>\n<td>y</td>\n</tr>\n<tr>\n<td>*</td>\n<td>重复0次或多次</td>\n<td>yo*</td>\n<td>y, yoo</td>\n<td>yop</td>\n</tr>\n<tr>\n<td>?</td>\n<td>出现0次或1次</td>\n<td>yo?</td>\n<td>y, yo</td>\n<td>ye</td>\n</tr>\n<tr>\n<td>??</td>\n<td>?的懒惰模式，尽可能少匹配</td>\n<td>yoo??</td>\n<td>yo</td>\n<td>yoo</td>\n</tr>\n<tr>\n<td>+?</td>\n<td>+的懒惰模式</td>\n<td>yo+?</td>\n<td>yo</td>\n<td>yoo</td>\n</tr>\n<tr>\n<td>*?</td>\n<td>*的懒惰模式</td>\n<td>yo*?</td>\n<td>y</td>\n<td>yo</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>重复n次</td>\n<td>yo{2}</td>\n<td>yoo</td>\n<td>yooo</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>重复n到m次</td>\n<td>yo{1, 3}</td>\n<td>yo,yooo</td>\n<td>yoooo</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>重复至少n次</td>\n<td>yo{2,}</td>\n<td>yoo, yooo</td>\n<td>yo</td>\n</tr>\n</tbody>\n</table>\n<p>[^a-z-A-Z0-9_]: </p>\n","categories":[{"name":"Go","slug":"Go","permalink":"chunlife.top/categories/Go/"}],"tags":[{"name":"正则表达式","slug":"正则表达式","permalink":"chunlife.top/tags/正则表达式/"}]},{"title":"搜集赏","date":"2019-03-19T08:54:20.000Z","path":"2019/03/19/搜集赏/","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">没有你，良辰美景更与何人说？</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>——《天使爱美丽》</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">“我们命中注定要失去所爱之人，</span><br><span class=\"line\"></span><br><span class=\"line\">不然我们怎么知道他们在我们生命中有多重要？”</span><br></pre></td></tr></table></figure>\n<p>——布拉德·皮特主演·《返老还童》</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">想必 女孩子 是由砂糖 香辛料 和某些美好的事物组成的吧</span><br></pre></td></tr></table></figure>\n<p>——比企谷八幡 《我的青春恋爱物语果然有问题》</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">要让爱情简单，最好就是精选适合自己的对象。</span><br><span class=\"line\">一个真正值得去爱、也懂得回爱的人，自然会让爱情变得简单。这样，两人之间平时不需要猜测心意，不用担心行踪；不害怕在无意之间激怒，不怀疑做任何事情的动机。两人之间，有一点牵挂，却不会纠缠；两人之间，有一点想念，却不会伤心。</span><br></pre></td></tr></table></figure>\n<p>——网络<code>鸡汤类</code>文学</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">总会有光明的东西的，在未来。</span><br></pre></td></tr></table></figure>\n<p>——《像少年啦飞驰》韩寒</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">远在远方的风比远方更远</span><br></pre></td></tr></table></figure>\n<p>——《九月》海子</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">今夜我不关心人类</span><br><span class=\"line\"></span><br><span class=\"line\">我只想你</span><br></pre></td></tr></table></figure>\n<p>——《日记》海子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我知道这将是我的一生热爱 我将为此一直奋斗。——张弛（沈腾饰）</span><br></pre></td></tr></table></figure>\n<p>——《飞驰人生》，韩寒</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">“以前写过一句话：我所理解的生活，就是和喜欢的一切在一起。</span><br><span class=\"line\"></span><br><span class=\"line\">鸡汤越短，做起来越难。</span><br><span class=\"line\"></span><br><span class=\"line\">此刻，《飞驰人生》应该已经上映了。这是一个很简单的故事，讲的就是和你所爱的一切在一起，以及爱的代价。片子里有对手却没有大反派。你不想索然无味的过完这一生，而反派就是那索然无味的一生。”</span><br></pre></td></tr></table></figure>\n<p>——韩寒</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">想你吃醋，却怕你祝我幸福</span><br></pre></td></tr></table></figure>\n<p>——网易热心网友</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我只听音乐 不听故事</span><br></pre></td></tr></table></figure>\n<p>——后来我听说你</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前几天，我听一个广播节目。主持人问，现在很多人开网约车，这样能赚多少钱，能够赚到大钱吗？</span><br><span class=\"line\"></span><br><span class=\"line\">这个问题很容易回答，答案就是不能。出租车司机的收入，主要由营业时间的长短决定。基本上，一天开12个小时，就是比开6个小时，收入高出一倍。每天只有24个小时，因此收入存在上限，不可能偏离平均水平很远。</span><br><span class=\"line\"></span><br><span class=\"line\">出租车是“时间换收入”的典型行业，投入的时间越多，收入越高，在家休息就没收入。很多行业都属于“时间换收入”，所有此类行业都赚不到大钱。因为你能用来交换的时间是有限的，而且进入中年以后，你就拿不出更多的时间来交换。开出租车赚零花钱，或者作为短期过渡，这是没问题的，但作为终身职业是很糟糕的。</span><br><span class=\"line\"></span><br><span class=\"line\">我觉得，越来越多的程序员正在落入这个陷井，用编码的时间换取收入。只有不停地做项目，才能拿到钱。项目做得越多，收入越高。这个项目开发完了，公司又让他去干下一个项目。 忙了好几年，项目完成了一大堆，但是自己什么也没留下，以后的收入还要取决于从零开始的新项目。这样的话，你跟出租车司机有何两样，哪一天你不写代码了，不是照样没收入。</span><br><span class=\"line\"></span><br><span class=\"line\">那些赚到大钱的人，没有一个是靠时间换取收入的。他们要么通过积累资产致富，要么购买他人的时间，为自己创造财富。你应该警惕，不要落入“时间换取收入”的陷井，不要只顾着为别人生产代码，而要注意积累自己的资产，以及适时开展属于自己的业务。</span><br></pre></td></tr></table></figure>\n<p>——<a href=\"https://www.yuque.com/ruanyf/share/issue-50\" target=\"_blank\" rel=\"noopener\">阮一峰每周分享第50期</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">生活就像一盒巧克力，你永远不知道下一块是什么味道</span><br></pre></td></tr></table></figure>\n<p>——《阿甘正传》</p>\n","categories":[{"name":"随笔","slug":"随笔","permalink":"chunlife.top/categories/随笔/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"chunlife.top/tags/随笔/"}]},{"title":"stringSlice转换——无需内存copy","date":"2019-03-19T02:59:53.000Z","path":"2019/03/19/stringSlice转换——无需内存copy/","content":"<p>摘取自<a href=\"https://github.com/fagongzi/gateway\" target=\"_blank\" rel=\"noopener\"><strong>gateway</strong></a>，作者提到过这种方式，也是来源于另一个开源项目，操作方式极其硬核，故收藏了。</p>\n<a id=\"more\"></a>\n<h3 id=\"String与Slice互转\"><a href=\"#String与Slice互转\" class=\"headerlink\" title=\"String与Slice互转\"></a>String与Slice互转</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> hack</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">   <span class=\"string\">\"reflect\"</span></span><br><span class=\"line\">   <span class=\"string\">\"unsafe\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// SliceToString slice to string with out data copy</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SliceToString</span><span class=\"params\">(b []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(s <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">   pbytes := (*reflect.SliceHeader)(unsafe.Pointer(&amp;b))</span><br><span class=\"line\">   pstring := (*reflect.StringHeader)(unsafe.Pointer(&amp;s))</span><br><span class=\"line\">   pstring.Data = pbytes.Data</span><br><span class=\"line\">   pstring.Len = pbytes.Len</span><br><span class=\"line\">   <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// StringToSlice string to slice with out data copy</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StringToSlice</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"params\">(b []<span class=\"keyword\">byte</span>)</span></span> &#123;</span><br><span class=\"line\">   pbytes := (*reflect.SliceHeader)(unsafe.Pointer(&amp;b))</span><br><span class=\"line\">   pstring := (*reflect.StringHeader)(unsafe.Pointer(&amp;s))</span><br><span class=\"line\">   pbytes.Data = pstring.Data</span><br><span class=\"line\">   pbytes.Len = pstring.Len</span><br><span class=\"line\">   pbytes.Cap = pstring.Len</span><br><span class=\"line\">   <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用到了slice与string关键字在Go中的本质，直接对关键字的核心构造进行一系列操作，根本不讲Go语言的规矩，算是一种<code>黑魔法</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string的本质：reflect.StringHeader&#123;&#125;</span><br><span class=\"line\">slice的本质：reflect.SliceHeader&#123;&#125;</span><br><span class=\"line\">go指针的本质：unsafe.Pointer&#123;&#125;、uintptr&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>查看源码，可以找到Go编译器对slice与string的具体解释，均保留有一个指针，用于指向数据真正的地址。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type SliceHeader struct &#123;</span><br><span class=\"line\">    Data uintptr</span><br><span class=\"line\">    Len  int</span><br><span class=\"line\">    Cap  int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SliceHeader是切片的运行时表示。它不能被安全或便携地使用，其表示可能会在以后的版本中更改。此外，数据字段不足以保证它引用的数据不会被垃圾收集，因此程序必须保留一个单独的，正确键入的指向底层数据的指针。</span><br><span class=\"line\"></span><br><span class=\"line\">type StringHeader struct &#123;</span><br><span class=\"line\">    Data uintptr</span><br><span class=\"line\">    Len  int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">StringHeader是字符串的运行时表示形式。</span><br></pre></td></tr></table></figure>\n<p><strong>另外</strong>，我们看到这俩结构体类似，内存布局也是类似的，只是<code>StringHeader</code>少了一个字段，但至少内存是对其的，那么？（C语言又在发威了~）</p>\n<p>注意：反过来转换不行，<code>StringHeader</code>对比<code>SliceHeader</code>少了一个字段</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">byteString</span><span class=\"params\">(b []<span class=\"keyword\">byte</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> *(*<span class=\"keyword\">string</span>)(unsafe.Pointer(&amp;b))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"结构体与-byte\"><a href=\"#结构体与-byte\" class=\"headerlink\" title=\"结构体与[]byte\"></a>结构体与[]byte</h3><p>同理，结构体与[]byte也是可以互相转换的，可以用于优化<code>encoding/binady</code>的性能。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyStruct <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    A <span class=\"keyword\">int</span></span><br><span class=\"line\">    B <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取结构体真实数据的大小</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sizeOfMyStruct = <span class=\"keyword\">int</span>(unsafe.Sizeof(MyStruct&#123;&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 填充[]byte的数据结构</span></span><br><span class=\"line\"><span class=\"comment\">// 结构体的数据指针也就是一个4字节的int类型（c基础知识！）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MyStructToBytes</span><span class=\"params\">(s *MyStruct)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x reflect.SliceHeader</span><br><span class=\"line\">    x.Len = sizeOfMyStruct</span><br><span class=\"line\">    x.Cap = sizeOfMyStruct</span><br><span class=\"line\">    x.Data = <span class=\"keyword\">uintptr</span>(unsafe.Pointer(s))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *(*[]<span class=\"keyword\">byte</span>)(unsafe.Pointer(&amp;x))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// unsafe.Pointer(&amp;b)：取[]byte首地址</span></span><br><span class=\"line\"><span class=\"comment\">// (*reflect.SliceHeader)(unsafe.Pointer(&amp;b)) ： 强制转换其为reflect.SliceHeader指针</span></span><br><span class=\"line\"><span class=\"comment\">// (*reflect.SliceHeader)(unsafe.Pointer(&amp;b)).Data ： 将slice的数据指针取出来</span></span><br><span class=\"line\"><span class=\"comment\">// unsafe.Pointer((*reflect.SliceHeader)(unsafe.Pointer(&amp;b)).Data) : 将uint指针转成任意指针</span></span><br><span class=\"line\"><span class=\"comment\">// (*MyStruct)(unsafe.Pointer((*reflect.SliceHeader)(unsafe.Pointer(&amp;b)).Data))：成功转换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BytesToMyStruct</span><span class=\"params\">(b []<span class=\"keyword\">byte</span>)</span> *<span class=\"title\">MyStruct</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (*MyStruct)(unsafe.Pointer(</span><br><span class=\"line\">        (*reflect.SliceHeader)(unsafe.Pointer(&amp;b)).Data))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"写在后头\"><a href=\"#写在后头\" class=\"headerlink\" title=\"写在后头\"></a>写在后头</h3><p>上头写的东西，感觉有些突破语言既定的规范了，当然我这么想是有根据的，从源码注释上来看，显然，这个语言特性是不稳定的，指不定哪天Go开发人员觉着这个<code>黑魔法</code>不够魔性，直接不允许你这么做了。</p>\n<p><code>黑魔法</code>，也是被一些人诟病的地方吧，有好有坏，不了解也可以，了解了也不是不可。</p>\n<p><strong>注意</strong>：使用这种方式去转换，是无法对数据进行修改的。意思是，调用了<code>ToBytes</code>后得到的<code>[]byte</code>是没有办法改变的，一旦修改即会出现<code>unexpected fault address xxxxx</code>，<strong>只可读，而没有写操作的能力，切记切记</strong>，<img src=\"sort接口的使用.png\" alt=\"img\">。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ToString unsafe 转换, 将 []byte 转换为 string</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ToString</span><span class=\"params\">(p []<span class=\"keyword\">byte</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> *(*<span class=\"keyword\">string</span>)(unsafe.Pointer(&amp;p))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ToBytes unsafe 转换, 将 string 转换为 []byte</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ToBytes</span><span class=\"params\">(str <span class=\"keyword\">string</span>)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> *(*[]<span class=\"keyword\">byte</span>)(unsafe.Pointer(&amp;str))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IntToBool int 类型转换为 bool</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">IntToBool</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> i != <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// SliceInt64ToString []int64 转换为 []string</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SliceInt64ToString</span><span class=\"params\">(si []<span class=\"keyword\">int64</span>)</span> <span class=\"params\">(ss []<span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\tss = <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(si))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k := <span class=\"keyword\">range</span> si &#123;</span><br><span class=\"line\">\t\tss = <span class=\"built_in\">append</span>(ss, strconv.FormatInt(si[k], <span class=\"number\">10</span>))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ss</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// SliceStringToInt64 []string 转换为 []int64</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SliceStringToInt64</span><span class=\"params\">(ss []<span class=\"keyword\">string</span>)</span> <span class=\"params\">(si []<span class=\"keyword\">int64</span>)</span></span> &#123;</span><br><span class=\"line\">\tsi = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int64</span>, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(ss))</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\ti   <span class=\"keyword\">int64</span></span><br><span class=\"line\">\t\terr error</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k := <span class=\"keyword\">range</span> ss &#123;</span><br><span class=\"line\">\t\ti, err = strconv.ParseInt(ss[k], <span class=\"number\">10</span>, <span class=\"number\">64</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsi = <span class=\"built_in\">append</span>(si, i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// SliceStringToInt []string 转换为 []int</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SliceStringToInt</span><span class=\"params\">(ss []<span class=\"keyword\">string</span>)</span> <span class=\"params\">(si []<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tsi = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(ss))</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\ti   <span class=\"keyword\">int</span></span><br><span class=\"line\">\t\terr error</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k := <span class=\"keyword\">range</span> ss &#123;</span><br><span class=\"line\">\t\ti, err = strconv.Atoi(ss[k])</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsi = <span class=\"built_in\">append</span>(si, i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MustInt 将string转换为int, 忽略错误</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MustInt</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tn, _ = strconv.Atoi(s)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MustInt64 将string转换为int64, 忽略错误</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MustInt64</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"params\">(i <span class=\"keyword\">int64</span>)</span></span> &#123;</span><br><span class=\"line\">\ti, _ = strconv.ParseInt(s, <span class=\"number\">10</span>, <span class=\"number\">64</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"Go基础操作","slug":"Go基础操作","permalink":"chunlife.top/categories/Go基础操作/"}],"tags":[{"name":"go","slug":"go","permalink":"chunlife.top/tags/go/"},{"name":"函数","slug":"函数","permalink":"chunlife.top/tags/函数/"}]},{"title":"记录以前使用linux的一些命令","date":"2019-03-19T02:19:44.000Z","path":"2019/03/19/记录以前使用linux的一些命令/","content":"<p>1、find</p>\n<p>find使用在查找大型代码结构的项目时，特别有用，例如linux内核。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在某一目录下查找文件名包含“fb”字样的文件</span><br><span class=\"line\">find -name &quot;*fb*&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">在内核的drivers/net目录下查找文件名包含“fb”字样的文件</span><br><span class=\"line\">find drivers/net -name &quot;*fb*&quot;</span><br></pre></td></tr></table></figure>\n<p>2、grep</p>\n<p>针对某些函数，需要对代码进行彻查，查看函数调用的位置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查找当前目录下的所有文件、目录</span><br><span class=\"line\">grep &quot;request&quot; * -nR</span><br></pre></td></tr></table></figure>\n<p>3、ldd</p>\n<p>命令用于判断某个可执行的 binary 档案含有什么动态函式库，这个可能是在嵌入式方向中用到的机会比较多。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--version　　       打印ldd的版本号</span><br><span class=\"line\">-v --verbose　　  打印所有信息，例如包括符号的版本信息</span><br><span class=\"line\">-d --data-relocs　执行符号重部署，并报告缺少的目标对象（只对ELF格式适用）</span><br><span class=\"line\">-r --function-relocs　对目标对象和函数执行重新部署，并报告缺少的目标对象和函数（只对ELF格式适用）</span><br><span class=\"line\">--help 用法信息</span><br></pre></td></tr></table></figure>\n<p>4、Shell取出^M</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat -v buildprod.sh | tr -d '^M'  &gt; b1.sh</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"Linux","slug":"Linux","permalink":"chunlife.top/categories/Linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"chunlife.top/tags/linux/"}]},{"title":"sort接口的使用","date":"2019-03-15T09:01:53.000Z","path":"2019/03/15/sort接口的使用/","content":"<p>该包实现了四种基本排序算法：插入排序、归并排序、堆排序和快速排序。（看到网上貌似有些文章漏掉了堆排序，不知道是不是以前的<code>go</code>没有堆排序）</p>\n<a id=\"more\"></a>\n<p>这四种排序方法是不公开的，它们只被用于sort包内部使用，由语言自动选择排序方式。</p>\n<h3 id=\"1、基础类型排序\"><a href=\"#1、基础类型排序\" class=\"headerlink\" title=\"1、基础类型排序\"></a>1、基础类型排序</h3><p>排序是在内部进行的，并不会返回一个新的切片。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"sort\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    strs := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"c\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>&#125;</span><br><span class=\"line\">    sort.Strings(strs)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"Strings:\"</span>, strs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// An example of sorting `int`s.</span></span><br><span class=\"line\">    ints := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">    sort.Ints(ints)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"Ints:   \"</span>, ints)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查slice是否是排序状态</span></span><br><span class=\"line\">    s := sort.IntsAreSorted(ints)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"Sorted: \"</span>, s)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、自定义排序\"><a href=\"#2、自定义排序\" class=\"headerlink\" title=\"2、自定义排序\"></a>2、自定义排序</h3><p>实现 sort.Interface 的三个方法，Len，Swap，Less。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Interface <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Len is the number of elements in the collection.</span></span><br><span class=\"line\">        Len() <span class=\"keyword\">int</span></span><br><span class=\"line\">        <span class=\"comment\">// Less reports whether the element with</span></span><br><span class=\"line\">        <span class=\"comment\">// index i should sort before the element with index j.</span></span><br><span class=\"line\">        Less(i, j <span class=\"keyword\">int</span>) <span class=\"keyword\">bool</span></span><br><span class=\"line\">        <span class=\"comment\">// Swap swaps the elements with indexes i and j.</span></span><br><span class=\"line\">        Swap(i, j <span class=\"keyword\">int</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码示例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"sort\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> byLength []<span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s byLength)</span> <span class=\"title\">Len</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s byLength)</span> <span class=\"title\">Swap</span><span class=\"params\">(i, j <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    s[i], s[j] = s[j], s[i]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s byLength)</span> <span class=\"title\">Less</span><span class=\"params\">(i, j <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(s[i]) &lt; <span class=\"built_in\">len</span>(s[j])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    fruits := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"peach\"</span>, <span class=\"string\">\"banana\"</span>, <span class=\"string\">\"kiwi\"</span>&#125;</span><br><span class=\"line\">    sort.Sort(byLength(fruits))</span><br><span class=\"line\">    fmt.Println(fruits)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 生成递减序列</span></span><br><span class=\"line\">    sort.Sort(sort.Reverse(byLength(fruits)))</span><br><span class=\"line\">    fmt.Println(fruits)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"Go基础操作","slug":"Go基础操作","permalink":"chunlife.top/categories/Go基础操作/"}],"tags":[{"name":"go","slug":"go","permalink":"chunlife.top/tags/go/"},{"name":"函数","slug":"函数","permalink":"chunlife.top/tags/函数/"},{"name":"排序","slug":"排序","permalink":"chunlife.top/tags/排序/"},{"name":"sort","slug":"sort","permalink":"chunlife.top/tags/sort/"}]},{"title":"移动文件或文件夹","date":"2019-03-15T06:29:30.000Z","path":"2019/03/15/移动文件或文件夹/","content":"<p>golang 移动（重命名）文件或文件夹，移动文件到目标位置时，不会自动创建目标位置的文件夹。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr := os.Rename(<span class=\"string\">\"./tmp\"</span>, <span class=\"string\">\"./tmp1\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"Go基础操作","slug":"Go基础操作","permalink":"chunlife.top/categories/Go基础操作/"}],"tags":[{"name":"go","slug":"go","permalink":"chunlife.top/tags/go/"},{"name":"文件处理小程序","slug":"文件处理小程序","permalink":"chunlife.top/tags/文件处理小程序/"}]},{"title":"MongoDB ObjectID生成","date":"2019-03-15T03:10:14.000Z","path":"2019/03/15/MongoDB ObjectID生成/","content":"<p>在项目中需要用到一个随机数，将其作为唯一且无法重复，第一个想到的就是MongoDB里面的objectID，将其作为一个唯一且不重复的键值。</p>\n<a id=\"more\"></a>\n<p>ObjectId是一个12字节的 BSON 类型字符串。按照字节顺序，一次代表：</p>\n<ul>\n<li>4字节：UNIX时间戳 </li>\n<li>3字节：表示运行MongoDB的机器 </li>\n<li>2字节：表示生成此_id的进程 </li>\n<li>3字节：由一个随机数开始的计数器生成的值 </li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// machineId stores machine id generated once and used in subsequent calls</span></span><br><span class=\"line\"><span class=\"comment\">// to NewObjectId function.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> machineId = readMachineId()</span><br><span class=\"line\"><span class=\"keyword\">var</span> processId = os.Getpid()</span><br><span class=\"line\"><span class=\"comment\">// objectIdCounter is atomically incremented when generating a new ObjectId</span></span><br><span class=\"line\"><span class=\"comment\">// using NewObjectId() function. It's used as a counter part of an id.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> objectIdCounter = readRandomUint32()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// readRandomUint32 returns a random objectIdCounter.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">readRandomUint32</span><span class=\"params\">()</span> <span class=\"title\">uint32</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b [<span class=\"number\">4</span>]<span class=\"keyword\">byte</span></span><br><span class=\"line\">\t_, err := io.ReadFull(rand.Reader, b[:])</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(fmt.Errorf(<span class=\"string\">\"cannot read random object id: %v\"</span>, err))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">uint32</span>((<span class=\"keyword\">uint32</span>(b[<span class=\"number\">0</span>]) &lt;&lt; <span class=\"number\">0</span>) | (<span class=\"keyword\">uint32</span>(b[<span class=\"number\">1</span>]) &lt;&lt; <span class=\"number\">8</span>) | (<span class=\"keyword\">uint32</span>(b[<span class=\"number\">2</span>]) &lt;&lt; <span class=\"number\">16</span>) | (<span class=\"keyword\">uint32</span>(b[<span class=\"number\">3</span>]) &lt;&lt; <span class=\"number\">24</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// readMachineId generates and returns a machine id.</span></span><br><span class=\"line\"><span class=\"comment\">// If this function fails to get the hostname it will cause a runtime error.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">readMachineId</span><span class=\"params\">()</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum [<span class=\"number\">3</span>]<span class=\"keyword\">byte</span></span><br><span class=\"line\">\tid := sum[:]</span><br><span class=\"line\">\thostname, err1 := os.Hostname()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err1 != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t_, err2 := io.ReadFull(rand.Reader, id)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err2 != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">panic</span>(fmt.Errorf(<span class=\"string\">\"cannot get hostname: %v; %v\"</span>, err1, err2))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thw := md5.New()</span><br><span class=\"line\">\thw.Write([]<span class=\"keyword\">byte</span>(hostname))</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(id, hw.Sum(<span class=\"literal\">nil</span>))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> id</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewObjectId returns a new unique ObjectId.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewObjectId</span><span class=\"params\">()</span> <span class=\"title\">ObjectId</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b [<span class=\"number\">12</span>]<span class=\"keyword\">byte</span></span><br><span class=\"line\">\t<span class=\"comment\">// Timestamp, 4 bytes, big endian</span></span><br><span class=\"line\">\tbinary.BigEndian.PutUint32(b[:], <span class=\"keyword\">uint32</span>(time.Now().Unix()))</span><br><span class=\"line\">\t<span class=\"comment\">// Machine, first 3 bytes of md5(hostname)</span></span><br><span class=\"line\">\tb[<span class=\"number\">4</span>] = machineId[<span class=\"number\">0</span>]</span><br><span class=\"line\">\tb[<span class=\"number\">5</span>] = machineId[<span class=\"number\">1</span>]</span><br><span class=\"line\">\tb[<span class=\"number\">6</span>] = machineId[<span class=\"number\">2</span>]</span><br><span class=\"line\">\t<span class=\"comment\">// Pid, 2 bytes, specs don't specify endianness, but we use big endian.</span></span><br><span class=\"line\">\tb[<span class=\"number\">7</span>] = <span class=\"keyword\">byte</span>(processId &gt;&gt; <span class=\"number\">8</span>)</span><br><span class=\"line\">\tb[<span class=\"number\">8</span>] = <span class=\"keyword\">byte</span>(processId)</span><br><span class=\"line\">\t<span class=\"comment\">// Increment, 3 bytes, big endian</span></span><br><span class=\"line\">\ti := atomic.AddUint32(&amp;objectIdCounter, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tb[<span class=\"number\">9</span>] = <span class=\"keyword\">byte</span>(i &gt;&gt; <span class=\"number\">16</span>)</span><br><span class=\"line\">\tb[<span class=\"number\">10</span>] = <span class=\"keyword\">byte</span>(i &gt;&gt; <span class=\"number\">8</span>)</span><br><span class=\"line\">\tb[<span class=\"number\">11</span>] = <span class=\"keyword\">byte</span>(i)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ObjectId(b[:])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"MongoDB","slug":"MongoDB","permalink":"chunlife.top/categories/MongoDB/"}],"tags":[{"name":"go","slug":"go","permalink":"chunlife.top/tags/go/"},{"name":"MongoDB","slug":"MongoDB","permalink":"chunlife.top/tags/MongoDB/"}]},{"title":"Go API统一注释说明","date":"2019-03-14T14:42:02.000Z","path":"2019/03/14/Go API统一注释说明/","content":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>​    运行下面指令后会在$GOPATH/bin中生成一个apidoc的可执行程序</p>\n<a id=\"more\"></a>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd $GOPATH/src/github.com/caixw/</span><br><span class=\"line\"></span><br><span class=\"line\">git clone https://github.com/caixw/apidoc.git</span><br><span class=\"line\"></span><br><span class=\"line\">cd $GOPATH/src/github.com/caixw/apidoc</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout v3.0</span><br><span class=\"line\"></span><br><span class=\"line\">go build</span><br><span class=\"line\"></span><br><span class=\"line\">cp apidoc $GOPATH/bin/</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成流程\"><a href=\"#生成流程\" class=\"headerlink\" title=\"生成流程\"></a>生成流程</h3><ol>\n<li>在项目工程目录下生成apidoc配置文件：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apidoc -g</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在代码中每个API接口处理函数前加一些特殊的注释，注释格式见下文</li>\n<li>注释完后运行<code>apidoc</code> ，即在当前目录的<strong>doc</strong>目录生成相应项目的文档</li>\n<li>打开相应的html即可阅读</li>\n</ol>\n<h3 id=\"注释格式\"><a href=\"#注释格式\" class=\"headerlink\" title=\"注释格式\"></a>注释格式</h3><p>​    在写代码时，需要在代码中加上特定格式的注释，以便用apidoc生成文档。</p>\n<ul>\n<li>项目文档的描述：在项目的<strong>某一个源文件（推荐main.go）的开头</strong>加上该项目文档的注释</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @apidoc &lt;title of doc&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiVersion &lt;version&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiBaseURL &lt;domain&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiContent</span></span><br><span class=\"line\"><span class=\"comment\"> * 描述，可以多行，支持html</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p>​    \\<title of=\"\" doc=\"\">填写为文档的名称</title></p>\n<p>​    \\<version>为文档的版本</version></p>\n<p>​    \\<domain>问API的域名，比如<a href=\"https://test.com\" target=\"_blank\" rel=\"noopener\">https://test.com</a></domain></p>\n<p>​    例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @apidoc USER模块API接口</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiVersion V0.1</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiBaseURL https://www.wukoon-app.com</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiContent</span></span><br><span class=\"line\"><span class=\"comment\"> * 描述，可以多行，支持html</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>API的描述：在需要导出的<strong>API相应处理函数</strong>前加上特定的注释</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @api &lt;method&gt; &lt;url&gt; &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiGroup &lt;group&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiQuery &lt;QueryName&gt; &lt;type&gt; &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> * @apiRequest json</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiHeader &lt;key&gt; &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &lt;ParamName&gt; &lt;type&gt; &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiExample json</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;body data example in json format&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccess &lt;status&gt; &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &lt;ParamName&gt; &lt;type&gt; &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiExample json</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;Success data in json format&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> * @apiError &lt;status&gt; &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &lt;ParamName&gt; &lt;type&gt; &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiExample json</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;fail data in json format&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p>​    \\<method>是API的HTTP method，比如GET</method></p>\n<p>​    \\<url>是API的路径，比如/api/v1/user/user</url></p>\n<p>​    \\<summary>是简要说明</summary></p>\n<p>​    \\<group>对 api 的分组信息，不同的分组，最终可能会被呈现在不同的页面。</group></p>\n<p>​    \\<queryname>Query的名称</queryname></p>\n<p>​       \\<type> Query的类型，比如int，string等</type></p>\n<p>​    \\<key>HTTP请求头字段，有需要指定的话可以使用</key></p>\n<p>​    \\<paramname> 请求参数名称</paramname></p>\n<p>​    \\<body data=\"\" example=\"\" in=\"\" json=\"\" format=\"\">请求body的例子</body></p>\n<p>​    \\<status>HTTP状态码，比如200</status></p>\n<p>​    \\<success data=\"\" in=\"\" json=\"\" format=\"\">成功返回数据例子</success></p>\n<p>​    \\<fail data=\"\" in=\"\" json=\"\" format=\"\">错误返回数据例子</fail></p>\n<p>​    例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @api PUT /api/v1/user/user 修改用户profile</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiGroup user</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiQuery userid int 执行修改请求的用户id</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiQuery token string 执行修改请求的用户token</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> * @apiRequest json</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiHeader session 12345</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam userid int 要修改的用户id</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam name string 将用户id对应的名称修改为name</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiExample json</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;\"userid\":1,\"name\":\"wubo\"&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccess 200 OK</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam errcode int 错误代码</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam errmsg string 错误信息</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiExample json</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;\"errcode\":0,\"errmsg\":\"ok\"&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> * @apiError 200 OK</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam errcode int 错误代码</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam errmsg string 错误信息</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiExample json</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;\"errcode\":30002,\"errmsg\":\"invalid parameter\"&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>apidoc项目：<a href=\"https://github.com/caixw/apidoc\" target=\"_blank\" rel=\"noopener\">https://github.com/caixw/apidoc</a></p>\n<p>apidoc文档：<a href=\"http://apidoc.tools/\" target=\"_blank\" rel=\"noopener\">http://apidoc.tools/</a></p>\n","categories":[{"name":"Go","slug":"Go","permalink":"chunlife.top/categories/Go/"}],"tags":[{"name":"apidoc","slug":"apidoc","permalink":"chunlife.top/tags/apidoc/"},{"name":"go","slug":"go","permalink":"chunlife.top/tags/go/"}]},{"title":"ElasticSearch数据迁移","date":"2019-03-14T14:41:15.000Z","path":"2019/03/14/ElasticSearch数据迁移/","content":"<p>在机器上进行归档数据，需要借助的是<code>reindex</code>API。</p>\n<a id=\"more\"></a>\n<h4 id=\"1、第一步\"><a href=\"#1、第一步\" class=\"headerlink\" title=\"1、第一步\"></a>1、第一步</h4><p>迁移数据前，在ES中创建对应的index以及mapping。</p>\n<p>例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /my_index</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"settings\"</span>: &#123; </span><br><span class=\"line\">        <span class=\"string\">\"number_of_shards\"</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"number_of_replicas\"</span>:<span class=\"number\">0</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"mappings\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">\"time\"</span> : &#123;</span><br><span class=\"line\">            <span class=\"string\">\"type\"</span> : <span class=\"string\">\"integer\"</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"string\">\"uid\"</span> : &#123;</span><br><span class=\"line\">            <span class=\"string\">\"type\"</span> : <span class=\"string\">\"text\"</span></span><br><span class=\"line\">          &#125;，</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为了加快数据迁移，将 <code>refresh_interval</code> 置为-1，<code>number_of_replicas</code> 置为0：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT -H &apos;Content-type&apos;:&apos;application/json&apos; &#123;some ip&#125;:9200/&#123;index&#125;/_settings -d </span><br><span class=\"line\">&apos;&#123;</span><br><span class=\"line\">    &quot;index&quot;: &#123;</span><br><span class=\"line\">        &quot;refresh_interval&quot;: -1,</span><br><span class=\"line\">        &quot;number_of_replicas&quot;: 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;&apos;</span><br></pre></td></tr></table></figure>\n<p><code>refresh_interval</code>：文档自动刷新功能，文档的变化并不是立即对搜索实时可见的，需要进行一次刷新；</p>\n<p><code>number_of_replicas</code> ：创建副本，存储备份用，在导入时，关闭以节省时间。</p>\n<h4 id=\"2、第二步\"><a href=\"#2、第二步\" class=\"headerlink\" title=\"2、第二步\"></a>2、第二步</h4><p>使用reindex-from-remote来同步数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPOST -H &apos;Content-type&apos;:&apos;application/json&apos; http://127.0.0.1:9200/_reindex?pretty -d &apos;&#123;</span><br><span class=\"line\">    &quot;conflicts&quot;: &quot;proceed&quot;,</span><br><span class=\"line\">    &quot;source&quot;: &#123;</span><br><span class=\"line\">        &quot;remote&quot;:&#123;</span><br><span class=\"line\">            &quot;host&quot;:&quot;http://127.0.0.1:9200&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;index&quot;:&quot;produce_record&quot;,</span><br><span class=\"line\">        &quot;query&quot;: &#123;</span><br><span class=\"line\">         &quot;match&quot;: &#123;</span><br><span class=\"line\">            &quot;test&quot;: &quot;data&quot;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;，</span><br><span class=\"line\">        &quot;size&quot;:1000</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;dest&quot;: &#123;</span><br><span class=\"line\">        &quot;index&quot;: &quot;produce_record_v1&quot;,</span><br><span class=\"line\">        &quot;version_type&quot;: &quot;external&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;&apos;</span><br></pre></td></tr></table></figure>\n<p><code>conflicts</code>：导入过程中，源文档和目标文档出现冲突，不会导致导入失败。</p>\n<p><code>version_type</code>为”external”，当目标文档中_id相同时，将保留文档，而不是去覆盖；</p>\n<p>“internal”则是直接覆盖。</p>\n<h4 id=\"3、第三步\"><a href=\"#3、第三步\" class=\"headerlink\" title=\"3、第三步\"></a>3、第三步</h4><p>将 <code>refresh_interval</code>、<code>number_of_replicas</code> 分别设置回”30s”和1。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT -H 'Content-type':'application/json' &#123;some ip&#125;:9200/&#123;index&#125;/_settings -d </span><br><span class=\"line\">'&#123;</span><br><span class=\"line\">    \"index\": &#123;</span><br><span class=\"line\">        \"refresh_interval\": \"30s\",</span><br><span class=\"line\">        \"number_of_replicas\": 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;'</span><br></pre></td></tr></table></figure>\n<p>ElasticSearch集群方案：</p>\n<p>使用多节点，冷热数据分离的方式，也就是将读写I/O进行区分，在master上进行写操作，大量read操作分散到集群节点上。</p>\n<p><a href=\"https://blog.csdn.net/jiao_fuyou/article/details/78354327\" target=\"_blank\" rel=\"noopener\">Elasticsearch集群冷热分离-实际操作</a></p>\n<p><a href=\"https://blog.csdn.net/eases_stone/article/details/82181244\" target=\"_blank\" rel=\"noopener\">elasticsearch5.x系列之八冷热数据分离方案</a></p>\n","categories":[{"name":"Elastic Search","slug":"Elastic-Search","permalink":"chunlife.top/categories/Elastic-Search/"}],"tags":[{"name":"elasticsearch","slug":"elasticsearch","permalink":"chunlife.top/tags/elasticsearch/"}]},{"title":"etcd配置中心——confd/viper","date":"2019-02-28T02:16:35.000Z","path":"2019/02/28/学习使用confd/","content":"<p>配置中心的使用呢，之前在项目中使用的是<a href=\"https://github.com/spf13/viper\" target=\"_blank\" rel=\"noopener\">viper</a>（现在又给改回去了，误解了viper的操作），但根据实际测试以及在GitHub的<a href=\"https://github.com/spf13/viper/issues?utf8=✓&amp;q=is%3Aissue+concurrent+map+read+and+map+write+\" target=\"_blank\" rel=\"noopener\">issue</a>中看到的帖子，看到viper是线程不安全的（确实是不安全的）。</p>\n<a id=\"more\"></a>\n<h2 id=\"viper\"><a href=\"#viper\" class=\"headerlink\" title=\"viper\"></a>viper</h2><p>函数<code>WatchRemoteConfig</code>可以监听ETCD KEY，但实际上这些操作在源码中都没出现加锁的操作，这里我对viper这么受欢迎的库在远端监听时不支持线程安全表示怀疑，因为我在官方README中并没有见到有特地提到说不能在并发环境中使用的注意事项，我想，事情可能并不是那么简单，现实是，事情可能就是这个样子的，监听远程key确实只能在一个协程中进行（为什么需要开多个协程去监听呢？）。</p>\n<p>使用<code>WatchRemoteConfig()</code>，viper会重新获取key中的所有数据，我们需使用<code>Unmarshal</code>将数据进行序列化保存，但这里可以不去<code>Unmarshal</code>，直接使用类似于<code>viper.GetString(&quot;logfile&quot;)</code>去获取key-value。</p>\n<p><strong>注意</strong>：这里就是问题出现的点了，使用<code>viper.GetString(&quot;logfile&quot;)</code>获取数据，相当于从一个map中直接拿数据，要知道，map是不能并发读和并发写的，所以会引发<code>concurrent map read and map write</code>。</p>\n<p>问题找到了，那么viper的用法呢，其实也没有错，但需要注意的是，我们确实<strong>只能</strong>在一个协程中使用viper，且我们在获取到数据后，最好是使用带锁的map或是并发<code>sync.Map</code>将数据保存起来，而不是使用<code>viper.GetString</code>去从viper的缓存中获取数据，我们不应该<code>信任</code>viper。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> runtime_viper = viper.New()</span><br><span class=\"line\"></span><br><span class=\"line\">runtime_viper.AddRemoteProvider(<span class=\"string\">\"etcd\"</span>, <span class=\"string\">\"http://127.0.0.1:4001\"</span>, <span class=\"string\">\"/config/hugo.yml\"</span>)</span><br><span class=\"line\">runtime_viper.SetConfigType(<span class=\"string\">\"yaml\"</span>) <span class=\"comment\">// because there is no file extension in a stream of bytes, supported extensions are \"json\", \"toml\", \"yaml\", \"yml\", \"properties\", \"props\", \"prop\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// read from remote config the first time.</span></span><br><span class=\"line\">err := runtime_viper.ReadRemoteConfig()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// unmarshal config</span></span><br><span class=\"line\">runtime_viper.Unmarshal(&amp;runtime_conf)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// open a goroutine to watch remote changes forever</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t    time.Sleep(time.Second * <span class=\"number\">5</span>) <span class=\"comment\">// delay after each request</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"comment\">// currently, only tested with etcd support</span></span><br><span class=\"line\">\t    err := runtime_viper.WatchRemoteConfig()</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t        log.Errorf(<span class=\"string\">\"unable to read remote config: %v\"</span>, err)</span><br><span class=\"line\">\t        <span class=\"keyword\">continue</span></span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"comment\">// unmarshal new config into our runtime config struct. you can also use channel</span></span><br><span class=\"line\">\t    <span class=\"comment\">// to implement a signal to notify the system of the changes</span></span><br><span class=\"line\">\t    runtime_viper.Unmarshal(&amp;runtime_conf)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 使用线程安全的sync.Map进行保存</span></span><br><span class=\"line\">        SyncCfgMap.Store(<span class=\"string\">\"config\"</span>, &amp;runtime_conf)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<h2 id=\"confd安装\"><a href=\"#confd安装\" class=\"headerlink\" title=\"confd安装\"></a>confd安装</h2><p><a href=\"https://blog.csdn.net/bbwangj/article/details/82953786\" target=\"_blank\" rel=\"noopener\">confd的安装与使用</a></p>\n<p><a href=\"https://github.com/kelseyhightower/confd\" target=\"_blank\" rel=\"noopener\">confd</a>网上资料很多了，基本上算是比较好配置的了，没有什么坑可以占，麻烦点的就是对于解析的配置。</p>\n<p>一般的，confd两个目录：conf.d，templates。</p>\n<p><code>conf.d</code>目录下的一个配置文件，代表将输出一个配置。而输出这些配置的依据或者是规则，放置于templates目录下，语法需要参考confd官方的<a href=\"https://github.com/kelseyhightower/confd/blob/master/docs/templates.md\" target=\"_blank\" rel=\"noopener\">文档</a>。</p>\n","categories":[{"name":"Go","slug":"Go","permalink":"chunlife.top/categories/Go/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"etcd","slug":"etcd","permalink":"chunlife.top/tags/etcd/"},{"name":"confd","slug":"confd","permalink":"chunlife.top/tags/confd/"},{"name":"viper","slug":"viper","permalink":"chunlife.top/tags/viper/"}]},{"title":"baiduPCS学习","date":"2019-02-22T03:16:41.000Z","path":"2019/02/22/baiduPCS学习/","content":"<p>首先，百度云是一个非常好用的网盘，因为之前限速是在限得太过于厉害，无法忍受，在网上找了很多工具，其中就有<a href=\"https://github.com/iikira/BaiduPCS-Go\" target=\"_blank\" rel=\"noopener\">BaiduPCS-Go</a>，不得不说特别的好用，之前在此基础上，我添加了一个同步文件夹的功能，感觉代码挺简陋的，所以我也不好意思PR，这里主要是我想把项目中一些可以复用的函数给抽取出来，以便我日后翻阅吧。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Trigger 用于触发事件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Trigger</span><span class=\"params\">(f <span class=\"keyword\">func</span>()</span>)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> f == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> f()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TriggerOnSync 用于触发事件, 同步触发</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TriggerOnSync</span><span class=\"params\">(f <span class=\"keyword\">func</span>()</span>)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> f == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tf()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>delay是利用了channel的阻塞性质，以及关闭channel后，接受channel语句会获取数据，不再阻塞，这也就达到了delay的作用。（直接使用定时器也没啥毛病）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// NewDelayChan 发送延时信号</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewDelayChan</span><span class=\"params\">(t time.Duration)</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">struct</span></span>&#123;&#125; &#123;</span><br><span class=\"line\">   c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</span><br><span class=\"line\">   <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">      time.Sleep(t)</span><br><span class=\"line\">      <span class=\"built_in\">close</span>(c)</span><br><span class=\"line\">   &#125;()</span><br><span class=\"line\">   <span class=\"keyword\">return</span> c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &lt;-delayChan</span></span><br></pre></td></tr></table></figure>\n","categories":[{"name":"golang基础知识","slug":"golang基础知识","permalink":"chunlife.top/categories/golang基础知识/"}],"tags":[{"name":"go","slug":"go","permalink":"chunlife.top/tags/go/"},{"name":"函数","slug":"函数","permalink":"chunlife.top/tags/函数/"}]},{"title":"mysql并发操作","date":"2019-02-21T01:45:11.000Z","path":"2019/02/21/mysql并发操作/","content":"<p>在项目中，遇到个并发问题，虽然不是个大问题，但确实是之前没考虑到的，具体体现类似于余额扣减，多个客户端同时访问web接口，导致临界数据计算出现异常。此时就代表着我可能就碰到了一个并发问题了。</p>\n<a id=\"more\"></a>\n<p>这里资料主要是参考了：</p>\n<p>知乎上的回答：<a href=\"https://www.zhihu.com/question/61484424\" target=\"_blank\" rel=\"noopener\">高并发下怎么做余额扣减？</a></p>\n<p><a href=\"http://blog.51cto.com/1385903/2115479\" target=\"_blank\" rel=\"noopener\">金融系统中高并发下投资余额扣减问题的解决思路</a></p>\n<p>通过知乎上的一些回答，第一个让我get到需要改正的点的是，条件判断和临界参数的比较（与0比较，或是余额比较），都是可以直接交给数据库去做的，这样就可以利用到MySQL自身的锁机制来帮助我们处理并发。</p>\n<h2 id=\"MySQL锁\"><a href=\"#MySQL锁\" class=\"headerlink\" title=\"MySQL锁\"></a>MySQL锁</h2><p>MySQL中一般常见的锁，表锁和行锁，根据mysql引擎使用的不同，能够使用的锁也不同，例如行锁适用于<code>InnoDB</code>，这里也只是介绍行锁，其并发度也是最高的。</p>\n<p>这里介绍InnoDB的行锁模式及加锁方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   共享锁（s）：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。</span><br><span class=\"line\">   排他锁（Ｘ）：允许获取排他锁的事务更新数据，阻止其他事务取得相同的数据集共享读锁和排他写锁。</span><br><span class=\"line\">另外，为了允许行锁和表锁共存，实现多粒度锁机制，InnoDB还有两种内部使用的意向锁（Intention Locks），这两种意向锁都是表锁。</span><br><span class=\"line\">   意向共享锁（IS）：事务打算给数据行共享锁，事务在给一个数据行加共享锁前必须先取得该表的IS锁。</span><br><span class=\"line\">   意向排他锁（IX）：事务打算给数据行加排他锁，事务在给一个数据行加排他锁前必须先取得该表的IX锁。</span><br></pre></td></tr></table></figure>\n<p>​    如果一个事务请求的锁模式与当前的锁兼容，InnoDB就请求的锁授予该事务；反之，如果两者两者不兼容，该事务就要等待锁释放。</p>\n<p>​    意向锁是InnoDB自动加的，不需用户干预。对于<strong>UPDATE、DELETE和INSERT</strong>语句，InnoDB会自动给涉及及数据集加排他锁（Ｘ）；对于普通SELECT语句，InnoDB不会加任何锁；<strong>事务</strong>可以通过以下语句显示给记录集加共享锁或排锁。</p>\n<p>共享锁（Ｓ）：SELECT * FROM table_name WHERE … LOCK IN SHARE MODE</p>\n<p>排他锁（X）：SELECT * FROM table_name WHERE … FOR UPDATE</p>\n<p>​    用SELECT .. IN SHARE MODE获得共享锁，主要用在需要数据依存关系时确认某行记录是否存在，并确保没有人对这个记录进行UPDATE或者DELETE操作。但是如果当前事务也需要对该记录进行更新操作，则很有可能造成死锁，对于锁定行记录后需要进行更新操作的应用，应该使用SELECT … FOR UPDATE方式获取排他锁。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Go中显示标明需要获取排他锁的SQL语句， ·WAIT 2·表示其他SQL请求等待2s后timeout，NOWAIT表示不等待</span></span><br><span class=\"line\">tx := Db.Set(<span class=\"string\">\"gorm:query_option\"</span>, <span class=\"string\">\" FOR UPDATE WAIT 2\"</span>)</span><br></pre></td></tr></table></figure>\n<p>需要<strong>注意</strong>的是：只有通过 <strong><em>索引</em></strong> 条件检索数据，InnoDB才会使用行级锁，否则，InnoDB将使用表锁！</p>\n<p>使用<code>SELECT ... FOR UPDATE</code>时，只有明确指定<code>主键</code>，mysql才会执行Row Lock（只锁住被选取的数据），否则MySQL将获取表锁。</p>\n<p>总得来说，这里mysql使用的是悲观锁，对于悲观锁的理解是，读写都来一把锁，将数据进行锁定；而乐观锁呢，大意就是不需要锁进行操作，而是通过合理的逻辑，去规避同时操作数据所出现的问题，以不加锁的方式实现同一时间仅一次操作数据的操作能够正常执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">乐观所和悲观锁策略</span><br><span class=\"line\">悲观锁：在读取数据时锁住那几行，其他对这几行的更新需要等到悲观锁结束时才能继续 。</span><br><span class=\"line\">乐观所：读取数据时不锁，更新时检查是否数据已经被更新过，如果是则取消当前更新，一般在悲观锁的等待时间过长而不能接受时我们才会选择乐观锁。</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://www.cnblogs.com/houweijian/p/5869243.html\" target=\"_blank\" rel=\"noopener\">mysql事务，select for update，及数据的一致性处理</a></p>\n<h2 id=\"too-many-open-file\"><a href=\"#too-many-open-file\" class=\"headerlink\" title=\"too many open file\"></a><em>too</em> <em>many</em> <em>open</em> <em>file</em></h2><p>在服务器端时，在正常运行的过程中，总会出现<code>socket: too many open file</code>，然后当次HTTP请求就会出现访问错误，这是由于linux对程序打开文件的限制，使用命令<code>ulimit -a</code>，默认<code>open file (-n) 1024</code>，解决方法是<code>ulimit -n 8192</code>，将支持打开的文件数量调大些。</p>\n<p>这里还是服务端在请求产生后，资源没有及时释放，我使用<code>resty</code> HTTP库时，会比较快的出现这个问题，我换成使用原生Golang库发起请求时，这个问题会减轻很多，这里我对这个库的资源回收方面的处理表示一些不好的意向。另外<code>viper</code>库竟然不支持并发安全，这也是让我没有预料到的。</p>\n","categories":[{"name":"MySQL","slug":"MySQL","permalink":"chunlife.top/categories/MySQL/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"mysql","slug":"mysql","permalink":"chunlife.top/tags/mysql/"}]},{"title":"自定义json Marshalling","date":"2019-02-17T02:34:35.000Z","path":"2019/02/17/自定义json Marshalling/","content":"<p>在开发中，若是遇到结构体中的私有变量（小写变量），需要出现在<code>json Marshal</code>结果中，使用json外包显然是无法做到的，因为外包是无法看到私有变量的，<code>reflect</code>机制需要的是大写变量，但就是需要这样的操作，怎么办呢，可以实现该结构体自有<code>Marshal</code>方法。</p>\n<a id=\"more\"></a>\n<p>看到一篇好文章：<a href=\"http://choly.ca/post/go-json-marshalling/\" target=\"_blank\" rel=\"noopener\">Custom JSON Marshalling in Go</a>，以下是翻译。</p>\n<p>补：</p>\n<blockquote>\n<p>有人问我，这个小写变量没啥软用啊，你咋不大写？</p>\n<p>额，我这里自己对结构体编写了构造函数，我有一些初始设置是写在结构体里的，不想被外界修改，所以使用了这个操作，另外我可以借助这个操作来更改实际输出给外部的结构体格式。</p>\n<p>当然，一切以项目需求为主，<img src=\"2E8E715C.png\" alt=\"img\">。</p>\n</blockquote>\n<p>Go的<code>encoding/json</code>包使得序列化结构体<code>s</code>到JSON数据变得非常容易。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"encoding/json\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyUser <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID       <span class=\"keyword\">int64</span>     <span class=\"string\">`json:\"id\"`</span></span><br><span class=\"line\">\tName     <span class=\"keyword\">string</span>    <span class=\"string\">`json:\"name\"`</span></span><br><span class=\"line\">\tLastSeen time.Time <span class=\"string\">`json:\"lastSeen\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t_ = json.NewEncoder(os.Stdout).Encode(</span><br><span class=\"line\">\t\t&amp;MyUser&#123;<span class=\"number\">1</span>, <span class=\"string\">\"Ken\"</span>, time.Now()&#125;,</span><br><span class=\"line\">\t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Output:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"id\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"Ken\"</span>,<span class=\"attr\">\"lastSeen\"</span>:<span class=\"string\">\"2009-11-10T23:00:00Z\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>但是，如果我们想要改变其中一个字段值的显示方式呢？例如，假设我想<code>LastSeen</code>成为一个unix时间戳。</p>\n<p>简单的解决方案是引入另一个辅助<code>struct</code>，并使用方法中正确格式化的值填充它<code>MarshalJSON</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *MyUser)</span> <span class=\"title\">MarshalJSON</span><span class=\"params\">()</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> json.Marshal(&amp;<span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tID       <span class=\"keyword\">int64</span>  <span class=\"string\">`json:\"id\"`</span></span><br><span class=\"line\">\t\tName     <span class=\"keyword\">string</span> <span class=\"string\">`json:\"name\"`</span></span><br><span class=\"line\">\t\tLastSeen <span class=\"keyword\">int64</span>  <span class=\"string\">`json:\"lastSeen\"`</span></span><br><span class=\"line\">\t&#125;&#123;</span><br><span class=\"line\">\t\tID:       u.ID,</span><br><span class=\"line\">\t\tName:     u.Name,</span><br><span class=\"line\">\t\tLastSeen: u.LastSeen.Unix(),  <span class=\"comment\">// 调换了参数</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是有用的，但是当有很多字段时它会变得很麻烦。如果我们可以将原始内容嵌入<code>struct</code>到辅助中<code>struct</code>并使其继承所有不需要更改的字段，这将是好的解决方式。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *MyUser)</span> <span class=\"title\">MarshalJSON</span><span class=\"params\">()</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> json.Marshal(&amp;<span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tLastSeen <span class=\"keyword\">int64</span> <span class=\"string\">`json:\"lastSeen\"`</span></span><br><span class=\"line\">\t\t*MyUser</span><br><span class=\"line\">\t&#125;&#123;</span><br><span class=\"line\">\t\tLastSeen: u.LastSeen.Unix(),</span><br><span class=\"line\">\t\tMyUser:   u,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的问题是辅助结构也将继承原始的<code>MarshalJSON</code>方法，导致它进入无限循环（<code>我：这里我不太清楚作者无限循环的意思</code>）。解决方案是为原始类型添加别名。此别名将具有所有相同的字段，但不包含任何方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *MyUser)</span> <span class=\"title\">MarshalJSON</span><span class=\"params\">()</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">type</span> Alias MyUser</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> json.Marshal(&amp;<span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tLastSeen <span class=\"keyword\">int64</span> <span class=\"string\">`json:\"lastSeen\"`</span></span><br><span class=\"line\">\t\t*Alias</span><br><span class=\"line\">\t&#125;&#123;</span><br><span class=\"line\">\t\tLastSeen: u.LastSeen.Unix(),</span><br><span class=\"line\">\t\tAlias:    (*Alias)(u),</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我：辅助<code>struct</code>的<code>lastSeen</code>会覆盖原始<code>struct</code>中的同名<code>tag</code>参数。</p>\n</blockquote>\n<p>可以使用相同的技术来实现<code>UnmarshalJSON</code>方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *MyUser)</span> <span class=\"title\">UnmarshalJSON</span><span class=\"params\">(data []<span class=\"keyword\">byte</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">type</span> Alias MyUser</span><br><span class=\"line\">\taux := &amp;<span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tLastSeen <span class=\"keyword\">int64</span> <span class=\"string\">`json:\"lastSeen\"`</span></span><br><span class=\"line\">\t\t*Alias</span><br><span class=\"line\">\t&#125;&#123;</span><br><span class=\"line\">\t\tAlias: (*Alias)(u),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := json.Unmarshal(data, &amp;aux); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tu.LastSeen = time.Unix(aux.LastSeen, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"Go","slug":"Go","permalink":"chunlife.top/categories/Go/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"json","slug":"json","permalink":"chunlife.top/tags/json/"},{"name":"Marshal","slug":"Marshal","permalink":"chunlife.top/tags/Marshal/"}]},{"title":"初步学习ES","date":"2019-01-09T03:34:40.000Z","path":"2019/01/09/初步学习ES/","content":"<h2 id=\"基础ES\"><a href=\"#基础ES\" class=\"headerlink\" title=\"基础ES\"></a>基础ES</h2><p>ES访问基于RESTful web接口，功能可以说是十分强劲（学会用才行），对各类搜索来说可以说特别方便的，可以使用的搜索方式很多。</p>\n<p>先了解了解ES基础的使用方法。</p>\n<a id=\"more\"></a>\n<p>基础接口使用：</p>\n<p><img src=\"clip_image001.png\" alt=\"123\"></p>\n<p><img src=\"1547005720207.png\" alt=\"数据库对比\"></p>\n<h2 id=\"资料收集\"><a href=\"#资料收集\" class=\"headerlink\" title=\"资料收集\"></a>资料收集</h2><p>本来是想写点什么的，不过发现前人已经将基础部分描述得很清楚了，对于我来讲，拿出小本本，做好笔，站在前人的肩膀上，坐享成果，岂不是美滋滋。</p>\n<p>简单介绍一些学习的博客，用于帮助理解ES。</p>\n<p>博主写了5篇关于ES的文章，从基础概念到Java API的使用。</p>\n<p><a href=\"https://blog.csdn.net/xialei199023/article/list/2?t=1\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/xialei199023/article/list/2?t=1</a></p>\n<p>一个博客专栏，共有6篇博客。</p>\n<p><a href=\"https://blog.csdn.net/vbirdbest/column/info/19346\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/vbirdbest/column/info/19346</a></p>\n<p>个人比较<strong>喜欢</strong>的一篇博客，写的非常详尽，对初学者极度友好。</p>\n<p><a href=\"https://my.oschina.net/yumg/blog/625448\" target=\"_blank\" rel=\"noopener\">认识ElasticSearch的API，并深入Search的使用</a></p>\n<p>获取筛选字段。</p>\n<p><a href=\"https://blog.csdn.net/afeiqiang/article/details/82999962\" target=\"_blank\" rel=\"noopener\">Elasticsearch搜索详解（三）：返回字段筛选</a></p>\n<p>ES查询使用</p>\n<p><a href=\"https://www.cnblogs.com/yjf512/p/4897294.html\" target=\"_blank\" rel=\"noopener\">elasticsearch 查询（match和term）</a></p>\n<p><strong>聚合</strong>操作可以算是ES中实现一些复杂操作的方式，</p>\n<p><a href=\"https://blog.csdn.net/donghaixiaolongwang/article/details/58597058\" target=\"_blank\" rel=\"noopener\">Elasticsearch–Aggregation详细总结（聚合统计）</a></p>\n<p><a href=\"https://blog.csdn.net/xialei199023/article/details/48298635\" target=\"_blank\" rel=\"noopener\">实时搜索引擎Elasticsearch（4）——Aggregations （聚合）API的使用</a></p>\n<p><a href=\"https://www.jianshu.com/p/6e28c967d872\" target=\"_blank\" rel=\"noopener\">使用Elasticsearch实现统计(golang)</a></p>\n<p>对于随时查找并使用的场景，可以查看官方的手册：</p>\n<p><a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/current/preface.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/cn/elasticsearch/guide/current/preface.html</a></p>\n<h2 id=\"搜索解决的问题（随时更新）\"><a href=\"#搜索解决的问题（随时更新）\" class=\"headerlink\" title=\"搜索解决的问题（随时更新）\"></a>搜索解决的问题（随时更新）</h2><p><a href=\"https://stackoverflow.com/questions/28189725/find-distinct-values-not-distinct-counts-in-elasticsearch\" target=\"_blank\" rel=\"noopener\">Distinct ES实现方法</a></p>\n","categories":[{"name":"Elastic Search","slug":"Elastic-Search","permalink":"chunlife.top/categories/Elastic-Search/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"Elastic Search","slug":"Elastic-Search","permalink":"chunlife.top/tags/Elastic-Search/"}]},{"title":"技术博客的重要性","date":"2018-12-24T14:24:55.000Z","path":"2018/12/24/技术博客的重要性/","content":"<p>本篇文章由我翻译自：<a href=\"https://akomljen.com/the-importance-of-tech-blogging/\" target=\"_blank\" rel=\"noopener\">https://akomljen.com/the-importance-of-tech-blogging/</a>，翻译难免出现差错，尽请谅解。</p>\n<a id=\"more\"></a>\n<p>我有很多干货将在博客上分享，这实际上已经是我的第三个技术博客，算是比较的成功的。很多优秀的工程师有很多优秀的想法，但经常找不到开始动笔分享的理由。通常你会听到“我没有时间去写”这样的话，或者他们只是看不到这件事的重要之处。他们不了解博客如何在专业性领域帮助他们。现在，对你来说更重要的是将自己分享给世界，作为技术人员，我们应该成为一个榜样。</p>\n<h2 id=\"为什么要开始写博客？\"><a href=\"#为什么要开始写博客？\" class=\"headerlink\" title=\"为什么要开始写博客？\"></a>为什么要开始写博客？</h2><p>首先我来回答这个问题，为什么？</p>\n<p>这有很多答案，但其中最重要的一个原因是——曝光。作为计算机软件工程师，我们工作范围非常广泛，同时也面对着来自世界不同地区的竞争。<strong>你应该用着眼更大的范围去思考和行动！</strong></p>\n<p>科技世界简历的作用越来越低效，让人们找到你，读到你正在做的事情，之后，这些人总会提供一些东西给你——这也是曝光为何显得如此重要的原因了。根据我作为DevOps工程师的个人经验，我很少发送简历。实际上我自己都不知道上次发简历的时间了。你几乎能在任何地方看到我的文章，HR或公司每周都会直接与我联系。<strong>机会主动靠近我，而不是我去寻找机会。</strong></p>\n<p>记住以上所有内容，你还将学到更多关于写作的知识。</p>\n<p><img src=\"1545658771436.png\" alt=\"分享博客\"></p>\n<h2 id=\"从哪儿开始？\"><a href=\"#从哪儿开始？\" class=\"headerlink\" title=\"从哪儿开始？\"></a>从哪儿开始？</h2><p>你可以写下你最近做过的有趣的事情，或者写一些你想要更好理解的事情。不要试图找到一个完美的写作由头。在学习<a href=\"https://akomljen.com/tag/kubernetes/\" target=\"_blank\" rel=\"noopener\">Kubernetes的过程中</a>，我一直努力寻找帮助我开始学习的好文章。我如今正在写很多关于Kubernetes的文章。再举一个例子，我的未婚妻等了好几年才开始写博客。她不相信她的内容对某人来说会很有趣，并且一直让她感到厌烦。我很自豪她开始了，现在她的写作比我更多。我建议你阅读她关于如何掌握生活改变的两篇博文：</p>\n<ul>\n<li><a href=\"https://gattabrava.com/mastering-life-change-the-unwelcome-kind/\" target=\"_blank\" rel=\"noopener\">掌握生活变化：不受欢迎的种类</a></li>\n<li><a href=\"https://gattabrava.com/mastering-life-change-the-invited-kind/\" target=\"_blank\" rel=\"noopener\">掌握生活变化：邀请的种类</a></li>\n</ul>\n<p><img src=\"1545659175572.png\" alt=\"秀恩爱\"></p>\n<p>不要花太多时间思考写什么以及你的博客应该是什么样子。基本上，你可以立即开始写一些谷歌文档。写作的同时也会得到一些新的想法。无论如何，你可能在一段时间里对第一篇文章并不是那么有感情，对于你投入了努力感觉显得并不重要。这是正常的。随着时间的推移，你将掌握你独有的技能。</p>\n<p>我提到这是我的第三篇博客。我写的是关于FreeBSD的提示和技巧，因为它是我首选的操作系统。这并不是很顺利（谁猜得到呢），几年前研究OpenShift时我决定写一篇关于如何在该平台上免费运行Wordpress博客的博客文章，我很快创建了名为TechBar的新博客并开始写作。新博客也不顺利。问题是我并不专注，一段时间后我完全停止写作。<strong>在博客方面，专注是关键。</strong></p>\n<h2 id=\"技术资料\"><a href=\"#技术资料\" class=\"headerlink\" title=\"技术资料\"></a>技术资料</h2><p>也许你已经写了一些东西，但现在你需要选择你的博客名称，域名，托管地点和其他技术内容。你可能会因为做出很多决定而迷失方向。它可能非常简单或非常复杂，具体取决于您选择的路径。我建议使用一些随时可用的主机平台与Wordpress或Ghost。Medium也是一种选择，但我不是粉丝。</p>\n<p>有很多可以使用的托管服务提供商。对于Wordpress，你可以使用<a href=\"https://www.bluehost.com/track/komljen/\" target=\"_blank\" rel=\"noopener\">Bluehost</a>，只需3.95美元/月，对于Ghost，有官方的<a href=\"https://ghost.org/pricing/\" target=\"_blank\" rel=\"noopener\">Ghost pro</a>计划，其中最便宜的是每月79美元。在我看来，Ghost pro对于初学者来说太贵了。我使用了两个平台，我更喜欢Ghost。只是我个人的偏好。我在<a href=\"https://m.do.co/c/60b55ed9afcf\" target=\"_blank\" rel=\"noopener\">DigitalOcean</a>上部署了Ghost，使用最小的VM进行备份只花了6美元/月。由于Cloudflare，它大部分时间都处于闲置状态，每天有1k用户。</p>\n<p>我是DevOps的人，我无法帮助自己不创建Terraform文件来启动VM，创建防火墙规则，启用备份，设置Cloudflare，复制所有文件并在Docker中启动Ghost博客。当然，使用像Docker和Let’s Encrypt这样的好东西 - 因为HTTPS是必须的。我的Terraform文件仍未准备好共享，但这里是docker compose文件，你可以使用它来启动Ghost博客并通过Let’s Encrypt获得免费的SSL证书：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">⚡ cat &gt; docker-compose.yml &lt;&lt;EOF</span><br><span class=\"line\">version: &apos;3&apos;</span><br><span class=\"line\">services:</span><br><span class=\"line\">   nginx:</span><br><span class=\"line\">     image: nginx</span><br><span class=\"line\">     container_name: nginx-proxy</span><br><span class=\"line\">     restart: always</span><br><span class=\"line\">     volumes:</span><br><span class=\"line\">       - certs:/etc/nginx/certs:ro</span><br><span class=\"line\">       - nginx_conf.d:/etc/nginx/conf.d</span><br><span class=\"line\">       - nginx_vhost.d:/etc/nginx/vhost.d</span><br><span class=\"line\">       - nginx_html:/usr/share/nginx/html</span><br><span class=\"line\">     labels:</span><br><span class=\"line\">       - &quot;com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy&quot;</span><br><span class=\"line\">     ports:</span><br><span class=\"line\">       - &quot;80:80&quot;</span><br><span class=\"line\">       - &quot;443:443&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">   nginx-gen:</span><br><span class=\"line\">     image: jwilder/docker-gen</span><br><span class=\"line\">     restart: always</span><br><span class=\"line\">     command: -notify-sighup nginx-proxy -watch /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf</span><br><span class=\"line\">     volumes:</span><br><span class=\"line\">       - ./files/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro</span><br><span class=\"line\">       - /var/run/docker.sock:/tmp/docker.sock:ro</span><br><span class=\"line\">       - certs:/etc/nginx/certs:ro</span><br><span class=\"line\">       - nginx_conf.d:/etc/nginx/conf.d</span><br><span class=\"line\">       - nginx_vhost.d:/etc/nginx/vhost.d</span><br><span class=\"line\">     depends_on:</span><br><span class=\"line\">       - nginx</span><br><span class=\"line\">     labels:</span><br><span class=\"line\">       - &quot;com.github.jrcs.letsencrypt_nginx_proxy_companion.docker_gen&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">   nginx-letsencrypt:</span><br><span class=\"line\">     image: jrcs/letsencrypt-nginx-proxy-companion:stable</span><br><span class=\"line\">     restart: always</span><br><span class=\"line\">     volumes:</span><br><span class=\"line\">       - certs:/etc/nginx/certs</span><br><span class=\"line\">       - nginx_vhost.d:/etc/nginx/vhost.d</span><br><span class=\"line\">       - nginx_html:/usr/share/nginx/html</span><br><span class=\"line\">       - /var/run/docker.sock:/var/run/docker.sock:ro</span><br><span class=\"line\">     depends_on:</span><br><span class=\"line\">       - nginx</span><br><span class=\"line\">       - nginx-gen</span><br><span class=\"line\"></span><br><span class=\"line\">   ghost:</span><br><span class=\"line\">     image: ghost:1.24.7-alpine</span><br><span class=\"line\">     restart: always</span><br><span class=\"line\">     volumes:</span><br><span class=\"line\">       - ./data:/var/lib/ghost/content</span><br><span class=\"line\">       - ./files/config.production.json:/var/lib/ghost/config.production.json</span><br><span class=\"line\">     environment:</span><br><span class=\"line\">       - VIRTUAL_HOST=&lt;YOUR_DOMAIN&gt;, www.&lt;YOUR_DOMAIN&gt;</span><br><span class=\"line\">       - LETSENCRYPT_HOST=&lt;YOUR_DOMAIN&gt;, www.&lt;YOUR_DOMAIN&gt;</span><br><span class=\"line\">       - LETSENCRYPT_EMAIL=&lt;YOUR_EMAIL&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  nginx_vhost.d:</span><br><span class=\"line\">  nginx_conf.d:</span><br><span class=\"line\">  nginx_html:</span><br><span class=\"line\">  certs:</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p>在使用此文件之前，你需要准备好域名并执行一些准备步骤：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">⚡ mkdir files</span><br><span class=\"line\"></span><br><span class=\"line\">⚡ curl https://raw.githubusercontent.com/jwilder/nginx-proxy/master/nginx.tmpl &gt; files/nginx.tmpl</span><br><span class=\"line\"></span><br><span class=\"line\">⚡ cat &gt; files/config.production.json &lt;&lt;EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;url&quot;: &quot;http://&lt;YOUR_DOMAIN&gt;/&quot;,</span><br><span class=\"line\">  &quot;server&quot;: &#123;</span><br><span class=\"line\">    &quot;port&quot;: 2368,</span><br><span class=\"line\">    &quot;host&quot;: &quot;0.0.0.0&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;database&quot;: &#123;</span><br><span class=\"line\">    &quot;client&quot;: &quot;sqlite3&quot;,</span><br><span class=\"line\">    &quot;connection&quot;: &#123;</span><br><span class=\"line\">      &quot;filename&quot;: &quot;/var/lib/ghost/content/data/ghost.db&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;mail&quot;: &#123;</span><br><span class=\"line\">    &quot;transport&quot;: &quot;Direct&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;logging&quot;: &#123;</span><br><span class=\"line\">    &quot;transports&quot;: [</span><br><span class=\"line\">      &quot;file&quot;,</span><br><span class=\"line\">      &quot;stdout&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;process&quot;: &quot;systemd&quot;,</span><br><span class=\"line\">  &quot;paths&quot;: &#123;</span><br><span class=\"line\">    &quot;contentPath&quot;: &quot;/var/lib/ghost/content&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">⚡ docker-compose.yml up -d</span><br></pre></td></tr></table></figure>\n<p>这就是我在这个博客中使用的内容，也是我未婚妻的博客<a href=\"https://gattabrava.com/\" target=\"_blank\" rel=\"noopener\">Gatta Brava</a>在Terraform的帮助下也做了同样的事情。</p>\n<p>对于这两个博客，我付出了比想象中更多的努力。我买了一个自定义主题并做了一些定制。我不知道我在CSS方面做了什么，但我尝试过，我对最终结果感到满意。你可以使用默认的Ghost Casper主题来进行写作。你可以随时更改它，所以不用担心。</p>\n<p>我博客的所有访问量中有90％来自自然搜索。在搜索引擎优化和营销方面，我学到了很多东西。所有这些事情都无法在一夜之间学会，所以请写下并学习如何宣传您的内容。有时你会得到很好的反馈，这会增强你的信心。<strong>博客是你的个人项目。</strong>你做出的所有决策，将它将绽放光芒。</p>\n<p>我建议观看Troy Hunt关于如何破解你的职业生涯的演讲（ hack your career）。</p>\n","categories":[{"name":"学习","slug":"学习","permalink":"chunlife.top/categories/学习/"}],"tags":[{"name":"学习","slug":"学习","permalink":"chunlife.top/tags/学习/"},{"name":"博客","slug":"博客","permalink":"chunlife.top/tags/博客/"}]},{"title":"程序员的简历就该这样写","date":"2018-12-14T08:40:42.000Z","path":"2018/12/14/程序员的简历之道/","content":"<p>感觉对我是非常有指导意义的，那看到了实在忍不住就收藏了，收藏了觉着还不得劲，非得转载才安心（要是侵犯了作者权益，请联系我直接删除，非常感谢作者）。</p>\n<a id=\"more\"></a>\n<h2 id=\"程序员的简历就该这样写\"><a href=\"#程序员的简历就该这样写\" class=\"headerlink\" title=\"程序员的简历就该这样写\"></a><a href=\"https://github.com/Snailclimb/JavaGuide/blob/master/面试必备/程序员的简历之道.md\" target=\"_blank\" rel=\"noopener\">程序员的简历就该这样写</a></h2><h3 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1 前言\"></a>1 前言</h3><p><font color=\"red\">一份好的简历可以在整个申请面试以及面试过程中起到非常好的作用。</font> 在不夸大自己能力的情况下，写出一份好的简历也是一项很棒的能力。</p>\n<h3 id=\"2-为什么说简历很重要？\"><a href=\"#2-为什么说简历很重要？\" class=\"headerlink\" title=\"2 为什么说简历很重要？\"></a>2 为什么说简历很重要？</h3><h4 id=\"2-1-先从面试前来说\"><a href=\"#2-1-先从面试前来说\" class=\"headerlink\" title=\"2.1 先从面试前来说\"></a>2.1 先从面试前来说</h4><p>假如你是网申，你的简历必然会经过HR的筛选，一张简历HR可能也就花费10秒钟看一下，然后HR就会决定你这一关是Fail还是Pass。</p>\n<p>假如你是内推，如果你的简历没有什么优势的话，就算是内推你的人再用心，也无能为力。</p>\n<p>另外，就算你通过了筛选，后面的面试中，面试官也会根据你的简历来判断你究竟是否值得他花费很多时间去面试。</p>\n<p>所以，简历就像是我们的一个门面一样，它在很大程度上决定了你能否进入到下一轮的面试中。</p>\n<h4 id=\"2-2-再从面试中来说\"><a href=\"#2-2-再从面试中来说\" class=\"headerlink\" title=\"2.2 再从面试中来说\"></a>2.2 再从面试中来说</h4><p>我发现大家比较喜欢看面经 ，这点无可厚非，但是大部分面经都没告诉你很多问题都是在特定条件下才问的。举个简单的例子：一般情况下你的简历上注明你会的东西才会被问到（Java、数据结构、网络、算法这些基础是每个人必问的），比如写了你会 redis,那面试官就很大概率会问你 redis 的一些问题。比如：redis的常见数据类型及应用场景、redis是单线程为什么还这么快、 redis 和 memcached 的区别、redis 内存淘汰机制等等。</p>\n<p>所以，首先，你要明确的一点是：<strong>你不会的东西就不要写在简历上</strong>。另外，<strong>你要考虑你该如何才能让你的亮点在简历中凸显出来</strong>，比如：你在某某项目做了什么事情解决了什么问题（只要有项目就一定有要解决的问题）、你的某一个项目里使用了什么技术后整体性能和并发量提升了很多等等。</p>\n<p>面试和工作是两回事，聪明的人会把面试官往自己擅长的领域领，其他人则被面试官牵着鼻子走。虽说面试和工作是两回事，但是你要想要获得自己满意的 offer ，你自身的实力必须要强。</p>\n<h3 id=\"3-下面这几点你必须知道\"><a href=\"#3-下面这几点你必须知道\" class=\"headerlink\" title=\"3 下面这几点你必须知道\"></a>3 下面这几点你必须知道</h3><ol>\n<li>大部分公司的HR都说我们不看重学历（骗你的！），但是如果你的学校不出众的话，很难在一堆简历中脱颖而出，除非你的简历上有特别的亮点，比如：某某大厂的实习经历、获得了某某大赛的奖等等。</li>\n<li><strong>大部分应届生找工作的硬伤是没有工作经验或实习经历，所以如果你是应届生就不要错过秋招和春招。一旦错过，你后面就极大可能会面临社招，这个时候没有工作经验的你可能就会面临各种碰壁，导致找不到一个好的工作</strong></li>\n<li><strong>写在简历上的东西一定要慎重，这是面试官大量提问的地方；</strong></li>\n<li><strong>将自己的项目经历完美的展示出来非常重要。</strong></li>\n</ol>\n<h3 id=\"4-必须了解的两大法则\"><a href=\"#4-必须了解的两大法则\" class=\"headerlink\" title=\"4  必须了解的两大法则\"></a>4  必须了解的两大法则</h3><p><strong>①STAR法则（Situation Task Action Result）：</strong></p>\n<ul>\n<li><strong>Situation：</strong> 事情是在什么情况下发生；</li>\n<li><strong>Task:：</strong> 你是如何明确你的任务的；</li>\n<li><strong>Action：</strong> 针对这样的情况分析，你采用了什么行动方式；</li>\n<li><strong>Result：</strong> 结果怎样，在这样的情况下你学习到了什么。</li>\n</ul>\n<p>简而言之，STAR法则，就是一种讲述自己故事的方式，或者说，是一个清晰、条理的作文模板。不管是什么，合理熟练运用此法则，可以轻松的对面试官描述事物的逻辑方式，表现出自己分析阐述问题的清晰性、条理性和逻辑性。</p>\n<p>下面这段内容摘自百度百科，我觉得写的非常不错：</p>\n<blockquote>\n<p>STAR法则，500强面试题回答时的技巧法则，备受面试者成功者和500强HR的推崇。<br>由于这个法则被广泛应用于面试问题的回答，尽管我们还在写简历阶段，但是，写简历时能把面试的问题就想好，会使自己更加主动和自信，做到简历，面试关联性，逻辑性强，不至于在一个月后去面试，却把简历里的东西都忘掉了（更何况有些朋友会稍微夸大简历内容）<br>在我们写简历时，每个人都要写上自己的工作经历，活动经历，想必每一个同学，都会起码花上半天甚至更长的时间去搜寻脑海里所有有关的经历，争取找出最好的东西写在简历上。<br>但是此时，我们要注意了，简历上的任何一个信息点都有可能成为日后面试时的重点提问对象，所以说，不能只管写上让自己感觉最牛的经历就完事了，要想到今后，在面试中，你所写的经历万一被面试官问到，你真的能回答得流利，顺畅，且能通过这段经历，证明自己正是适合这个职位的人吗？</p>\n</blockquote>\n<p><strong>②FAB 法则（Feature Advantage Benefit）：</strong></p>\n<ul>\n<li><strong>Feature：</strong> 是什么；</li>\n<li><strong>Advantage：</strong> 比别人好在哪些地方；</li>\n<li><strong>Benefit：</strong> 如果雇佣你，招聘方会得到什么好处。</li>\n</ul>\n<p>简单来说，这个法则主要是让你的面试官知道你的优势、招了你之后对公司有什么帮助。</p>\n<h3 id=\"5-项目经历怎么写？\"><a href=\"#5-项目经历怎么写？\" class=\"headerlink\" title=\"5 项目经历怎么写？\"></a>5 项目经历怎么写？</h3><p>简历上有一两个项目经历很正常，但是真正能把项目经历很好的展示给面试官的非常少。对于项目经历大家可以考虑从如下几点来写：</p>\n<ol>\n<li>对项目整体设计的一个感受</li>\n<li>在这个项目中你负责了什么、做了什么、担任了什么角色</li>\n<li>从这个项目中你学会了那些东西，使用到了那些技术，学会了那些新技术的使用</li>\n<li>另外项目描述中，最好可以体现自己的综合素质，比如你是如何协调项目组成员协同开发的或者在遇到某一个棘手的问题的时候你是如何解决的又或者说你在这个项目用了什么技术实现了什么功能比如:用redis做缓存提高访问速度和并发量、使用消息队列削峰和降流等等。</li>\n</ol>\n<h3 id=\"6-专业技能该怎么写？\"><a href=\"#6-专业技能该怎么写？\" class=\"headerlink\" title=\"6 专业技能该怎么写？\"></a>6 专业技能该怎么写？</h3><p>先问一下你自己会什么，然后看看你意向的公司需要什么。一般HR可能并不太懂技术，所以他在筛选简历的时候可能就盯着你专业技能的关键词来看。对于公司有要求而你不会的技能，你可以花几天时间学习一下，然后在简历上可以写上自己了解这个技能。比如你可以这样写(下面这部分内容摘自我的简历，大家可以根据自己的情况做一些修改和完善)：</p>\n<ul>\n<li>计算机网络、数据结构、算法、操作系统等课内基础知识：掌握</li>\n<li>Java 基础知识：掌握</li>\n<li>JVM 虚拟机（Java内存区域、虚拟机垃圾算法、虚拟垃圾收集器、JVM内存管理）：掌握</li>\n<li>高并发、高可用、高性能系统开发：掌握</li>\n<li>Struts2、Spring、Hibernate、Ajax、Mybatis、JQuery ：掌握</li>\n<li>SSH 整合、SSM 整合、 SOA 架构：掌握</li>\n<li>Dubbo： 掌握</li>\n<li>Zookeeper: 掌握</li>\n<li>常见消息队列: 掌握</li>\n<li>Linux：掌握</li>\n<li>MySQL常见优化手段：掌握 </li>\n<li>Spring Boot +Spring Cloud +Docker:了解</li>\n<li>Hadoop 生态相关技术中的 HDFS、Storm、MapReduce、Hive、Hbase ：了解</li>\n<li>Python 基础、一些常见第三方库比如OpenCV、wxpy、wordcloud、matplotlib：熟悉</li>\n</ul>\n<h3 id=\"7-开源程序员Markdown格式简历模板分享\"><a href=\"#7-开源程序员Markdown格式简历模板分享\" class=\"headerlink\" title=\"7 开源程序员Markdown格式简历模板分享\"></a>7 开源程序员Markdown格式简历模板分享</h3><p>分享一个Github上开源的程序员简历模板。包括PHP程序员简历模板、iOS程序员简历模板、Android程序员简历模板、Web前端程序员简历模板、Java程序员简历模板、C/C++程序员简历模板、NodeJS程序员简历模板、架构师简历模板以及通用程序员简历模板 。<br>Github地址：<a href=\"https://github.com/geekcompany/ResumeSample\" target=\"_blank\" rel=\"noopener\">https://github.com/geekcompany/ResumeSample</a></p>\n<p>我的下面这篇文章讲了如何写一份Markdown格式的简历，另外，文中还提到了一种实现 Markdown 格式到PDF、HTML、JPEG这几种格式的转换方法。</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&amp;mid=2247484347&amp;idx=1&amp;sn=a986ea7e199871999a5257bd3ed78be1&amp;chksm=fd9855dacaefdccc2c5d5f8f79c4aa1b608ad5b42936bccaefb99a850a2e6e8e2e910e1b3153&amp;token=719595858&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">手把手教你用Markdown写一份高质量的简历</a></p>\n<h3 id=\"8-其他的一些小tips\"><a href=\"#8-其他的一些小tips\" class=\"headerlink\" title=\"8 其他的一些小tips\"></a>8 其他的一些小tips</h3><ol>\n<li>尽量避免主观表述，少一点语义模糊的形容词，尽量要简洁明了，逻辑结构清晰。</li>\n<li>注意排版（不需要花花绿绿的），尽量使用Markdown语法。</li>\n<li>如果自己有博客或者个人技术栈点的话，写上去会为你加分很多。</li>\n<li>如果自己的Github比较活跃的话，写上去也会为你加分很多。</li>\n<li>注意简历真实性，一定不要写自己不会的东西，或者带有欺骗性的内容</li>\n<li>项目经历建议以时间倒序排序，另外项目经历不在于多，而在于有亮点。</li>\n<li>如果内容过多的话，不需要非把内容压缩到一页，保持排版干净整洁就可以了。</li>\n<li>简历最后最好能加上：“感谢您花时间阅读我的简历，期待能有机会和您共事。”这句话，显的你会很有礼貌。</li>\n</ol>\n","categories":[{"name":"学习","slug":"学习","permalink":"chunlife.top/categories/学习/"}],"tags":[{"name":"简历","slug":"简历","permalink":"chunlife.top/tags/简历/"},{"name":"学习","slug":"学习","permalink":"chunlife.top/tags/学习/"},{"name":"转载","slug":"转载","permalink":"chunlife.top/tags/转载/"}]},{"title":"第一期","date":"2018-12-14T06:50:06.000Z","path":"2018/12/14/第一期/","content":"<p><img src=\"乔布斯.png\" alt=\"乔布斯\"></p>\n<p>什么事都需要一个开头，也许是兴趣使然，也许是纯属特闲，一切都是这么自然而然，很多时候我们都会迷茫，不清楚未来的方向，谁能搞得清楚自己真的会往哪边走呢，我们需要的也仅是一处避风之所，随心而动，望万事和谐。</p>\n<p>1、<a href=\"http://tech.163.com/18/1214/08/E2VL8R5F00097U7S.html\" target=\"_blank\" rel=\"noopener\">品牌争议性太大 三星取消与意大利Supreme合作</a></p>\n<p>在本周举办的三星A8s发布会上，三星宣布与Supreme进行品牌联合，但仅在发布会举办期间，微博各路大V已开始质疑Supreme发言人发表的相关言论，以及穿着的衣服款式并不属于美国潮牌Supreme。</p>\n<p>发布会后，三星高管在微博与网友进行强行解释（已删除），表示Supreme为意大利Supreme。</p>\n<p>后，美国Supreme不承认与三星进行合作（意大利Supreme与美国Supreme有着宿怨，一般意大利Supreme可以被理解为美国Supreme的山寨牌）。</p>\n<p>2、<a href=\"https://www.bbc.com/zhongwen/simp/business-46517846\" target=\"_blank\" rel=\"noopener\">中国法院给予苹果临时禁令，高通称或将申请强制执行</a></p>\n<p>高通与苹果在全球展开激烈的专利战，相爱相杀。</p>\n<p>此次在中国涉及到的专利纠纷主要涉及：</p>\n<ul>\n<li>一项涉及调整照片的大小和外观；</li>\n<li>一项涉及应用程序在触摸屏上操作时的管理方式；</li>\n</ul>\n<p>已禁止包括iPhone X之前的几乎所有还在生产的iPhone型号。</p>\n<p>对此苹果公司表示尊重法院裁定，但其未接受法院的审判结果，消费者依然可以正常购买iPhone。</p>\n<p>此为专利纠纷案，福州中院表示只接受一次诉讼。而高通在之后的动作中表示会继续诉讼下去，争取禁止掉iPhone最新发布的手机。</p>\n<p>有趣的是，某科技企业副总裁发文（未找到截图出处，真假未考证）：</p>\n<p><img src=\"李楠评论.jpg\" alt=\"李楠评论\"></p>\n<p>4、<a href=\"http://www.xinhuanet.com/tech/2018-12/13/c_1123844656.htm\" target=\"_blank\" rel=\"noopener\">三星手机天津工厂月底停产</a></p>\n<p>今年4月份，三星深圳电子通信公司宣布关闭，三百多名中国员工被遣散，公司内部的韩国高管也被派遣回国，随后就有消息传出，三星天津通信技术有限公司也面临关闭。</p>\n<p>三星天津工厂现有员工约2600名，每年出产智能手机约3600万部左右。</p>\n<p>5、<a href=\"https://cn.engadget.com/2018/12/11/vivo-nex-dual-screen-edition/\" target=\"_blank\" rel=\"noopener\">vivo Nex双屏版发布</a></p>\n<p>高通骁龙 845，提供最高 10GB 的 RAM。</p>\n<p>双屏版作为解放前置摄像头的另一个尝试，真正的使用效率需要经历市场考验，虽然与之前魅族pro7有着不一样的设计语言，但确实与主流相差甚远，作为又一部试水产品，vivo今年的一系列操作确实是大大的拉高了品牌的附加价值。</p>\n","categories":[{"name":"随笔","slug":"随笔","permalink":"chunlife.top/categories/随笔/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"chunlife.top/tags/随笔/"},{"name":"手机","slug":"手机","permalink":"chunlife.top/tags/手机/"}]},{"title":"网关插件编写","date":"2018-12-13T14:56:08.000Z","path":"2018/12/13/网关插件编写/","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>在使用网关的过程中，可能需要对已有功能进行一些扩展，这个时候就需要对网关进行一些改造工作，在gateway中，除了一些核心模块外，相关的功能模块都采用插件的形式进行实现，例如：黑白名单，熔断器，JWT，限流等，所以，在功能上的扩展上是可以按照插件的形式进行添加的，这也是gateway作者推荐的操作。</p>\n<a id=\"more\"></a>\n<h2 id=\"接口interface\"><a href=\"#接口interface\" class=\"headerlink\" title=\"接口interface\"></a>接口interface</h2><p>插件的实现依赖于gateway给出的两个接口：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Context filter context</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Context <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tStartAt() time.Time</span><br><span class=\"line\">\tEndAt() time.Time</span><br><span class=\"line\"></span><br><span class=\"line\">\tOriginRequest() *fasthttp.RequestCtx</span><br><span class=\"line\">\tForwardRequest() *fasthttp.Request</span><br><span class=\"line\">\tResponse() *fasthttp.Response</span><br><span class=\"line\"></span><br><span class=\"line\">\tAPI() *metapb.API</span><br><span class=\"line\">\tDispatchNode() *metapb.DispatchNode</span><br><span class=\"line\">\tServer() *metapb.Server</span><br><span class=\"line\">\tAnalysis() *util.Analysis</span><br><span class=\"line\"></span><br><span class=\"line\">\tSetAttr(key <span class=\"keyword\">string</span>, value <span class=\"keyword\">interface</span>&#123;&#125;)</span><br><span class=\"line\">\tGetAttr(key <span class=\"keyword\">string</span>) <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BaseFilter base filter support default implemention</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> BaseFilter <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Init init filter</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f BaseFilter)</span> <span class=\"title\">Init</span><span class=\"params\">(cfg <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Pre execute before proxy</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f BaseFilter)</span> <span class=\"title\">Pre</span><span class=\"params\">(c Context)</span> <span class=\"params\">(statusCode <span class=\"keyword\">int</span>, err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fasthttp.StatusOK, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Post execute after proxy</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f BaseFilter)</span> <span class=\"title\">Post</span><span class=\"params\">(c Context)</span> <span class=\"params\">(statusCode <span class=\"keyword\">int</span>, err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fasthttp.StatusOK, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PostErr execute proxy has errors</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f BaseFilter)</span> <span class=\"title\">PostErr</span><span class=\"params\">(c Context)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这些相关的定义都在<code>github.com/fagongzi/gateway/pkg/filter</code>包中，每一个Filter都需要导入。其中的<code>Context</code>的上下文接口，提供了Filter和Gateway交互的能力；<code>BaseFilter</code>定义了默认行为。</p>\n<p>在实际代码中，<code>Context</code>可以让插件在全局获取到route请求中的数据，例如API绑定到网关时，用户填写的相关配置——<code>API()</code>，HTTP请求的request——<code>ForwardRequest()</code>，后台接口返回的结果——<code>Response()</code>。</p>\n<p><code>BaseFilter</code>作为插件的响应动作，并不强制实现所有函数，这里只有两个比较重要的函数需要被关注到，<code>Pre</code>和<code>Post</code>，<code>Pre</code>作为网关在转发请求到后台时的前置性操作，例如黑名单功能插件就需要在<code>Pre</code>函数中判断URI是否匹配预先设置的正则表达式。例如接下来需要实现的一个webhook功能，可能就需要在<code>post</code>中进行一些操作，根据接口返回的一些信息来决定是否访问一些接口。</p>\n<h2 id=\"Request处理流程\"><a href=\"#Request处理流程\" class=\"headerlink\" title=\"Request处理流程\"></a>Request处理流程</h2><p>request -&gt; filter预处理 -&gt; 转发请求 -&gt; filter后置处理 -&gt; 响应客户端</p>\n<p>整个逻辑处理符合以下规则:</p>\n<ul>\n<li>filter预处理返回错误，流程立即终止，并且使用filter返回的状态码响应客户端</li>\n<li>filter后置处理返回错误，使用filter返回的状态码响应客户端</li>\n<li>转发请求，后端返回的状态码<code>&gt;=500</code>，调用filter的错误处理接口</li>\n</ul>\n<p>这里直接截取gateway官方的帮助文档中的内容，代码所体现的内容正如流程所说的。</p>\n<p><code>main</code> ——&gt;</p>\n<p>proxy.go</p>\n<p> <code>Start()</code>——&gt; <code>ServeFastHTTP</code> ——&gt; <code>p.doProxy</code>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// pre filters  轮询调用所有注册过的插件的pre函数</span></span><br><span class=\"line\">filterName, code, err := p.doPreFilters(c)</span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// post filters 轮询调用所有注册过的插件的post函数</span></span><br><span class=\"line\">filterName, code, err = p.doPostFilters(c)</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<h2 id=\"编写插件\"><a href=\"#编写插件\" class=\"headerlink\" title=\"编写插件\"></a>编写插件</h2><p>预先设定一个简单的需求，例如，在一些特定的接口访问成功后，访问一个特定的地址，传输一些信息给这个地址。</p>\n<p>插件操作简单，不需要一些附加的逻辑，所有编写这个插件，只需要完成<code>BaseFilter</code>的相关函数即可，这里先完成一个大概的框架。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// WebHookFilter is an event handler that triggers web hooks</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> WebHookFilter <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tfilter.BaseFilter</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Name name</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(w *WebHookFilter)</span> <span class=\"title\">Name</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> FilterWebHook</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newWebHookFilter</span><span class=\"params\">()</span> <span class=\"title\">filter</span>.<span class=\"title\">Filter</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;WebHookFilter&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Post execute after proxy</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(w *WebHookFilter)</span> <span class=\"title\">Post</span><span class=\"params\">(c filter.Context)</span> <span class=\"params\">(statusCode <span class=\"keyword\">int</span>, err error)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(c.API().GetTags()) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> fasthttp.StatusBadRequest, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> isNeedWebHook <span class=\"keyword\">bool</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, tags := <span class=\"keyword\">range</span> c.API().GetTags() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> tags.Name == <span class=\"string\">\"webhook\"</span> &amp;&amp; tags.Value == <span class=\"string\">\"true\"</span> &#123;</span><br><span class=\"line\">\t\t\tisNeedWebHook = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// web url传递一个统一的地址？</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> isNeedWebHook &amp;&amp; c.Response().StatusCode() == http.StatusOK &#123;</span><br><span class=\"line\">\t\tlog.Info(Send(c.Response().Body()))  <span class=\"comment\">// 处理逻辑</span></span><br><span class=\"line\">        <span class=\"comment\">// go Send(c.Response().Body())</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlog.Info(<span class=\"string\">\"webhook post exec!\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fasthttp.StatusOK, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到在<code>post</code>函数中，出现<code>c.API().GetTags()</code>，这里的tag是API设置时的一个可选填项，用于个性化标记一个API，用在这里是因为不想对已有的gateway参数进行增添，直接使用一个gateway的可选参数来定制自己的参数，算是一种偷懒少改代码的方式。</p>\n<p><code>Post</code>这里是一般压力的话，使用协程进行异步操作；若是访问比较频繁，就使用10个channel限制一下速度，慢慢发送数据；当然更顺畅的做法肯定是引入消息队列（MQ），不过当整个系统没这么复杂时，多上一个组件，可能也会造成一定量的维护负担（视业务来定）。</p>\n<p>若使用代码来设置API（一般使用前端UI较为方便）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sb := c.NewAPIBuilder()</span><br><span class=\"line\"><span class=\"comment\">// 必选项</span></span><br><span class=\"line\">sb.Name(<span class=\"string\">\"用户API\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 设置URL规则，匹配所有开头为/api/user的请求</span></span><br><span class=\"line\">sb.MatchURLPattern(<span class=\"string\">\"/hello/(.+)\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 匹配GET请求</span></span><br><span class=\"line\">sb.MatchMethod(<span class=\"string\">\"GET\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 添加tag</span></span><br><span class=\"line\">sb.AddTag(<span class=\"string\">\"webhook\"</span>, <span class=\"string\">\"true\"</span>)</span><br></pre></td></tr></table></figure>\n<p>到这里代码已完成一个大概的框架，可以看到编写逻辑非常简单，但若要插件插入gateway运行，还需要将插件信息注册gateway中，接口中的<code>Name()</code>需要和这里的name信息能够匹配。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--- &quot;gateway\\pkg\\proxy\\factory.go&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// Filter WebHook jwt filter</span><br><span class=\"line\">FilterWebHook = &quot;WEBHOOK&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func (p *Proxy) newFilter(filterSpec *FilterSpec) (filter.Filter, error) &#123;</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tswitch input &#123;</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\tcase FilterWebHook:</span><br><span class=\"line\">\t\treturn newWebHookFilter(), nil</span><br><span class=\"line\">\tdefault:</span><br><span class=\"line\">\t\treturn nil, ErrUnknownFilter</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">--- &quot;gateway\\cmd\\proxy\\proxy.go&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func init() &#123;</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\tdefaultFilters.Set(proxy.FilterWebHook)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>插件程序编写到这里，其实已经是可以正常运行了，但还缺了一个必要的环节，那就是可配置的参数信息，用于多机环境下进行工作，参数借助etcd进行分布式设置。</p>\n<h2 id=\"获取etcd配置\"><a href=\"#获取etcd配置\" class=\"headerlink\" title=\"获取etcd配置\"></a>获取etcd配置</h2><p><code>initDispatcher()</code>——&gt; <code>GetStoreFrom</code> ——&gt; <code>fn, ok := supportSchema[schema]</code> ——&gt; <code>getEtcdStoreFrom</code> ——&gt; <code>NewEtcdStore</code> ——&gt; <code>store.init()</code>，到这里就配置好各个插件取etcd配置的函数了,<strong>需要动手添加函数</strong>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *EtcdStore)</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\te.watchMethodMapping[EventSrcBind] = e.doWatchWithBind</span><br><span class=\"line\">\te.watchMethodMapping[EventSrcServer] = e.doWatchWithServer</span><br><span class=\"line\">\te.watchMethodMapping[EventSrcCluster] = e.doWatchWithCluster</span><br><span class=\"line\">\te.watchMethodMapping[EventSrcAPI] = e.doWatchWithAPI</span><br><span class=\"line\">\te.watchMethodMapping[EventSrcRouting] = e.doWatchWithRouting</span><br><span class=\"line\">\te.watchMethodMapping[EventSrcProxy] = e.doWatchWithProxy</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>函数是根据配置路径的前缀来匹配插件的配置的，而这些前缀同样也是需要提前写好的，<strong>需要动手添加函数</strong>， <code>NewEtcdStore</code> 函数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store := &amp;EtcdStore&#123;</span><br><span class=\"line\">    prefix:             prefix,</span><br><span class=\"line\">    clustersDir:        fmt.Sprintf(<span class=\"string\">\"%s/clusters\"</span>, prefix),</span><br><span class=\"line\">    serversDir:         fmt.Sprintf(<span class=\"string\">\"%s/servers\"</span>, prefix),</span><br><span class=\"line\">    bindsDir:           fmt.Sprintf(<span class=\"string\">\"%s/binds\"</span>, prefix),</span><br><span class=\"line\">    apisDir:            fmt.Sprintf(<span class=\"string\">\"%s/apis\"</span>, prefix),</span><br><span class=\"line\">    proxiesDir:         fmt.Sprintf(<span class=\"string\">\"%s/proxies\"</span>, prefix),</span><br><span class=\"line\">    routingsDir:        fmt.Sprintf(<span class=\"string\">\"%s/routings\"</span>, prefix),</span><br><span class=\"line\">    idPath:             fmt.Sprintf(<span class=\"string\">\"%s/id\"</span>, prefix),</span><br><span class=\"line\">    watchMethodMapping: <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[EvtSrc]<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(EvtType, *mvccpb.KeyValue)</span> *<span class=\"title\">Evt</span>),</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">base</span>:               100,</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">end</span>:                100,</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>接下来就是监听etcd的配置信息：</p>\n<p><code>p.dispatcher.load()</code> ——&gt; <code>go r.watch()</code> ——&gt; <code>r.store.Watch(r.watchEventC, r.watchStopC)</code> ——&gt; <code>e.doWatch()</code> ——&gt; <code>e.evtCh &lt;- e.watchMethodMapping[evtSrc](evtType, ev.Kv)</code></p>\n<p>根据etcd出发的事件，判断是哪个插件的配置进行更改或是删除，然后调用在 <code>store.init()</code>中配置的取etcd配置的函数（还未处理），再通过channel发送出去，<strong>需要动手添加一个case处理自定义的插件</strong>。</p>\n<p>在这个流程中的<code>go r.watch()</code>，有着另一条分支路线，<code>go r.readyToReceiveWatchEvent()</code>，<strong>这里也是需要我们添加函数处理的地方，用于根据etcd事件对参数进行实际处理（增删改）</strong>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *dispatcher)</span> <span class=\"title\">readyToReceiveWatchEvent</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tevt := &lt;-r.watchEventC</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> evt.Src == store.EventSrcCluster &#123;</span><br><span class=\"line\">\t\t\tr.doClusterEvent(evt)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> evt.Src == store.EventSrcServer &#123;</span><br><span class=\"line\">\t\t\tr.doServerEvent(evt)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> evt.Src == store.EventSrcBind &#123;</span><br><span class=\"line\">\t\t\tr.doBindEvent(evt)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> evt.Src == store.EventSrcAPI &#123;</span><br><span class=\"line\">\t\t\tr.doAPIEvent(evt)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> evt.Src == store.EventSrcRouting &#123;</span><br><span class=\"line\">\t\t\tr.doRoutingEvent(evt)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> evt.Src == store.EventSrcProxy &#123;</span><br><span class=\"line\">\t\t\tr.doProxyEvent(evt)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Warnf(<span class=\"string\">\"unknown event &lt;%+v&gt;\"</span>, evt)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，配置参数信息被保存到了结构体<code>dispatcher</code>中，当然若是新增的配置，这里依然是需要在结构体<code>dispatcher</code>中新增一个结构体成员来保存用于自定义插件的配置的。</p>\n<p>那如何使用这些配置呢？</p>\n<p>在context中，插件所使用的函数由proxyContext实现，<code>&quot;gateway\\pkg\\proxy\\filter.go&quot;</code>，这里保存了<code>dispatcher</code>的相关信息，可以由开发者自由拿取数据。</p>\n<p>至此，整个开发阶段全部完成，插件部分逻辑可随着业务更改而进行些许的更改，但整体插件的编写是不会出现太多变动的。</p>\n","categories":[{"name":"Go","slug":"Go","permalink":"chunlife.top/categories/Go/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"Gateway","slug":"Gateway","permalink":"chunlife.top/tags/Gateway/"}]},{"title":"《工厂女孩》、《打工男孩》观后感","date":"2018-12-12T09:50:22.000Z","path":"2018/12/12/《工厂女孩》、《打工男孩》观后感/","content":"<p>在2018年11月至12月期间，断断续续的将这两本书读完，感受颇大，里面的生活曾经就和我息息相关，差一点就变成了书中某个人物，当时的我一直疑惑：在这样的环境下，想和他们交朋友貌似有一些困难，他们不愿意和我多说一句话，过得一点也不痛快。现在想起，真是庆幸。</p>\n<a id=\"more\"></a>\n<p>书中描写了作者以工厂求职者（通俗叫普工）的身份到不同类型的工厂体验，与其说是体验，在我看来更像是“卧底”，在这里把所看所想全部以书面的形式体现出来，在作者身上好像找到了当时的我，最重要的是又让我知道了更多，也帮我解答了之前的疑惑。</p>\n<p>2016年年初，我含着泪水，从我最爱的他手中接过自己的行李，坐上从武昌站开往常平东站的火车，躺在自己的铺位上，从不舍的情绪中转为迷茫。下车后，有堂哥来接我，在东莞他是那个照顾我，收留我的人，更确切地说，堂哥夫妻俩帮我解决了生活上的后顾之忧，宽慰我找工作时不安的情绪，可我总是感觉到心中不愉快，正式开始在印刷厂工作后，每到下班的时候总是想在外面闲逛到天黑才回家。</p>\n<p>先从在东莞找工作说起吧，当我第一天出门去面试，走在路上，总感觉自己被很多人盯着，好似我是个异类，根据我以前对东莞的看法（应该是道听途说来的），不自觉地捂紧了自己的口袋，抓紧自己的手机。陆陆续续的去了好几家公司，都以我是应届毕业生，没有工作经验告终。其中有一家公司让我记忆深刻，直到现在我才明白，这家公司就是书中所说的老班（其实是与工厂合作的劳务公司）。现在还真是感谢自己的“精明”，面试官在给我面试的时候，不停地打听我来自何处，我的家乡他有多熟悉，有几个熟人，直到最后跟我讲工作性质后，语气不再似开始那么随和，更多的是以一种威逼利诱的形式告诉我这个工作需要我去工厂从一线做起，我需要熟悉公司的产品，公司的文化后才能回来这座写字楼中上班，当时的我一直在问：公司的业务是做什么？产品是什么？而他一直在跟我绕圈子，没有正面回答我。这大概就是他们常用的招式吧！当我准备乘坐电梯离开时，看到几个年龄与我相仿的男生，拖着行李，面带希望，开心的交谈着他们去工厂后，理想中的岗位。书中也有这样被带进工厂的人，从最开始的满怀希望，到抱怨不断，最后有逃离了的、有认命不愿挣扎的。</p>\n<p>经过数次的失败后，堂哥托人给我介绍了工作，是一家印刷厂，老板是香港人，厂内大部分人都是广东本地人。第一次去面试，在大堂等了大概一个多小时后被告知面试官没有时间，前台面带歉意的让我先回去，走出厂门后，去旁边的小店吃饭，如书中描述的吃饭的人，他们的表情，人们的动作，以及菜价都那么相似。当我回到家中，准备进行午休时，前台告知我面试官回来了，让我20分钟内赶到，在面试的时候，他不停地接打电话，最后索性在3分钟不到的时间内告诉我工作性质，工作内容，以及他的要求，不容考虑，可想而知双方都没有看上。可是生活就是这样兜来兜去，三天后另一个部门的经理让我过去面试，职位是跟单员，当时的我想着自己的跟单员证终于可以派上用场了，现实告诉我还是太年轻了。经理很诚意的告诉我工作需要加班，会很累，每周的休息时间，并表明愿意给我机会尝试。</p>\n<p>终于开始上班了，带我的是一个来自广西的女生，她很瘦，不爱说话，或许是因为太瘦了没有力气说话吧！在那段时间做的最多的事情是帮她拿打印的文件，陪她去送文件，当去厂房的时候，我居然有一点羡慕那里的文员，因为他们在不停的忙碌，可是跟他们沟通时，不愿多说一句，生产线上的男男女女见到有人过来，立马活跃了起来，围过来聊天，随即就被喊回去工作。吃饭的时候，路上的人总是三三两两的走在一起，靠近了听他们谈论的话题多是“某个男生/女生怎么样，做了什么事情，买了什么东西让他们很惊讶……”或许这是他们在暂停手上工作时最轻松的时刻。他们好像从来不会主动和新来的人说话，如果你主动亲近他们，他们会立刻的产生防御，警告我，禁止从他们身上套取任何信息。难道这不是很矛盾吗？喜欢和别人聊天放松自己，却又防御新来的同事；告诉别人自己的故事，却不允许别人主动和自己交朋友；想要知道的更多，却又不愿意自己的生活方式有所改变。</p>\n<p>或许他们曾经对未来充满希望，希望通过自己工作、加班获得额外的加班费、奖金改变人生轨迹，但是从未想过跳出工厂这个圈子，也许是工厂的环境早已经把他们磨得寡言少语，不允许问为什么，不需要明白做某件事的原理，只需要做到无条件的服从即可。任何有个性的想法在某些管理者看来皆是异类，会带坏他人，会影响大家的工作热情。工厂内，少了尊重，多了强迫；少了激情，多了服从；少了对未来的担忧，多了不知所谓的“快乐”。当我阅读完这两本书后，我开始庆幸，并感谢我身边的那个人，当我告诉他想要离开时，他给了我肯定的回答，变成了我坚强的后盾。</p>\n<p>在书中，描写了工人在一个充满臭味的，肮脏的环境下工作，接触对人体有害的物质，每天重复简单的动作，在工厂工作时间长，要加班，管制严格，不许说话，不准走神，换来的薪水不算多却可以满足农村不能满足的。工厂大多数只招年轻的女孩，年老的都不要，年轻的时光就只值这么点钱么？一个人的青春花在低劣的高耗能工作上，心痛，这是没文化的可怕。用身体去换暂时的金钱。工厂男女比例的失调，也是很多工厂女孩没有一段很好的爱情，被一些渣男像采蜜一样，完了就丢弃，没有性知识，去做人流，落得终身不育。</p>\n<p>唯一一个让我看到希望，感到欣慰的是女孩尽管受到老乡背地里使坏，被人阴，依然没有选择复仇，误入歧途，而是去学习打字，学习粤语，做一名文员，开始翻身。我同时也看到了在一个糟糕的环境下，承受不住，堕落，受伤的案例。</p>\n<p>不管自己处于多低层的社会，不管自己的身份多么低微，不管你有多穷，不要让自己变得对任何事情麻木，从而忘记拼搏。</p>\n<p><strong>我</strong>：很高兴能够看到某人看完书后写下的观后感，不管怎样，我们互相了解，隔阂不再变深。</p>\n","categories":[{"name":"随笔","slug":"随笔","permalink":"chunlife.top/categories/随笔/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"chunlife.top/tags/随笔/"}]},{"title":"文件上传服务器端","date":"2018-12-05T06:17:04.000Z","path":"2018/12/05/文件上传-服务器端/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在之前的项目中，有做过文件上传下载操作，当时对这些操作都不是非常熟悉，所以在实现功能上，停留在能正常工作的前提下，在找到更好的方法后，回头来尝试优化之前的解决方法。</p>\n<p>上传操作中，服务器常使用<code>ParseMultipartForm</code>，解析form表单传递的文件数据。</p>\n<a id=\"more\"></a>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// in the body of a http.HandlerFunc</span></span><br><span class=\"line\">err := r.ParseMultipartForm(<span class=\"number\">32</span> &lt;&lt; <span class=\"number\">20</span>) <span class=\"comment\">// 32Mb</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    http.Error(w, err.Error(), http.StatusBadRequest)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用函数<code>ParseMultipartForm</code>是没有问题的，它会解析http的request body。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ParseMultipartForm parses a request body as multipart/form-data.</span></span><br><span class=\"line\"><span class=\"comment\">// The whole request body is parsed and up to a total of maxMemory bytes of</span></span><br><span class=\"line\"><span class=\"comment\">// its file parts are stored in memory, with the remainder stored on</span></span><br><span class=\"line\"><span class=\"comment\">// disk in temporary files.</span></span><br><span class=\"line\"><span class=\"comment\">// ParseMultipartForm calls ParseForm if necessary.</span></span><br><span class=\"line\"><span class=\"comment\">// After one call to ParseMultipartForm, subsequent calls have no effect.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ParseMultipartForm将请求主体解析为multipart/form-data。</span></span><br><span class=\"line\"><span class=\"comment\">// 解析整个请求体，并将其文件的总maxMemory字节存储在内存中，其余部分存储在</span></span><br><span class=\"line\"><span class=\"comment\">// 临时文件中的磁盘。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *Request)</span> <span class=\"title\">ParseMultipartForm</span><span class=\"params\">(maxMemory <span class=\"keyword\">int64</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据注释，可以得知，不管文件是否过多，或者文件是否为serve端需要，这些文件都会被缓存，这里体现出这个函数对上传的操作性不是太强，若想要增强对文件上传一些限制操作，也就是在读取文件缓存前的一些限制。</p>\n<ul>\n<li>文件类型验证</li>\n<li>文件大小验证</li>\n<li>白名单“字段”</li>\n<li>按顺序解析字段，如果没有则终止</li>\n<li>如果任何验证失败，则提前终止</li>\n<li>没有预先分配</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// function body of a http.HandlerFunc</span></span><br><span class=\"line\">r.Body = http.MaxBytesReader(w, r.Body, <span class=\"number\">32</span>&lt;&lt;<span class=\"number\">20</span>+<span class=\"number\">1024</span>)</span><br><span class=\"line\">reader, err := r.MultipartReader()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    http.Error(w, err.Error(), http.StatusBadRequest)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// parse text field</span></span><br><span class=\"line\">text := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">512</span>)</span><br><span class=\"line\">p, err := reader.NextPart()</span><br><span class=\"line\"><span class=\"comment\">// one more field to parse, EOF is considered as failure here</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> p.FormName() != <span class=\"string\">\"text_field\"</span> &#123;</span><br><span class=\"line\">    http.Error(w, <span class=\"string\">\"text_field is expected\"</span>, http.StatusBadRequest)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_, err = p.Read(text)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &amp;&amp; err != io.EOF &#123;</span><br><span class=\"line\">    http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// parse file field</span></span><br><span class=\"line\">p, err = reader.NextPart()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &amp;&amp; err != io.EOF &#123;</span><br><span class=\"line\">    http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> p.FormName() != <span class=\"string\">\"file_field\"</span> &#123;</span><br><span class=\"line\">    http.Error(w, <span class=\"string\">\"file_field is expected\"</span>, http.StatusBadRequest)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">buf := bufio.NewReader(p)</span><br><span class=\"line\">sniff, _ := buf.Peek(<span class=\"number\">512</span>)   <span class=\"comment\">// 判断文件类型</span></span><br><span class=\"line\">contentType := http.DetectContentType(sniff)</span><br><span class=\"line\"><span class=\"keyword\">if</span> contentType != <span class=\"string\">\"application/zip\"</span> &#123;</span><br><span class=\"line\">    http.Error(w, <span class=\"string\">\"file type not allowed\"</span>, http.StatusBadRequest)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f, err := ioutil.TempFile(<span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\"><span class=\"keyword\">var</span> maxSize <span class=\"keyword\">int64</span> = <span class=\"number\">32</span> &lt;&lt; <span class=\"number\">20</span></span><br><span class=\"line\">lmt := io.MultiReader(buf, io.LimitReader(p, maxSize - <span class=\"number\">511</span>))</span><br><span class=\"line\">written, err := io.Copy(f, lmt)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &amp;&amp; err != io.EOF &#123;</span><br><span class=\"line\">    http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> written &gt; maxSize &#123;</span><br><span class=\"line\">    os.Remove(f.Name())</span><br><span class=\"line\">    http.Error(w, <span class=\"string\">\"file size over limit\"</span>, http.StatusBadRequest)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// schedule for other stuffs (s3, scanning, etc.)</span></span><br></pre></td></tr></table></figure>\n<p>内容参考自：<code>https://medium.com/@owlwalks/dont-parse-everything-from-client-multipart-post-golang-9280d23cd4ad</code>。</p>\n","categories":[{"name":"Go","slug":"Go","permalink":"chunlife.top/categories/Go/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"file","slug":"file","permalink":"chunlife.top/tags/file/"},{"name":"http","slug":"http","permalink":"chunlife.top/tags/http/"}]},{"title":"初次使用MongoDB","date":"2018-11-24T08:18:59.000Z","path":"2018/11/24/初次使用MongoDB/","content":"<h2 id=\"简单了解\"><a href=\"#简单了解\" class=\"headerlink\" title=\"简单了解\"></a>简单了解</h2><p>MongoDB在Go中是有官方的API接口库的，不过在官方开发库之前，一直是存在个人开发版（mgo），后来交由社区进行维护了，貌似此人也是与MongoDB官方进行合作进行官方库的开发。</p>\n<a id=\"more\"></a>\n<p>官方库大概是2018年出了第一版正式版，现在已经是正在服役阶段了。而不管是社区版还是官方版，且都是在个人版的基础上进行开发，这里都需要感谢<a href=\"https://github.com/niemeyer\" target=\"_blank\" rel=\"noopener\">niemeyer</a>。</p>\n<p>社区版：<a href=\"https://github.com/globalsign/mgo\" target=\"_blank\" rel=\"noopener\">https://github.com/globalsign/mgo</a></p>\n<p>官方版：<a href=\"https://github.com/mongodb/mongo-go-driver\" target=\"_blank\" rel=\"noopener\">https://github.com/mongodb/mongo-go-driver</a></p>\n<p>网上相对较多的资料还是以mgo的为主，比较mongo-go-driver相对较晚，基于同一主干，且mgo也并没有处于废弃状态，所以在使用上依然还是倾向于使用mgo，当然，在官方版更新了好几个版本后，后续会考虑将版本给更换过来。</p>\n<h2 id=\"基础操作\"><a href=\"#基础操作\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h2><h3 id=\"连接serve\"><a href=\"#连接serve\" class=\"headerlink\" title=\"连接serve\"></a>连接serve</h3><p>mgo：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解析MongoDB参数</span></span><br><span class=\"line\">mongo, err := mgo.ParseURL(<span class=\"string\">\"mongodb://localhost:27017/articles_demo_dev\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 1、连接MongoDB</span></span><br><span class=\"line\">s, err := mgo.Dial(<span class=\"string\">\"mongodb://localhost:27017/articles_demo_dev\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"Can't connect to mongo, go error %v\\n\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err.Error())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"comment\">// 2、选择数据库</span></span><br><span class=\"line\">coll := session.DB(mongo.Database)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3、选择表（集合）</span></span><br><span class=\"line\">coll.C(g.DbModuleBindFile)</span><br></pre></td></tr></table></figure>\n<p>mongo-go-driver：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1, 建立连接</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> client, err = mongo.Connect(context.TODO(), <span class=\"string\">\"mongodb://localhost:27017\"</span>, clientopt.ConnectTimeout(<span class=\"number\">5</span>*time.Second)); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2, 选择数据库my_db</span></span><br><span class=\"line\">database = client.Database(<span class=\"string\">\"my_db\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3, 选择表my_collection</span></span><br><span class=\"line\">collection = database.Collection(<span class=\"string\">\"my_collection\"</span>)</span><br></pre></td></tr></table></figure>\n<p>插入数据：</p>\n<p>MongoDB的ID是推特很早的时候开源的，tweet的ID。</p>\n<p>snowflake: 毫秒/微秒的当前时间 + 机器的ID + 当前毫秒/微秒内的自增ID(每当毫秒变化了, 会重置成0，继续自增）。</p>\n<p>mgo：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">idTest := bson.NewObjectId()</span><br><span class=\"line\">err = r.C.Insert(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"ID由开发者指定,否则MongoDB自己生成\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"_id\"</span>:  idTest,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插入多条数据</span></span><br><span class=\"line\">r.C.Insert(&amp;Person&#123;<span class=\"string\">\"Heln\"</span>, <span class=\"string\">\"31\"</span>&#125;,</span><br><span class=\"line\">           &amp;Person&#123;<span class=\"string\">\"Ana\"</span>, <span class=\"string\">\"32\"</span>&#125;,</span><br><span class=\"line\">           &amp;Person&#123;<span class=\"string\">\"A3a\"</span>, <span class=\"string\">\"27\"</span>&#125;,</span><br><span class=\"line\">           &amp;Person&#123;<span class=\"string\">\"Awa\"</span>, <span class=\"string\">\"24\"</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p>mongo-go-driver：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> result, err = collection.InsertOne(context.TODO(), <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"ID由开发者指定,否则MongoDB自己生成\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"one\"</span>:  <span class=\"string\">\"one\"</span>,</span><br><span class=\"line\">&#125;); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// _id: 默认生成一个全局唯一ID, ObjectID：12字节的二进制</span></span><br><span class=\"line\">docId = result.InsertedID.(objectid.ObjectID)</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"自增ID:\"</span>, docId.Hex())</span><br></pre></td></tr></table></figure>\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><p>mgo：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err = r.C.Find(bson.M&#123;<span class=\"string\">\"index_no\"</span>: <span class=\"string\">\"123\"</span>&#125;).</span><br><span class=\"line\">\tSelect(bson.M&#123;<span class=\"string\">\"_id\"</span>: <span class=\"number\">0</span>, <span class=\"string\">\"test\"</span>: <span class=\"number\">1</span>&#125;).One(&amp;tes)</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong>查询时，select中除了id外，其他要么是1，要么是0，否则将报错，select是选择返回的参数。</p>\n<p>mongo-go-driver：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 4, 按照jobName字段过滤, 想找出jobName=job10, 找出5条</span></span><br><span class=\"line\">cond = &amp;FindByJobName&#123;JobName: <span class=\"string\">\"job10\"</span>&#125; <span class=\"comment\">// &#123;\"jobName\": \"job10\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5, 查询（过滤 +翻页参数）</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> cursor, err = collection.Find(context.TODO(), cond, findopt.Skip(<span class=\"number\">0</span>), findopt.Limit(<span class=\"number\">2</span>)); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tfmt.Println(err)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 延迟释放游标</span></span><br><span class=\"line\"><span class=\"keyword\">defer</span> cursor.Close(context.TODO())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 6, 遍历结果集</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> cursor.Next(context.TODO()) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个日志对象</span></span><br><span class=\"line\">\trecord = &amp;LogRecord&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 反序列化bson到对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err = cursor.Decode(record); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 把日志行打印出来</span></span><br><span class=\"line\">\tfmt.Println(*record)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>mgo：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.C.Remove(bson.M&#123;<span class=\"string\">\"_id\"</span>: bson.ObjectIdHex(id)&#125;)  <span class=\"comment\">// 多条一条记录</span></span><br><span class=\"line\">r.C.RemoveAll(bson.M&#123;<span class=\"string\">\"_id\"</span>: bson.ObjectIdHex(id)&#125;) <span class=\"comment\">// 多条记录</span></span><br></pre></td></tr></table></figure>\n<p>mongo-go-driver：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 4, 要删除开始时间早于当前时间的所有日志($lt是less than)</span></span><br><span class=\"line\"><span class=\"comment\">//  delete(&#123;\"timePoint.startTime\": &#123;\"$lt\": 当前时间&#125;&#125;)</span></span><br><span class=\"line\">delCond = &amp;DeleteCond&#123;beforeCond: TimeBeforeCond&#123;Before: time.Now().Unix()&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行删除</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> delResult, err = collection.DeleteMany(context.TODO(), delCond); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tfmt.Println(err)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"删除的行数:\"</span>, delResult.DeletedCount)</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h2><h3 id=\"计算数组大小\"><a href=\"#计算数组大小\" class=\"headerlink\" title=\"计算数组大小\"></a>计算数组大小</h3><p>MongoDB获取内嵌数组的长度：</p>\n<p><a href=\"https://stackoverflow.com/questions/21387969/mongodb-count-the-number-of-items-in-an-array\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/21387969/mongodb-count-the-number-of-items-in-an-array</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.mycollection.insert(&#123;&apos;foo&apos;:[1,2,3,4]&#125;)</span><br><span class=\"line\">&gt; db.mycollection.insert(&#123;&apos;foo&apos;:[5,6,7]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; db.mycollection.aggregate(&#123;$project: &#123; count: &#123; $size:&quot;$foo&quot; &#125;&#125;&#125;)</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5314b5c360477752b449eedf&quot;), &quot;count&quot; : 4 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5314b5c860477752b449eee0&quot;), &quot;count&quot; : 3 &#125;</span><br></pre></td></tr></table></figure>\n<p>使用Go实现，使用mgo，需要用到聚合操作：</p>\n<p><img src=\"1542714314472.png\" alt=\"数据库数据\"></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mgo</span></span><br><span class=\"line\">pipe := r.C.Pipe([]bson.M&#123;</span><br><span class=\"line\">    &#123;<span class=\"string\">\"$match\"</span>: bson.M&#123;<span class=\"string\">\"_id\"</span>: idTest&#125;&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"$project\"</span>: bson.M&#123;<span class=\"string\">\"count\"</span>: bson.M&#123;<span class=\"string\">\"$size\"</span>:<span class=\"string\">\"$fileid_bind_module\"</span>&#125;&#125;&#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">resp := bson.M&#123;&#125;</span><br><span class=\"line\">err = pipe.One(&amp;resp)</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"error is :\"</span>, err, resp)</span><br><span class=\"line\"><span class=\"comment\">// result:</span></span><br><span class=\"line\"><span class=\"comment\">// map[count:3 _id:ObjectIdHex(\"5bf3f2b290054419149526ef\")]</span></span><br></pre></td></tr></table></figure>\n<p>另外一种方法：<a href=\"http://cw.hubwiz.com/card/c/543b2f3cf86387171814c026/1/1/9/\" target=\"_blank\" rel=\"noopener\">$size数组元素个数</a>。</p>\n<h4 id=\"addToSet\"><a href=\"#addToSet\" class=\"headerlink\" title=\"$addToSet\"></a>$addToSet</h4><p>设置一个字段<code>size</code>来保存数组的大小，不过这种操作无法与<code>$addToSet</code>一起进行使用。因为<code>$addToSet</code>不会在数组中插入重复的数据，而inc操作依然会继续加<code>1</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err := r.C.Update(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"_id\"</span>: bson.ObjectIdHex(<span class=\"string\">\"5bebe0cf7f45aa3270c9e532\"</span>),</span><br><span class=\"line\">&#125;, <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"$addToSet\"</span>: <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"test\"</span>: <span class=\"string\">\"1234567890\"</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"加一个size字段\"><a href=\"#加一个size字段\" class=\"headerlink\" title=\"加一个size字段\"></a>加一个size字段</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err = db.C(<span class=\"string\">\"xxxxxx\"</span>).Update(bson.M&#123;<span class=\"string\">\"_id\"</span>: tmpFile.Id&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"$push\"</span>: <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">\"file_id_list\"</span>: p.FileIdList[<span class=\"number\">0</span>]&#125;,</span><br><span class=\"line\">\t<span class=\"string\">\"$inc\"</span>:  <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">\"list_size\"</span>: <span class=\"number\">1</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"MongoDB数组操作\"><a href=\"#MongoDB数组操作\" class=\"headerlink\" title=\"MongoDB数组操作\"></a>MongoDB数组操作</h3><p>对数组的增删查改，可以学习：<a href=\"https://www.cnblogs.com/ljhdo/p/5428037.html\" target=\"_blank\" rel=\"noopener\">MongoDB 数组</a>。</p>\n<h4 id=\"mgo查找单层数组\"><a href=\"#mgo查找单层数组\" class=\"headerlink\" title=\"mgo查找单层数组\"></a>mgo查找单层数组</h4><p><img src=\"1542714781584.png\" alt=\"单层数组\"></p>\n<p>代码中需要使用到<code>$elemMatch</code>参数。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err = r.C.Find(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;</span><br><span class=\"line\">        <span class=\"string\">\"test\"</span>: <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;</span><br><span class=\"line\">        <span class=\"string\">\"$elemMatch\"</span>: <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">\"$eq\"</span>: ids&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;).One(&amp;bind)</span><br></pre></td></tr></table></figure>\n<h4 id=\"mgo查找多层数组\"><a href=\"#mgo查找多层数组\" class=\"headerlink\" title=\"mgo查找多层数组\"></a>mgo查找多层数组</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> testData <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">err = r.C.Find(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;</span><br><span class=\"line\">    <span class=\"string\">\"_id\"</span>: idTest123,</span><br><span class=\"line\">    <span class=\"string\">\"testArr\"</span>: <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;</span><br><span class=\"line\">    <span class=\"string\">\"$elemMatch\"</span>: <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">\"test1\"</span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;).One(&amp;testData)</span><br></pre></td></tr></table></figure>\n<h4 id=\"mgo删除数组元素\"><a href=\"#mgo删除数组元素\" class=\"headerlink\" title=\"mgo删除数组元素\"></a>mgo删除数组元素</h4><p>删除数组元素，会将该子结构完全删除。</p>\n<h5 id=\"删除单层数组\"><a href=\"#删除单层数组\" class=\"headerlink\" title=\"删除单层数组\"></a>删除单层数组</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err := r.C.Update(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"_id\"</span>: idTest,</span><br><span class=\"line\">&#125;, <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"$pull\"</span>: <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"test\"</span>: <span class=\"string\">\"123\"</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"删除两层数组\"><a href=\"#删除两层数组\" class=\"headerlink\" title=\"删除两层数组\"></a>删除两层数组</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除数组元素</span></span><br><span class=\"line\">r.C.Update(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"_id\"</span>: idTest123&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"$pull\"</span>: <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"testArr\"</span>: <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"test1\"</span>: <span class=\"number\">1</span>&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"聚合操作：Aggregation\"><a href=\"#聚合操作：Aggregation\" class=\"headerlink\" title=\"聚合操作：Aggregation\"></a>聚合操作：Aggregation</h4><p><code>$match</code>：类似于find中条件匹配；</p>\n<p><code>$unwind</code>：将数组拆开，化成一个个独立信息，除了散开的数组字段不同，其他字段均相同；</p>\n<p><code>$skip</code>与<code>limit</code>：类似于MongoDB中的skip与limit；</p>\n<p><code>$project</code>：修改输入文档的结构。可以用来重命名、增加或删除域，指定获取的字段，没有的字段，也可以用于创建计算结果以及嵌套文档。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipe := r.C.Pipe([]bson.M&#123;</span><br><span class=\"line\">\t&#123;<span class=\"string\">\"$match\"</span>: bson.M&#123;<span class=\"string\">\"_id\"</span>: idTest123, <span class=\"string\">\"product_id\"</span>: <span class=\"number\">123</span>&#125;&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"string\">\"$unwind\"</span>: <span class=\"string\">\"$testArr\"</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"string\">\"$skip\"</span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"string\">\"$limit\"</span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"string\">\"$project\"</span>: bson.M&#123;<span class=\"string\">\"product_id\"</span>: <span class=\"number\">1</span>, <span class=\"string\">\"one\"</span>: <span class=\"string\">\"$testArr.test1\"</span>&#125;&#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">resp := bson.M&#123;&#125;</span><br><span class=\"line\">err = pipe.One(&amp;resp)  </span><br><span class=\"line\"><span class=\"comment\">//pipe.All(&amp;resp)  匹配数据表中全部符合的数据</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"用objectID查询某一时间段内数据\"><a href=\"#用objectID查询某一时间段内数据\" class=\"headerlink\" title=\"用objectID查询某一时间段内数据\"></a>用objectID查询某一时间段内数据</h3><p>ObjectID是由精确到秒的时间戳再加上机器标识等信息组成的，并且建有索引，因此ObjectID本身就可以用于按时间范围查询数据，而不用专门另建时间戳字段和索引。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">timeToObjId</span><span class=\"params\">(t <span class=\"keyword\">int64</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//var t = time.Now().Unix()</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 转换成16进制的字符串，再加补齐16个0</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">\"%x0000000000000000\"</span>, t)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//往前多少天时间戳</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetUnixToOldTimeDay</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span> <span class=\"title\">int64</span></span> &#123;</span><br><span class=\"line\">\tday := time.Now().Day()</span><br><span class=\"line\">\toldMonth := day - i</span><br><span class=\"line\">\tt := time.Date(time.Now().Year(), time.Now().Month(), oldMonth, time.Now().Hour(), time.Now().Minute(), time.Now().Second(), time.Now().Nanosecond(), time.Local)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> t.Unix()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">objIdOneMonth</span><span class=\"params\">()</span> <span class=\"params\">(oldMonthId <span class=\"keyword\">string</span>, nowId <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\ttimeUinx := GetUnixToOldTimeDay(<span class=\"number\">30</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\toldMonthId = timeToObjId(timeUinx)</span><br><span class=\"line\">\tnowId = timeToObjId(time.Now().Unix())</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.C(DbSysMsg).Pipe([]bson.M&#123;</span><br><span class=\"line\">\t\t\t&#123;<span class=\"string\">\"$match\"</span>: bson.M&#123;<span class=\"string\">\"_id\"</span>: bson.M&#123;<span class=\"string\">\"$lte\"</span>: bson.ObjectIdHex(nowId),</span><br><span class=\"line\">                                           <span class=\"string\">\"$gt\"</span>: bson.ObjectIdHex(oldMonthId)&#125;&#125;&#125;,</span><br><span class=\"line\">\t\t\t&#123;<span class=\"string\">\"$limit\"</span>: <span class=\"number\">200</span>&#125;, <span class=\"comment\">//每个月1号都清除当前时间的前200条已经空了的消息连接关系</span></span><br><span class=\"line\">\t\t\t&#123;<span class=\"string\">\"$project\"</span>: bson.M&#123;<span class=\"string\">\"count\"</span>: bson.M&#123;<span class=\"string\">\"$size\"</span>: <span class=\"string\">\"user_list_status\"</span>&#125;&#125;&#125;,</span><br><span class=\"line\">\t\t&#125;)</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"MongoDB","slug":"MongoDB","permalink":"chunlife.top/categories/MongoDB/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"MongoDB","slug":"MongoDB","permalink":"chunlife.top/tags/MongoDB/"}]},{"title":"我收藏的博客","date":"2018-10-22T12:56:26.000Z","path":"2018/10/22/我收藏的博客/","content":"<p>有干货，界面好看的博客  <a href=\"https://halfrost.com\" target=\"_blank\" rel=\"noopener\">https://halfrost.com</a></p>\n<hr>\n<p>阮一峰，<a href=\"https://www.yuque.com/ruanyf/share\" target=\"_blank\" rel=\"noopener\">每周分享</a></p>\n<hr>\n<a id=\"more\"></a>\n<p><a href=\"https://www.cnblogs.com/esingchan/p/3958962.html\" target=\"_blank\" rel=\"noopener\">ZIP压缩算法详细分析及解压实例解释</a></p>\n<hr>\n<p>次碳酸钴的<a href=\"https://www.web-tinker.com/articles/\" target=\"_blank\" rel=\"noopener\">技术博客</a></p>\n<hr>\n<p>Articles by <a href=\"http://blog.ralch.com/articles/\" target=\"_blank\" rel=\"noopener\">Svetlin Ralchev</a>，博客质量都挺高，界面很简洁。</p>\n<hr>\n<p>初学者<a href=\"https://www.kancloud.cn/liupengjie/go/570004\" target=\"_blank\" rel=\"noopener\">资料</a>，用于突然忘记基础知识的时候，去看看。</p>\n<hr>\n<p><a href=\"https://github.com/developer-learning/reading-go\" target=\"_blank\" rel=\"noopener\">Go 每日阅读和 Go 夜读</a></p>\n<hr>\n<p><a href=\"http://blog.betacat.io/post/raft-implementation-in-etcd/#life-of-a-vote-request\" target=\"_blank\" rel=\"noopener\">Raft在etcd中的实现</a></p>\n<hr>\n<p>Go标准库的示例，查看string包的时候翻到的，<a href=\"https://github.com/polaris1119/The-Golang-Standard-Library-by-Example\" target=\"_blank\" rel=\"noopener\">The-Golang-Standard-Library-by-Example</a></p>\n<hr>\n<p><a href=\"https://github.com/gocn/news\" target=\"_blank\" rel=\"noopener\">GoCN</a> 每日新闻</p>\n<hr>\n<p><a href=\"https://github.com/521xueweihan/git-tips\" target=\"_blank\" rel=\"noopener\">git-tips</a>，有一个很详细的<a href=\"https://github.com/521xueweihan/git-tips/blob/master/git.png\" target=\"_blank\" rel=\"noopener\">思维导图</a>。</p>\n<h3 id=\"面试时需要\"><a href=\"#面试时需要\" class=\"headerlink\" title=\"面试时需要\"></a>面试时需要</h3><p>技术面试必备<a href=\"https://cyc2018.github.io/CS-Notes/#/README\" target=\"_blank\" rel=\"noopener\">基础知识</a></p>\n<p><img src=\"1554885421792.png\" alt=\"帮助了解\"></p>\n<p><a href=\"https://github.com/xmge/gonote\" target=\"_blank\" rel=\"noopener\">xmge/gonote</a>，<code>go</code>学习笔记。</p>\n<p><img src=\"1554885523893.png\" alt=\"学习笔记\"></p>\n<p><a href=\"https://github.com/imhuay/Algorithm_Interview_Notes-Chinese\" target=\"_blank\" rel=\"noopener\">imhuay/Algorithm_Interview_Notes-Chinese</a>，2018/2019/校招/春招/秋招/算法/机器学习(Machine Learning)/深度学习(Deep Learning)/自然语言处理(NLP)/C/C++/Python/面试笔记。</p>\n<p><img src=\"1554885757696.png\" alt=\"面试\"></p>\n<p><a href=\"https://github.com/MisterBooo/LeetCodeAnimation\" target=\"_blank\" rel=\"noopener\">MisterBooo/LeetCodeAnimation</a>，用动画的形式呈现解LeetCode题目的思路。</p>\n<p><img src=\"1554886318716.png\" alt=\"动画算法\"></p>\n<p><a href=\"https://github.com/Snailclimb/JavaGuide\" target=\"_blank\" rel=\"noopener\">【Java学习+面试指南】</a> 一份涵盖大部分Java程序员所需要掌握的核心知识。</p>\n<p><img src=\"1554886372815.png\" alt=\"1554886372815\"></p>\n<p><a href=\"https://github.com/kylesliu/awesome-golang-leetcode\" target=\"_blank\" rel=\"noopener\">kylesliu/awesome-golang-leetcode</a>，使用Go语言解题。</p>\n<p><img src=\"1554886435676.png\" alt=\"1554886435676\"></p>\n","categories":[{"name":"学习","slug":"学习","permalink":"chunlife.top/categories/学习/"}],"tags":[{"name":"学习博客","slug":"学习博客","permalink":"chunlife.top/tags/学习博客/"}]},{"title":"slice理解","date":"2018-10-22T12:56:26.000Z","path":"2018/10/22/slice理解/","content":"<h2 id=\"slice理解\"><a href=\"#slice理解\" class=\"headerlink\" title=\"slice理解\"></a>slice理解</h2><p>slice本身没有数据，是对底层的一个view。</p>\n<a id=\"more\"></a>\n<p>为什么这么说呢，可以看看slice的构造。</p>\n<p>可以看到切片的结构体由3部分构成，Pointer 是指向一个数组的指针，len 代表当前切片的长度，cap 是当前切片的容量。cap 总是大于等于 len 的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> slice <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tarray unsafe.Pointer</span><br><span class=\"line\">\t<span class=\"built_in\">len</span>   <span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"built_in\">cap</span>   <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用时，切片类似动用的是指针，真正占用内存的是实际分配了内存的一个数组，所以说其本身没有数据。</p>\n<p><img src=\"1540737171037.png\" alt=\"slice的实现\"></p>\n<p>更多slice的代码细节可以参考：<a href=\"https://halfrost.com/go_slice/\" target=\"_blank\" rel=\"noopener\">深入解析 Go 中 Slice 底层实现</a></p>\n<h2 id=\"slice的扩展\"><a href=\"#slice的扩展\" class=\"headerlink\" title=\"slice的扩展\"></a>slice的扩展</h2><p>先上一段代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">arr[<span class=\"number\">0</span>], arr[<span class=\"number\">2</span>] = <span class=\"number\">0</span>, <span class=\"number\">2</span></span><br><span class=\"line\">s1 := arr[<span class=\"number\">2</span>:<span class=\"number\">6</span>]</span><br><span class=\"line\">s2 := s1[<span class=\"number\">3</span>:<span class=\"number\">5</span>] <span class=\"comment\">// [s1[3], s1[4]]</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"s1=%v, len(s1)=%d, cap(s1)=%d\\n\"</span>, s1, <span class=\"built_in\">len</span>(s1), <span class=\"built_in\">cap</span>(s1))</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"s2=%v, len(s2)=%d, cap(s2)=%d\\n\"</span>, s2, <span class=\"built_in\">len</span>(s2), <span class=\"built_in\">cap</span>(s2))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果：</span></span><br><span class=\"line\"><span class=\"comment\">// s1=[2 3 4 5], len(s1)=4, cap(s1)=6</span></span><br><span class=\"line\"><span class=\"comment\">// s2=[5 6], len(s2)=2, cap(s2)=3</span></span><br></pre></td></tr></table></figure>\n<p>结果是比较奇怪的，因为S1切片元素中没有元素[6]，为什么会出现这个现象呢，说到底还是由于slice的特性导致的，其作为对于底层数组的一个view。</p>\n<p>s1 = arr[2:6]，s1这里依然作为arr数组的view，当s2在s1的基础上取数据时，操作的底层数组都为arr，而s1[3:5]下标对应的arr的元素恰好是[5 6]。</p>\n<p>参考图片描述，可以看到不同slice，对应底层数组的下标变化。</p>\n<p><img src=\"slice的扩展.png\" alt=\"slice的扩展\"></p>\n<p>slice的len限定了切片能够索引的数据，但并不代表slice只能“看到”len长度的数据，capacity才表示底层数组具体的内存大小。</p>\n<p>也就是说：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fmt.Printf(<span class=\"string\">\"s2=%v \\n\"</span>, s2[<span class=\"number\">2</span>])  <span class=\"comment\">// 报错，panic: runtime error: index out of range</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"s2=%v \\n\"</span>, s2[<span class=\"number\">2</span>:<span class=\"number\">3</span>])  <span class=\"comment\">// '7'</span></span><br></pre></td></tr></table></figure>\n<p>总的可以继续得出：</p>\n<p><code>slice可以向后扩展，不可以向前扩展</code><br><code>s[i]不可以超越len(s)，向后扩展不可以超越底层数组cap(s)</code></p>\n<h2 id=\"添加slice\"><a href=\"#添加slice\" class=\"headerlink\" title=\"添加slice\"></a>添加slice</h2><p><code>添加元素时如果超越cap，系统会重新分配更大的底层数组</code></p>\n<p>这里的重新分配，也就是意味着底层数据会被copy到一个新的内存，此内存的容量大于分配前的底层数组。至于会分配多大的内存，一般采取的是一次性给足，而不是适量分配。</p>\n<p>例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://www.cnblogs.com/baylorqu/p/9588733.html idea上运行正常</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testAppend</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ts := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">\toldcap := <span class=\"built_in\">cap</span>(s)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++ &#123;</span><br><span class=\"line\">\t\ts = <span class=\"built_in\">append</span>(s, i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> newcap := <span class=\"built_in\">cap</span>(s); oldcap &lt; newcap &#123;</span><br><span class=\"line\">\t\t\tfmt.Printf(<span class=\"string\">\"oldcap %d ===&gt; newcap %d\\n\"</span>, oldcap, newcap)</span><br><span class=\"line\">\t\t\toldcap = newcap</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//oldcap 1 ===&gt; newcap 2</span></span><br><span class=\"line\"><span class=\"comment\">//oldcap 2 ===&gt; newcap 4</span></span><br><span class=\"line\"><span class=\"comment\">//oldcap 4 ===&gt; newcap 8</span></span><br><span class=\"line\"><span class=\"comment\">//oldcap 8 ===&gt; newcap 16</span></span><br><span class=\"line\"><span class=\"comment\">//oldcap 16 ===&gt; newcap 32</span></span><br></pre></td></tr></table></figure>\n<p><code>由于值传递的关系，必须接收append的返回值</code></p>\n<p><code>append的用法：s=append(s,Val)</code></p>\n<p>这里另举一个有意思的代码，引出下一个章节。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> v &#123;</span><br><span class=\"line\">\tv = <span class=\"built_in\">append</span>(v, i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看这个代码是否可以猜到代码运行结果呢？程序是否会崩溃呢？</p>\n<h2 id=\"Go-Range\"><a href=\"#Go-Range\" class=\"headerlink\" title=\"Go Range\"></a>Go Range</h2><p>在实际的打印结果中，可以看到打印是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1 2 3 0 1 2]</span><br></pre></td></tr></table></figure>\n<p>比较奇怪，打印成功，而不是死循环。</p>\n<p>不是死循环，切片增加了三个元素，循环了三次，为什么会循环三次呢？好像和slice的长度有关系，粗略的看是可以这么看的，这里我找了下具体原因。</p>\n<p>由于懒，先看了下前辈们是否有分析过这个问题，所以直接上了Google，果然没有让我失望，参考：<a href=\"http://newt0n.github.io/2017/04/06/Go-Range-%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\" target=\"_blank\" rel=\"noopener\">Go Range 内部实现</a>。</p>\n<p>博客看到range语法糖还原部分，就可以得到我所需要的信息了。取自博客：</p>\n<p><code>range</code> 循环在内部实现上实际就是 C 风格循环的语法糖，意料之外而又在情理之中。编译器会对每一种 <code>range</code> 支持的类型做专门的 “<strong>语法糖还原</strong>”。比如，</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//   slice</span></span><br><span class=\"line\"><span class=\"comment\">//   for_temp := range</span></span><br><span class=\"line\"><span class=\"comment\">//   len_temp := len(for_temp)</span></span><br><span class=\"line\"><span class=\"comment\">//   for index_temp = 0; index_temp &lt; len_temp; index_temp++ &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//           value_temp = for_temp[index_temp]</span></span><br><span class=\"line\"><span class=\"comment\">//           index = index_temp</span></span><br><span class=\"line\"><span class=\"comment\">//           value = value_temp</span></span><br><span class=\"line\"><span class=\"comment\">//           original body</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到的是，这个转化在编译器编译时完成，也就是说range循环的长度不会在运行时产生变化的，<strong>因为slice的长度是被直接赋值给了一个临时变量，所以slice本身的长度变化，并不能影响到整个循环的变化</strong>。</p>\n<p>这段代码之所以会终止是因为它其实可以粗略的翻译成类似下面的这段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for_temp := v</span><br><span class=\"line\">len_temp := len(for_temp)</span><br><span class=\"line\">for index_temp = 0; index_temp &lt; len_temp; index_temp++ &#123;</span><br><span class=\"line\">        value_temp = for_temp[index_temp]</span><br><span class=\"line\">        index = index_temp</span><br><span class=\"line\">        value = value_temp</span><br><span class=\"line\">        v = append(v, index)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们知道切片实际上是一个结构体的语法糖，这个结构体有着一个指向数组的指针成员。在循环开始前对这个结构体生成副本然后赋值给 <code>for_temp</code>，后面的循环实际上是在对 <code>for_temp</code> 进行迭代。任何对于原始变量 <code>v</code> 本身（而非对其背后指向的数组）的更改都和生成的副本 <code>for_temp</code> 没有关系。<strong>但其背后指向的数组还是以指针的形式共享给 <code>v</code> 和 <code>for_temp</code>，所以 <code>v[i] = 1</code> 这样的语句仍然可以工作</strong>。</p>\n<p>这里引出我遇到的一个问题，我需要移除slice中的一些参数，于是在range中做一些判断，然后使用类似于<code>arr = append(arr[:2], arr[3:]...)</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testRangeSlice</span><span class=\"params\">(arr []<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"%p \\n\"</span>, &amp;arr)</span><br><span class=\"line\">\tfmt.Println(<span class=\"built_in\">cap</span>(arr), <span class=\"built_in\">len</span>(arr), arr)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index, a := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> index == <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t\tarr = <span class=\"built_in\">append</span>(arr[:<span class=\"number\">2</span>], arr[<span class=\"number\">3</span>:]...)</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"built_in\">cap</span>(arr), <span class=\"built_in\">len</span>(arr), arr)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"index\"</span>, index, a)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"built_in\">cap</span>(arr), <span class=\"built_in\">len</span>(arr), arr)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"%p \\n\"</span>, &amp;arr)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0xc000042400 </span><br><span class=\"line\">6 6 [1 2 3 4 5 6]</span><br><span class=\"line\">index 0 1</span><br><span class=\"line\">index 1 2</span><br><span class=\"line\">6 5 [1 2 4 5 6]</span><br><span class=\"line\">index 2 3</span><br><span class=\"line\">index 3 5</span><br><span class=\"line\">index 4 6   // ********</span><br><span class=\"line\">index 5 6   // ********</span><br><span class=\"line\">6 5 [1 2 4 5 6]</span><br><span class=\"line\">0xc000042400</span><br></pre></td></tr></table></figure>\n<p>可以看到执行结果出现了重复的数据，原始数据的<code>4</code>没有被访问到，这里依然是range语法糖还原后造成的这个结果。中期改变切片，造成切片数据的变化（这里应该是造成了底层数组的真实变化），因为长度早已被固定，这里依然会选择循环<code>6</code>次，而slice的容量没有因为append操作改变，依然为<code>6</code>。</p>\n","categories":[{"name":"Go","slug":"Go","permalink":"chunlife.top/categories/Go/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"slice","slug":"slice","permalink":"chunlife.top/tags/slice/"}]},{"title":"Go依赖管理","date":"2018-10-18T14:32:48.000Z","path":"2018/10/18/go build条件编译/","content":"<p><a href=\"http://manguijie.top/2018/08/go-condition-build\" target=\"_blank\" rel=\"noopener\">go build条件编译</a></p>\n","categories":[{"name":"Go","slug":"Go","permalink":"chunlife.top/categories/Go/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"}]},{"title":"Go依赖管理","date":"2018-10-18T14:32:48.000Z","path":"2018/10/18/go 依赖管理/","content":"<h2 id=\"依赖管理的选择\"><a href=\"#依赖管理的选择\" class=\"headerlink\" title=\"依赖管理的选择\"></a>依赖管理的选择</h2><p>Go主要依赖管理工具包括dep，govendor，glide，gomodule。</p>\n<a id=\"more\"></a>\n<p>dep：<a href=\"https://github.com/golang/dep\" target=\"_blank\" rel=\"noopener\">https://github.com/golang/dep</a></p>\n<p>govendor：<a href=\"https://github.com/kardianos/govendor\" target=\"_blank\" rel=\"noopener\">https://github.com/kardianos/govendor</a></p>\n<p>glide：<a href=\"https://github.com/Masterminds/glide/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/Masterminds/glide/releases</a></p>\n<p>dep，govendor，gomodule，前两者是使用go 1.5版本的Vendor特性，已成为go的实际功能，其非常成熟；</p>\n<p>gomodule是作为Go 1.11引入的新特性，还未正式合并作为一个功能，为此，go废弃了之前作为准官方的vendor机制，目的是为了摆脱Go项目中一直存在坏境变量：GOPATH，而且目前可以使用此功能配合<a href=\"https://github.com/gomods/athens\" target=\"_blank\" rel=\"noopener\">athens</a>，做到访问私人仓库，访问国外仓库，使依赖管理做到无任何多余的操作。参考<a href=\"http://blog.cyeam.com/golang/2018/09/27/athens#get-goproxyvlist-%E8%BF%94%E5%9B%9E%E6%89%80%E6%9C%89%E5%B7%B2%E7%9F%A5%E7%9A%84%E5%BD%93%E5%89%8D-module-%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%B7%E6%AF%8F%E8%A1%8C%E4%B8%80%E6%9D%A1\" target=\"_blank\" rel=\"noopener\">为 Go module 搭建私服</a>，需要搭建代理服务器，未来建议包依赖管理可使用该功能。</p>\n<p>上述几种功能在使用中，面对私人仓库，均出现一些拉取错误，无法正常的进行拉取，进行相应的配置后，错误并未消除，选用glide后，可以顺利完成包管理的操作，而且目前来说，Glide几乎等同于官方依赖管理工具，gomodule也可以兼容Glide的管理，这里有包管理工具一些对比：<a href=\"https://github.com/Masterminds/glide/wiki/Go-Package-Manager-Comparison。\" target=\"_blank\" rel=\"noopener\">https://github.com/Masterminds/glide/wiki/Go-Package-Manager-Comparison。</a></p>\n<h2 id=\"Glide\"><a href=\"#Glide\" class=\"headerlink\" title=\"Glide\"></a>Glide</h2><p>Glide信息可以参考官方文档：<a href=\"https://glidedocs.readthedocs.io/zh/latest/glide.yaml/\" target=\"_blank\" rel=\"noopener\">https://glidedocs.readthedocs.io/zh/latest/glide.yaml/</a></p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>下载glide，<a href=\"https://github.com/Masterminds/glide/releases，将文件放至$GOROOT/bin。\" target=\"_blank\" rel=\"noopener\">https://github.com/Masterminds/glide/releases，将文件放至$GOROOT/bin。</a></p>\n<p>使用代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t. <span class=\"string\">\"gitlab.com/Utils/ErrCode\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlog.Println(<span class=\"string\">\"test\"</span>, ERROR[<span class=\"string\">\"OK\"</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用Glide\"><a href=\"#使用Glide\" class=\"headerlink\" title=\"使用Glide\"></a>使用Glide</h3><p><strong>注意</strong>：Glide与其他利用Vendor特性的工具一样，工程项目必须要放在GOPATH目录下。</p>\n<h4 id=\"大概流程：\"><a href=\"#大概流程：\" class=\"headerlink\" title=\"大概流程：\"></a>大概流程：</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>进入到项目目录</span><br><span class=\"line\">cd ~/src/testDep</span><br><span class=\"line\"><span class=\"meta\">#</span>glide初始化，初始化配置文件glide.yaml</span><br><span class=\"line\">glide init</span><br><span class=\"line\"><span class=\"meta\">#</span>glide加载依赖包，自动归档到vendor目录</span><br><span class=\"line\">glide up -v</span><br></pre></td></tr></table></figure>\n<h4 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><p>在项目顶层目录运行：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ glide.exe init testDep  <span class=\"comment\"># specify project name</span></span><br></pre></td></tr></table></figure>\n<p>该工具会将项目依赖自动扫入配置文件（glide.yaml）中。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">package:</span> <span class=\"string\">testDep</span></span><br><span class=\"line\"><span class=\"attr\">import:</span></span><br><span class=\"line\"><span class=\"attr\">- package:</span> <span class=\"string\">gitlab.com/Utils</span></span><br></pre></td></tr></table></figure>\n<p>接下来可以使用”glide.exe install”，但对于私有库，若直接安装将无法正常clone到git项目，需要手动对配置文件进行改造：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">package:</span> <span class=\"string\">testDep</span></span><br><span class=\"line\"><span class=\"attr\">import:</span></span><br><span class=\"line\"><span class=\"attr\">- package:</span> <span class=\"string\">gitlab.com/Utils</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span>    <span class=\"string\">git@172.16.8.189:third-party/Utils.git</span></span><br><span class=\"line\"><span class=\"attr\">  version:</span> <span class=\"string\">branch</span></span><br></pre></td></tr></table></figure>\n<p>repo：指定真实仓库地址；</p>\n<p>version：指定tag，branch等其他参数，具体可参考文档。</p>\n<p>完成后，可使用：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ glide.exe install // 或者是glide up -v，配置文件更改后使用，一般第一次使用install，后面使用up</span><br></pre></td></tr></table></figure>\n<p>正常情况下，会自动下载Git项目到vendor目录中，且生成”glide.lock”。</p>\n<h3 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h3><h3 id=\"手动更新包依赖\"><a href=\"#手动更新包依赖\" class=\"headerlink\" title=\"手动更新包依赖\"></a>手动更新包依赖</h3><p>glide get操作通过手动维护Git包，使用此命令，包配置会自动配置到配置文件中，但对于私有仓库的操作是无法成功的。</p>\n<p>示例，#后面跟tag，branch。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glide get github.com/go-sql-driver/mysql#v1.2</span><br></pre></td></tr></table></figure>\n<h3 id=\"包被墙\"><a href=\"#包被墙\" class=\"headerlink\" title=\"包被墙\"></a>包被墙</h3><p>包若因为网络因素被墙，可使用glide的mirror命令绕过一些包访问的问题。</p>\n<p>例如<a href=\"https://golang.org/x/net。\" target=\"_blank\" rel=\"noopener\">https://golang.org/x/net。</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> glide mirror set https://golang.org/x/net https://github.com/golang/net --vcs git</span><br></pre></td></tr></table></figure>\n<p>然后使用update。</p>\n<p>这里glide无法处理包的子包，那可以参考：<a href=\"https://zhuanlan.zhihu.com/p/31402004\" target=\"_blank\" rel=\"noopener\">让golang依赖也走mirror</a>，参考<a href=\"https://github.com/jokimina/glide-mirrors-yaml，一些常用的mirror，将文件放到~/.glide/。\" target=\"_blank\" rel=\"noopener\">https://github.com/jokimina/glide-mirrors-yaml，一些常用的mirror，将文件放到~/.glide/。</a></p>\n<p>对包被墙的一些解决办法：<a href=\"https://blog.csdn.net/fenglailea/article/details/79107124\" target=\"_blank\" rel=\"noopener\">golang 包管理工具</a>，综合来看，唯有代理才能彻底解决这个痛点。</p>\n<h2 id=\"项目管理\"><a href=\"#项目管理\" class=\"headerlink\" title=\"项目管理\"></a>项目管理</h2><p>上传git项目一般是只需上传glide.lock，glide.yaml即可，vendor目录可不做上传，若网络包被本地修改，或包需翻墙进行下载，此时建议一并上传。</p>\n<p>若依赖需要更新，或者配置更改，则可使用update。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ glide.exe update</span><br></pre></td></tr></table></figure>\n<h2 id=\"Add-2019-3-19\"><a href=\"#Add-2019-3-19\" class=\"headerlink\" title=\"Add 2019-3-19\"></a>Add 2019-3-19</h2><p>go如今已经发布到1.12了，之前说过Go1.11强势发布了gomodule特性，以此来统一整个包管理的江湖，但在之前刚发布时，对这个的使用实在是有点搞不明白，不过在不经意间就找到了一个Go的包代理网站，以此来使用gomodule即可应对各类<code>墙</code>包。<a href=\"https://goproxy.io。\" target=\"_blank\" rel=\"noopener\">https://goproxy.io。</a></p>\n<p>1、升级Go1.12，启用GO111MODULE</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export GO111MODULE=on</span><br></pre></td></tr></table></figure>\n<p>2、配置GOPROXY</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export GOPROXY=https://goproxy.io</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"Go","slug":"Go","permalink":"chunlife.top/categories/Go/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"Glide","slug":"Glide","permalink":"chunlife.top/tags/Glide/"},{"name":"包依赖管理","slug":"包依赖管理","permalink":"chunlife.top/tags/包依赖管理/"}]},{"title":"Go打印结构体的field","date":"2018-10-12T03:12:20.000Z","path":"2018/10/12/Go打印结构体的field/","content":"<p>Go可以很方便的打印出结构体的<code>field</code>，不同于<code>json.Marshal()</code>操作，<code>json</code>操作有很多局限性，首先其要求结构体字段为大写字段，否则没有访问权限，其二，其会多出一步函数调用，比较麻烦。</p>\n<a id=\"more\"></a>\n<p>这里又很方便既可以将结构体<code>field</code>打印出来的方法，不用区分大小写。</p>\n<p>printf的关键字：<code>%+v</code>，其中v不加<code>+</code>也是有所区别的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> info <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tKey   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tValue <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := info&#123;<span class=\"string\">\"键值\"</span>, <span class=\"string\">\"数据\"</span>&#125;</span><br><span class=\"line\">\tbytes, _ := json.Marshal(v)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"%v\\n\"</span>, v)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"%+v\\n\"</span>, v)</span><br><span class=\"line\">\tfmt.Println(<span class=\"keyword\">string</span>(bytes))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// output</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;键值 数据&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;Key:键值 Value:数据&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;\"Key\":\"键值\",\"Value\":\"数据\"&#125;</span></span><br></pre></td></tr></table></figure>\n","categories":[{"name":"Go基础操作","slug":"Go基础操作","permalink":"chunlife.top/categories/Go基础操作/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"}]},{"title":"国庆回家","date":"2018-10-11T11:10:50.000Z","path":"2018/10/11/国庆回家/","content":"<p>因家里有点事，本来准备窝在深圳，手撸几行代码的想法是泡汤了，一想到国庆路上千军万马，心里只能是七零八落之后，做好长期的心理防线，免得在路上对生活失去信心，毕竟还有远方的苟且。</p>\n<a id=\"more\"></a>\n<h2 id=\"出发\"><a href=\"#出发\" class=\"headerlink\" title=\"出发\"></a>出发</h2><p>临时起意的情况下，对于火车票，基本就没有其他奢望了，于是联系了我表哥，搭一趟顺风车回家，原定是9月30号中午出发，不过我哥表示没睡醒，晚上需要开夜路，那得多睡一会。</p>\n<p>六点钟，东莞开车出发；</p>\n<p>十点钟，深圳南山区西丽，上车。</p>\n<h2 id=\"在路上\"><a href=\"#在路上\" class=\"headerlink\" title=\"在路上\"></a>在路上</h2><p>在出深圳的路上，一路都很顺畅，深深的怀疑是要回去的都已经回去了，没回去的已经躺在家里了。</p>\n<p>出了深圳就开始出现堵车到爆炸的现象了，事故不断，堵车不断，总之两者都是相关的，让我也是第一次感受到宛如春运的感觉，这对我一个之前在武汉，从没感受到春运人流，对国家的特质缺少了一块体验，虽然不是什么好的体验。</p>\n<p>大概是跑了14个小时，才完整的出了广东省，这里只能说广东是深深的爱着外乡人的，连离别的前戏都是这么充足。</p>\n<p>出来了才会发现广东省的富足，这点感觉是从通信基建上感受到的，出广东省前，一路上4G网都是妥妥的，手机玩个游戏延迟基本不会太高；出了广东，就会发现4G信号还是一个飘忽的东西，时有时无。一路上的车流变得越来越少，过了岳阳，到湖北来，几乎是无法构成车流，这点数量上也是欠缺的。</p>\n<p>难得回趟家，快要回到家，还是感觉家里比较亲切的，整个道路上都是亮起的路灯，迎国庆的气息弥漫到各个角落里，荆州这座古城……。</p>\n<h2 id=\"家\"><a href=\"#家\" class=\"headerlink\" title=\"家\"></a>家</h2><p>一回家，那只有沙发能够托住我整个身体，撑住我疲惫的身体，将满足感满满的给予我，深怕是辜负了我辛苦的路程，家里的沙发是如此可爱。</p>\n<p>简练的打理了一下自己，就将自己摔到床上休息了，重重的倒下，暖暖的幸福。</p>\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><p>回家后，去看了外婆，也去了看了爷爷。</p>\n<p>外婆的身体相比过年，真是无法形容的变法，一个夏天和冬天的感觉，外婆性子硬，不愿意去医院，整个人可以很好的对照着一个老人的样子，一点都不像是从一个大户人家过来的女人，让人心疼。</p>\n<p>爷爷的身体依然如此，一年中大病小病，一个人辛苦的生活，听着爷爷说，一个人生病了，用一把椅子慢慢的把自己挪到医院，300米的距离，走了两个小时，这时候我只能无话可说，即使明白老人最需要的是什么，但也只能是沉默，静静听着爷爷的讲述。</p>\n<p>生活的路很奇怪，好好的一段路，走着的人走一段歇一段，下一个路口，人流总需要被分化，往前的人不断，可没有人在原地。</p>\n","categories":[{"name":"随笔","slug":"随笔","permalink":"chunlife.top/categories/随笔/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"chunlife.top/tags/随笔/"}]},{"title":"KSDK USB 例程分析","date":"2018-09-22T08:17:51.000Z","path":"2018/09/22/KSDK USB 例程分析/","content":"<p>在USB example里面文件：</p>\n<a id=\"more\"></a>\n<p><img src=\"28180756_Z7bj.png\" alt=\"img\"></p>\n<p>lite为精简版，省略了很多USB枝干上的功能，保留了USB通讯部分的主干功能，我使用的是全功能版。</p>\n<p><img src=\"28180756_hylo.png\" alt=\"img\"></p>\n<p>函数 BOARD_InitPins()中，主要是PORT以及GPIO相关的初始化。</p>\n<p><img src=\"28180757_A6DK.png\" alt=\"img\"></p>\n<ol>\n<li>使能PORT的时钟，当外设时钟没有打开时，程序不能读出外设寄存器的值，同时也不能使用外设。</li>\n<li>通过PORT设置GPIO引脚功能，此处为设置LPUART功能。芯片手册P115。</li>\n<li>将键盘涉及到的GPIO引脚统统都设为GPIO引脚（自己定义的函数）。</li>\n<li>进行UART相关配置。</li>\n<li>将USB 键盘对应的相关引脚都设置为输入引脚。</li>\n</ol>\n<p>BOARD_BootClockRUN()，设置芯片时钟为48MHZ，总线时钟为24MHZ。</p>\n<p>BOARD_InitDebugConsole()，主要是初始化UART相关的配置，例入波特率等等。</p>\n<p>USB_DeviceApplicationInit()，这个函数很重要，应用初始化，这里的设置关乎于后面程序的成功与否，不过这里是KSDK已经实现了的，我们仅仅是需要做一下了解即可。</p>\n<p>使能USB工作时钟。</p>\n<p><img src=\"28180757_tFJa.png\" alt=\"img\"></p>\n<p>这段代码是由宏定义给包裹起来的，根据注释可以粗略判断出，主要是针对KHCI USB中的RAM特定的，将RAM里面的数据全部清0。</p>\n<p><img src=\"28180758_yCrm.png\" alt=\"img\"></p>\n<p>对composite结构体进行简单的初始化。</p>\n<p><img src=\"28180759_16WL.png\" alt=\"img\"></p>\n<p>USB_DeviceClassInit，这个函数比较重要，在上一个步骤中被初始化的g_UsbDeviceComposite.deviceHandle，将被在这个函数中重新赋予新的含义，里面设计到很多函数指针，推荐使用source insight可以看得清楚些。</p>\n<p>另外，我这里将Mouse的相关函数给屏蔽掉了，因为我需要实现的是Keyboard。</p>\n<p><img src=\"28180759_16WL-1552581570473.png\" alt=\"img\"></p>\n<p>USB_DeviceClassInit</p>\n<p><img src=\"28180759_wwDU.png\" alt=\"img\"></p>\n<p>configList也就是g_UsbDeviceCompositeConfigList</p>\n<p><img src=\"28180800_V8GF.png\" alt=\"img\"></p>\n<p><img src=\"28180800_YwY2.png\" alt=\"img\"></p>\n<p>可以看到USB_DeviceHidKeyboardCallback显然是个很重要的主，我们进去look look。</p>\n<p><img src=\"28180801_ghw8.png\" alt=\"img\"></p>\n<p>从这个函数里面又会碰到另一个很重要的函数，USB_DeviceHidKeyboardAction()，这个函数里面也就是KSDK中需要我们自己写的用户处理操作函数。</p>\n<p><img src=\"28180801_9eAr.png\" alt=\"img\"></p>\n<p>这个案例默认键盘是不断发出PAGEUP和PAGEDOWN键值，这里只是演示，所以若是要实现真正的产品，那是必须要把这段代码注释掉，来从新写一段新的功能函数代码的。</p>\n","categories":[{"name":"嵌入式","slug":"嵌入式","permalink":"chunlife.top/categories/嵌入式/"}],"tags":[{"name":"Freescale","slug":"Freescale","permalink":"chunlife.top/tags/Freescale/"},{"name":"C语言","slug":"C语言","permalink":"chunlife.top/tags/C语言/"}]},{"title":"MySQL查询","date":"2018-09-22T08:17:51.000Z","path":"2018/09/22/MySQL查询/","content":"<h2 id=\"问题的出现\"><a href=\"#问题的出现\" class=\"headerlink\" title=\"问题的出现\"></a>问题的出现</h2><p>分页查询，其中数据量变大后导致查询速度变慢。</p>\n<a id=\"more\"></a>\n<h2 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h2><p>在查询操作能够做到优化的地方，也是效果最明显的地方应该就是索引的优化，建立好索引能够有效的提高数据查询的速度。</p>\n<p>首先，了解下一个比较有意思的讨论：<a href=\"https://www.v2ex.com/t/443491\" target=\"_blank\" rel=\"noopener\">分页查询，查个 total 很难吗？</a></p>\n<p>通过链接能够看到不同的开发者对分页的理解和提供的解决问题的方法，对了解这个问题的具体含义很有帮助。单单的分页查询其实是涉及到了数据库的一些优化问题，并非表面上看起来那么简单。</p>\n<h2 id=\"分页方式\"><a href=\"#分页方式\" class=\"headerlink\" title=\"分页方式\"></a>分页方式</h2><p>参考链接：<a href=\"https://blog.csdn.net/SpeedMe/article/details/45690027\" target=\"_blank\" rel=\"noopener\">分页性能探索-mysql</a></p>\n<p>1、扶梯分页法：</p>\n<p><img src=\"20150512171006.png\" alt=\"扶梯方式\"></p>\n<p>扶梯分页方式实现简单，操作高效，以当前页为起始页预取下一页。</p>\n<p>2、电梯分页法：</p>\n<p><img src=\"1538187698007.png\" alt=\"电梯分页法\"></p>\n<p>此方法其实是一种精准分页的方式，能够通过前端按键精确跳转页面，精确跳转的前提是需要排除需要跳转的页面（page*count），然后才会获取页面，这个偏移的过程就是一个非常慢的过程，经常是无法用到索引操作。</p>\n<h2 id=\"电梯分页优化\"><a href=\"#电梯分页优化\" class=\"headerlink\" title=\"电梯分页优化\"></a>电梯分页优化</h2><p>博文中提到了一种常见的优化方式，可以说一种”万金油”优化方式，也就是常见的“查两次”：</p>\n<p>先查找出主键ID，利用ID去查询数据（“查两次”）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from production_recorder.6 inner join (select id from production_recorder.6 WHERE errcode like &apos;86:54:37:00:00:%&apos; LIMIT 150000,10) as ids using(id);</span><br></pre></td></tr></table></figure>\n<p>先使用较少IO查找来拿到主键id，然后利用主键id即可超快的获取数据了。</p>\n<p>但是这种方式还是会受到数据库数据持续变大带来的查询效率变低的影响。我们可以使用explain来对mysql语句进行分析：对explain的参数的了解参考链接<a href=\"https://www.cnblogs.com/zhanjindong/p/3439042.html\" target=\"_blank\" rel=\"noopener\">MySQL优化—工欲善其事，必先利其器之EXPLAIN</a>，</p>\n<p>explain分析结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">           id: 1</span><br><span class=\"line\">  select_type: PRIMARY</span><br><span class=\"line\">        table: &lt;derived2&gt;</span><br><span class=\"line\">         type: ALL</span><br><span class=\"line\">possible_keys: NULL</span><br><span class=\"line\">          key: NULL</span><br><span class=\"line\">      key_len: NULL</span><br><span class=\"line\">          ref: NULL</span><br><span class=\"line\">         rows: 10</span><br><span class=\"line\">        Extra: </span><br><span class=\"line\">*************************** 2. row ***************************</span><br><span class=\"line\">           id: 1</span><br><span class=\"line\">  select_type: PRIMARY</span><br><span class=\"line\">        table: 6</span><br><span class=\"line\">         type: eq_ref</span><br><span class=\"line\">possible_keys: PRIMARY</span><br><span class=\"line\">          key: PRIMARY</span><br><span class=\"line\">      key_len: 4</span><br><span class=\"line\">          ref: id.id</span><br><span class=\"line\">         rows: 1</span><br><span class=\"line\">        Extra: </span><br><span class=\"line\">*************************** 3. row ***************************</span><br><span class=\"line\">           id: 2</span><br><span class=\"line\">  select_type: DERIVED</span><br><span class=\"line\">        table: 6</span><br><span class=\"line\">         type: range</span><br><span class=\"line\">possible_keys: idx_6_errcode</span><br><span class=\"line\">          key: idx_6_errcode</span><br><span class=\"line\">      key_len: 768</span><br><span class=\"line\">          ref: NULL</span><br><span class=\"line\">         rows: 518056</span><br><span class=\"line\">        Extra: Using where; Using index</span><br><span class=\"line\">3 rows in set (0.10 sec)</span><br></pre></td></tr></table></figure>\n<p>对电梯分页的性能下降，经过百度与Google的查找，一个疑似的答案是，当数据库偏移一个相对于表数据量来说也是比较大的数据时，那么mysql优化器可能就会不选择走索引，而是走全表扫描，这相当于是mysql优化器在权衡索引与全表扫描后的做出的选择。</p>\n<h2 id=\"扶梯分页的优化\"><a href=\"#扶梯分页的优化\" class=\"headerlink\" title=\"扶梯分页的优化\"></a>扶梯分页的优化</h2><p>参考链接：<a href=\"https://blog.jamespan.me/2015/01/22/trick-of-paging-query\" target=\"_blank\" rel=\"noopener\">分页查询的那些坑和各种技巧</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from product.record WHERE errcode in (&quot;2134&quot;,&quot;13253&quot;) and id &gt; 10000 LIMIT 10;</span><br></pre></td></tr></table></figure>\n<p>这里使用id进行直接跳转，能够非常快速的越过已查询的数据，对未查询的数据进行查询，速度非常稳定。</p>\n<p>为了检测下一页是否有数据，在查询时可以</p>\n<p>查询完成后，计算结果集中ID的最大值，作为下一次id的起始值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">requiredResultMaxId</span><span class=\"params\">(recordList []models.Record)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tlens := <span class=\"built_in\">len</span>(recordList)</span><br><span class=\"line\">\tidArr := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, lens)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index, record := <span class=\"keyword\">range</span> recordList &#123;</span><br><span class=\"line\">\t\tidArr[index] = <span class=\"keyword\">int</span>(record.Id)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !sort.IntsAreSorted(idArr) &#123;</span><br><span class=\"line\">\t\tsort.Ints(idArr)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> idArr[lens<span class=\"number\">-1</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总数\"><a href=\"#总数\" class=\"headerlink\" title=\"总数\"></a>总数</h2><p>除了获取具体的数量，分页还有一个就是获取查询的总数，这样前端才能很好的进行渲染工作。</p>\n<p>这里也是有几种方法：</p>\n<p>1、若取全表，则可以直接取自增主键的最大值（数据不会变化，且ID为自增主键）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select max(id) from tablename</span><br></pre></td></tr></table></figure>\n<p>2、使用explain获取近似主键。</p>\n<p>3、在另外一张表中维护一个总数，插入一个加1。</p>\n<h2 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h2><p>就像参考博客中说的，根据业务对分页方式进行选择。当然作为开发者那得根据整体的设计来进行选择，有时候也会身不由己。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>对于分页好像没有想象中那么简单，分页具体到细节其实是查询，对于查询有分区，分库分表，这样的操作，这些东西现在还不太了解，借此机会还是需要去好好了解了解的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">分表以后只有一种查询方式会效率高，那就是根据分表键查。其他查询条件相反会慢于没分表前的正表查询。 所以能不分尽量不要分表。大数据量的查询可以使用读写分离，旧数据归档。（取自某一篇博客）</span><br></pre></td></tr></table></figure>\n<p>上述中，参考的博客都写得非常不错，具有可观的参考价值，感谢这些前辈的意见。</p>\n<p>如果有相关信息违反任何版权，请直接联系我进行删除。</p>\n<h2 id=\"2018年11月20日\"><a href=\"#2018年11月20日\" class=\"headerlink\" title=\"2018年11月20日\"></a>2018年11月20日</h2><p>分页中其实可以采取一种取巧的方式：</p>\n<p>如何将分页方法过渡到电梯分页的方法上呢？</p>\n<p>这里需要与前端进行配合。例如：</p>\n<p><img src=\"clip_image002.jpg\" alt=\"img\"></p>\n<p>这种分页是大多数电梯分页的选择，可以看到用户在选择分页时，其实是只能选择7页的，例如用户在点击第5页后的变化。</p>\n<p><img src=\"clip_image004.jpg\" alt=\"img\"></p>\n<p>等于说，在当前页，用户最多能看见第一页和最后一页，以及当前页的前两页和后两页数据，那么也就可以将查询范围给控制在7页的范围内。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> current_id; <span class=\"comment\">// id of first record on current page.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// go to page current+N</span></span><br><span class=\"line\">db.collection.find(&#123;_id: &#123;$gte: current_id&#125;&#125;).</span><br><span class=\"line\">              skip(N * page_size).</span><br><span class=\"line\">              limit(page_size).</span><br><span class=\"line\">              sort(&#123;_id: <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// go to page current-N</span></span><br><span class=\"line\"><span class=\"comment\">// note that due to the nature of skipping back,</span></span><br><span class=\"line\"><span class=\"comment\">// this query will get you records in reverse order </span></span><br><span class=\"line\"><span class=\"comment\">// (last records on the page being first in the resultset)</span></span><br><span class=\"line\"><span class=\"comment\">// You should reverse them in the app.</span></span><br><span class=\"line\">db.collection.find(&#123;_id: &#123;$lt: current_id&#125;&#125;).</span><br><span class=\"line\">              skip((N<span class=\"number\">-1</span>)*page_size).</span><br><span class=\"line\">              limit(page_size).</span><br><span class=\"line\">              sort(&#123;_id: <span class=\"number\">-1</span>&#125;);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://stackoverflow.com/questions/9703319/mongodb-ranged-pagination\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/9703319/mongodb-ranged-pagination</a></p>\n<p>MySQL同样可以使用这种方式进行分页，分页效率非常稳定可靠。</p>\n<p>而对总数信息的获取，则可以使用：SHOW TABLE STATUS或者是explain。</p>\n","categories":[{"name":"MySQL","slug":"MySQL","permalink":"chunlife.top/categories/MySQL/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"MySQL","slug":"MySQL","permalink":"chunlife.top/tags/MySQL/"}]},{"title":"网关选择","date":"2018-09-22T08:11:30.000Z","path":"2018/09/22/网关选择/","content":"<h2 id=\"可选择\"><a href=\"#可选择\" class=\"headerlink\" title=\"可选择\"></a>可选择</h2><p><a href=\"https://github.com/TykTechnologies/tyk\" target=\"_blank\" rel=\"noopener\">https://github.com/TykTechnologies/tyk</a></p>\n<p><a href=\"https://github.com/fagongzi/gateway\" target=\"_blank\" rel=\"noopener\">https://github.com/fagongzi/gateway</a></p>\n<p><a href=\"https://github.com/hellofresh/janus\" target=\"_blank\" rel=\"noopener\">https://github.com/hellofresh/janus</a></p>\n<p><a href=\"https://github.com/Netflix/zuul\" target=\"_blank\" rel=\"noopener\">https://github.com/Netflix/zuul</a></p>\n<a id=\"more\"></a>\n<p><a href=\"https://aws.amazon.com/api-gateway\" target=\"_blank\" rel=\"noopener\">https://aws.amazon.com/api-gateway</a></p>\n<p><a href=\"https://getkong.org/\" target=\"_blank\" rel=\"noopener\">https://getkong.org/</a></p>\n<p><a href=\"https://github.com/adobe-apiplatform/apigateway\" target=\"_blank\" rel=\"noopener\">https://github.com/adobe-apiplatform/apigateway</a></p>\n<p><a href=\"https://github.com/claudiajs/claudia\" target=\"_blank\" rel=\"noopener\">https://github.com/claudiajs/claudia</a></p>\n<p><a href=\"http://orange.sumory.com/\" target=\"_blank\" rel=\"noopener\">http://orange.sumory.com/</a></p>\n<p>主要可使用的网关大概是上述的这些（不包括某些专业级网关以及名气不够且star数量低于1K的项目）。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>用的最多的是网关kong，使用的是Nginx-Lua，Gateway开源，使用的插件部分免费，属于基本可用的范畴，考虑到技术栈使用的是Go，考虑使用相同语言的插件便于后期进行改造，节省人力。（虽然微服务提倡的观念是对特定的服务使用其最适合的语言进行编写，但是在考虑到不同技术栈的同步问题，使用同一技术栈在前期可能会好一点）。</p>\n<p>在此想法的前提下，可以考虑的网关包括：</p>\n<p><a href=\"https://github.com/TykTechnologies/tyk\" target=\"_blank\" rel=\"noopener\">https://github.com/TykTechnologies/tyk</a></p>\n<p><a href=\"https://github.com/fagongzi/gateway\" target=\"_blank\" rel=\"noopener\">https://github.com/fagongzi/gateway</a></p>\n<p><a href=\"https://github.com/hellofresh/janus\" target=\"_blank\" rel=\"noopener\">https://github.com/hellofresh/janus</a></p>\n<p>tyk也算是比较好的，同样是该有的都有，根据使用的人数，可能是仅次于kong的，tyk是需要收取费用来进行使用的，当然若需求只需要进行单节点布置，那也可以使用Tyk，若考虑到以后进行分布式部署的情况，Tyk显然就不太适合进行后续部署了（若是能够花钱的话，当然也是没有问题的，俩节点$600每月）。</p>\n<p>那这样就剩下gateway和janus。</p>\n<p>gateway与Janus两者较相似，都是轻量级网关，故功能相对于一个成熟的网关来说都各有各的缺失，具体上如果针对于小型需求来说，其基本都能满足；</p>\n<ul>\n<li>GitHub star均超过1.2K；</li>\n<li>资料，两者都属于较少，不过根据官方文档部署和基础使用没有太大问题；</li>\n<li>部署，支持docker部署，官方文档都有基础的介绍。</li>\n<li>功能，两者基本功能可能都有（例如限流，断路器等），高级功能可能都缺失，例如日志收集和消息队列，两者的文档里面好像都没有提到。</li>\n<li>周边，两者都是没有社区存在的，janus star数量会超过gateway一些；</li>\n<li>配置，janus设置使用json文件，gateway通过client模块API调用进行配置，两者都不需要重启网关；</li>\n<li>分布式支持；</li>\n</ul>\n<p>根据分析来看，在项目的部署上使用哪一种，主要是看在网关本身的部署难度和使用难度上。</p>\n","categories":[{"name":"Go","slug":"Go","permalink":"chunlife.top/categories/Go/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"Gateway","slug":"Gateway","permalink":"chunlife.top/tags/Gateway/"}]},{"title":"mysql操作(不定时持续补充)","date":"2018-09-14T09:40:39.000Z","path":"2018/09/14/mysql操作-不定时持续补充/","content":"<p>mysql操作是不区分大小写的。</p>\n<h1 id=\"Mysql安装后若出现问题\"><a href=\"#Mysql安装后若出现问题\" class=\"headerlink\" title=\"Mysql安装后若出现问题\"></a>Mysql安装后若出现问题</h1><p>ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/run/mysqld/mysqld.sock’ (2)</p>\n<a id=\"more\"></a>\n<p>解决方式：</p>\n<p> touch /var/run/mysqld/mysqld.sock</p>\n<p>ls -lart /var/run/mysqld/</p>\n<p>chown -R mysql /var/run/mysqld</p>\n<p>ls -lart /var/run/mysqld/</p>\n<p>mysql restart</p>\n<p>/etc/init.d/mysql restart</p>\n<h1 id=\"基础操作\"><a href=\"#基础操作\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h1><p>1 添加表字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table table1 add transactor varchar(10) not Null;</span><br><span class=\"line\"></span><br><span class=\"line\">alter table table1 add id int unsigned not Null auto_increment primary key</span><br></pre></td></tr></table></figure>\n<p>2 如果要删除某一字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE mytable DROP 字段名;</span><br></pre></td></tr></table></figure>\n<p>3 修改数据表字段的默认值：</p>\n<p>修改字段默认值：role_id默认值设置为：1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table users_info alter column role_id set default 1;</span><br></pre></td></tr></table></figure>\n<p>修改字段默认值语法：</p>\n<p>alter table 表名 alter column 字段名 drop default; (若本身存在默认值，则先删除)</p>\n<p>alter table 表名 alter column 字段名 set default 默认值;(若本身不存在则可以直接设定)</p>\n<h1 id=\"预处理\"><a href=\"#预处理\" class=\"headerlink\" title=\"预处理\"></a>预处理</h1><p><a href=\"https://cloud.tencent.com/developer/article/1066988\" target=\"_blank\" rel=\"noopener\">数据库操作, 关于stmt, prepare</a></p>\n<h1 id=\"JOIN\"><a href=\"#JOIN\" class=\"headerlink\" title=\"JOIN\"></a>JOIN</h1><p>使用Join， Inner join取得两表间类似的数据，<a href=\"https://blog.csdn.net/w348399060/article/details/70158125\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<p><img src=\"1.png\" alt=\"命令\"></p>\n<p><img src=\"2.png\" alt=\"432\"></p>\n<h1 id=\"mysql隐式转换\"><a href=\"#mysql隐式转换\" class=\"headerlink\" title=\"mysql隐式转换\"></a>mysql隐式转换</h1><p>mysql隐式转换，会造成SQL慢查询，因为SQL转化后，即使使用索引查询，SQL也不会认为其是索引。</p>\n<p><a href=\"http://xiaorui.cc/2018/04/13/%e8%ae%b0%e4%b8%80%e6%ac%a1%e9%9a%90%e5%bc%8f%e8%bd%ac%e6%8d%a2%e5%bc%95%e8%b5%b7%e7%9a%84sql%e6%85%a2%e6%9f%a5%e8%af%a2/\" target=\"_blank\" rel=\"noopener\">记一次隐式转换引起的sql慢查询</a></p>\n<h1 id=\"日期索引\"><a href=\"#日期索引\" class=\"headerlink\" title=\"日期索引\"></a>日期索引</h1><p><a href=\"https://blog.csdn.net/spider_zhcl/article/details/53323166\" target=\"_blank\" rel=\"noopener\">Mysql 索引问题-日期索引使用</a></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在查询数据条数约占总条数五分之一以下时能够使用到索引，但超过五分之一时，则使用全表扫描了。</span><br></pre></td></tr></table></figure>\n<h1 id=\"查询缓存\"><a href=\"#查询缓存\" class=\"headerlink\" title=\"查询缓存\"></a>查询缓存</h1><p><a href=\"https://www.cnblogs.com/gimin/p/5459689.html\" target=\"_blank\" rel=\"noopener\">MySQL查询缓存打开、设置、参数查询、性能变量</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW VARIABLES LIKE &apos;%query_cache%&apos;;</span><br><span class=\"line\">+------------------------------+---------+</span><br><span class=\"line\">| Variable_name                | Value   |</span><br><span class=\"line\">+------------------------------+---------+</span><br><span class=\"line\">| have_query_cache             | YES     |</span><br><span class=\"line\">| query_cache_limit            | 1048576 |</span><br><span class=\"line\">| query_cache_min_res_unit     | 4096    |</span><br><span class=\"line\">| query_cache_size             | 1048576 |</span><br><span class=\"line\">| query_cache_type             | OFF     |</span><br><span class=\"line\">| query_cache_wlock_invalidate | OFF     |</span><br><span class=\"line\">+------------------------------+---------+</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show global status like &apos;QCache%&apos;;</span><br><span class=\"line\">+-------------------------+---------+</span><br><span class=\"line\">| Variable_name           | Value   |</span><br><span class=\"line\">+-------------------------+---------+</span><br><span class=\"line\">| Qcache_free_blocks      | 1       |</span><br><span class=\"line\">| Qcache_free_memory      | 1031832 |</span><br><span class=\"line\">| Qcache_hits             | 0       |</span><br><span class=\"line\">| Qcache_inserts          | 0       |</span><br><span class=\"line\">| Qcache_lowmem_prunes    | 0       |</span><br><span class=\"line\">| Qcache_not_cached       | 106     |</span><br><span class=\"line\">| Qcache_queries_in_cache | 0       |</span><br><span class=\"line\">| Qcache_total_blocks     | 1       |</span><br><span class=\"line\">+-------------------------+---------+</span><br></pre></td></tr></table></figure>\n<h1 id=\"mysql调试\"><a href=\"#mysql调试\" class=\"headerlink\" title=\"mysql调试\"></a>mysql调试</h1><p>慢查询可以将mysql执行慢的语句记录下来。</p>\n<p><a href=\"http://blog.51yip.com/mysql/972.html\" target=\"_blank\" rel=\"noopener\">linux下开启mysql慢查询，分析查询语句</a></p>\n<p><a href=\"http://www.cnblogs.com/luyucheng/p/6265594.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/luyucheng/p/6265594.html</a></p>\n<p>慢查询使用pt-query-digest进行分析：</p>\n<p>安装过程：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# wget percona.com/get/pt-query-digest</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]# chmod u+x pt-query-digest</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]# mv /root/pt-query-digest /usr/bin/</span><br></pre></td></tr></table></figure>\n<p>开启慢查询后，会有慢查询的日志，对日志使用工具：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pt-query-digest --explain h=127.0.0.1,u=root,p=123 mysql_slow.log &gt; pt.ref</span><br></pre></td></tr></table></figure>\n<p>开启实时查询，能够得到每一次SQL语句的完整执行语句。</p>\n<p><a href=\"https://blog.csdn.net/qidaif/article/details/80931703\" target=\"_blank\" rel=\"noopener\">MySQL查看实时执行的SQL语句</a></p>\n<h1 id=\"mysql插入CSV文件\"><a href=\"#mysql插入CSV文件\" class=\"headerlink\" title=\"mysql插入CSV文件\"></a>mysql插入CSV文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOAD DATA LOCAL INFILE &apos;./dbtestdata.csv&apos; INTO TABLE production_recorder.6 CHARACTER SET UTF8 FIELDS TERMINATED BY &apos;,&apos; LINES TERMINATED BY &apos;\\n&apos;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"GORM使用\"><a href=\"#GORM使用\" class=\"headerlink\" title=\"GORM使用\"></a>GORM使用</h1><h2 id=\"查找最大值\"><a href=\"#查找最大值\" class=\"headerlink\" title=\"查找最大值\"></a>查找最大值</h2><p><img src=\"3.png\" alt=\"查询\"></p>\n<h2 id=\"时间戳跟踪\"><a href=\"#时间戳跟踪\" class=\"headerlink\" title=\"时间戳跟踪\"></a>时间戳跟踪</h2><p>Gorm里面有个结构体：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// gorm.Model definition</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Model <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  ID        <span class=\"keyword\">uint</span> <span class=\"string\">`gorm:\"primary_key\"`</span></span><br><span class=\"line\">  CreatedAt time.Time</span><br><span class=\"line\">  UpdatedAt time.Time</span><br><span class=\"line\">  DeletedAt *time.Time</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这四个参数是Gorm固定的参数，例如，如果结构体中有“ID”成员，那么建表时它就是表中的主键。</p>\n<p>CreatedAt：也就是插入值时默认添加的时间戳；</p>\n<p>UpdatedAt：更新时添加的时间戳；</p>\n<p>DeletedAt：被删除时添加的时间戳。（有一个软删除的概念）</p>\n<p>GORM默认是使用蛇形命名，也就是CreatedAt成员将被命名为“created_at”。</p>\n<p>select * from production_recorder.6  WHERE errcode like “86:54:37%” LIMIT 1000000,10;</p>\n<h2 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h2><p><a href=\"https://stackoverflow.com/questions/46807891/using-a-subquery-in-from-in-gorm?rq=1\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/46807891/using-a-subquery-in-from-in-gorm?rq=1</a></p>\n<p><img src=\"count自加1.png\" alt=\"count自加1\"></p>\n<p><img src=\"1538015777465.png\" alt=\"子查询\"></p>\n<p>从手册上摘出来的子查询使用方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Where(<span class=\"string\">\"amount &gt; ?\"</span>, DB.Table(<span class=\"string\">\"orders\"</span>).Select(<span class=\"string\">\"AVG(amount)\"</span>).Where(<span class=\"string\">\"state = ?\"</span>, <span class=\"string\">\"paid\"</span>).QueryExpr()).Find(&amp;orders)</span><br><span class=\"line\"><span class=\"comment\">// SELECT * FROM \"orders\"  WHERE \"orders\".\"deleted_at\" IS NULL AND (amount &gt; (SELECT AVG(amount) FROM \"orders\"  WHERE (state = 'paid')));</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"打印Gorm执行语句（包含时间）\"><a href=\"#打印Gorm执行语句（包含时间）\" class=\"headerlink\" title=\"打印Gorm执行语句（包含时间）\"></a>打印Gorm执行语句（包含时间）</h2><p>将执行的语句打印出来。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Debug a single operation, show detailed log for this operation</span></span><br><span class=\"line\">db.Debug().Where(<span class=\"string\">\"name = ?\"</span>, <span class=\"string\">\"jinzhu\"</span>).First(&amp;User&#123;&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"gorm拼接SQL语句\"><a href=\"#gorm拼接SQL语句\" class=\"headerlink\" title=\"gorm拼接SQL语句\"></a>gorm拼接SQL语句</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dt = dt.Table(models.TableRecords)</span><br><span class=\"line\"></span><br><span class=\"line\">scope := dt.NewScope(dt.Value)</span><br><span class=\"line\">scope.InstanceSet(<span class=\"string\">\"skip_bindvar\"</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">scope.Raw(fmt.Sprintf(<span class=\"string\">\"explain SELECT %v FROM %v %v\"</span>, <span class=\"string\">\"count(*)\"</span>,</span><br><span class=\"line\">\tscope.QuotedTableName(),</span><br><span class=\"line\">\tscope.CombinedConditionSql()))</span><br><span class=\"line\"></span><br><span class=\"line\">dbs.DbRecords.Raw(scope.SQL, scope.SQLVars...).Scan(&amp;test)</span><br></pre></td></tr></table></figure>\n<p>Gorm的官方文档其实已经比较详细了，想跟深入的了解，可以直接去看官方文档：</p>\n<p><a href=\"http://gorm.io/docs/conventions.html#Timestamp-Tracking\" target=\"_blank\" rel=\"noopener\">http://gorm.io/docs/conventions.html#Timestamp-Tracking</a></p>\n<p><a href=\"https://jasperxu.github.io/gorm-zh/\" target=\"_blank\" rel=\"noopener\">https://jasperxu.github.io/gorm-zh/</a></p>\n","categories":[{"name":"MySQL","slug":"MySQL","permalink":"chunlife.top/categories/MySQL/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"MySQL","slug":"MySQL","permalink":"chunlife.top/tags/MySQL/"}]},{"title":"interface对结构体数组","date":"2018-09-14T07:29:01.000Z","path":"2018/09/14/interface对结构体数组/","content":"<p>interface非常好用，相当于一个空类型，什么类型都可以被它接受，可以说在传参上是非常方便的，那问题来了，什么类型它都能转得回去吗，结果是不能的。</p>\n<p>这个问题，我自己碰到了两次，每次都没记录，每次都很干脆的忘了。</p>\n<a id=\"more\"></a>\n<p>一个API接口上可以接受好几个结构体数组，我使用interface来进行接受，此时我使用断言来进行类型转换，很显然无法成功进行断言。</p>\n<p>这个问题呢，我们先看看官方对interfaceSlice做出的一个解释。</p>\n<p><a href=\"https://github.com/golang/go/wiki/InterfaceSlice\" target=\"_blank\" rel=\"noopener\">https://github.com/golang/go/wiki/InterfaceSlice</a></p>\n<p>也可以看此篇博客的中文，和原文大概意思相同，建议两篇都看，毕竟原文才是官方的原意。</p>\n<p><a href=\"https://www.jianshu.com/p/e0abcbc220a4\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/e0abcbc220a4</a></p>\n<p>其中说的其实是interfaceSlice的问题，这里我们知道了interface的结构组成，再来解决问题。</p>\n<p><a href=\"https://stackoverflow.com/questions/12753805/type-converting-slices-of-interfaces-in-go\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/12753805/type-converting-slices-of-interfaces-in-go</a></p>\n<p>楼主的问题：</p>\n<p><img src=\"question.png\" alt=\"问题\"></p>\n<p>得分最高的回答：</p>\n<p><img src=\"1536911326824.png\" alt=\"解答\"></p>\n<p>这里我翻译一下：</p>\n<p>在Go中，一般语法是不应该隐藏那些复杂或耗费资源的操作的，转换string类型到interface类型算法可以O（1）时间内完成。切片[]string依然可以被视作是一个值（译者：我感觉这里可以将切片看做是一个连续内存的结构来将其视作一个值），转换到interface依然可以在O（1）时间内完成。</p>\n<p>此规则有一个例外——就是转换字符串，当转换变量string a，[]byte a或者是[]rune a，虽然算法难度为O（n），但还是可以视作正常操作。</p>\n<p>其实到这里就可以解决我们的问题了，interface用断言来做类型转换是官方干脆就没想过要做到那么复杂的程度，若是开发者需要做，可以采用反射来自己去实现这种操作的。</p>\n<p>这里贴一个：</p>\n<p><a href=\"https://github.com/issue9/conv/blob/master/obj.go#L75\" target=\"_blank\" rel=\"noopener\">https://github.com/issue9/conv/blob/master/obj.go#L75</a></p>\n<p>另外，还附上一个对interface断言的博客文章：</p>\n<p><a href=\"https://medium.com/golangspec/type-assertions-in-go-e609759c42e1\" target=\"_blank\" rel=\"noopener\">Type assertions in Go</a></p>\n","categories":[{"name":"Go","slug":"Go","permalink":"chunlife.top/categories/Go/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"interface","slug":"interface","permalink":"chunlife.top/tags/interface/"}]},{"title":"json操作","date":"2018-09-14T06:07:42.000Z","path":"2018/09/14/json操作/","content":"<p>json算是比较好理解的组织结构方式了，现在RESTful那一套基本也是使用json来作为传输的数据格式了。</p>\n<a id=\"more\"></a>\n<h1 id=\"json库\"><a href=\"#json库\" class=\"headerlink\" title=\"json库\"></a>json库</h1><p>我使用的是<a href=\"https://github.com/json-iterator/go，号称是非常快的，与Java的库类似。\" target=\"_blank\" rel=\"noopener\">https://github.com/json-iterator/go，号称是非常快的，与Java的库类似。</a></p>\n<p>还有一些其他的，摘自json-iterator/go。</p>\n<table>\n<thead>\n<tr>\n<th>ns/op</th>\n<th>allocation bytes</th>\n<th>allocation times</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>std decode</td>\n<td>35510 ns/op</td>\n<td>1960 B/op</td>\n<td>99 allocs/op</td>\n</tr>\n<tr>\n<td>easyjson decode</td>\n<td>8499 ns/op</td>\n<td>160 B/op</td>\n<td>4 allocs/op</td>\n</tr>\n<tr>\n<td>jsoniter decode</td>\n<td>5623 ns/op</td>\n<td>160 B/op</td>\n<td>3 allocs/op</td>\n</tr>\n<tr>\n<td>std encode</td>\n<td>2213 ns/op</td>\n<td>712 B/op</td>\n<td>5 allocs/op</td>\n</tr>\n<tr>\n<td>easyjson encode</td>\n<td>883 ns/op</td>\n<td>576 B/op</td>\n<td>3 allocs/op</td>\n</tr>\n<tr>\n<td>jsoniter encode</td>\n<td>837 ns/op</td>\n<td>384 B/op</td>\n<td>4 allocs/op</td>\n</tr>\n</tbody>\n</table>\n<p>当然，这是开发者提供的，golang json库还有很多，性能差距感觉不会是最影响项目的因素，若是代码本身出了问题，那不是单单是一个好库能够解决的。</p>\n<h1 id=\"json格式\"><a href=\"#json格式\" class=\"headerlink\" title=\"json格式\"></a>json格式</h1><p><img src=\"json格式.png\" alt=\"json格式\"></p>\n<h1 id=\"json-解析\"><a href=\"#json-解析\" class=\"headerlink\" title=\"json 解析\"></a>json 解析</h1><p>库是怎么找到结构体对应的字段进行解析的呢？</p>\n<p><img src=\"1536908063319.png\" alt=\"1536908063319\"></p>\n<p>json的tag是库用来响应使用者提前预设的操作的，用来控制库的编码解码操作。</p>\n<p><img src=\"1536908018808.png\" alt=\"json解析\"></p>\n<p>我常用到的tag：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Message struct &#123;  </span><br><span class=\"line\">    Name string `json:\"msg_name\"`       // 对应JSON的msg_name  </span><br><span class=\"line\">    Body string `json:\"body,omitempty\"` // 如果为空置则忽略字段  </span><br><span class=\"line\">    Time int64  `json:\"-\"`              // 直接忽略字段  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用omitempty，如果该字段为nil或0值（数字0,字符串””,空数组[]等），则打包的JSON结果不会有这个字段。</p>\n<p>golang官方库中其实没有对“required”字段的支持，这个字段表示被标识的字段没有接受到值则报错（数字0,字符串””,空数组[]等也会报错）。</p>\n<p>使用web gin有这个tag，</p>\n<p><img src=\"clip_image001.png\" alt=\"gin required\"></p>\n<p>我还查到过一个很有意思的解决字段是否被传递的方法：</p>\n<p>若需要使用encoding/json来检查缺少的字段，则必须使用指针来区分missing/null和zero值：</p>\n<p><a href=\"https://stackoverflow.com/questions/19633763/unmarshaling-json-in-golang-required-field\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/19633763/unmarshaling-json-in-golang-required-field</a></p>\n<p><img src=\"clip_image001.png\" alt=\"指针方式\"></p>\n<h1 id=\"序列化美化json数据\"><a href=\"#序列化美化json数据\" class=\"headerlink\" title=\"序列化美化json数据\"></a>序列化美化json数据</h1><p>json.MarshalIndent</p>\n","categories":[{"name":"Go","slug":"Go","permalink":"chunlife.top/categories/Go/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"gin","slug":"gin","permalink":"chunlife.top/tags/gin/"},{"name":"json","slug":"json","permalink":"chunlife.top/tags/json/"}]},{"title":"gin的学习框架","date":"2018-09-11T06:22:14.000Z","path":"2018/09/11/gin的学习框架/","content":"<p>为了以后的开发便利，这里添加一个gin的框架结构。 </p>\n<a id=\"more\"></a>\n<p>gin现在已经有自己的中文帮助手册，那直接参考它的中文手册就好了，<a href=\"https://gin-gonic.com/zh-cn/docs/#contents\" target=\"_blank\" rel=\"noopener\">文档</a>。</p>\n<p><a href=\"https://github.com/younglifestyle/goexamples/tree/master/gin-demo\" target=\"_blank\" rel=\"noopener\">https://github.com/younglifestyle/goexamples/tree/master/gin-demo</a></p>\n<p>gin中还有对session的中间库，很多中间库和beego很类似，还是很方便的。</p>\n<h3 id=\"gin-HTTP-Server启动时自定义参数\"><a href=\"#gin-HTTP-Server启动时自定义参数\" class=\"headerlink\" title=\"gin HTTP Server启动时自定义参数\"></a>gin HTTP Server启动时自定义参数</h3><p>例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\trouter := gin.Default()</span><br><span class=\"line\">\thttp.ListenAndServe(<span class=\"string\">\":8080\"</span>, router)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\trouter := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">\ts := &amp;http.Server&#123;</span><br><span class=\"line\">\t\tAddr:           <span class=\"string\">\":8080\"</span>,</span><br><span class=\"line\">\t\tHandler:        router,</span><br><span class=\"line\">\t\tReadTimeout:    <span class=\"number\">10</span> * time.Second,</span><br><span class=\"line\">\t\tWriteTimeout:   <span class=\"number\">10</span> * time.Second,</span><br><span class=\"line\">\t\tMaxHeaderBytes: <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">20</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts.ListenAndServe()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数支持\"><a href=\"#参数支持\" class=\"headerlink\" title=\"参数支持\"></a>参数支持</h3><p>gin可以直接对URL query、json以及form进行序列化。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用gin可以猜测传递的参数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tmp <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">c.ShouldBind(&amp;tmp)   </span><br><span class=\"line\">c.Bind(&amp;tmp)</span><br></pre></td></tr></table></figure>\n<h3 id=\"json-Tag\"><a href=\"#json-Tag\" class=\"headerlink\" title=\"json Tag\"></a>json Tag</h3><p><code>binding:&quot;required&quot;</code>，gin框架会对此tag进行检查，添加后，意味着在接受数据时，query、表单或者body中必须要匹配到该字段。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> UserToken <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tUserId <span class=\"keyword\">string</span> <span class=\"string\">`json:\"userid\" form:\"userid\" binding:\"required\"`</span></span><br><span class=\"line\">\tToken  <span class=\"keyword\">string</span> <span class=\"string\">`json:\"token\" form:\"token\" binding:\"required\"`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"请求中使用Goroutine\"><a href=\"#请求中使用Goroutine\" class=\"headerlink\" title=\"请求中使用Goroutine\"></a>请求中使用Goroutine</h3><p>在中间件或处理程序中启动新的Goroutines时，不应该使用其中的原始上下文，必须使用只读副本。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">\tr.GET(<span class=\"string\">\"/long_async\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// create copy to be used inside the goroutine</span></span><br><span class=\"line\">\t\tcCp := c.Copy()</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// simulate a long task with time.Sleep(). 5 seconds</span></span><br><span class=\"line\">\t\t\ttime.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// note that you are using the copied context \"cCp\", IMPORTANT</span></span><br><span class=\"line\">\t\t\tlog.Println(<span class=\"string\">\"Done! in path \"</span> + cCp.Request.URL.Path)</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\tr.GET(<span class=\"string\">\"/long_sync\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// simulate a long task with time.Sleep(). 5 seconds</span></span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// since we are NOT using a goroutine, we do not have to copy the context</span></span><br><span class=\"line\">\t\tlog.Println(<span class=\"string\">\"Done! in path \"</span> + c.Request.URL.Path)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Listen and serve on 0.0.0.0:8080</span></span><br><span class=\"line\">\tr.Run(<span class=\"string\">\":8080\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"Go","slug":"Go","permalink":"chunlife.top/categories/Go/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"gin","slug":"gin","permalink":"chunlife.top/tags/gin/"}]},{"title":"服务器上传下载问题","date":"2018-09-02T12:34:19.000Z","path":"2018/09/02/服务器上传下载问题/","content":"<p>做过服务器上传下载的一个接口，将其整理整理写出来备忘吧。</p>\n<a id=\"more\"></a>\n<h1 id=\"上传文件\"><a href=\"#上传文件\" class=\"headerlink\" title=\"上传文件\"></a>上传文件</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 上传时，前端需要使用form对文件进行上传</span></span><br><span class=\"line\">r.Body = http.MaxBytesReader(w, r.Body, MAX_UPLOAD_SIZE)  <span class=\"comment\">// 设置文件限制大小</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> err := r.ParseMultipartForm(MAX_UPLOAD_SIZE); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    sendErrorResponse(w, http.StatusBadRequest, <span class=\"string\">\"File is too big\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">file, _, err := r.FormFile(<span class=\"string\">\"file\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Printf(<span class=\"string\">\"Error when try to get file: %v\"</span>, err)</span><br><span class=\"line\">    sendErrorResponse(w, http.StatusInternalServerError, <span class=\"string\">\"Internal Error\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">data, err := ioutil.ReadAll(file)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Printf(<span class=\"string\">\"Read file error: %v\"</span>, err)</span><br><span class=\"line\">    sendErrorResponse(w, http.StatusInternalServerError, <span class=\"string\">\"Internal Error\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">err = ioutil.WriteFile(<span class=\"string\">\"./store\"</span><span class=\"string\">\"\"</span>, data, <span class=\"number\">0666</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Printf(<span class=\"string\">\"write file error: %v\"</span>, err)</span><br><span class=\"line\">    sendErrorResponse(w, http.StatusInternalServerError, <span class=\"string\">\"Internal Error\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"下载文件（Gin）\"><a href=\"#下载文件（Gin）\" class=\"headerlink\" title=\"下载文件（Gin）\"></a>下载文件（Gin）</h1><p>下载前端可直接使用windows.location.href，该函数会发出“Get”请求到服务器，不过这里就会要求将通信参数都置于URL中，若别人拿着链接就可以直接进行下载操作了。</p>\n<p>此处是可以将请求变为POST的，也就是不使用windows.location.href来做，这里我就不做太多介绍了。</p>\n<p>后端核心代码，Header参数填写来自beego，见文章末尾。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">downloadFileToClient</span><span class=\"params\">(c *gin.Context, filePath <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置浏览器是否为直接下载文件，且为浏览器指定下载文件的名字</span></span><br><span class=\"line\">        c.Header(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"attachment; filename=\"</span>+url.QueryEscape(path.Base(filePath)))</span><br><span class=\"line\">        c.Header(<span class=\"string\">\"Content-Description\"</span>, <span class=\"string\">\"File Transfer\"</span>)</span><br><span class=\"line\">        c.Header(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/octet-stream\"</span>)</span><br><span class=\"line\">        c.Header(<span class=\"string\">\"Content-Transfer-Encoding\"</span>, <span class=\"string\">\"binary\"</span>)</span><br><span class=\"line\">        c.Header(<span class=\"string\">\"Expires\"</span>, <span class=\"string\">\"0\"</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 如果缓存过期了，会再次和原来的服务器确定是否为最新数据，而不是和中间的proxy</span></span><br><span class=\"line\">        c.Header(<span class=\"string\">\"Cache-Control\"</span>, <span class=\"string\">\"must-revalidate\"</span>)</span><br><span class=\"line\">        c.Header(<span class=\"string\">\"Pragma\"</span>, <span class=\"string\">\"public\"</span>)</span><br><span class=\"line\">        c.File(filePath)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"指定浏览器直接下载文件，不进行打开操作\"><a href=\"#指定浏览器直接下载文件，不进行打开操作\" class=\"headerlink\" title=\"指定浏览器直接下载文件，不进行打开操作\"></a>指定浏览器直接下载文件，不进行打开操作</h2><p><a href=\"https://segmentfault.com/q/1010000000692593\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/q/1010000000692593</a></p>\n<p><a href=\"https://golangtc.com/t/54d9ca47421aa9170200000f\" target=\"_blank\" rel=\"noopener\">https://golangtc.com/t/54d9ca47421aa9170200000f</a></p>\n<p><img src=\"clip_image001.png\" alt=\"下载Header设置\"></p>\n<h2 id=\"Go作为客户端下载文件，实现类似于Wget的效果\"><a href=\"#Go作为客户端下载文件，实现类似于Wget的效果\" class=\"headerlink\" title=\"Go作为客户端下载文件，实现类似于Wget的效果\"></a>Go作为客户端下载文件，实现类似于Wget的效果</h2><p>Downloading large files in Go  <a href=\"https://github.com/cavaliercoder/grab\" target=\"_blank\" rel=\"noopener\">https://github.com/cavaliercoder/grab</a></p>\n<p>来自 &lt;<a href=\"http://cavaliercoder.com/blog/downloading-large-files-in-go.html\" target=\"_blank\" rel=\"noopener\">http://cavaliercoder.com/blog/downloading-large-files-in-go.html</a>&gt; </p>\n<h2 id=\"文件读写的问题：\"><a href=\"#文件读写的问题：\" class=\"headerlink\" title=\"文件读写的问题：\"></a>文件读写的问题：</h2><p>ReadAll后，再去读文件数据，为空，使用seek重新回到文件头位置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Seek 设置下一次 Read 或 Write 的偏移量为 offset，它的解释取决于 whence： 0 表示相对于文件的起始处，1 表示相对于当前的偏移，而 2 表示相对于其结尾处。 Seek 返回新的偏移量和一个错误，如果有的话。</span><br></pre></td></tr></table></figure>\n<p><img src=\"clip_image001-1535892856347.png\" alt=\"读写文件\"></p>\n<h2 id=\"Go-删除文件和文件夹\"><a href=\"#Go-删除文件和文件夹\" class=\"headerlink\" title=\"Go 删除文件和文件夹\"></a>Go 删除文件和文件夹</h2><p>删除空目录</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Remove</span><span class=\"params\">(name <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span></span><br></pre></td></tr></table></figure>\n<p>强制删除目录，无论目录是否有文件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RemoveAll</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span></span><br></pre></td></tr></table></figure>\n","categories":[{"name":"Go","slug":"Go","permalink":"chunlife.top/categories/Go/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"服务器","slug":"服务器","permalink":"chunlife.top/tags/服务器/"},{"name":"上传下载","slug":"上传下载","permalink":"chunlife.top/tags/上传下载/"}]},{"title":"服务器限流问题","date":"2018-09-02T11:47:34.000Z","path":"2018/09/02/服务器限流问题/","content":"<p>在观看慕课网的<a href=\"https://coding.imooc.com/class/227.html\" target=\"_blank\" rel=\"noopener\">Go语言实战流媒体视频网站</a> ，里面有提高bucket token算法，也就是令牌桶算法，用于服务器限流。因为我刚好在做一个包含上传和下载的服务器接口，貌似会需要到这一块地方，就多加了一些了解，这里主要是将结果进行粘贴。</p>\n<a id=\"more\"></a>\n<h1 id=\"服务器限流介绍\"><a href=\"#服务器限流介绍\" class=\"headerlink\" title=\"服务器限流介绍\"></a>服务器限流介绍</h1><p>服务治理之限流</p>\n<p>来自 &lt;<a href=\"https://blog.frognew.com/2017/06/rate-limiting.html\" target=\"_blank\" rel=\"noopener\">https://blog.frognew.com/2017/06/rate-limiting.html</a>&gt; </p>\n<p>如何测试服务器带宽？</p>\n<p>来自 &lt;<a href=\"https://www.zhihu.com/question/20561349\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/20561349</a>&gt; </p>\n<h1 id=\"简单的限流方法\"><a href=\"#简单的限流方法\" class=\"headerlink\" title=\"简单的限流方法\"></a>简单的限流方法</h1><p>贴上视频中老师写的方法（代码出处为老师视频）。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ConnLimiter <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tconcurrentConn <span class=\"keyword\">int</span></span><br><span class=\"line\">\tbucket         <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// concurrentConn可以连接的数量，channel满了则</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewConnLimiter</span><span class=\"params\">(cc <span class=\"keyword\">int</span>)</span> *<span class=\"title\">ConnLimiter</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;ConnLimiter&#123;</span><br><span class=\"line\">\t\tconcurrentConn: cc,</span><br><span class=\"line\">\t\tbucket:         <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, cc),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(cl *ConnLimiter)</span> <span class=\"title\">GetConn</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(cl.bucket) &gt;= cl.concurrentConn &#123;</span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">\"Reached the rate limitation\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcl.bucket &lt;- <span class=\"number\">1</span></span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">\"Successfully got connection\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(cl *ConnLimiter)</span> <span class=\"title\">ReleaseConn</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc := &lt;-cl.bucket</span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">\"New connection coming: %d\"</span>, c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过封装ServeHTTP方法，达到嵌入限流代码的目的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> middleWareHandler <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tr *httprouter.Router</span><br><span class=\"line\">\tl *ConnLimiter</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//NewMiddleWareHandler def</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewMiddleWareHandler</span><span class=\"params\">(r *httprouter.Router, cc <span class=\"keyword\">int</span>)</span> <span class=\"title\">http</span>.<span class=\"title\">Handler</span></span> &#123;</span><br><span class=\"line\">\tm := middleWareHandler&#123;&#125;</span><br><span class=\"line\">\tm.r = r</span><br><span class=\"line\">\tm.l = NewConnLimiter(cc)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> m</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RegisterHandlers</span><span class=\"params\">()</span> *<span class=\"title\">httprouter</span>.<span class=\"title\">Router</span></span> &#123;</span><br><span class=\"line\">\trouter := httprouter.New()</span><br><span class=\"line\"></span><br><span class=\"line\">\trouter.GET(<span class=\"string\">\"/videos/:vid-id\"</span>, streamHandler)</span><br><span class=\"line\"></span><br><span class=\"line\">\trouter.POST(<span class=\"string\">\"/upload/:vid-id\"</span>, uploadHandler)</span><br><span class=\"line\"></span><br><span class=\"line\">\trouter.GET(<span class=\"string\">\"/testpage\"</span>, testPageHandler)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> router</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Handler最终会调用httprouter.Router接口方法中的ServeHTTP，这里对Go方法进行DIY封装</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m middleWareHandler)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !m.l.GetConn() &#123;</span><br><span class=\"line\">\t\tsendErrorResponse(w, http.StatusTooManyRequests, <span class=\"string\">\"Too many requests\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> m.l.ReleaseConn()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 调用router起作用ServeHTTP</span></span><br><span class=\"line\">\tm.r.ServeHTTP(w, r)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tr := RegisterHandlers()</span><br><span class=\"line\">\tmh := NewMiddleWareHandler(r, <span class=\"number\">2</span>)</span><br><span class=\"line\">\thttp.ListenAndServe(<span class=\"string\">\":9000\"</span>, mh)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"复杂的限流方法介绍\"><a href=\"#复杂的限流方法介绍\" class=\"headerlink\" title=\"复杂的限流方法介绍\"></a>复杂的限流方法介绍</h1><p>服务器下载限流操作（使用token bucket）：</p>\n<p>各种类似算法实现：</p>\n<p><a href=\"https://hustcat.github.io/rate-limit-example-in-go/\" target=\"_blank\" rel=\"noopener\">https://hustcat.github.io/rate-limit-example-in-go/</a></p>\n<p>HTTP限速中间件：</p>\n<p><a href=\"https://github.com/didip/tollbooth\" target=\"_blank\" rel=\"noopener\">https://github.com/didip/tollbooth</a></p>\n<p>修改servefile来实现（用到<a href=\"https://github.com/juju/ratelimit）：\" target=\"_blank\" rel=\"noopener\">https://github.com/juju/ratelimit）：</a></p>\n<p><a href=\"https://stackoverflow.com/questions/29445173/how-to-limit-download-speed-with-go\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/29445173/how-to-limit-download-speed-with-go</a></p>\n<p>使用包来实现：</p>\n<p><a href=\"https://www.0value.com/throttled--guardian-of-the-web-server\" target=\"_blank\" rel=\"noopener\">https://www.0value.com/throttled--guardian-of-the-web-server</a></p>\n<p><a href=\"https://github.com/throttled/throttled\" target=\"_blank\" rel=\"noopener\">https://github.com/throttled/throttled</a></p>\n","categories":[{"name":"Go","slug":"Go","permalink":"chunlife.top/categories/Go/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"服务器","slug":"服务器","permalink":"chunlife.top/tags/服务器/"},{"name":"限流","slug":"限流","permalink":"chunlife.top/tags/限流/"}]},{"title":"组件与语言特性的学习","date":"2018-08-26T03:03:53.000Z","path":"2018/08/26/组件与语言特性的学习/","content":"<h2 id=\"sync-Map\"><a href=\"#sync-Map\" class=\"headerlink\" title=\"sync.Map\"></a>sync.Map</h2><p>这是一种线程安全的map用法，在版本1.9时出现，按照以前的用法，多协程情况下，需要使用将map和锁一起使用才可以做到线程安全，而现在可直接使用该类型。</p>\n<a id=\"more\"></a>\n<p>以下内容取自<a href=\"https://blog.csdn.net/champly/article/details/77622328\" target=\"_blank\" rel=\"noopener\">Go1.9 安全map用法</a>。</p>\n<p><img src=\"1535253147536.png\" alt=\"1535253147536\"></p>\n<h2 id=\"Gin框架\"><a href=\"#Gin框架\" class=\"headerlink\" title=\"Gin框架\"></a>Gin框架</h2><p>encoding/json 貌似不支持required json tag，实际验证好像也不支持，这个字段表示传递的json数据没有这个字段就会报错。</p>\n<p>GIN框架补充了这个字段，使用binding tag，如果没有该字段，直接报错。</p>\n<p><img src=\"clip_image001.png\" alt=\"img\"></p>\n<p>c.BindQuery可以直接把Query映射出来，当然可以操作form表单的数据，操作及其方便，涉及到反射操作，还有检查的时间。</p>\n<h2 id=\"文件下载\"><a href=\"#文件下载\" class=\"headerlink\" title=\"文件下载\"></a>文件下载</h2><p>指定浏览器直接下载文件，且使用文件下载原名，其不进行打开操作。</p>\n<p><a href=\"https://segmentfault.com/q/1010000000692593\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/q/1010000000692593</a></p>\n<p><a href=\"https://golangtc.com/t/54d9ca47421aa9170200000f\" target=\"_blank\" rel=\"noopener\">https://golangtc.com/t/54d9ca47421aa9170200000f</a></p>\n<p><img src=\"clip_image002.png\" alt=\"指定下载文件名\"></p>\n<p>golang filepath.Ext  获取文件后缀名 </p>\n<h2 id=\"时间戳格式变换为YYYYMMDD\"><a href=\"#时间戳格式变换为YYYYMMDD\" class=\"headerlink\" title=\"时间戳格式变换为YYYYMMDD\"></a>时间戳格式变换为YYYYMMDD</h2><p>//返回现在时间</p>\n<p>tNow:=time.Now()</p>\n<p>//时间转化为string，layout必须为”2006-01-0215:04:05”</p>\n<p>timeNow:=tNow.Format(“20060102”)</p>\n<p>fmt.Println(“tNow(timeformat):”,tNow)</p>\n<p>fmt.Println(“tNow(stringformat):”,timeNow)</p>\n<h2 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h2><p>Gorm使用first、find查询单个参数时，没有查到会返回not found错误，当Find使用数组去接数据时，没有找到也不会报错。</p>\n<p><strong>MySQL时间类型：</strong></p>\n<p><img src=\"1535287076868.png\" alt=\"MySQL时间类参数\"></p>\n<p>MySQL 中timestamp 类型使用默认值CURRENT_TIMESTAMP创建成功，使用datetime则不行。</p>\n<p>时间戳和时间格式的转换：</p>\n<p><img src=\"first.png\" alt=\"1535287353268\"></p>\n<p>转换成：</p>\n<p><img src=\"1535287393700.png\" alt=\"时间戳\"></p>\n<p><img src=\"1535287745538.png\" alt=\"as用法\"></p>\n","categories":[{"name":"Go","slug":"Go","permalink":"chunlife.top/categories/Go/"}],"tags":[{"name":"学习","slug":"学习","permalink":"chunlife.top/tags/学习/"}]},{"title":"Go Goroutine运行切换","date":"2018-08-19T02:32:59.000Z","path":"2018/08/19/Go-Goroutine运行切换/","content":"<p>Goroutine称呼上一般被我们理解为协程（Coroutine），类似于轻量级“线程”。</p>\n<a id=\"more\"></a>\n<ul>\n<li>Goroutine是一种编译器/解释器/虚拟机层面的多任务，并不属于操作系统。</li>\n<li>多个协程可能在一个或多个线程上运行（由调度器决定）</li>\n</ul>\n<p>对比操作系统（*nix）的进程或线程来说，Goroutine作为<strong>非抢占式</strong>多任务处理，由协程主动交出控制权，也就是说，要么协程自动运行完毕，或者调度器主动来进行切换，否则，协程不会主动交出运行控制的。</p>\n<p>什么情况下，调度器会参与呢？</p>\n<ul>\n<li>I/O操作，类似于阻塞的系统的调用（异步唤醒）。</li>\n<li>select Channel </li>\n<li>等待锁 </li>\n<li>函数调用 </li>\n<li>Runtime.Gosched() </li>\n<li>其他地方也有可能会切换</li>\n</ul>\n<p>总的来说，当Goroutine不能继续向下执行时，需要等待时，调度器都有可能参与调度（根据以上状况和查Google得出，未结合源码进行分析验证）。</p>\n","categories":[{"name":"Go","slug":"Go","permalink":"chunlife.top/categories/Go/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"Goroutine","slug":"Goroutine","permalink":"chunlife.top/tags/Goroutine/"}]},{"title":"创建CSV，数据导入excel文件","date":"2018-08-15T07:45:25.000Z","path":"2018/08/15/创建CSV，数据导入excel文件/","content":"<p>代码：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create a csv file</span></span><br><span class=\"line\">f, err := os.OpenFile(facNFileName, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, os.ModePerm)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">wsv := csv.NewWriter(f)</span><br><span class=\"line\"><span class=\"comment\">// write csv</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> facNo, count := <span class=\"keyword\">range</span> facNMap &#123;</span><br><span class=\"line\">\twsv.Write([]<span class=\"keyword\">string</span>&#123;facNo, strconv.FormatInt(<span class=\"keyword\">int64</span>(count), <span class=\"number\">10</span>)&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">wsv.Flush()     <span class=\"comment\">// 需要将数据写入文件系统中</span></span><br></pre></td></tr></table></figure>\n<p><code>func (w *Writer) Write(record []string) error</code>，一次就是写一行数据；</p>\n<p>使用<code>Write</code>进行写数据，需要显示调用<code>Flush</code>函数将数据真实写入目标中。</p>\n<p><code>func (w *Writer) Flush()</code>，</p>\n<p>一次性写多行数据，<code>func (w *Writer) WriteAll(records [][]string) error</code>，一次即写多行数据。</p>\n<p><strong>中文乱码</strong>，若文件写入有中文，那么打开<code>.csv</code>文件时将会出现乱码的现象，可以写入UTF-8 BOM，防止中文乱码。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f.WriteString(<span class=\"string\">\"\\xEF\\xBB\\xBF\"</span>)</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"Go基础操作","slug":"Go基础操作","permalink":"chunlife.top/categories/Go基础操作/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"CSV文件","slug":"CSV文件","permalink":"chunlife.top/tags/CSV文件/"}]},{"title":"使用Gateway","date":"2018-08-12T09:50:22.000Z","path":"2018/08/12/Gateway初次使用/","content":"<h2 id=\"部署Gateway\"><a href=\"#部署Gateway\" class=\"headerlink\" title=\"部署Gateway\"></a>部署Gateway</h2><p>参考：github.com\\fagongzi\\gateway\\docs\\build.md</p>\n<a id=\"more\"></a>\n<p>网关依赖于ETCD，用于设备发现服务，可使用如下命令进行安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> wget https://github.com/coreos/etcd/releases/download/v3.3.9/etcd-v3.3.9-linux-amd64.tar.gz </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span> tar -xzvf etcd-v3.3.9-linux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span> ./etcd  (默认配置运行即可)</span><br></pre></td></tr></table></figure>\n<p>根据build.md文档，生成apiserver和proxy可执行文件后，将两者启动。</p>\n<p>proxy使用的是80接口，可能会被占用，可使用“–addr”参数进行设置，apiserver默认使用9092作为HTTP Server接口，9093作为Rpc Server接口，可保持不变，若接口依然被占用，则可参考build.md文档中参数进行设置。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> ./apiserver &amp;</span><br><span class=\"line\"><span class=\"meta\">$</span> ./proxy --addr=:8088  &amp;</span><br></pre></td></tr></table></figure>\n<p>程序运行失败将打印error信息。</p>\n<h2 id=\"docker部署gateway\"><a href=\"#docker部署gateway\" class=\"headerlink\" title=\"docker部署gateway\"></a>docker部署gateway</h2><ul>\n<li>8080:80，将本机的8080端口映射至docker的80端口；</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -d -p 0.0.0.0:8080:80 -p 9095:9092 -p 9093:9093 fagongzi/gateway</span><br></pre></td></tr></table></figure>\n<h2 id=\"编写测试\"><a href=\"#编写测试\" class=\"headerlink\" title=\"编写测试\"></a>编写测试</h2><p>编写程序进行测试，用到gateway的client接口：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/fagongzi/gateway/pkg/pb/metapb\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/fagongzi/gateway/pkg/client\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/gin-gonic/gin\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> clusterA <span class=\"keyword\">uint64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\trouter := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">\trouter.GET(<span class=\"string\">\"/hello/1\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, <span class=\"string\">\"yes, this is hello\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">// 第一步： 创建Cluster，类似于服务分类</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := createCluster1(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Println(<span class=\"string\">\"1 error,\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">// 第二步： 对应真正的业务服务器</span></span><br><span class=\"line\">\terr := createServer1()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Println(<span class=\"string\">\"2 error,\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">// 第三步： 创建API，该API会被转发到ClusterA</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := createAPI1(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Println(<span class=\"string\">\"3 error,\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\trouter.Run(<span class=\"string\">\":8068\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">createCluster1</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tc, err := getClient()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tclusterA, err = c.NewClusterBuilder().Name(<span class=\"string\">\"cluster-A\"</span>).</span><br><span class=\"line\">\t\tLoadbalance(metapb.RoundRobin).Commit()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">createServer1</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tc, err := getClient()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsb := c.NewServerBuilder()</span><br><span class=\"line\">\t<span class=\"comment\">// 必选项</span></span><br><span class=\"line\">\tsb.Addr(<span class=\"string\">\"127.0.0.1:8068\"</span>).HTTPBackend().MaxQPS(<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tid, err := sb.Commit()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 把这个server加入到cluster A</span></span><br><span class=\"line\">\tc.AddBind(clusterA, id)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">createAPI1</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tc, err := getClient()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsb := c.NewAPIBuilder()</span><br><span class=\"line\">\t<span class=\"comment\">// 必选项</span></span><br><span class=\"line\">\tsb.Name(<span class=\"string\">\"用户API\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 设置URL规则，匹配所有开头为/api/user的请求</span></span><br><span class=\"line\">\tsb.MatchURLPattern(<span class=\"string\">\"/hello/(.+)\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 匹配GET请求</span></span><br><span class=\"line\">\tsb.MatchMethod(<span class=\"string\">\"GET\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 匹配所有请求</span></span><br><span class=\"line\">\t<span class=\"comment\">//sb.MatchMethod(\"*\")</span></span><br><span class=\"line\">\t<span class=\"comment\">// 不启动</span></span><br><span class=\"line\">\t<span class=\"comment\">//sb.Down()</span></span><br><span class=\"line\">\t<span class=\"comment\">// 启用</span></span><br><span class=\"line\">\tsb.UP()</span><br><span class=\"line\">\t<span class=\"comment\">// 分发到Cluster A</span></span><br><span class=\"line\">\tsb.AddDispatchNode(clusterA)</span><br><span class=\"line\"></span><br><span class=\"line\">\tid, err := sb.Commit()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"api id is: %d\"</span>, id)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果你的api server使用了\"--discovery\"参数启动</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getClientWithDiscovery</span><span class=\"params\">()</span> <span class=\"params\">(client.Client, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> client.NewClientWithEtcdDiscovery(<span class=\"string\">\"/services\"</span>,</span><br><span class=\"line\">\t\ttime.Second*<span class=\"number\">10</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"127.0.0.1:2379\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果你的api server没有使用\"--discovery\"参数启动</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getClient</span><span class=\"params\">()</span> <span class=\"params\">(client.Client, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> client.NewClient(time.Second*<span class=\"number\">10</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"127.0.0.1:9091\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行测试程序\"><a href=\"#运行测试程序\" class=\"headerlink\" title=\"运行测试程序\"></a>运行测试程序</h2><p>若程序出现如下打印，代表程序运行成功。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2018/09/17 19:16:08.755386 [info] cluster &lt;1&gt; added, data &lt;id:1 name:\"cluster-A\" &gt;</span><br><span class=\"line\">2018/09/17 19:16:08.763781 [info] analysis: added, key=&lt;2&gt; interval=&lt;1s&gt;</span><br><span class=\"line\">2018/09/17 19:16:08.763872 [info] server &lt;2&gt; added, data &lt;id:2 addr:\"127.0.0.1:8068\" maxQPS:100 &gt;</span><br><span class=\"line\">2018/09/17 19:16:08.763883 [warning] server &lt;2&gt; heath check not setting</span><br><span class=\"line\">2018/09/17 19:16:08.763887 [info] server &lt;2&gt; UP</span><br><span class=\"line\">2018/09/17 19:16:08.771950 [info] bind &lt;1,2&gt; created</span><br><span class=\"line\">2018/09/17 19:16:08.771957 [info] bind &lt;1,2&gt; actived</span><br></pre></td></tr></table></figure>\n<p>可使用curl命令去测试接口：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> curl http://localhost:8088/hello/1</span><br></pre></td></tr></table></figure>\n<p>出现”yes, this is hello”，代表程序测试成功。</p>\n<h2 id=\"部署gateway-ui\"><a href=\"#部署gateway-ui\" class=\"headerlink\" title=\"部署gateway_ui\"></a>部署gateway_ui</h2><p>gateway有两个UI管理界面，这里我只部署了一个，gateway_ui。</p>\n<p><a href=\"https://github.com/archfish/gateway_ui\" target=\"_blank\" rel=\"noopener\">https://github.com/archfish/gateway_ui</a></p>\n<p><a href=\"https://github.com/wilehos/gateway_admin_ui\" target=\"_blank\" rel=\"noopener\">https://github.com/wilehos/gateway_admin_ui</a></p>\n<p>拉取镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull hub.c.163.com/weihailang/gateway_ui:latest</span><br></pre></td></tr></table></figure>\n<p>使用docker进行部署：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -d --restart always -p 3000:3000 --name gateway_ui -u 1001:1001 -h gateway.ui.production -e RAILS_ENV=production -e GATEWAY_BACKEND=172.31.242.128:9093 hub.c.163.com/weihailang/gateway_ui</span><br></pre></td></tr></table></figure>\n<p>由于没有登录鉴权接口（可以使用Nginx密码登录验证来代替），所以管理界面是不建立部署在外网环境中。</p>\n<p>UI使用docker部署是最为方便的，若UI使用docker部署，那么gateway也得使用docker进行部署，因为docker内的应用是无法访问到外网的，需要使用NAT技术进行桥接。以后的服务也是需要统一部署到docker中的。</p>\n","categories":[{"name":"Go","slug":"Go","permalink":"chunlife.top/categories/Go/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"Gateway","slug":"Gateway","permalink":"chunlife.top/tags/Gateway/"}]},{"title":"EE小白到CS小白","date":"2018-08-12T09:50:22.000Z","path":"2018/08/12/EE小白到CS小白/","content":"<p>从武汉来到深圳，怀揣着一个傲娇的想法走出来，纯粹就是想要看看世界，毕业呆了四年的城市毕竟太过熟悉了。同时，之前做的是嵌入式开发，在公司当个软件组长太过安逸，而且在武汉工资和前景感觉都不是太好看，于是在毕业又做了大半年后，于公司辞职后，来到了深圳。</p>\n<a id=\"more\"></a>\n<h2 id=\"五一\"><a href=\"#五一\" class=\"headerlink\" title=\"五一\"></a>五一</h2><p>五月一号到的深圳，听着《飞得更高》，一路忐忑。</p>\n<p>一个陌生的城市，感受当然是深圳各个方面都是666，什么都是新样式。（实际感受和武汉没有啥一样）</p>\n<p>到深圳肯定是先叫同学一顿约约约，过个五一再说，然后就是忙碌的面试过程了。</p>\n<p>工作基本方向都是嵌入式，因为自己之前就是从事的嵌入式军工行业，对Linux、VxWorks比较熟悉，找工作当然也是跟这方面息息相关的，工资普遍会比在武汉高出一个3-4K的额度，对于我这样毕业一年的人，主要还是想定一个好点的行业与公司好好的发展发展，这样手上才有个屠龙技。非常感谢面试的那些公司，对我都比较友善，知道我刚来深圳，有的面试官在面试完后还会告诉我一些</p>\n<p>在第三天的时候面了一家做存储的公司，面的是嵌入式软件工程师，安排职位时是给的Go开发（后端开发）岗位，面试得比较愉快，当时手里已经拿了有几份offer了，所以对工作会有点自己的考虑。</p>\n<p>嵌入式对于我肯定是熟悉一点，在大学里，实习，工作所做的都是嵌入式开发，我也自学了Android开发，找的工作也有对Android方向的，这个方向的嵌入式虽没有互联网一些热门方向霸道，但不会太差，现在手里工作的offer工资也很好看。</p>\n<p>后端的职位，是使用Go开发，对比Java来说，足够小众，所做的内容我也可以说出其各种不好，但换个角度，我将其视作一个机会，一个我尝试的机会，在做嵌入式时，已经听闻很多CS方面的事了，单纯的，我想过去看看，可能不成功，大不了我就滚回去做嵌入式就可以了，谁还不允许我犯错了。</p>\n<p>心理足够忐忑，即使到了现在还是那么忐忑，想想这个决定可能对我的影响，中间还有大华的邀约，现在想来做出这个决定依然是很刺激的。</p>\n<h2 id=\"五一前\"><a href=\"#五一前\" class=\"headerlink\" title=\"五一前\"></a>五一前</h2><p>在武汉，出学校后，自己就不断的懈怠了，并没有在学校那种冲劲，对自己的发展比较迷茫，不知道路在哪里。</p>\n<p>之前是在一家做军工产品的公司工作，做的也是比较安逸，算是平静的发展吧。但我自己逐渐不太满足，因为我对自己的要求在逐渐下降，这让我自己很苦恼，我标准应该是一直提高啊。</p>\n<p>对于出去，我就想着出去走走，见见世面嘛，外面不见得会有多好，但没在外面待一段时间，哪里来的深刻对比呢？所以，还是出来走走比较靠谱。</p>\n<h2 id=\"如今\"><a href=\"#如今\" class=\"headerlink\" title=\"如今\"></a>如今</h2><p>对于两个方向，我都是个小白，嵌入式工作了两年，后端才刚开始，小白摸着石头过个河，路上见见更多的前辈恩师，还有更多的风景，求个快活。</p>\n<p>现在，我也是迷茫的，但我知道自己还是向前的，对自己是要求的。毕竟我还有追求。</p>\n<p>我追求嘛，谁都需要，谁都可以去实现。毕竟有一句话是，和尚摸得，我摸不得？</p>\n<p>哈哈，不怎么应景。</p>\n","categories":[{"name":"随笔","slug":"随笔","permalink":"chunlife.top/categories/随笔/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"chunlife.top/tags/随笔/"}]},{"title":"比特币—-挖矿","date":"2018-08-11T14:42:02.000Z","path":"2018/08/11/比特币—-挖矿/","content":"<p>以前做嵌入式智能感叹比特币价格的疯狂，曾突破到一万多美元一枚的价格，让我流下了没有技术的泪水，现在却是可以理解理解到底啥玩意叫个区块链，啥叫个比特币了。</p>\n<a id=\"more\"></a>\n<h1 id=\"区块链与比特币\"><a href=\"#区块链与比特币\" class=\"headerlink\" title=\"区块链与比特币\"></a>区块链与比特币</h1><p>区块链可以说是类比特币技术的一个大的集合，囊括了其一个整体的技术演变而来，并不与比特币相等同。</p>\n<p>比特币的出现很多地方应该是吸收了很多“密码朋克”这个组织的很多成果，对于这个组织里面的人，我只能表示佩服，很了不起。2008年中本聪发表的比特币白皮书——《比特币：一个点对点的电子现金系统》，其提出的去中心化思想确实厉害，更应该让我感到佩服的是，这个东西不仅仅是一个白皮书一样的存在，它让这个思想具象化了。</p>\n<h2 id=\"比特币\"><a href=\"#比特币\" class=\"headerlink\" title=\"比特币\"></a>比特币</h2><p>比特币是一种数字货币。</p>\n<p>当我们共同承认它具有价值时，它就具有了购买力。举个例子：RMB是国家给予其价值，那么其就被赋予了价值，那数字货币也一样。</p>\n<h3 id=\"区块\"><a href=\"#区块\" class=\"headerlink\" title=\"区块\"></a>区块</h3><p>比特币使用Hash进行校验，使用Hash对内容进行Hash计算，得出Hash值，拿这个值进行内容校验。</p>\n<p><img src=\"1534000072795.png\" alt=\"1534000072795\"></p>\n<p>拿以后的区块，会将前一个Hash值与当前内容一起进行Hash计算，得到一个现在区块持有的Hash值。</p>\n<p><img src=\"1534000007496.png\" alt=\"1534000007496\"></p>\n<p>区块不断在累加，逐渐累积成链。我们若是需要验证区块，那么只需要抽取链最后一个区块Hash进行校验即可。</p>\n<p><img src=\"1533999959460.png\" alt=\"1533999959460\"></p>\n<h3 id=\"账户所有权\"><a href=\"#账户所有权\" class=\"headerlink\" title=\"账户所有权\"></a>账户所有权</h3><p>比特币很安全，安全的原因是分布式账本上没有存储任何个人信息，交易信息的对接使用的是“地址”（账号），也就是地址对地址间的通信，那地址是什么呢？</p>\n<p>一个“地址”对应于一个私钥，私钥是唯一的，其不可重置。地址与私钥为非对称关系，也就是说私钥可进行两次Hash计算后得到地址，而地址是不可进行逆推的（可查看RSA加密解密）。</p>\n<p><img src=\"1534000622004.png\" alt=\"1534000622004\"></p>\n<p>利用非对称密钥，公钥是开放出去的，验证私钥的过程既是使用公钥验证的过程。</p>\n<p><img src=\"1534061724465.png\" alt=\"1534061724465\"></p>\n<p>然后将个交易记录广播给其他节点，由其他节点去验证信息的正确。</p>\n<h3 id=\"挖矿\"><a href=\"#挖矿\" class=\"headerlink\" title=\"挖矿\"></a>挖矿</h3><p>挖矿的过程既是记账的过程，记账需要提供算力，使用Hash算法打包记录，而比特币作为记账的奖励分发给用户。</p>\n","categories":[{"name":"Go","slug":"Go","permalink":"chunlife.top/categories/Go/"}],"tags":[{"name":"区块链","slug":"区块链","permalink":"chunlife.top/tags/区块链/"},{"name":"比特币","slug":"比特币","permalink":"chunlife.top/tags/比特币/"}]},{"title":"RSA加密解密","date":"2018-07-29T13:43:46.000Z","path":"2018/07/29/RSA加密解密/","content":"<p>因为项目需要，最近做一个RSA加密解密的接口，使用Go进行开发，接口使用jsonrpc，go 对RSA加密解密有很好的支持，不过由于受限于底层单片机，所以上层应用需要做一些稍微的调整。</p>\n<a id=\"more\"></a>\n<h2 id=\"一、概要\"><a href=\"#一、概要\" class=\"headerlink\" title=\"一、概要\"></a>一、概要</h2><p>RSA是一种非对称加密算法，什么是非对称加密算法呢，那就是公钥、私钥可互相进行加密解密：公钥加密—私钥解密，私钥加密—公钥解密。 </p>\n<p>了解RSA算法的实现原理，可参考：<a href=\"https://www.cnblogs.com/fangxupeng/p/4128990.html\" target=\"_blank\" rel=\"noopener\">非对称加密过程详解（基于RSA非对称加密算法实现）</a></p>\n<p>RSA算法的基本原理（截图的来源没有保留链接，若侵权请直接告诉我，我会直接删除的）：</p>\n<p><img src=\"1537603491913.png\" alt=\"1537603491913\"></p>\n<h2 id=\"三、RSA一些名词的解释\"><a href=\"#三、RSA一些名词的解释\" class=\"headerlink\" title=\"三、RSA一些名词的解释\"></a>三、RSA一些名词的解释</h2><p>什么是PKCS#1，PKCS（公钥密码标准），而#1就是RSA的标准。 </p>\n<p>PEM文件，也就是公私钥的编码格式。</p>\n<p>RSA算法的原理：<a href=\"https://blog.csdn.net/starryheavens/article/details/8536238\" target=\"_blank\" rel=\"noopener\">RSA算法详解</a>，从这篇博客主要是提取出RSA算法的公式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C=(P^e)%n</span><br></pre></td></tr></table></figure>\n<p>N是公钥私钥共同使用的，其为模数。另外还有公钥的指数E，私钥的指数E。</p>\n<p>公钥的指数一般是65537，私钥的指数则是一个极大的数，想想一个极大的数作为指数，计算时间是会耗费很长时间的。故公钥加密解密都很快，私钥则会慢很多 </p>\n<h2 id=\"二、Go中的RSA加密解密\"><a href=\"#二、Go中的RSA加密解密\" class=\"headerlink\" title=\"二、Go中的RSA加密解密\"></a>二、Go中的RSA加密解密</h2><p>RSA标准是通过公钥加密，私钥解密 ，没有私钥加密，公钥解密。为什么会这样呢？</p>\n<p>Go设计库一般会严格按照标准来进行设计（在很多地方都见过相似做法），那是RSA标准中没有后一种情况的使用场景吗？其实是有的，只不过这个过程不要加密解密，而是RSA签名与验签。所以按照标准，RSA标准库也就不会有私钥加密，公钥解密的方法了。</p>\n<p>这个问题想想应该是很多人的问题了，那么在Google上进行搜索了下，还是发现了解决方法。</p>\n<p><a href=\"https://github.com/wenzhenxi/gorsa\" target=\"_blank\" rel=\"noopener\">https://github.com/wenzhenxi/gorsa</a></p>\n<p>库中实现了公钥加解密的方法。</p>\n<p>还有其他解决方法吗？是有的，在Google上进行搜索就可以找到，记得还有人使用CGO调用C库来解决。</p>\n<h2 id=\"四、Go-RSA库的使用\"><a href=\"#四、Go-RSA库的使用\" class=\"headerlink\" title=\"四、Go RSA库的使用\"></a>四、Go RSA库的使用</h2><p>标准库的使用者很多，博客也很多，这里不做多的介绍，放上一个博主的链接。</p>\n<p><a href=\"http://blog.studygolang.com/2013/01/go%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E4%B9%8Brsa/\" target=\"_blank\" rel=\"noopener\">GO加密解密之RSA</a></p>\n<h2 id=\"五、项目中的问题\"><a href=\"#五、项目中的问题\" class=\"headerlink\" title=\"五、项目中的问题\"></a>五、项目中的问题</h2><p>此处，由于我的问题比较特殊，所以到此并没完全解决我的问题，还记得上面说的RSA指数与模数的东西吗，因为上层是与stm32进行通信，32RSA的库是需要自己手动将指数与模数填入结构体中的，那么上层就应该将生成的私钥进行分解开来，得到stm32所需要的指数和模数，那么怎么得到这些数据呢。</p>\n<p>我使用的方法是借用OpenSSL，理论上来说像Python就可以做到，但是我并不想将事情复杂化，直接借用现有的工具是最省事的。</p>\n<p>参考：<a href=\"https://blog.csdn.net/junkie0901/article/details/40539857\" target=\"_blank\" rel=\"noopener\">如何用 openssl 生成RSA双密匙；签名证书；加密文件邮件</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl rsa -in private.pem -text -noout</span><br></pre></td></tr></table></figure>\n<p>-noout : 表示不显示密钥</p>\n<p>运行结果：</p>\n<p><img src=\"1533047035026.png\" alt=\"1533047035026\"></p>\n<p>modulus、publicExponent、privateExponent，这三个数就是我们所需要的数据（publicExponent一般算法会设为65537）。</p>\n<p>那么此处就很简单的进行字符串截取就可以做到拿出这三个数据了。</p>\n<h2 id=\"六、AES加密解密\"><a href=\"#六、AES加密解密\" class=\"headerlink\" title=\"六、AES加密解密\"></a>六、AES加密解密</h2><p>既然提到了RSA，不对称加密算法了，那么也去了解了解AES对称加密算法吧。</p>\n<p><a href=\"https://blog.csdn.net/yue7603835/article/details/73395580\" target=\"_blank\" rel=\"noopener\">golang实现AES ECB模式的加密和解密</a></p>\n<p>Go的实现可参考贴出来的链接，不过此处给出我遇到的一个问题。</p>\n<p>截取自博客中的原文：</p>\n<p><img src=\"1533047635959.png\" alt=\"1533047635959\"></p>\n<p>标记出来的话，其实是有问题的，AES算法，区块长度是固定的，为128bit。</p>\n<p>摘抄自<a href=\"https://baike.baidu.com/item/aes/5903?fr=aladdin\" target=\"_blank\" rel=\"noopener\">百度百科</a>：严格地说，AES和Rijndael加密法并不完全一样（虽然在实际应用中二者可以互换），因为Rijndael加密法可以支持更大范围的区块和密钥长度：AES的区块长度固定为128比特，密钥长度则可以是128、192、256比特；而Rijndael使用的密钥和区块长度可以是32位的整数倍，以128位为下限，256比特为上限。加密过程中使用的密钥是由Rijndael密钥生成方案产生。</p>\n<p>在golang的源码设计中也可以证明这点，其blocksize设定为const，其值为16(byte)，显然，标准库是并不允许使用者去修改这个值的，那么AES-128/192/256，其实是针对的密钥长度来说的。</p>\n<p>另外，使用go AES库需要注意的是，go aes输入的密钥不满足16、24、32的要求，会直接返回错误，其并没有设计补全机制，需要自己实现。</p>\n<p>数据块长度不足128bit，其同样也需要补全；很遗憾的是go依然没有帮助自动补全。补全方式有多种，一般常见的是zeropadding，pkcs5padding，pkcs7padding。 </p>\n<p>参考<a href=\"https://studygolang.com/articles/6662\" target=\"_blank\" rel=\"noopener\">golang AES/ECB/PKCS5 加密解密 url-safe-base64</a></p>\n<p>博客使用的是pkcs5padding，这里补上zeropadding。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ZeroPadding</span><span class=\"params\">(ciphertext []<span class=\"keyword\">byte</span>, blockSize <span class=\"keyword\">int</span>)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">\tpadding := blockSize - <span class=\"built_in\">len</span>(ciphertext)%blockSize</span><br><span class=\"line\">\tpadtext := bytes.Repeat([]<span class=\"keyword\">byte</span>&#123;<span class=\"number\">0</span>&#125;, padding) </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">append</span>(ciphertext, padtext...)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ZeroUnPadding</span><span class=\"params\">(origData []<span class=\"keyword\">byte</span>)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> bytes.TrimFunc(origData,</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(r <span class=\"keyword\">rune</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> r == <span class=\"keyword\">rune</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>附上我写的填充key的代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">KeyPadding</span><span class=\"params\">(key <span class=\"keyword\">string</span>)</span> <span class=\"params\">(keyByte []<span class=\"keyword\">byte</span>)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tkeyLen := <span class=\"built_in\">len</span>(key)</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> keyLen &lt; <span class=\"number\">16</span>:</span><br><span class=\"line\">\t\tkeyByte = ZeroPadding([]<span class=\"keyword\">byte</span>(key), <span class=\"number\">16</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> keyLen &gt; <span class=\"number\">16</span> &amp;&amp; keyLen &lt; <span class=\"number\">24</span>:</span><br><span class=\"line\">\t\tkeyByte = ZeroPadding([]<span class=\"keyword\">byte</span>(key), <span class=\"number\">24</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> keyLen &gt; <span class=\"number\">24</span> &amp;&amp; keyLen &lt; <span class=\"number\">32</span>:</span><br><span class=\"line\">\t\tkeyByte = ZeroPadding([]<span class=\"keyword\">byte</span>(key), <span class=\"number\">32</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> keyLen &gt; <span class=\"number\">32</span>:</span><br><span class=\"line\">\t\tkeyByte = []<span class=\"keyword\">byte</span>(key)[:<span class=\"number\">32</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\tkeyByte = []<span class=\"keyword\">byte</span>(key)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> keyByte</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"七、使用的方法\"><a href=\"#七、使用的方法\" class=\"headerlink\" title=\"七、使用的方法\"></a>七、使用的方法</h2><h3 id=\"bytes-Join将byte数组的数组进行组合\"><a href=\"#bytes-Join将byte数组的数组进行组合\" class=\"headerlink\" title=\"bytes.Join将byte数组的数组进行组合\"></a>bytes.Join将byte数组的数组进行组合</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bytes.Join(pBytes, []<span class=\"keyword\">byte</span>(<span class=\"string\">\"\"</span>))</span><br></pre></td></tr></table></figure>\n<p>第二个参数表示数组间用什么去间隔</p>\n<h3 id=\"将一个大数按大小端转换为byte数组模式\"><a href=\"#将一个大数按大小端转换为byte数组模式\" class=\"headerlink\" title=\"将一个大数按大小端转换为byte数组模式\"></a>将一个大数按大小端转换为byte数组模式</h3><p>binary.BigEndian.PutUint64</p>\n<p><a href=\"https://blog.csdn.net/coledaddy/article/details/71195528\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/coledaddy/article/details/71195528</a> </p>\n<h3 id=\"返回子串在字符串中的索引\"><a href=\"#返回子串在字符串中的索引\" class=\"headerlink\" title=\"返回子串在字符串中的索引\"></a>返回子串在字符串中的索引</h3><p>例如strings.Index(str, “modules”)，返回的是开始出现”modules”的位置，即”m”。</p>\n<h3 id=\"将数组转换为以“-”分割的字符串\"><a href=\"#将数组转换为以“-”分割的字符串\" class=\"headerlink\" title=\"将数组转换为以“,”分割的字符串\"></a>将数组转换为以“,”分割的字符串</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings.Replace(strings.Trim(fmt.Sprint(byteArr),<span class=\"string\">\"[]\"</span>), <span class=\"string\">\" \"</span>, <span class=\"string\">\",\"</span>, <span class=\"number\">-1</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"将十六进制的字符，转换为整数\"><a href=\"#将十六进制的字符，转换为整数\" class=\"headerlink\" title=\"将十六进制的字符，转换为整数\"></a>将十六进制的字符，转换为整数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strconv.ParseUint(data, 16, 8)</span><br></pre></td></tr></table></figure>\n<p>data：字符，16：进制，8：转换数据的大小，8则是8bit。</p>\n<h2 id=\"2018年8月22日17-38-32\"><a href=\"#2018年8月22日17-38-32\" class=\"headerlink\" title=\"2018年8月22日17:38:32\"></a>2018年8月22日17:38:32</h2><p>本来以为rsa加密解密的事都要翻篇了，谁知道底层突然和我说交互出了问题，STM32使用的RSA是官方库，Go使用的是官方库，理论上不应该有什么问题的，但实际上就是出了问题。</p>\n<p>问题是这样的，Go使用私钥加密，STM32无法使用公钥进行解密；STM32使用私钥加密，Go无法进行公钥解密。但双方公钥加密，对方都可以进行私钥解密。</p>\n<p>然后花了一天的时间的去细细的琢磨这个事，觉得这个过程还是很有意思的。</p>\n<p>首先，则是两方都去检查源码是否出现使用错误，在互相review代码确认无误，这样不会造成总是去怀疑对方的代码，至少在使用上都是按照官方文档进行的操作。</p>\n<p>第二步，再三确认私钥加密，公钥解密这个种非标用法是可行的。因为RSA签名和验证过程是包含有私钥加密，公钥解密的，这个点是不需要再去考虑正确性的。</p>\n<p>第三步，双方通讯无法通过对方，那么很自然的就会想到，先抛弃掉对方，使用另外一种标准库，或者是语言的标准库来佐证自己的库的正确性，这里我选择的是使用OpenSSL的接口，使用CGo，调用的OpenSSL的接口，放上借用的库链接<a href=\"https://github.com/dgkang/rsa，最终测试结果是与Go库中的结果是一样的。我这里用的库是https://github.com/wenzhenxi/gorsa，因为官方库并没有将RSA私钥加密暴露出来，若需要使用的话就需要自己动手了。\" target=\"_blank\" rel=\"noopener\">https://github.com/dgkang/rsa，最终测试结果是与Go库中的结果是一样的。我这里用的库是https://github.com/wenzhenxi/gorsa，因为官方库并没有将RSA私钥加密暴露出来，若需要使用的话就需要自己动手了。</a></p>\n<p>第四步，我单方面的证明了Go库没有问题，此时怀疑的方向就只能是STM32官方库出了问题，哪里出了问题呢。偶然地，在使用<a href=\"https://github.com/dgkang/rsa库时，OpenSSL上报错信息是：error:0407006A:rsa\" target=\"_blank\" rel=\"noopener\">https://github.com/dgkang/rsa库时，OpenSSL上报错信息是：error:0407006A:rsa</a> routines:RSA_padding_check_PKCS1_type_1:block type is not 01。这个报错信息很关键，STM32库上说的是PKCS1 padding方式，那现在OpenSSL又报出了type方式不同，那只能说明这是有点问题。使用了库的nopadding方式，可以解密出来的数据都打印出来（PKCS1会直接返回数据，填充的信息会直接过滤掉）。</p>\n<p><img src=\"clip_image001.png\" alt=\"img\"></p>\n<p>在调试时，这些数据也是一头雾水的，实际打印的信息是下面的，我实际想要的是后面的数字，这个byte数组和string乱码看的也是脑袋大，为了搞清楚这个，需要了解加密填充信息。</p>\n<p><img src=\"clip_image002.png\" alt=\"img\"></p>\n<p>以下介绍填充方式的知识皆参考自：</p>\n<p>RSA_PKCS1_PADDING</p>\n<p>来自 &lt;<a href=\"https://www.douban.com/note/338531480/\" target=\"_blank\" rel=\"noopener\">https://www.douban.com/note/338531480/</a>&gt; </p>\n<p>padding的三种方式：</p>\n<p>RSA加密常用的填充方式有下面3种：</p>\n<p>1.RSA_PKCS1_PADDING 填充模式，最常用的模式</p>\n<p>要求:</p>\n<p>输入：必须 比 RSA 钥模长(modulus) 短至少11个字节, 也就是　RSA_size(rsa) – 11</p>\n<p>如果输入的明文过长，必须切割，然后填充</p>\n<p>输出：和modulus一样长</p>\n<p>2.RSA_PKCS1_OAEP_PADDING</p>\n<p>输入：RSA_size(rsa) – 41</p>\n<p>输出：和modulus一样长</p>\n<p>3.RSA_NO_PADDING　　不填充</p>\n<p>输入：可以和RSA钥模长一样长（因为不填充，必须要填入模长），如果输入的明文过长，必须切割，然后填充</p>\n<p>输出：和modulus一样长</p>\n<p>其中PKCS1需要遵守的填充规则是</p>\n<p><img src=\"clip_image003.png\" alt=\"img\"></p>\n<p>可以看到数据组成方式是有着固定的规则的。</p>\n<p>那再看看我们从STM32解密出来的数据，可以看到这个数据有点问题，明明是私钥加的密，开头确实0 2，大概率这里有问题。</p>\n<p><img src=\"clip_image001-1534941259919.png\" alt=\"img\"></p>\n<p>于是我在我的私钥加密中，将这位修改成2，将数据发给STM32,32那边随即便将数据返回出来了。</p>\n<p>还有一个问题，那就是为什么PKCS标准需要留11个字节呢。</p>\n<p><img src=\"clip_image004.png\" alt=\"img\"></p>\n<p>这11个字长那么大概率就是为了增加秘钥安全性所预留的随机数了。</p>\n<p>至此，算是终于将问题找到，并找到解决的办法了，解决问题大概是经历了那几个步骤，中间夹杂着各种尝试，当然写出来的却是每一步走得都很正确，中间与人沟通的成本不低，沟通愉快的时候解决问题的方法就会非常的多。</p>\n<h3 id=\"Golang实现Nopadding模式\"><a href=\"#Golang实现Nopadding模式\" class=\"headerlink\" title=\"Golang实现Nopadding模式\"></a>Golang实现Nopadding模式</h3><p><a href=\"https://stackoverflow.com/questions/40870178/golang-rsa-decrypt-no-padding\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/40870178/golang-rsa-decrypt-no-padding</a></p>\n<p><img src=\"123.png\" alt=\"Nopadding\"></p>\n<p>提供解决方法的人特意提醒了，若用户有选择，请尽量不要使用这种填充方式，并给出了提供意见的链接。（不得不说，做事真的严谨）</p>\n<p><a href=\"https://crypto.stackexchange.com/a/15184\" target=\"_blank\" rel=\"noopener\">https://crypto.stackexchange.com/a/15184</a></p>\n<p>我这里直接截取出结论来，具体如何得出结论的，还是希望大家能够读一读原文。</p>\n<p><img src=\"1234.png\" alt=\"Do Not use RSA\"></p>\n<p>不要使用RSA不填充方式，其是一种裸RSA加密方式，</p>\n<p>① 在任何公钥加密场合，当明文具有低熵（低混乱度）时，它是不安全的。</p>\n<p>② 短明文易受到攻击。</p>\n<p>其中，作者还建议为了保证算法的加密性，那么就应该保护算法的随机性，加密的数据不应该太多，2048bit key，最好只加密0-190字节的数据，如果不能满足，应该考虑使用混合加密算法。</p>\n","categories":[{"name":"Go","slug":"Go","permalink":"chunlife.top/categories/Go/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"OpenSSL","slug":"OpenSSL","permalink":"chunlife.top/tags/OpenSSL/"},{"name":"RSA加密解密","slug":"RSA加密解密","permalink":"chunlife.top/tags/RSA加密解密/"}]},{"title":"搭建博客——使用Hexo","date":"2018-07-22T15:32:05.000Z","path":"2018/07/22/搭建博客——使用Hexo/","content":"<h2 id=\"搭建博客\"><a href=\"#搭建博客\" class=\"headerlink\" title=\"搭建博客\"></a>搭建博客</h2><p>使用GitHub和Hexo搭建博客其实是非常顺畅的，毕竟工具到现在都已经经历很多版本的迭代了，已经很傻瓜式了。</p>\n<p>推荐搭建的教程：</p>\n<a id=\"more\"></a>\n<p>关于Hexo6.0搭建个人博客(github+Google-收录篇)，博主还有教我们怎么收录百度的博客，道理是一样的。</p>\n<p><a href=\"https://www.imooc.com/article/31085\" target=\"_blank\" rel=\"noopener\">https://www.imooc.com/article/31085</a></p>\n<p>这里提一点绑定的事，附上我的DNS解析：</p>\n<p><img src=\"1532523945344.png\" alt=\"DNS解析\"></p>\n<h3 id=\"参考的博客\"><a href=\"#参考的博客\" class=\"headerlink\" title=\"参考的博客\"></a>参考的博客</h3><p><a href=\"https://www.voidking.com/2018/06/11/deve-hexo-categories/\" target=\"_blank\" rel=\"noopener\">Hexo添加categories页面</a>，<a href=\"https://yanxin152133.github.io/2019/03/21/Hexo%20yilia%20%E6%B7%BB%E5%8A%A0%E7%9B%AE%E5%BD%95%E9%A1%B5%E9%9D%A2/\" target=\"_blank\" rel=\"noopener\">Hexo Yilia 添加目录页面</a></p>\n<p>Hexo——Yilia主题添加文章置顶</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall hexo-generator-index --save</span><br><span class=\"line\">npm install hexo-generator-index-pin-top --save</span><br><span class=\"line\"></span><br><span class=\"line\">// 文章头加入</span><br><span class=\"line\">Top: True</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://lonepatient.top/2018/02/03/hexo_yilia_2.html\" target=\"_blank\" rel=\"noopener\">GitHub+Hexo+yilia文章浏览量统计</a></p>\n<p><a href=\"https://lonepatient.top/2018/02/02/hexo_yilia_1.html\" target=\"_blank\" rel=\"noopener\">GitHub+Hexo+yilia评论插件</a></p>\n<p><a href=\"http://veronachiu.site/2018/08/03/Hexo-Yilia%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%EF%BC%9AHexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-Hexo%E6%96%87%E7%AB%A0%E4%B9%A6%E5%86%99-Yilia%E9%85%8D%E7%BD%AE/\" target=\"_blank\" rel=\"noopener\">Hexo+Yilia博客搭建：Hexo常用命令+Hexo文章书写+Yilia配置</a></p>\n<p><a href=\"http://lawlite.me/2017/04/13/Hexo-Github%E5%AE%9E%E7%8E%B0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/\" target=\"_blank\" rel=\"noopener\">Hexo+Github实现相册功能</a> </p>\n<p><a href=\"http://lawlite.me/2017/04/17/Hexo-yilia%E4%B8%BB%E9%A2%98%E5%AE%9E%E7%8E%B0%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95%E5%92%8C%E6%B7%BB%E5%8A%A0%E8%A7%86%E9%A2%91/\" target=\"_blank\" rel=\"noopener\">Hexo+yilia主题实现文章目录和添加视频</a> </p>\n<p><a href=\"https://www.jianshu.com/p/cb0a105d7a81\" target=\"_blank\" rel=\"noopener\">Hexo Yilia主题增加分享以及访问统计</a></p>\n<p><a href=\"https://ziven.cc/2018/07/03/Hexo%E4%B8%BB%E9%A2%98yilia%E5%A2%9E%E5%8A%A0gitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/\" target=\"_blank\" rel=\"noopener\">Hexo主题yilia增加gitalk评论插件</a> </p>\n<p><a href=\"https://github.com/litten/hexo-theme-yilia/pull/767\" target=\"_blank\" rel=\"noopener\">Yilia Pull Request</a></p>\n<h2 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h2><h3 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h3><p>这里主要是提一下我遇到的一个插入图片的问题，这里我使用的Hexo主题是yilia。 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure>\n<p>yilia需要会提示我们安装一个插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-generator-json-content --save</span><br></pre></td></tr></table></figure>\n<p>但很奇怪的是，我在安装完这个插件后，我的hexo-asset-image——图片链接转换插件就不见了，导致我莫名其妙的图片无法显示了，Google多次无果，重新部署时才发现这个问题（没有细心去找），实在是没想到会出现这个问题，所以在装完这个插件后，又手动将hexo-asset-image插件给安装了回来，之后网页和本地都没有显示问题了，撒花。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n<p>当然，我还看到有人遇到图片显示不出来的其他问题，如果和你的问题对上了，可以看看：</p>\n<p>hexo中完美插入本地图片</p>\n<p><a href=\"http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/\" target=\"_blank\" rel=\"noopener\">http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</a></p>\n<h3 id=\"2018年7月25日20-54-20\"><a href=\"#2018年7月25日20-54-20\" class=\"headerlink\" title=\"2018年7月25日20:54:20\"></a>2018年7月25日20:54:20</h3><p>在这个时候又添加上这段话，是因为博客无法显示图片了，hexo-asset-image好像无法替我正常转换图片路径了，对JS的源码无法分析，只能提一个issue，同时在网上查找答案，在白天的时候找到一个方法，将其截图，准备晚上试试，发现这个方法好像确实好使。</p>\n<p><strong>注意</strong>：使用该方法则不能保留hexo-asset-image，直接去module目录删除即可。</p>\n<p><img src=\"1532523531403.png\" alt=\"Hexo插入图片方法\"></p>\n<p>原链接没有保存，故无法放出链接了，需要的可自行Google。</p>\n<p>修改后可配合Typora使用，其在“编辑”——“图片工具”中，可设置图片根目录，将其定位到图片所在即可。</p>\n<p>也就是使用Markdown插入图片的语法即可，当然，图片得放在相对路径上。</p>\n","categories":[{"name":"搭建博客","slug":"搭建博客","permalink":"chunlife.top/categories/搭建博客/"}],"tags":[{"name":"搭建博客","slug":"搭建博客","permalink":"chunlife.top/tags/搭建博客/"}]},{"title":"go里面的io Writer操作","date":"2018-07-12T10:17:59.000Z","path":"2018/07/12/go里面的io-Writerr操作/","content":"<p>将string转换成 io.Writer，可以进行类似于write的操作，类似于写文件一样。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s := <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\">buf := bytes.NewBufferString(s)</span><br><span class=\"line\">fmt.Fprint(buf, <span class=\"string\">\", World!\"</span>)</span><br><span class=\"line\">fmt.Println(buf.String())</span><br></pre></td></tr></table></figure>\n<p>同样的，打开的文件也可以被转换成 io.Writer，继而直接向其写入数据。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f, err := os.OpenFile(fileName, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, os.ModePerm)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">w := bufio.NewWriter(f)</span><br><span class=\"line\">fmt.Fprintln(w, fmt.Sprintf(<span class=\"string\">\"start analysis log at the %s \\r\\n\"</span>, <span class=\"string\">`\"`</span>+logFileDir+<span class=\"string\">`\"`</span>))</span><br></pre></td></tr></table></figure>\n<p>以上不管是写文件还是写字符串，在需要大量写时，效率即会体现出来。</p>\n","categories":[{"name":"Go基础操作","slug":"Go基础操作","permalink":"chunlife.top/categories/Go基础操作/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"write","slug":"write","permalink":"chunlife.top/tags/write/"}]},{"title":"对如今手机的看法——仅兴趣","date":"2017-12-01T13:43:46.000Z","path":"2017/12/01/对如今手机的看法——仅兴趣/","content":"<p>现在手机大概已经细分成了两大阵营，Android和iOS。</p>\n<a id=\"more\"></a>\n<p>当然国内的Android大多是安卓，称得上Android的倒是一些国外原生，例如HTC、索尼大法等，当然要说国内使用原生就是好用那就是太尴尬了，总体来说，国内的系统大体上应该都是差不多的水平（系统稳定性方面，当然还有底层功耗的控制和系统UI的设计方面），主要是看各大厂商对系统易用性的把控，这里面功力深厚的一批是：MIUI、Flyme、EMUI（UI不行外其实还可以），手机系统界的新贵则是smartisan os，个人是比较喜欢锤子的，现在手机牌桌上的玩家越来越少了，能有个创新的玩家是用户们的希望啊。</p>\n<p>IOS阵营就不说了，其优点可能并不是一个真正意义上的创新者，但它从来都不缺顶尖的技术，通过顶尖的技术对当下的热门领域进行加工，即可得到远超行业大众水平，甚至直接就变成行业第一，从技术的布道上，apple喜欢进行一些新尝试时，又拿出另一些东西，以此来构成一套完整的解决方案。（比如，取消3.5mm耳机接口，发布AirPods）。</p>\n<p>两大系统的整体趋势来看，Android比之前是越来越好用了，开源导致生态混乱同时，丰富的代码量的优势也在体现；iOS比之前没那么好用了也是一个事实，毕竟系统最新版的稳定性是有目共睹，但这并不说明Android就已经干倒iOS，至少在认知上Android还是有一段距离才能赶上iOS的。老实说，抛开硬件来说，在易用性上，Android和iOS应该是没有太大的差距的。</p>\n<p>为啥要抛开硬件呢，额，这个对Android阵营来说实在是个忧伤的话题，每年科技春晚（苹果发布会）发布的芯片基本是默秒全，根本不管你Android阵营到底来了神马黑科技，反正都没我黑，基本对比硬件提升，苹果也是只和自家产品比。到现在，Android阵营理由跟上来几个拼桌子的玩家了，华为，联发科，Samsung，高通等等，至少现在高通晓龙835性能还是很强的，配合Android在用户体验上至少不会因为实际应用上出现芯片翻车的情况，具体使用的发挥就是看各家软件体验的优化了。在基础硬件堆砌时代基本过去后，现在大家都忙着建立手机优质标签，避免手机同质化的产生，做到我有你无的地步，最低也是至少要让别人一段时间有不了，比如买断某款芯片几个月，或者买一套比较狠的拍照算法，最狠就是自己研发一套迥异的技术，华为的莱卡，锤子的软件创新等，都是用心的地方，打马后炮说，应该就是他们成功的一小部分原因吧（可能）。</p>\n<p>以用户视角来看现在的手机行业，很明显的感觉是手机同质化已经非常严重了，大家的敌人也很明确，冒尖的那个且引领潮流的玩法，大家就一起去玩；行业领导者怎么玩，大家就一起去玩。如果不这么做，结局估计会不怎么好，向大佬低头，你不会变成大佬，但至少你不会死。像现在，手机大牌玩家已经基本准备完毕，也就说供应链的大主顾已经基本确定，小玩家品牌不被主流人群认可，不被顶尖供货商认可，而且还有名牌厂商的贴牌机在低端市场以非常细分的价格收割不同的人群，那还有啥可以玩的。</p>\n<p>手机同质化是一个问题，但是好歹顶尖厂商都有自家的黑科技，但是Android阵营中的特色软件生态不太令人满意，说起来Android用的和之前能有啥区别呢，我们用户在使用时，用户体验并不是完全是硬件决定的，软件的使用也是个问题，各种毒瘤，崩溃，上传隐私数据等，都是让人恼火的问题，这个时候得拿出信仰之锤——锤子科技了，希望它能走下去，它做的软件创新让我们用户可以为之欢呼。各大厂商也在做，希望能做得快一些，赶紧把竞争战场换到这里来，这样，我们用户估计就有福想了哦。</p>\n","categories":[{"name":"随笔","slug":"随笔","permalink":"chunlife.top/categories/随笔/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"chunlife.top/tags/随笔/"}]},{"title":"PCI串口编程","date":"2017-11-03T08:17:51.000Z","path":"2017/11/03/PCI串口编程/","content":"<h2 id=\"一、硬件环境\"><a href=\"#一、硬件环境\" class=\"headerlink\" title=\"一、硬件环境\"></a>一、硬件环境</h2><p>硬件开发环境是PCI9054+FPGA，16串口或8串口。</p>\n<a id=\"more\"></a>\n<p>软件开发平台则是linux、VxWorks。</p>\n<p>主要是运用在工控领域，在一般商用平台可能用不到这玩意。</p>\n<h2 id=\"二、PCI相关知识\"><a href=\"#二、PCI相关知识\" class=\"headerlink\" title=\"二、PCI相关知识\"></a>二、PCI相关知识</h2><p>PCI相关知识主要是参考了网上一些前辈写的博文，这里将其贴出来，以免后来人继续收集。</p>\n<p>PCI 总线学习笔记-PCI9054  <a href=\"http://blog.csdn.net/lg2lh/article/details/8042008\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/lg2lh/article/details/8042008</a></p>\n<p>PCI设备的地址空间               <a href=\"http://www.cnblogs.com/zszmhd/archive/2012/05/08/2490105.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/zszmhd/archive/2012/05/08/2490105.html</a></p>\n<p>另外《linux设备驱动开发详解》（宋宝华）也有附带讲一些PCI驱动的编程，可以去瞄一瞄。</p>\n<p>第一篇博文主要是介绍PCI9054的相关信息，知道这个片子是怎么做的，以及其是如何将FPGA和PC机连接起来，熟悉硬件原理。在实际的编程中，我们可能根本感觉不到这个片子，作为一个“桥片”，操作系统其实都已经将厂商的驱动给集成了，并不会说还需要我们来进行过多的编程。</p>\n<p>第二篇博文具体内容很重要，是PCI设备的特性属性，但作为使用者，其实我们用到的只是PCI的地址空间，其他的暂时不用理会，PCI地址空间即是系统在启动时，PCI设备向CPU大佬申请的一段独有的地址空间以供自己使用，这段地址的相关信息也就存储在PCI配置空间的BAR(Base Address Registers)中。</p>\n<p>在linux中，需要调用相关的API函数就能将BAR的信息取出进行使用了。</p>\n<p>三、编程相关信息</p>\n<p>Linux中，PCI设备的编程其实和普通设备的编程很相似，没有什么特别不同，主要的不同应该是映射PCI设备的地址空间。</p>\n<p>UART设备，在编程中使用uart_register_driver注册tty设备，同时使用platform_driver_register注册平台总线。PCI-UART则是一实际总线，所以在注册时，我们选择注册为实际的总线——pci_register_driver。（参考Linux xr17v35x.c）</p>\n<p><img src=\"20171203174156903\" alt=\"img\"></p>\n<p><img src=\"20171203174158230\" alt=\"image\"></p>\n<p><img src=\"20171203174159008\" alt=\"image\"></p>\n<p>xr_uart_driver为驱动特殊的信息，xrserial_pci_driver为驱动匹配提供操作方法，在probe方法中，对串口相关资源进行初始化（还未对硬件进行相关设置），为该设备关联文件操作方法（uart_ops）。</p>\n<p>先来看看probe中主要做的事情。</p>\n<p><img src=\"20171203174159459\" alt=\"image\"></p>\n<p>在一个pci设备可以被使用之前，必须调用pci_enable_device进行激活，该函数会调用底层代码激活PCI设备上的I/O和内存，使之可用。而pci_disable_device所做的事情刚好相反，告诉系统该PCI设备不再使用，同时，禁用相关的一些资源。</p>\n<p>经过一系列调用进入函数setup_port。</p>\n<p><img src=\"20171203174200245\" alt=\"image\"></p>\n<p>图中的bar是在xrpciserial_boards数组中flags指定，此处是BAR0。（根据实际产品来，比如，我这里是BAR2）</p>\n<p><img src=\"20171203174200919\" alt=\"image\"></p>\n<p>若是我们的硬件没有预先跟软件这边说，那软件这边有能力得到这个信息吗？答案肯定是可以的。可以使用pci_select_bars来确定该PCI设备是否有申请到地址空间。（若没有肯定是有错误了）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bars = pci_select_bars(pdev, IORESOURCE_MEM);</span><br></pre></td></tr></table></figure>\n<p>返回值若是0x5，则是代表BAR0，BAR2满足select条件的，其条件就是函数的第二个参数IORESOURCE_MEM，因为PCI设备申请的地址空间有两种访问方式，一个是MEM，另一个是以IO方式访问，（第二篇博文中有介绍）。</p>\n<p>这个时候我们可以使用这个返回值来映射这些BAR，若PCI设备使用了BAR0，那软件就使用BAR0去操作特定的内存地址（寄存器）就可以了，一个PCI设备一般不会使用很多BAR的，最多一两个就不得了了，要那么多，FPGA那边也受不了。</p>\n<p>当然，有一些是强制性的就指定了该设备是使用哪一个BAR作为内存映射的基址，其他的BAR则是用于自定义用途，那软件这边强制性映射BAR0就好了。</p>\n<p>看图片上，其实还调用了一个ioremap，BAR中的基址是属于物理地址的，软件想直接访问物理地址是做不到，那么，就需要使用ioremap将物理地址转化为虚拟地址，以供软件来使用。映射完后，使用priv-&gt;remapped_bar[bar]就可以来操作设备上的寄存器了。</p>\n<p>分析完setup后（其实上面主要的工作是内存映射，其他的代码比较繁琐，在实际编程中可以适当简洁）。</p>\n<p>进入serialxr_register_port。</p>\n<p>填充 uart_port 结构体。</p>\n<p><img src=\"20171203174201698\" alt=\"image\"></p>\n<p>填充ops操作方法，也就是在应用层在使用open、write等，底层驱动最终会被调用的方法。使用uart_add_one_port将驱动与串口链接到一起，这样，在应用层操作/dev/tty*时，相应的ops就会被调用了。</p>\n<p><img src=\"20171203174202320\" alt=\"image\"></p>\n<p>到这里，probe函数大体就完成了，再之后的工作就是对ops的接口进行实现了，这里其实就可以参考一般串口设备到底在干嘛了，例如参考S3C2440的串口驱动。</p>\n<p>参考至<a href=\"http://blog.csdn.net/lizuobin2/article/details/51773305\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/lizuobin2/article/details/51773305</a>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uart_ops</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"title\">int</span>\t<span class=\"params\">(*tx_empty)</span><span class=\"params\">(struct uart_port *)</span></span>;\t <span class=\"comment\">/* 串口的Tx FIFO缓存是否为空 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*set_mctrl)(struct uart_port *, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> mctrl);\t<span class=\"comment\">/* 设置串口modem控制 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"title\">int</span>\t<span class=\"params\">(*get_mctrl)</span><span class=\"params\">(struct uart_port *)</span></span>;\t<span class=\"comment\">/* 获取串口modem控制 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*stop_tx)(struct uart_port *);\t\t<span class=\"comment\">/* 禁止串口发送数据 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*start_tx)(struct uart_port *);\t<span class=\"comment\">/* 使能串口发送数据 */</span>\t</span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*send_xchar)(struct uart_port *, <span class=\"keyword\">char</span> ch);\t<span class=\"comment\">/* 发送xChar */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*stop_rx)(struct uart_port *);\t\t<span class=\"comment\">/* 禁止串口接收数据 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*enable_ms)(struct uart_port *);\t<span class=\"comment\">/* 使能modem的状态信号 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*break_ctl)(struct uart_port *, <span class=\"keyword\">int</span> ctl);\t<span class=\"comment\">/* 设置break信号 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>\t\t\t(*startup)(struct uart_port *);\t\t<span class=\"comment\">/* 启动串口,应用程序打开串口设备文件时,该函数会被调用 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*shutdown)(struct uart_port *);<span class=\"comment\">/* 关闭串口,应用程序关闭串口设备文件时,该函数会被调用 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*flush_buffer)(struct uart_port *);</span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*set_termios)(struct uart_port *, struct ktermios *<span class=\"keyword\">new</span>,</span><br><span class=\"line\">\t\t\t\t       struct ktermios *old);\t<span class=\"comment\">/* 设置串口参数 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*set_ldisc)(struct uart_port *);<span class=\"comment\">/* 设置线路规程 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*pm)(struct uart_port *, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> state,</span><br><span class=\"line\">\t\t\t      <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> oldstate);\t<span class=\"comment\">/* 串口电源管理 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>\t\t(*set_wake)(struct uart_port *, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> state);</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return a string describing the type of the port</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *(*type)(struct uart_port *);</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * Release IO and memory resources used by the port.</span></span><br><span class=\"line\"><span class=\"comment\">\t * This includes iounmap if necessary.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*release_port)(struct uart_port *);</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * Request IO and memory resources used by the port.</span></span><br><span class=\"line\"><span class=\"comment\">\t * This includes iomapping the port if necessary.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>\t\t(*request_port)(struct uart_port *);\t<span class=\"comment\">/* 申请必要的IO端口/IO内存资源,必要时还可以重新映射串口端口 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*config_port)(struct uart_port *, <span class=\"keyword\">int</span>); <span class=\"comment\">/* 执行串口所需的自动配置 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>\t\t(*verify_port)(struct uart_port *, struct serial_struct *); <span class=\"comment\">/* 核实新串口的信息 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>\t\t(*ioctl)(struct uart_port *, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_CONSOLE_POLL</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t(*poll_put_char)(struct uart_port *, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>\t\t(*poll_get_char)(struct uart_port *);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>特别说明下，其中set_termios，与串口数据，流控开关，以及波特率设置相关。应用层若需要操控这些格式或者是打开流控等，需要使用tcgetattr函数得到对应串口的termios结构体。通过tcsetattr函数将设置后termios结构体传递给对应的串口。</p>\n<p>startup则与open函数相关，在串口进行open操作时，上层会调用uart_open（serial_core.c），然后调用打开的设备的文件操作函数方法的startup。shutdown则与之相对。</p>\n<p>ioctl则是支持一些该串口特殊的操作（若没有，则不设置就可以了）。</p>\n<p><img src=\"20171203174202999\" alt=\"image\"></p>\n<p>config_port是在驱动调用uart_add_one_port，链接驱动和串口端口时就被调用的一个函数，这个函数调用的真是早啊，主要的作用也是做一些在串口还没打开时需要处理的一些事，例如，设置串口的模式（232\\485\\422）。</p>\n<p>大概就是这些了，其实VxWorks的驱动与之类似，可以参考vxbTemplateSio.c或者是templateSio.c，应该不会遇到啥比较可怕的大坑 。</p>\n<p>另外需要注意的是VxWorks映射PCI BAR空间的问题，这些个代码网上有很多，可以去直接搜索下，不必去从源码上扣，别人已经整理出来了，我们就不必要花这个功夫了呗！</p>\n","categories":[{"name":"嵌入式","slug":"嵌入式","permalink":"chunlife.top/categories/嵌入式/"}],"tags":[{"name":"串口","slug":"串口","permalink":"chunlife.top/tags/串口/"},{"name":"PCI","slug":"PCI","permalink":"chunlife.top/tags/PCI/"}]},{"title":"Linux搭建小型服务器——文件共享以及邮件服务器","date":"2017-10-29T08:17:51.000Z","path":"2017/10/29/Linux搭建小型服务器——文件共享以及邮件服务器/","content":"<p>因为公司搬家，之前后又采用了新的服务器，所以之前的服务器的东西需要移动到新的服务器上，而且趁着这次机会，搭建了一个局域网使用的邮件服务器使用，虽然不知道别人怎么搭建的，但是把自己的经验记录下来，因为这个邮件服务器确实花了我不少时间去琢磨，因为它这玩意可能还会干扰我的文件共享功能。</p>\n<a id=\"more\"></a>\n<p>邮件服务器是IRedMail，文件共享服务是Samba，环境是centos。</p>\n<h3 id=\"IRedMail安装：\"><a href=\"#IRedMail安装：\" class=\"headerlink\" title=\"IRedMail安装：\"></a>IRedMail安装：</h3><p>网上搜索很容易搜索到使用Postfix+Dovecot搭建邮件服务器，不过我没有搭建成功，很遗憾，所以我找到了使用IRedMail去搭建这个服务器，比之前的操作简单多了。</p>\n<p>搭建的步骤主要是参考了这个：<a href=\"https://www.tecmint.com/install-iredmail-on-centos-7-for-samba4-ad-integration/\" target=\"_blank\" rel=\"noopener\">How to Install iRedMail on CentOS 7 for Samba4 AD Integration – Part 10</a></p>\n<p>首先你得有一个centos的系统，这里选择的是centos 7最小化安装，非常快速简洁的便会安装完成。</p>\n<ol>\n<li><p>进入系统，准备设置系统主机名。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># hostnamectl set-hostname mail.demo.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>主机名在hosts中设置一下，设置这个东西主要是IRedMail在安装时会需要使用到，所以自定义一下。vim /etc/hosts。</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1 mail.demo.com mail localhost localhost.localdomain</span><br></pre></td></tr></table></figure>\n<p>先后格式错误的话，IRedMail在安装时也会提醒安装错误的。</p>\n<ol start=\"3\">\n<li>在我参考的那个英文文章里说，需要关闭<a href=\"https://www.baidu.com/s?wd=selinux&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd\" target=\"_blank\" rel=\"noopener\">selinux</a>，我试了下，不关闭也是照样好使的，不过别人的说的是推荐，不是强制。vim /etc/selinux/config。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELINUX=disabled</span><br><span class=\"line\"># setenforce 0</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>接下来需要安装些必要的Linux工具了，使用yum命令。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum install bzip2 net-tools bash-completion wget</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>获取IRedMail的安装包，并解压。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># wget https://bitbucket.org/zhb/iredmail/downloads/iRedMail-0.9.6.tar.bz2</span><br><span class=\"line\"></span><br><span class=\"line\"># tar xjf iRedMail-0.9.6.tar.bz2</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>接下来就可以运行IRedMail里面的脚本了，并不需要认为设置，很是方便。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># IREDMAIL_MIRROR=&apos;http://106.187.51.47&apos; bash iRedMail.sh</span><br></pre></td></tr></table></figure>\n<p>如果你直接运行bash iRedMail.sh，是没啥结果的，查了下，好像是因为其下载地址被强了吧，所以需要加入前面的环境设置。</p>\n<ol start=\"7\">\n<li>安装过程基本上选择默认，除了在选择web server上选择Apache，后端选择OpenLDAP外（我之前选择了MariaDB，Samba就死活通不了了，OpenLDAP我实验成功），其他基本上是默认的。</li>\n</ol>\n<p><img src=\"13163018_Uf7x.png\" alt=\"image\"></p>\n<p><img src=\"13163018_RZvU.jpg\" alt=\"clip_image004\"></p>\n<ol start=\"8\">\n<li><p>在需要输入些什么时候稍微看下软件给的提示英文，设置起来应该是没什么问题的。</p>\n</li>\n<li><p>设置完后，就是开始安装了，保证系统可以上网即可，安装完成后，软件将提示重启所有服务，</p>\n</li>\n<li><p>在软件目录的下的iRedMail.tips，其保存了很多服务器设置的内容，包括邮件服务器里面的管理员密码，所以，需要保管好。iRedMail-0.9.6/iRedMail.tips</p>\n</li>\n<li><p>在同一局域网的浏览器上，输入<a href=\"https://192.168.0.254，此处的IP是服务器IP，这样即可连接到邮件服务器了，注意：浏览器可能静止访问，或者兼容模式访问起来有些问题，这个时候需要测试者多整整浏览器的问题，以免误认为安装失败。\" target=\"_blank\" rel=\"noopener\">https://192.168.0.254，此处的IP是服务器IP，这样即可连接到邮件服务器了，注意：浏览器可能静止访问，或者兼容模式访问起来有些问题，这个时候需要测试者多整整浏览器的问题，以免误认为安装失败。</a></p>\n<p>httpS://192.168.0.254/mail/ 邮箱登录</p>\n<p>httpS://192.168.0.254/iredadmin/ 管理邮箱账户，添加邮箱</p>\n</li>\n</ol>\n<h3 id=\"Samba安装\"><a href=\"#Samba安装\" class=\"headerlink\" title=\"Samba安装\"></a>Samba安装</h3><p>这个Samba我主要是参考了：<a href=\"http://www.cnblogs.com/linuxprobe/p/5658735.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/linuxprobe/p/5658735.html</a></p>\n<h4 id=\"步骤1：在Fedora和CentOS上安装Samba\"><a href=\"#步骤1：在Fedora和CentOS上安装Samba\" class=\"headerlink\" title=\"步骤1：在Fedora和CentOS上安装Samba\"></a><strong>步骤1：在Fedora和CentOS上安装Samba</strong></h4><p>首先，安装Samba以及进行一些基本的配置。</p>\n<p>检验Samba是否已经安装在您的系统中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rpm -q samba samba-common samba-client</span><br></pre></td></tr></table></figure>\n<p>如果上面的命令没有任何输出，这意味着Samba并未安装。这时，应使用下面的命令来安装Samba。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install samba samba-common samba-client</span><br></pre></td></tr></table></figure>\n<p>接下来，创建一个用于在网络中共享的本地文件夹。这个文件夹应该以Samba共享的方式导出到远程的用户。在这个指南中，我们会在顶层文件夹’/‘中创建这个文件夹，因此，请确保您有相应的权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo mkdir /shared</span><br></pre></td></tr></table></figure>\n<p>如果您想在您的home文件夹内创建共享文件夹（例如，~/shared），您必须激活SELinux中Samba的home文件夹共享选项，具体将在后面提到。</p>\n<p>在创建/shared文件夹后，设置文件夹权限以保证其余用户可以访问它。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo chmod o+rw /shared</span><br></pre></td></tr></table></figure>\n<p>如果您不想其他用户对该文件夹拥有写权限，您需要移除命令中的’w’选项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo chmod o+r /shared</span><br></pre></td></tr></table></figure>\n<p>接下来，创建一个空文件来测试。这个文件可以被用来验证Samba的共享已经被挂载。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo touch /shared/file1</span><br></pre></td></tr></table></figure>\n<h4 id=\"步骤2：为Samba配置防火墙\"><a href=\"#步骤2：为Samba配置防火墙\" class=\"headerlink\" title=\"步骤2：为Samba配置防火墙\"></a><strong>步骤2：为Samba配置防火墙</strong></h4><p>下面的命令用来打开防火墙中Samba共享所需的TCP/UDP端口。</p>\n<p>如果您在使用firewalld（例如，在Fedora和CentOS7下），接下来的命令将会永久的修改Samba相关的防火墙规则。</p>\n<h4 id=\"步骤3：更改Samba配置\"><a href=\"#步骤3：更改Samba配置\" class=\"headerlink\" title=\"步骤3：更改Samba配置\"></a><strong>步骤3：更改Samba配置</strong></h4><p>后面的步骤用来配置Samba以将本地文件夹导出为Samba共享文件夹。</p>\n<p>使用文件编辑器打开Samba配置文件，并将下面的行添加到文件的末尾。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo nano /etc/samba/smb.conf</span><br><span class=\"line\">[myshare]</span><br><span class=\"line\"></span><br><span class=\"line\">comment=my shared files</span><br><span class=\"line\"></span><br><span class=\"line\">path=/shared</span><br><span class=\"line\"></span><br><span class=\"line\">public=yes</span><br><span class=\"line\"></span><br><span class=\"line\">writeable=yes</span><br></pre></td></tr></table></figure>\n<p>上面在括号内的文本（例如，”myshare”）是Samba共享的资源的名字，它被用来从远程主机存取Samba共享。</p>\n<p>创建Samba用户账户，这是挂载和导出Samba文件系统所必须的。我们可以使用smbpasswd工具来创建一个Samba用户。注意，Samba用户帐户必须是已有的Linux用户。如果您尝试使用smbpasswd添加一个不存在的用户，它会返回一个错误的消息。</p>\n<p>如果您不想使用任何已存在的Linux用户作为Samba用户，您可以在您的系统中创建一个新的用户。为安全起见，设置新用户的登录脚本为/sbin/nologin，并且不创建该用户的home文件夹。</p>\n<p>在这个例子中，我们创建了一个名叫”sambaguest”的用户，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo useradd -M -s /sbin/nologin sambaguest</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo passwd sambaguest</span><br></pre></td></tr></table></figure>\n<p>在创建一个新用户后，使用smbpasswd命令添加Samba用户。当这个命令询问一个密码时，您可以键入一个与其用户密码不同的密码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo smbpasswd -a sambaguest</span><br></pre></td></tr></table></figure>\n<p>激活Samba服务，并检测Samba服务是否在运行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl enable smb.service</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo systemctl start smb.service</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo systemctl is-active smb</span><br></pre></td></tr></table></figure>\n<p>使用下面的命令来查看Samba中共享的文件夹列表。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ smbclient -U sambaguest -L localhost</span><br></pre></td></tr></table></figure>\n<p>Linux之间Samba远程挂载的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount //192.168.1.58/demo /mnt/ -o username=samba</span><br></pre></td></tr></table></figure>\n<p>附在末尾：</p>\n<p>Linux关于权限：例如777，rwx(Owner)  r-x(Group)    r-x(Other)。</p>\n<p><img src=\"13163019_vmLd.jpg\" alt=\"clip_image002[5]\"></p>\n<p>cat /etc/passwd 可以查看所有用户的列表</p>\n<p>w 可以查看当前活跃的用户列表</p>\n<p>cat /etc/group 查看用户组</p>\n<h5 id=\"1-建工作组\"><a href=\"#1-建工作组\" class=\"headerlink\" title=\"1. 建工作组\"></a>1. 建工作组</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd test //新建test工作组</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-新建用户同时增加工作组\"><a href=\"#2-新建用户同时增加工作组\" class=\"headerlink\" title=\"2. 新建用户同时增加工作组\"></a>2. 新建用户同时增加工作组</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd -g test one //新建one用户并增加到test工作组</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-给已有的用户增加工作组\"><a href=\"#3-给已有的用户增加工作组\" class=\"headerlink\" title=\"3. 给已有的用户增加工作组\"></a>3. 给已有的用户增加工作组</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usermod -G groupname username</span><br><span class=\"line\"></span><br><span class=\"line\">或者：gpasswd -a user group</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-将一个已有用户添加到一个已有的工作组中，可以使用带-a参数的指令。\"><a href=\"#4-将一个已有用户添加到一个已有的工作组中，可以使用带-a参数的指令。\" class=\"headerlink\" title=\"4. 将一个已有用户添加到一个已有的工作组中，可以使用带-a参数的指令。\"></a>4. 将一个已有用户添加到一个已有的工作组中，可以使用带-a参数的指令。</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usermod -a -G groupname username</span><br><span class=\"line\"></span><br><span class=\"line\">若需要顺便改变主要用户组，则可以使用：</span><br><span class=\"line\"></span><br><span class=\"line\">usermod -g groupname username</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-修改文件或目录所属的用户。\"><a href=\"#5-修改文件或目录所属的用户。\" class=\"headerlink\" title=\"5. 修改文件或目录所属的用户。\"></a>5. 修改文件或目录所属的用户。</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown one /home/one （把home目录下的one目录的有者改为one用户）</span><br></pre></td></tr></table></figure>\n<h5 id=\"6-修改文件或目录所属的组。\"><a href=\"#6-修改文件或目录所属的组。\" class=\"headerlink\" title=\"6. 修改文件或目录所属的组。\"></a>6. 修改文件或目录所属的组。</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chgrp one /home/one （把home目录下的one目录的有者改为one组）</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"Linux","slug":"Linux","permalink":"chunlife.top/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"chunlife.top/tags/Linux/"},{"name":"文件共享_邮件","slug":"文件共享-邮件","permalink":"chunlife.top/tags/文件共享-邮件/"}]},{"title":"vxworks中断处理程序不能使用printf的本质","date":"2017-10-27T12:56:26.000Z","path":"2017/10/27/vxworks中断处理程序不能使用printf的本质/","content":"<p>因为之前面试有被人提到，中断处理程序中为什么不能使用printf，在回答的时候一想，Linux驱动里面不是就可以使用打印吗，有啥不能用的（那是printk，当时搞混了）。在vxworks上用的都是logMsg进行打印，至于为啥没使用printf也没去深究，现在正好把它记一下。</p>\n<a id=\"more\"></a>\n<p>我的理解是：printf是对IO进行操作，有“信号量”进行加持，也就是所谓的“锁机制”，如果有在uboot上移植过printf的经历，就知道，printf是使用了全局变量的，这也是它申请锁保护的原因吧，但关键就是“锁”这个玩意有点儿危险的是，它是一个需要等待的操作，也就是说·在申请它和使用它的时候，有可能会被“锁”给阻塞，但是vxworks是一个实时操作系统，当发生阻塞时，它的调度就会出现问题，可能就会导致死机的现象。</p>\n<p>下面是我转载的一篇文章，帮助大家进行理解。</p>\n<p><em>本文章转载自：<a href=\"http://blog.csdn.net/mao0514/article/details/32700835\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/mao0514/article/details/32700835</a></em><a href=\"http://http//blog.csdn.net/mao0514/article/details/32700835\" target=\"_blank\" rel=\"noopener\">点击打开链接</a></p>\n<p>vxworks 中断处理程序之所以不用printf，本质在于printf是将信息输出到标准输出设备(STDOUT)中, 整个标准输出设备是一个全局变量，由于有semTake操作，那么就会发生阻塞，vxworks属于硬实时操作系统，不能在规定的时间内完成操作即会死机或复位。所以vxworks不用printf的原因在于阻塞。 网上说printf 因为引用全局变量stdout，所以是不可重入的。这个稍微解释一下。如果用到了全局变量，但是用信号量保护，是线程安全的，但是不可重入的（会导致死锁，譬如一个任务或中断处理程序调用了printf，被另一个高优先级中断打断，那么就会形成死锁而导致系统复位）。 所以这里的阻塞和不可重入都是因为对共享变量的保护而采用互斥锁引起的，而这里的阻塞是不可重入的一个真子集。（例如：可能有些函数对静态或全局变量没有锁保护，因此是非线程安全，也是非可重入的，此时并没有阻塞在静态或全局变量上，所以不可重入的概念要大。）。因此printf不能用在中断处理程序中的根本原因在于使用了全局变量后采用了锁机制，而锁机制会导致阻塞，阻塞是不可重入的真子集。 所以网上说printf因为不可重入，也会说得过去的（但不可重入还有其他非阻塞的场景）。更准确的说法是因为阻塞在全局变量STDOUT上）。关于可重入和线程安全的区别，下文会有详细解释：</p>\n<p>线程安全函数<br>• 概念：<br>线程安全的概念比较直观。一般说来，一个函数被称为线程安全的，当且仅当被多个并发线程反复调用时，它会一直产生正确的结果。<br>• 确保线程安全：<br>要确保函数线程安全，主要需要考虑的是线程之间的共享变量。属于同一进程的不同线程会共享进程内存空间中的全局区和堆，而私有的线程空间则主要包括栈和寄 存器。因此，对于同一进程的不同线程来说，每个线程的局部变量都是私有的，而全局变量、局部静态变量、分配于堆的变量都是共享的。在对这些共享变量进行访 问时，如果要保证线程安全，则必须通过加锁的方式。<br>• 线程不安全的后果：<br>线程不安全可能导致的后果是显而易见的——共享变量的值由于不同线程的访问，可能发生不可预料的变化，进而导致程序的错误，甚至崩溃。</p>\n<p>可重入函数<br>• 概念：<br>可重入的概念基本没有比较正式的完整解释，多数的文档都只是说明什么样的情况才能保证函数可重入，但没有完整定义。按照Wiki上的说法，“A computer program or routine is described as reentrant if it can be safely executed concurrently; that is, the routine can be re-entered while it is already running.”根据笔者的经验，所谓“重入”，常见的情况是，程序执行到某个函数foo()时，收到信号，于是暂停目前正在执行的函数，转到信号处理 函数，而这个信号处理函数的执行过程中，又恰恰也会进入到刚刚执行的函数foo()，这样便发生了所谓的重入。此时如果foo()能够正确的运行，而且处理完成后，之前暂停的foo()也能够正确运行，则说明它是可重入的。<br>• 确保可重入：<br>要确保函数可重入，需满足以下几个条件：<br>1、不在函数内部使用静态或全局数据<br>2、不返回静态或全局数据，所有数据都由函数的调用者提供。<br>3、使用本地数据，或者通过制作全局数据的本地拷贝来保护全局数据。<br>4、不调用不可重入函数。<br>• 不可重入的后果：<br>不可重入的后果主要体现在象信号处理函数这样需要重入的情况中。如果信号处理函数中使用了不可重入的函数，则可能导致程序的错误甚至崩溃。</p>\n<p> 可重入与线程安全<br>可重入与线程安全并不等同。一般说来，可重入的函数一定是线程安全的，但反过来不一定成立。<br>- 如果一个函数中用到了全局或静态变量，那么它不是线程安全的，也不是可重入的；<br>- 如果我们对它加以改进，在访问全局或静态变量时使用互斥量或信号量等方式加锁，则可以使它变成线程安全的，但此时它仍然是不可重入的，因为通常加锁方式是针对不同线程的访问，而对同一线程可能出现问题；这里举例说明：假设函数func() 在执行过程中需要访问某个共享资源，因此为了实现线程安全，在使用该资源前加锁，在不需要资源解锁。<br>    假设该函数在某次执行过程中，在已经获得资源锁之后，有异步信号发生，程序的执行流转交给对应的信号处理函数；再假设在该信号处理函数中也需要调用函数 func() ，那么func() 在这次执行中仍会在访问共享资源前试图获得资源锁，然而我们知道前一个func() 实例已然获得该锁，因此信号处理函数阻塞。另一方面，信号处理函数结束前被信号中断的线程是无法恢复执行的，当然也没有释放资源的机会，这样就出现了线程和信号处理函数之间的死锁局面。</p>\n<p>  因此，func() 尽管通过加锁的方式能保证线程安全，但是由于函数体对共享资源的访问，因此是非可重入。如果将函数中的全局或静态变量去掉，改成函数参数等其他形式，则有可能使函数变成既线程安全，又可重入。比如：strtok函数是既不可重入的，也不是线程安全的；加锁的strtok不是可重入的，但线程安全；而strtok_r既是可重入的，也是线程安全的。</p>\n","categories":[{"name":"VxWorks","slug":"VxWorks","permalink":"chunlife.top/categories/VxWorks/"}],"tags":[{"name":"VxWorks","slug":"VxWorks","permalink":"chunlife.top/tags/VxWorks/"}]},{"title":"学PPT时的作品","date":"2017-10-18T08:17:51.000Z","path":"2017/10/18/学PPT时的作品/","content":"<p><img src=\"20171018161922485.jpg\" alt=\"作品\"></p>\n<a id=\"more\"></a>\n<p>当年在学校时，就靠这个为（zhuang）生（bi），以为自己会成为一个设计师，迷恋PPT这种简单的软件制作出大师的设计，当然PS这玩意你还是得用，都是工具嘛。</p>\n<p>这些图片单纯的使用PPT是很难达到的，这其中使用到了PPT的插件——OK插件，当然现在PPT的插件还是有一些的，使用插件可以省却很多麻烦，这是在你本身很熟悉的前提下，有兴趣的同学可以去微博找找“只为设计”姥爷的微博，OK插件就是这位大神开发的，PPT当然也是玩得飞起，我反正是很尊敬这位大拿的。</p>\n<p>说多了啊，简单的就把作品放这里就可以了，我还是那个程序员。</p>\n","categories":[{"name":"随笔","slug":"随笔","permalink":"chunlife.top/categories/随笔/"}],"tags":[{"name":"PPT","slug":"PPT","permalink":"chunlife.top/tags/PPT/"}]},{"title":"我的简历","date":"2017-04-13T09:33:44.000Z","path":"2017/04/13/我的简历/","content":"<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><a id=\"more\"></a>\n<ul>\n<li>手机：18271495691</li>\n<li>Email：<a href=\"mailto:chunlife@qq.com\" target=\"_blank\" rel=\"noopener\">chunlife@qq.com</a></li>\n<li>微信号：yu-young222</li>\n</ul>\n<h2 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h2><ul>\n<li>藏弘/男/1995 </li>\n<li>本科/汉口学院/电气工程及其自动化</li>\n<li>英语等级：CET-6</li>\n<li>工作年限：3年</li>\n<li>技术博客：<a href=\"https://chunlife.top\">https://chunlife.top</a></li>\n<li>期望职位：后端软件研发工程师</li>\n<li>期望城市：深圳</li>\n</ul>\n<h2 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h2><ol>\n<li>熟悉C编程、golang后端web Server开发、Qt多平台开发；</li>\n<li>熟悉Linux开发调试，以及Linux、VxWorks系统底层驱动开发；</li>\n<li>熟悉Linux网络编程；</li>\n<li>熟悉HTML、CSS，了解JavaScript；</li>\n<li>熟悉mysql，redis以及MongoDB数据库，了解ElasticSearch使用；</li>\n</ol>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><h3 id=\"深圳市江波龙电子股份有限公司-（-2018年5月-至今）\"><a href=\"#深圳市江波龙电子股份有限公司-（-2018年5月-至今）\" class=\"headerlink\" title=\"深圳市江波龙电子股份有限公司  （ 2018年5月 ~ 至今）\"></a>深圳市江波龙电子股份有限公司  （ 2018年5月 ~ 至今）</h3><h4 id=\"量产平台系统-（-2018年5月-2019年4月-）\"><a href=\"#量产平台系统-（-2018年5月-2019年4月-）\" class=\"headerlink\" title=\"量产平台系统  （ 2018年5月 ~ 2019年4月 ）\"></a><strong>量产平台系统</strong>  （ 2018年5月 ~ 2019年4月 ）</h4><h5 id=\"项目描述\"><a href=\"#项目描述\" class=\"headerlink\" title=\"项目描述\"></a><strong>项目描述</strong></h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">该系统主要满足为江波龙和Lexar需求对其所管理的代工厂进行生产流程控制，主要实现有用户授权，产品控制，定制订单管理，授权生产，消息通知，生产日志管理，测试机台状态监测以及软件升级等需求。采用go web框架gin、MySQL、MongoDB、以及ElasticSearch。订单管理主要为各个不同的role，选定不同的生产软件，集成不同的配置文件和脚本，提供上传软件与下载，查询，多级软件绑定，以及生产订单的操作；授权模块则主要负责证书的管理，提供证书查询，生产验证；消息通知用于主动推送，可使用email和websocket；另有升级模块，主要为收集测试机台信息，提供在线对测试机台进行升级操作，以及运行命令的能力。</span><br></pre></td></tr></table></figure>\n<h5 id=\"个人职责\"><a href=\"#个人职责\" class=\"headerlink\" title=\"个人职责:\"></a><strong>个人职责:</strong></h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、参与业务需求分析，开展调研，编写需求文档并进行模块开发；</span><br><span class=\"line\">主要负责文件管理，证书授权管理，生产样品管理，消息通知模块，以及升级模块。</span><br><span class=\"line\">2、使用git管理项目代码，由专员进行审核控制；</span><br><span class=\"line\">3、提供相应的单元测试代码，以及文档，验证基础功能；</span><br><span class=\"line\">4、跟进测试以及线上问题。</span><br></pre></td></tr></table></figure>\n<h3 id=\"武汉禾达芯微科技发展有限公司-（-2016年5月-2018年4月-）\"><a href=\"#武汉禾达芯微科技发展有限公司-（-2016年5月-2018年4月-）\" class=\"headerlink\" title=\"武汉禾达芯微科技发展有限公司 （ 2016年5月 ~ 2018年4月 ）\"></a>武汉禾达芯微科技发展有限公司 （ 2016年5月 ~ 2018年4月 ）</h3><h4 id=\"库房管理系统-（-2017年10月-2018年4月-）\"><a href=\"#库房管理系统-（-2017年10月-2018年4月-）\" class=\"headerlink\" title=\"库房管理系统 （ 2017年10月 ~ 2018年4月 ）\"></a><strong>库房管理系统</strong> （ 2017年10月 ~ 2018年4月 ）</h4><h5 id=\"项目描述-1\"><a href=\"#项目描述-1\" class=\"headerlink\" title=\"项目描述\"></a><strong>项目描述</strong></h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用qt，golang开发，库房管理系统主要为Java，由其他公司承包开发。</span><br><span class=\"line\">在原有基础上改进原来的库房管理系统，接入嵌入式设备以及机台设备状态信息到已有的库房管理系统。</span><br><span class=\"line\">参与设备信息控制模块开发，以及处理信息数据后，将数据对接至整个库房管理系统。</span><br></pre></td></tr></table></figure>\n<h5 id=\"个人职责-1\"><a href=\"#个人职责-1\" class=\"headerlink\" title=\"个人职责:\"></a><strong>个人职责:</strong></h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、使用qt开发测试机台以及设备软件，收集错误信息，暂存于sqlite；</span><br><span class=\"line\">2、开发信息处理模块，将设备的状态的信息，监控板信息聚合整理成json信息，客户端与处理模块使用udp连接，然后传递给库房管理系统进行展示；</span><br><span class=\"line\">3、根据后端库房系统的API，编写qt客户端，用户定制功能，以及方便聚合显示信息。独立于库房系统的信息，使用mysql进行存储。</span><br></pre></td></tr></table></figure>\n<h4 id=\"通用6U加固计算机平台解决方案-（-2016年6月-2017年9月-）\"><a href=\"#通用6U加固计算机平台解决方案-（-2016年6月-2017年9月-）\" class=\"headerlink\" title=\"通用6U加固计算机平台解决方案  （ 2016年6月 ~ 2017年9月 ）\"></a>通用6U加固计算机平台解决方案  （ 2016年6月 ~ 2017年9月 ）</h4><h5 id=\"项目描述-2\"><a href=\"#项目描述-2\" class=\"headerlink\" title=\"项目描述\"></a><strong>项目描述</strong></h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">硬件平台：x86            软件环境：windows、VxWorks、Linux</span><br><span class=\"line\">项目主要是设计一款符合装备采购计划标准的6U标准加固计算机，其中设计包括CPCI背板，CPCI网卡、接口卡，IO卡、串口卡、CAN卡、AD/DA卡以及UPS电源，形成一整套CPCI的板卡解决方案。</span><br><span class=\"line\">在使用上，可为客户提供可靠的外设使用（自定义空白热键，表页显示屏等），还有定制的自检测试程序，另外整套系统还设计了一套监控系统，使用CPCI监控卡，可通过网络远端监控本套系统的温度和电压等参数。</span><br></pre></td></tr></table></figure>\n<h5 id=\"个人职责-2\"><a href=\"#个人职责-2\" class=\"headerlink\" title=\"个人职责:\"></a><strong>个人职责:</strong></h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">① 参与CPCI板卡的方案设计与评估，完成CPCI 16路串口卡、16路CAN卡、IO卡的驱动设计；串口卡符合RS232标准，实现串口硬／软流控，具备422，485切换模式。CAN卡符合CAN 2.0标准。</span><br><span class=\"line\">② 完成加固平台自检软件的设计开发，使用QT为加固计算机提供一种通用的检查，实现硬盘，内存等必要外设测试的同时，加入公司自有外设的检查，适配三个系统平台，其中涉及多线程编程，以及socket网络编程等。</span><br><span class=\"line\">③ 完成加固计算机监控板卡功能开发，MCU使用MK60，可监控其余板卡的温度、电压，以及板卡工作状态，主从之间使用IIC进行通信开发，外部通信使用UART、USB和LWIP协议栈进行通信开发。</span><br><span class=\"line\">④ USB用户键盘固件开发，MCU选用MKL27，开发USB Generic HID设备，为其适配VxWorks USB1.0、USB2.0版设备驱动。</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他项目\"><a href=\"#其他项目\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h3><h5 id=\"表页显示屏-可编程触摸键盘\"><a href=\"#表页显示屏-可编程触摸键盘\" class=\"headerlink\" title=\"表页显示屏/可编程触摸键盘\"></a>表页显示屏/可编程触摸键盘</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用i.mx287搭配天马TM104组合，通过USB通信与上位机进行通信（跨平台），完成上位机的指令动作。</span><br></pre></td></tr></table></figure>\n<h5 id=\"SC-L138工控板测试demo，定制用户使用界面\"><a href=\"#SC-L138工控板测试demo，定制用户使用界面\" class=\"headerlink\" title=\"SC-L138工控板测试demo，定制用户使用界面\"></a>SC-L138工控板测试demo，定制用户使用界面</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">根据客户需求，编写需要的上位机界面；</span><br></pre></td></tr></table></figure>\n<h4 id=\"NUC972工控板uboot支持\"><a href=\"#NUC972工控板uboot支持\" class=\"headerlink\" title=\"NUC972工控板uboot支持\"></a>NUC972工控板uboot支持</h4><h3 id=\"校内经历\"><a href=\"#校内经历\" class=\"headerlink\" title=\"校内经历\"></a>校内经历</h3><h5 id=\"湖北省协程与控制实验室实验助理-（-2014年4月-2015年6月-）\"><a href=\"#湖北省协程与控制实验室实验助理-（-2014年4月-2015年6月-）\" class=\"headerlink\" title=\"湖北省协程与控制实验室实验助理  （ 2014年4月 ~ 2015年6月 ）\"></a><strong>湖北省协程与控制实验室实验助理</strong>  （ 2014年4月 ~ 2015年6月 ）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">学习MATLAB，对风光互补发电有关论文进行演算，修正实验平台相关参数；</span><br><span class=\"line\">外出授课，授课内容包括单片机、演讲以及PPT设计等；</span><br><span class=\"line\">曾单独撰书（关于PPT设计，整书三十万二字）。</span><br></pre></td></tr></table></figure>\n<h2 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h2><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>\n","categories":[{"name":"简历","slug":"简历","permalink":"chunlife.top/categories/简历/"}],"tags":[{"name":"简历","slug":"简历","permalink":"chunlife.top/tags/简历/"}]},{"title":"QT 中的Event事件函数","date":"2017-01-16T09:50:22.000Z","path":"2017/01/16/QT 中的Event事件函数/","content":"<p>Event函数是一个Virtual Protected函数，它响应于用户触发的事件，事件多种多类，可以参考help帮助文档。</p>\n<a id=\"more\"></a>\n<p>之所以要提到它，是因为我需要实现一个实时显示鼠标坐标的功能，网上实现的方式都是使用<code>setmousetracking()</code>，但是对于我这种情况来说，这并不能实现，我在一篇博客上，也恰好看到了博主跟我同样的问题。</p>\n<p><img src=\"clip_image001.png\" alt=\"123\"></p>\n<p><a href=\"http://lps-683.iteye.com/blog/2260091\" target=\"_blank\" rel=\"noopener\">http://lps-683.iteye.com/blog/2260091</a></p>\n<p>博主是使用的事件过滤器，但是我在实验过后，并没有使用博主的方法（我木有搞成功），于是我在试验鼠标移动是否触发事件时，发现了在event函数中能够响应鼠标移动的事件，所以据此，我采用了另外一种情况。</p>\n<p>那就是，首先，设置<code>setmousetracking(true)</code>，开启鼠标跟踪。第二，构造event事件，判断当前的鼠标坐标与先前的坐标是否不同，以确认是否发生了改变，以免重复操作。</p>\n<p><strong>2017年5月18日11:28:02</strong></p>\n<p>我使用<code>setmousetracking</code>不成功，因为之前使用的界面类是<code>QTabWidget</code>，但是转换为<code>QStackedWidget</code>后，即可使用<code>setmousetracking</code>进行鼠标的实时跟踪了。</p>\n<p><img src=\"clip_image011.png\" alt=\"代码\"></p>\n<p>代码中，为何加入一个“i”来累加呢？</p>\n<p>不加这段代码，将会被判断程序出错，可以实际试试。我调试时的错误：</p>\n<p><img src=\"clip_image101.png\" alt=\"错误\"></p>\n<p>我发现这可能是因为UI的界面的创造时间位于event函数被建立起来之后，所以在event里直接调用界面，此时传送字符串将引发内存泄露的危害，造成程序崩溃。</p>\n","categories":[{"name":"QT","slug":"QT","permalink":"chunlife.top/categories/QT/"}],"tags":[{"name":"QT","slug":"QT","permalink":"chunlife.top/tags/QT/"}]},{"title":"发布QT程序","date":"2017-01-15T09:50:22.000Z","path":"2017/01/15/发布QT程序/","content":"<p>qt程序需要包含很多依赖，并不会编译成一个<code>.exe</code>文件，为了方便程序分发，最好的就是将qt程序进行一下简单的打包操作。</p>\n<a id=\"more\"></a>\n<p>一、使用QT自带的windeployqt.exe，进入到D:\\Qt5.7.1\\5.7\\mingw53_32\\bin，在此打开qt自带的”cmd“命令窗口，然后输入后面多加个<code>--release</code>。</p>\n<p><img src=\"clip_image001.png\" alt=\"qt CMD命令窗口\"></p>\n<p>运行命令：</p>\n<p><img src=\"1552644204832.png\" alt=\"1552644204832\"></p>\n<p>它能把大多数依赖文件都拉入到QT生成到的EXE文件夹目录中。</p>\n<p>二、在上一步的基础上直接运行EXE文件，查看具体缺少什么，去QT的安装目录下，查找需要的库文件。（<strong><em>多在几台没有安装任何IDE的电脑上跑一跑</em></strong>）</p>\n<p>在windows下，使用<code>FilePacker</code>将需要的文件打包成一个<code>EXE</code>文件，这样利于发布。</p>\n<p>在Linux下，则估计只有将其压缩成包<code>.tar.gz</code>。</p>\n","categories":[{"name":"QT","slug":"QT","permalink":"chunlife.top/categories/QT/"}],"tags":[{"name":"QT","slug":"QT","permalink":"chunlife.top/tags/QT/"}]},{"title":"QT多线程","date":"2016-12-19T09:50:22.000Z","path":"2016/12/19/QT多线程/","content":"<p>问题是这样的：我需要使用一个界面类的方法，不过呢，QT帮助文档里也说了，咱啊，不能在界面类之外操作UI，那关键是怎么滴也需要操作啊，有方法的，那就是通过signals与slot联合操作，线程发出信号，主线程得到信号后来操作界面函数即可。</p>\n<a id=\"more\"></a>\n<p><img src=\"clip_image001.png\" alt=\"QT 线程代码\"></p>\n<p>我出了什么问题呢，即程序运行短时间内卡死了，我猜想是递归过深，导致栈溢出崩溃了，我的系统整个资源消耗非常巨大，我检查了我的槽函数。</p>\n<p><img src=\"clip_image001-1552644779835.png\" alt=\"槽函数\"></p>\n<p>看着像没啥问题的，毕竟我还加上了打印。再瞧瞧connect连接是否出错。</p>\n<p><img src=\"clip_image0012.png\" alt=\"connect连接函数\"></p>\n<p>这也没啥问题啊。</p>\n<p>不过我一直在猜想在线程run函数里面的emit发送信号是否是有问题，但无法得到正确的解决方法，毕竟槽是可重入的，按理说，信号不应该是等待上一个信号处理完再发送的吗？难道是，发送者只负责发，不管对象槽怎么个处理法？？有疑惑。</p>\n<p>这里有篇博客是个合理的理论说法。虽然和信号、槽不一样，但是原理却类似。</p>\n<p><a href=\"http://www.xuebuyuan.com/2041299.html\" target=\"_blank\" rel=\"noopener\"><strong>Qt学习之系列[9] – QCoreApplication:processEvents()可能会引起递归，导致栈溢出崩溃</strong></a></p>\n<p><img src=\"clip_image011.png\" alt=\"博客截图\"></p>\n<p>另外我看到了这篇博客对线程的讲解。</p>\n<p><a href=\"https://www.devbean.net/2013/12/qt-study-road-2-thread-and-qobject/\" target=\"_blank\" rel=\"noopener\">Qt 学习之路 2（74）：线程和 QObject</a></p>\n<p><img src=\"clip_image111.png\" alt=\"信号与槽连接方式\"></p>\n<p>故而我使用了Qt::BlockingQueuedConnection。</p>\n<p><img src=\"1552645124448.png\" alt=\"代码\"></p>\n<p><strong>2016年12月21日22:58:31</strong></p>\n<p>今天我为了使用OpenGL，移植QT的移植例程到自己的程序里面，OpenGL确实是个大学问的，这里暂且不表，3D图形显示嘛，这里涉及到了一个QTime定时器的东西，因为它要刷新图像，但是我的主线程里面时间可是个娇贵的东西（会妨碍界面的响应，影响交互），我不想让定时器这东西出现在我的主线程里面，所以，我还是需要想想怎么将其挪移到我的子线程里面去，这里需要使用到moveToThread。</p>\n<p>将我OpenGLWindow的类运行环境移动到次线程去。</p>\n<p>这里可以参考QT的help文档，它主要介绍了两种方式使用QThread。</p>\n<p>第一种：</p>\n<p><img src=\"clip_image1001.png\" alt=\"第一种方式\"></p>\n<p>第二种：</p>\n<p><img src=\"clip_image11001.png\" alt=\"第二种方式\"></p>\n<p>第一种方式是让整个类都生存在线程之下，使用<code>movetoThread</code>函数；第二种方式则是只有QThread派生出来的那个子类的run函数是运行在次线程中的，使用<code>while(1)</code>固定整个线程。</p>\n<ul>\n<li>run函数是线程的起点，调用start后，新线程会默认调用run函数。</li>\n</ul>\n<p>可以用实验来证明，我的这个工程中使用的是第二种方式，run函数是阻塞的，使用了<code>while(1)</code>，但是在程序将主线程的信号和次线程的槽连接，然后在实际使用中，次线程的槽完全没受影响，照样可以使用，当然，此处我们可以直接打印当前线程的ID，不过网上大多都已经证明了。</p>\n<p>另外，第一种方式情况下，照样连接槽和信号，然后在其中一个函数中实现<code>while(1)</code>，在尝试着去调用其他槽，发现无法调用。</p>\n<p>若我想用第一种方式恐怕还是有点问题，因为我的槽连接方式选择的是<code>Qt::BlockingQueuedConnection</code>，阻塞发送信号的进程，直到接受信号的槽返回，那样的话，我的界面显示不就捉瞎了吗。所以，还是实现一个模态的窗口，强行锁死这个界面看看，但是效果会不太好，可以再想想其他的方法。</p>\n<p><strong>2017年5月23日15:52:45</strong></p>\n<p>VxWorks上，需要显示的设置线程优先级为low。</p>\n<p>线程是有优先级的，就比如在windows和linux上跑该软件，不设置线程优先级则是默认的普通的优先级，但是在VxWorks上则会导致软件卡死，无法运行，这就是系统体系结构不同，线程的实质也不会相同。</p>\n","categories":[{"name":"QT","slug":"QT","permalink":"chunlife.top/categories/QT/"}],"tags":[{"name":"QT","slug":"QT","permalink":"chunlife.top/tags/QT/"}]},{"title":"磁盘组RAID 5","date":"2016-11-17T06:58:52.000Z","path":"2016/11/17/磁盘组RAID 5/","content":"<p>在组建公司的服务器时，需要加上raid管理，raid管理能够帮助数据冗余，防错，但是代价是磁盘的存储不会达到最大的利用率。这里我们使用的是raid5，磁盘利用率能够达到(n - 1) / n。</p>\n<p>在创建raid时主要是参考了这两篇博客：</p>\n<a id=\"more\"></a>\n<p>一篇主要是讲究怎么创建的，</p>\n<p><a href=\"http://wqmsl.blog.51cto.com/847418/468700/\" target=\"_blank\" rel=\"noopener\">Linux软raid创建和维护</a></p>\n<p>另外一篇则包含了，怎么将已创建的raid设置为开机自启。</p>\n<p><a href=\"http://blog.chinaunix.net/uid-28267411-id-3522610.html\" target=\"_blank\" rel=\"noopener\">LINUX下软RAID 5实现</a></p>\n<p>但很悲剧的是这两篇博客都没详细介绍怎么分区的，软RAID需要的是至少3块分区，在安装系统时，我们所需要做就是自定义分区，留下一块足够大的地方以满足在安装系统后进行分区的操作，若是全部被分配完成，就没有裕量以供我们进行分区操作。</p>\n<p> 2017年5月8日17:25:17</p>\n<p>补充上面，当留有大量空间，保证了raid的空间后，需要先使用<code>fdisk /dev/sda</code>，对硬件进行分区，将容量利用起来，使用n，选择extended分区，先将所有容量都用作扩展分区，然后再使用n，选择logical分区，raid至少是三个分区组成，所以我们这里建立大于三个分区即可。</p>\n<p><img src=\"clip_image001-1552643069543.png\" alt=\"1241\"></p>\n<p><img src=\"clip_image001.png\" alt=\"123\"></p>\n<p>然后再根据博客中的，将分区格式使用t命令设置为fd的raid格式，w为保存。</p>\n<p><strong>Samba远程挂载：</strong> <code>mount //192.168.8.58/hdxw /mnt/op -o username=superfile</code></p>\n","categories":[{"name":"Linux","slug":"Linux","permalink":"chunlife.top/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"chunlife.top/tags/Linux/"},{"name":"raid","slug":"raid","permalink":"chunlife.top/tags/raid/"}]},{"title":"矢量字体字形分布图","date":"2016-06-28T08:17:51.000Z","path":"2016/06/28/矢量字体字形分布图/","content":"<p><img src=\"20160628074647627\" alt=\"image\"></p>\n<a id=\"more\"></a>\n<p>origin是字形显示开始的地方，下一个字体开始的位置是：origin + advance的位置，即是指定了下一个字符的origin出现的位置。advance有x方向的，当然有y方向的，不过这里没有使用，使用y方向将会使字体倾斜。</p>\n<p>虽然有坐标基准线，但是英文字体不像汉字方方正正，如果把所有英文字体搞得像汉字一样，那么会很不好看，所以即使在已经订好基准线后，还是会另外设置字体的xmin、xmax和ymin、ymax这四个参数。</p>\n<p>Freetype API的使用</p>\n<p>我们来总结一下显示一个矢量字符我们都做了什么：</p>\n<p>1、初始化一个库</p>\n<p>2、加载字体，并用创建一个face来描述字体</p>\n<p>3、设置字体的像素大小</p>\n<p>4、设置字体的旋转角度以及显示位置</p>\n<p>5、找到字型的点阵信息并记录下来</p>\n<p>6、显示点阵</p>\n<p>要得到上图的信息，我们需要将从face将glyph给取出来，得到box的一些数据，主要是坐标的XY最大、最小值。</p>\n<p>首先，从face中拿到放入字体插槽里面的glyph（此操作并不影响origin glyph）。（函数API名 Extracting the glyph image）</p>\n<p>error = FT_Get_Glyph( face-&gt;glyph, &amp;glyph );</p>\n<p>然后再拿出box里面的数据。（函数API名 Measuring the glyph image）</p>\n<p>FT_Glyph_Get_CBox(glyph, FT_GLYPH_BBOX_TRUNCATE, &amp;bbox );</p>\n<p>一些API函数：</p>\n<p>①：FT_Init_FreeType( &amp;library );</p>\n<p>功能：这是初始化一个库，所谓库我们可以简单的理解为一个空间，用来存放所有的资源。</p>\n<p>②：FT_New_Face( library, argv[1], 0, &amp;face );</p>\n<p>功能：读取字体文件中指定类型的字体，并用face来描述它</p>\n<p>参数1：表示库</p>\n<p>参数2：要打开的文件</p>\n<p>参数3：表示要加载的字体的类型，0表示任何类型都可以</p>\n<p>参数4：face</p>\n<p>一个文件里面可能会含有多种字体，每个字体对应着一个face，也就是说face用来描述某一种字体。</p>\n<p>③：FT_Set_Pixel_Sizes(face, 24, 0);</p>\n<p>功能：设置字符的像素大小</p>\n<p>参数1：face</p>\n<p>参数2：每行多少像素，0表示与列相同</p>\n<p>参数3：每列多少像素，0表示与行相同</p>\n<p>④：FT_Set_Transform( face, &amp;matrix, &amp;pen );</p>\n<p>功能：设置传输</p>\n<p>参数1：face</p>\n<p>参数2：用于设置字体的旋转角度</p>\n<p>参数3：用于设置字体的平显示位置，freetype文档里面的参数提示给的delta，也就是数学里面△符号，即然后把它显示到LCD中间位置，但是“我爱你”三个字符之间位置没发生改变，那么坐标(0,0)和(pen.x, pen.y)之间的位置就是delta。</p>\n<p><img src=\"20160628074648846\" alt=\"image\"></p>\n<p>⑤：FT_Load_Char( face, text[n], FT_LOAD_RENDER );</p>\n<p>功能：将一个字型的点阵信息记录在face-&gt;glyph中</p>\n<p>参数1：face</p>\n<p>参数2：要记录的字型的编码</p>\n<p>参数3：参数</p>\n<p>⑥：draw_bitmap( &amp;slot-&gt;bitmap , slot-&gt;bitmap_left , target_height - slot-&gt;bitmap_top );</p>\n<p>功能：将字符的点阵存放在一个结构体里面</p>\n<p>参数1：用于描述点阵信息的结构体</p>\n<p>参数2：x坐标</p>\n<p>参数3：y坐标</p>\n<p>注意：我们这里的坐标是笛卡尔坐标系，也就是y坐标向上，x坐标向右！而在LCD上的显示坐标系y轴是反向的，所以显示的时候需要将y轴处理一下！</p>\n","categories":[{"name":"嵌入式","slug":"嵌入式","permalink":"chunlife.top/categories/嵌入式/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"chunlife.top/tags/Linux/"}]},{"title":"strcat函数引起的血案","date":"2016-06-07T03:34:40.000Z","path":"2016/06/07/strcat函数引起的血案/","content":"<p>/*</p>\n<p> <a href=\"http://www.cnblogs.com/kaituorensheng/archive/2012/10/23/2736069.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/kaituorensheng/archive/2012/10/23/2736069.html</a><br>参考这篇文章</p>\n<ul>\n<li><p>char *a = “Hello”;Hello存放在常量区，是无法修改的。</p>\n</li>\n<li><p>通过指针只可以访问字符串常量，而不可以去改变它</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li></li>\n<li><p>char a[] = “Hello”;而数组存放在栈中，是可以修改的</p>\n</li>\n<li><p>Hello存放在栈中，可以通过指针去访问和修改数组内容</p>\n</li>\n</ul>\n<p>*/</p>\n<p>sizeof和strlen两个函数的随想：</p>\n<p>①sizeof的参数是数组，返回的是编译时分配的数组空间 （sizeof是运算符，值在编译时已计算好）</p>\n<p>②strlen的参数是字符型指针（char *），当数组名作为参数传入时，实际上数组就退化为指针了。</p>\n<p>（strlen是函数，值需要在运行时才能得出）</p>\n<p>该函数的实际功能从代表字符串的第一个地址开始遍历，知道遇到结束符’\\0’,返回长度不包括’\\0’</p>\n<p>这也就说明下面的函数为什么会将数组越界的字符串也一起显示了，strlen的限制就只是’\\0’，而</p>\n<p>且数组传入后即退化为指针，指针只是在读这些地址的值，没有修改，所以也不“违法”。</p>\n<p><em>总的来说就是，数组可以越界，编译器也不会报警，至于越界使用的地址会造成什么，谁也不知道</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> *a= <span class=\"string\">\"Hello, \"</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> b[]= <span class=\"string\">\"World!\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">strcat</span>(b, a);     <span class=\"comment\">//  这样是可行的，但是将b和a互换位置后，将导致段错误</span></span><br><span class=\"line\">                 a是常量，不可被更改</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>,b);</span><br><span class=\"line\"> </span><br><span class=\"line\">*/</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">voidstrcat(<span class=\"keyword\">char</span> a[], <span class=\"keyword\">char</span> b[]);</span><br><span class=\"line\">intstrlen(<span class=\"keyword\">char</span> *s);</span><br><span class=\"line\"> </span><br><span class=\"line\">intmain()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> a[] = <span class=\"string\">\"Hello, \"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> b[] = <span class=\"string\">\"World!\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">strcat</span>(a, b);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, <span class=\"built_in\">strlen</span>(a));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, <span class=\"keyword\">sizeof</span>(a));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>, a);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">strcat</span><span class=\"params\">(<span class=\"keyword\">char</span> a[], <span class=\"keyword\">char</span> b[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(a[i] != <span class=\"string\">'\\0'</span>)</span><br><span class=\"line\">\t\ti++;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>( (a[i++] = b[j++]) != <span class=\"string\">'\\0'</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">strlen</span><span class=\"params\">(<span class=\"keyword\">char</span> *s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *p = s;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(*p != <span class=\"string\">'\\0'</span>)</span><br><span class=\"line\">\t\tp++;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p-s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"C语言","slug":"C语言","permalink":"chunlife.top/categories/C语言/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"chunlife.top/tags/C语言/"}]},{"title":"听韦东山老师公开课的理解","date":"2016-06-07T03:34:40.000Z","path":"2016/06/07/听韦东山老师公开课的理解/","content":"<p><strong>为什么需要数据段、代码段和BBS段？这么多的段是干什么用的。</strong></p>\n<a id=\"more\"></a>\n<p>程序的指令等是只读的，可以把它们归为一类，以便运行时可以把它们放到ROM等设备上去，当然也可以是内存上，只不过是这段内存时只读的。<br>程序的全局变量等是可读可写的，可以把他们归为一类，放在内存里面去。<br>那么我们来假设一个事，若是我们编写了一个程序中，包含大量的初始值为0的全局变量，那么编译出来的.bin文件是不是会很大，很显然根据日常经验来看，编译的文件中并没有存放这些数据，那么这是怎么回事呢。<br>将它们这些数据归为一类，只记录它们的内存起始地址和结束地址，在程序运行前将这块内存清零。清零BSS段（BSS段通常是指用来存放程序中未初始化的全局变量和静态变量的一块内存区域）。<br>栈的作用？<br>从汇编跃进到C前，调用C函数需要有栈（栈是一种操纵内存的数据结构类型，至于你说为什么不是其他的数据结构，那你得去想想操作系统方面的知识了），至于栈的好处，我参开这篇文章上：<br><a href=\"http://www.cnblogs.com/xmphoenix/archive/2012/04/28/2475399.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/xmphoenix/archive/2012/04/28/2475399.html</a><br><strong>一.栈的整体作用</strong><br>(1)保存现场/上下文</p>\n<p>(2)传递参数:汇编代码调用c函数时，需传递参数</p>\n<p>(3)保存临时变量:包括函数的非静态局部变量以及编译器自动生成的其他临时变量。</p>\n<p>这些需要保存在内存的值呢，大家就约定用CPU的sp指针指明位置，这块内存也就是栈。</p>\n<p><strong>SDRAM那么大，程序被复制到了哪里？</strong></p>\n<p>对于2440来说，Nand启动时，CPU会自动将Nand上前4K的程序复制到片内SRAM上运行，而这段代码中就有一个功能就是将Nand上的程序复制到SDRAM上去运行的，而复制到哪里呢，以前的Uboot是采用的把链接地址写死，然后复制代码到SDRAM上的地址也是定死了，但是，现在的Uboot采用的是重定位的方法，那么也就是说，现在的程序猿把代码复制到哪里都可以，主要也是为了适配如今大量不同的板子。</p>\n<p>之所以要复制到链接地址上去使用，是因为程序上的全局变量、函数等都是以链接地址来访问的，在程序运行之前，这些地址都应该有确定的值。</p>\n<p>总结下bootloader的第一阶段大概框架：</p>\n<p>a. 必要的硬件初始化：关看门狗，时钟，SDRAM</p>\n<p>b. 重定位，将程序从Flash上读到内存相应的链接地址上</p>\n<p>c. 清除BSS段</p>\n<p>d. 调用C函数</p>\n<p><strong>前4K所使用的是位置无关码所编写的程序，也就是说为什么没有在链接地址上，还能正确运行着程序，没有上面说的限制</strong></p>\n<p>何为位置无关， ① 不去访问全局变量/静态变量； ② 跳转指令均是采用相对跳转，例如b, bl。</p>\n","categories":[{"name":"Linux","slug":"Linux","permalink":"chunlife.top/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"chunlife.top/tags/Linux/"},{"name":"ARM","slug":"ARM","permalink":"chunlife.top/tags/ARM/"}]},{"title":"Tiny6410 的NandFlash（K9GAG08U0E）","date":"2016-06-03T13:43:46.000Z","path":"2016/06/03/Tiny6410 的NandFlash（K9GAG08U0E）/","content":"<p>学的实在是揪心，一开始以为的8K每页读，才发现前4页为2K，但当以前4页2K读，后面8K读，又发现坑爹的来了，这个问题的引出主要是我读取内核并启动没有成功，然后基于这样的一个考虑，我以2K每页读取NandFlash，代码运行成功，我以8K每页读取NandFlash，代码运行一样成功，问题就在这里，如果这样考虑，代码到底是每页多少被写到NandFlash的？事实证明的是，这篇文章给了我答案，看来还真是。</p>\n<a id=\"more\"></a>\n<p>以下文章转载自：<strong><a href=\"http://blog.csdn.net/o0Avalon0o/article/details/49644553\" target=\"_blank\" rel=\"noopener\">Tiny6410+K9GAG08U0E</a></strong> </p>\n<h3 id=\"Tiny6410-K9GAG08U0E-使用小记\"><a href=\"#Tiny6410-K9GAG08U0E-使用小记\" class=\"headerlink\" title=\"Tiny6410(K9GAG08U0E)使用小记\"></a>Tiny6410(K9GAG08U0E)使用小记</h3><p>友善采用这颗8K Page的Nand，在6410上面搭配使用，确实给用户添加了不少麻烦，再加上ecc部分使用软件实现，代码不开源，学到块驱动的时候确实揪心啊~~</p>\n<h3 id=\"内部SRAM的大小\"><a href=\"#内部SRAM的大小\" class=\"headerlink\" title=\"内部SRAM的大小\"></a>内部SRAM的大小</h3><p>先从启动说起，Tiny6410启动选用的是用户手册里面屏蔽掉的一种直接Nand启动方式，如下图，根据友善原理图的OM[4:0]电平，对应表中的RESERVED，这种启动方式就是上电后直接将Nand的前面一部分代码映射到片内SRAM中，开始启动。</p>\n<p><img src=\"clip_image001.png\" alt=\"123\"></p>\n<p>而三星官方推荐的启动方式应该是从IROM中启动，然后通过IROM将NAND中的代码拷贝到片内SRAM，再跳转到SRAM中启动。 </p>\n<p>这里看了网上很多资料，有的人说SRAM是8K，有的说是4K，这里我看到用户手册里面是说有4K，但是我用Tiny6410调试裸板程序的时候，发现确实是拷贝了8K代码：</p>\n<p><img src=\"clip_image001-1552580396633.png\" alt=\"1231\"></p>\n<p>这里自己有个猜测：对于友善使用的这种隐藏的启动方式，就是直接将代码放到SRAM空间运行，此时当然就有8K RAM空间了；但是当使用三星推荐的从IROM中运行，那么IROM中运行的代码的临时变量都是保存在SRAM上面的，所以可能是官方想保留上半4K RAM用于IROM启动。</p>\n<h3 id=\"8K页大小问题\"><a href=\"#8K页大小问题\" class=\"headerlink\" title=\"8K页大小问题\"></a>8K页大小问题</h3><p>从上面启动选择那张图片可以看到，其实上6410最大仅支持4K页，并不支持8K页，而对于友善使用的被保留启动方式更是最多支持large page(2K)。 </p>\n<p>所以在开始的8K SRAM代码拷贝中需要注意，系统只会拷贝每个8K页中的前2K数据，而友善配套提供的superboot升级程序在烧写U-boot镜像的时候都只是操作每页中前2K空间。 </p>\n<p>而对应的在U-Boot源码中也可以看到拷贝U-boot到SDRAM中运行的函数，仅操作了前2K数据：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">nandll_read_blocks</span> <span class=\"params\">(ulong dst_addr, ulong size, <span class=\"keyword\">int</span> large_block)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        uchar *buf = (uchar *)dst_addr;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    \tuint page_shift = <span class=\"number\">9</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (large_block)</span><br><span class=\"line\">        \tpage_shift = <span class=\"number\">11</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* Read pages */</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; (<span class=\"number\">0x3c000</span>&gt;&gt;page_shift); i++, buf+=(<span class=\"number\">1</span>&lt;&lt;page_shift)) &#123;</span><br><span class=\"line\">                nandll_read_page(buf, i, large_block);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到在整个启动到U-boot代码搬运过程中，都没有启动ecc，所以在这个过程中数据都是不可靠的，而在友善的论坛里面也看到过他们承认，有掉U-boot固件的可能性。这也不能全怪人家，硬件决定6410拷贝8K代码的时候已经不安全了，那么后面Uboot重定向的时候做不做ecc都不是太重要了。。。</p>\n<p>在进入U-boot第二阶段start_armboot中之后，通过调用nand_scan()跟友善不开源的NAND_Init()，从这里之后即对K9GAG08U0E完成初始化，开启软件ECC，此后对Kernel、Rootfs的数据操作都是变为可靠了。 </p>\n<p>这里再吐槽一下，调用NAND_Init()竟然会改变U-Boot的环境变量，搞的我每次通过mini6410.h文件设置的环境变量都无效，这也是醉了。。。P.S.经过验证，友善应该是在Nand上面开辟了一段空间用于保存环境变量，调用NAND_Init之后，系统将直接从Nand的这段地址中还原环境参数，也就是说修改/include/configs/mini6410.h下面的环境变量屁用都没有，对于一块全新的开发板只要在Uboot中调用一次setenv、saveenv，保存到Nand中，下次如果仅更新Uboot固件时，则不需要再重新设置环境变量了(确保你用的Uboot是最新版，旧版本Uboot命令行下不支持saveenv保存参数)。 </p>\n<p>推荐解决方法可以在NAND_Init()后面使用void setenv (char <em>varname, char </em>varvalue)重新设置。</p>\n<h3 id=\"Tiny6410中的nand命令\"><a href=\"#Tiny6410中的nand命令\" class=\"headerlink\" title=\"Tiny6410中的nand命令\"></a>Tiny6410中的nand命令</h3><p>友善提供的最新U-Boot终于支持对K9GAG08U0E进行写入操作了，分析cmd_nand.c中的do_nand()：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/* read write */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">strncmp</span>(cmd, <span class=\"string\">\"read\"</span>, <span class=\"number\">4</span>) == <span class=\"number\">0</span> || <span class=\"built_in\">strncmp</span>(cmd, <span class=\"string\">\"write\"</span>, <span class=\"number\">5</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> read;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">4</span>)</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> usage;</span><br><span class=\"line\">\taddr = (ulong)simple_strtoul(argv[<span class=\"number\">2</span>], <span class=\"literal\">NULL</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">\tread = <span class=\"built_in\">strncmp</span>(cmd, <span class=\"string\">\"read\"</span>, <span class=\"number\">4</span>) == <span class=\"number\">0</span>; <span class=\"comment\">/* 1 = read, 0 = write */</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\nNAND %s: \"</span>, read ? <span class=\"string\">\"read\"</span> : <span class=\"string\">\"write\"</span>);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (arg_off_size(argc - <span class=\"number\">3</span>, argv + <span class=\"number\">3</span>, nand, &amp;off, &amp;size) != <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\ts = <span class=\"built_in\">strchr</span>(cmd, <span class=\"string\">'.'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s != <span class=\"literal\">NULL</span> &amp;&amp;</span><br><span class=\"line\">            (!<span class=\"built_in\">strcmp</span>(s, <span class=\"string\">\".jffs2\"</span>) || !<span class=\"built_in\">strcmp</span>(s, <span class=\"string\">\".e\"</span>) || !<span class=\"built_in\">strcmp</span>(s, <span class=\"string\">\".i\"</span>))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (read) &#123;</span><br><span class=\"line\">                ret = FriendlyARMReadNand( (u_char*)addr, size, off);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">puts</span>(<span class=\"string\">\"offset should be multiple of page size\\n\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/* write */</span></span><br><span class=\"line\">                <span class=\"keyword\">nand_write_options_t</span> opts;</span><br><span class=\"line\">                <span class=\"built_in\">memset</span>(&amp;opts, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(opts));</span><br><span class=\"line\">                opts.buffer = (u_char*) addr;</span><br><span class=\"line\">                opts.length = size;</span><br><span class=\"line\">                opts.offset = off;</span><br><span class=\"line\">                <span class=\"comment\">/* opts.forcejffs2 = 1; */</span></span><br><span class=\"line\">                opts.pad    = <span class=\"number\">1</span>;</span><br><span class=\"line\">                opts.blockalign = <span class=\"number\">1</span>;</span><br><span class=\"line\">                opts.quiet      = quiet;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (NandIsMlc()) &#123;</span><br><span class=\"line\">                    ret = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                    <span class=\"built_in\">puts</span>(<span class=\"string\">\"write.jffs2/write.e/write.i is not supported\\n\"</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">                    ret = nand_write_opts(nand, &amp;opts);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CFG_NAND_YAFFS_WRITE</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!read &amp;&amp; s != <span class=\"literal\">NULL</span> &amp;&amp; + (!<span class=\"built_in\">strcmp</span>(s, <span class=\"string\">\".yaffs\"</span>) || !<span class=\"built_in\">strcmp</span>(s, <span class=\"string\">\".yaffs1\"</span>))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">nand_write_options_t</span> opts;</span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(&amp;opts, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(opts));</span><br><span class=\"line\">            opts.buffer = (u_char*) addr;</span><br><span class=\"line\">            opts.length = size;</span><br><span class=\"line\">            opts.offset = off;</span><br><span class=\"line\">            opts.pad = <span class=\"number\">0</span>;</span><br><span class=\"line\">            opts.blockalign = <span class=\"number\">1</span>;</span><br><span class=\"line\">            opts.quiet = quiet;</span><br><span class=\"line\">            opts.writeoob = <span class=\"number\">1</span>;</span><br><span class=\"line\">            opts.autoplace = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">/* jsgood */</span></span><br><span class=\"line\">            <span class=\"comment\">/* if (s[6] == '1')</span></span><br><span class=\"line\"><span class=\"comment\">                opts.forceyaffs = 1; */</span></span><br><span class=\"line\">ret = nand_write_opts(nand, &amp;opts);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (read) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!NandIsMlc()) &#123;</span><br><span class=\"line\">                    ret = nand_read(nand, off, &amp;size, (u_char *)addr);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    ret = FriendlyARMReadNand( (u_char*)addr, size, off);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">puts</span>(<span class=\"string\">\"offset should be multiple of page size\\n\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (NandIsMlc()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (off % NandBlockSizeInByte != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">puts</span>(<span class=\"string\">\"offset should be multiple of block size\\n\"</span>);</span><br><span class=\"line\">                        ret = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">                        ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; size; i += NandBlockSizeInByte) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">int</span> len = size - i;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (len &gt; NandBlockSizeInByte) &#123;</span><br><span class=\"line\">                                len = NandBlockSizeInByte;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            FriendlyARMWriteNand(((u_char *)addr) + i, len, off + i, NandBlockSizeInByte);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    ret = nand_write(nand, off, &amp;size, (u_char *)addr);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (ret == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        uint *magic = (uint*)(PHYS_SDRAM_1);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((<span class=\"number\">0x24564236</span> == magic[<span class=\"number\">0</span>]) &amp;&amp; (<span class=\"number\">0x20764316</span> == magic[<span class=\"number\">1</span>]))</span><br><span class=\"line\">                            magic[<span class=\"number\">0</span>] = <span class=\"number\">0x27051956</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>从代码可以看到，只有nand read.i == nand read可以完成K9GAG08U0E的读操作，且它们都要求操作地址必须是page对齐； </p>\n<p>而nand write可以完成K9GAG08U0E的写操作，同样，操作地址需要page对齐(8K)，且暂时还不支持带oob数据的文件系统镜像的烧写(yaffs)！！</p>\n","categories":[{"name":"嵌入式","slug":"嵌入式","permalink":"chunlife.top/categories/嵌入式/"}],"tags":[{"name":"ARM","slug":"ARM","permalink":"chunlife.top/tags/ARM/"},{"name":"Tiny6410","slug":"Tiny6410","permalink":"chunlife.top/tags/Tiny6410/"}]},{"title":"改正国嵌Makefile对底层目录更改无响应的毛病","date":"2016-06-01T12:51:52.000Z","path":"2016/06/01/改正国嵌Makefile对底层目录更改无响应的毛病/","content":"<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OBJS := start.o mem.o main.o dev/dev.o lib/lib.o</span><br><span class=\"line\"></span><br><span class=\"line\">CFLAGS = -fno-builtin -I$(shell pwd)/include</span><br><span class=\"line\">export CFLAGS</span><br><span class=\"line\"></span><br><span class=\"line\">gbbot.bin : $(OBJS)</span><br><span class=\"line\">\tarm-linux-ld -Tgboot.lds -o gboot.elf $^</span><br><span class=\"line\">\tarm-linux-objcopy -O binary gboot.elf $@</span><br><span class=\"line\">\t</span><br><span class=\"line\">%.o : %.S</span><br><span class=\"line\">\tarm-linux-gcc -g -c $&lt;</span><br><span class=\"line\"></span><br><span class=\"line\">%.o : %.c</span><br><span class=\"line\">\tarm-linux-gcc -g $(CFLAGS) -c $&lt;</span><br><span class=\"line\"></span><br><span class=\"line\">.PHONY : lib/lib.o @  根据其他的Makefile琢磨出来的一种响应底层目录文件更改后Makefile不响应的解决之道</span><br><span class=\"line\">lib/lib.o:</span><br><span class=\"line\">\tcd lib; make; cd ..</span><br><span class=\"line\"></span><br><span class=\"line\">.PHONY : dev/dev.o</span><br><span class=\"line\">dev/dev.o:</span><br><span class=\"line\">\tcd dev; make; cd ..</span><br><span class=\"line\"></span><br><span class=\"line\">clean:</span><br><span class=\"line\">\trm -f *.o *.elf *.bin</span><br><span class=\"line\">\tmake clean -C lib</span><br><span class=\"line\"></span><br><span class=\"line\">make clean -C dev</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"Linux","slug":"Linux","permalink":"chunlife.top/categories/Linux/"}],"tags":[{"name":"Shell","slug":"Shell","permalink":"chunlife.top/tags/Shell/"},{"name":"Linux","slug":"Linux","permalink":"chunlife.top/tags/Linux/"}]},{"title":"串口终端没有打印字符","date":"2016-06-01T01:55:52.000Z","path":"2016/06/01/串口终端没有打印字符/","content":"<p>​         首先是UART.c上的错误，这个错误比较低级，由于将putc中的这个寄存器UFSTAT0写错了，还是写的以前那个没有开FIFO使用的寄存器，那也就导致了UART打印的字符乱码了，这个是根据源码一步一步找到的（替换文件，一个个来找），但是这个问题还不是最终需要解决的问题。</p>\n<a id=\"more\"></a>\n<p>​         Nand.c是我一开始就怀疑的代码，因为这段代码是我自己写的，但是似乎没有什么明显的现象指到这里来，而且将串口打印加到main函数中去后，按键中断还出现了问题，这让我实在摸不清楚代码到底在哪出现了BUG，通过替换代码才从这些繁杂中找到一点头绪。</p>\n<p>​          Nand.c有错误，那也只有一个地方的错误导致了串口打印的出错，那就是复制代码那个地方有问题。</p>\n<p>2016-6-1 16:35:08</p>\n<p>​          问题的症结出现了，copy_to_ram分为了两步，① 将NF那2K前4页复制到DDR中；②将后续的那些8K的页复制到内存。 第一步没有问题，这也是小灯可以点亮，但是按键中断却没有啥反应或者是反应几下就没了，还有UART控制台显示不出来的原因了，代码都找不到，bootloader死在了重定位上。</p>\n<p>​          问题的出现也是自己粗心大意了。buf[i]，i++，但是当i=0,重新循环时，buf地址并没有变化，也就造成了向一个重复内存里重复写数据的现象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(i=0; i &lt; page; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tbuff[i] = NFDATA;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解决方法：</p>\n<p>① buff[i++] = NFDATA;        修改前面的代码，去掉for里面的i++。</p>\n<p>② 修改buff[i] = NFDATA;为   *buff++ = NFDATA；</p>\n","categories":[{"name":"嵌入式","slug":"嵌入式","permalink":"chunlife.top/categories/嵌入式/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"chunlife.top/tags/C语言/"},{"name":"Linux","slug":"Linux","permalink":"chunlife.top/tags/Linux/"},{"name":"uboot","slug":"uboot","permalink":"chunlife.top/tags/uboot/"}]},{"title":"Linux下的栈的实现","date":"2016-05-19T09:15:52.000Z","path":"2016/05/19/Linux下的栈的实现/","content":"<p>Linux下的栈是由glibc这个库，glibc其实是C运行库，它提供了Linux系统最底层的API（应用程序接口），glibc除了封装linux操作系统所提供的系统服务外，它本身也提供了许多其它一些必要功能服务的实现。</p>\n<a id=\"more\"></a>\n<p>​        例如堆的实现就是由它提供所提供的，那么堆是怎么被它所提供的呢，首先若是你使用malloc这个函数，就会向内核申请一块空间，Linux内存是以页框为单位，一个页框就是4K的大小，这么大的一块空间，若是我只申请malloc(16)，内核返回一大片空间（页框），多余的空间由glibc来管理。</p>\n<p>  ① 源头（申请）：malloc</p>\n<p>  ② 内核返回一大块空间（以页框为单位）</p>\n<p>  ③ glibc，从一大块的内存挖出程序需要的内存给程序，剩下来的进行管理。</p>\n<p><img src=\"1552641421054.png\" alt=\"malloc函数操作\"></p>\n<p><img src=\"1552641464939.png\" alt=\"1552641464939\"></p>\n","categories":[{"name":"Linux","slug":"Linux","permalink":"chunlife.top/categories/Linux/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"chunlife.top/tags/C语言/"},{"name":"Linux","slug":"Linux","permalink":"chunlife.top/tags/Linux/"}]}]