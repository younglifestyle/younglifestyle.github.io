[{"title":"Amis-Editor低代码编辑器-桌面客户端","date":"2024-12-07T07:48:18.000Z","path":"2024/12/07/Amis-Editor低代码编辑器-桌面客户端/","content":"<p>之前介绍过使用<code>wails</code>来编写桌面客户端，最近又有在使用百度的前端低代码框架——<a href=\"https://baidu.github.io/amis/zh-CN/docs/index\" target=\"_blank\" rel=\"noopener\"><code>amis</code></a>，是使用JSON配置来生成页面的。对于大部分常用的页面，使用低代码生成，还是比较好用的，前提是后续需求别太复杂。</p>\n<p>而在使用<code>amis</code>过程中，发现编写JSON时，使用<a href=\"https://aisuda.github.io/amis-editor-demo\" target=\"_blank\" rel=\"noopener\">amis 可视化编辑器</a>编写会比较方便一点，但有一个问题，就是在网页上编写完页面后，要复制到本地文件中。所以客户端的价值就是打通和本地文件的交互了。</p>\n<p>使用库<a href=\"https://github.com/aisuda/amis-editor-demo\" target=\"_blank\" rel=\"noopener\">amis-editor-demo</a>和<a href=\"https://github.com/flin7/wails-react-template\" target=\"_blank\" rel=\"noopener\">wails-react-template</a>。</p>\n<blockquote>\n<p>amis v6.9.0、wails v2.9.2、node v18.18.0</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2><span id=\"客户端截图\">客户端截图</span></h2>\n<p><img src=\"image-20241208190234491.png\" alt=\"客户端示意图\"></p>\n<p>增加了选择本地文件，或保存内容到文件的操作，另外<code>保存</code>按钮若有文件则保存在文件以及<code>localStorage</code>中，无文件则正常保存在<code>localStorage</code>。</p>\n<p>另外实现了一个保存历史文件的功能，若设置了本地文件，则会在保存时，也会在执行文件下新建一个历史备份文件。</p>\n<p><img src=\"image-20241208192401905.png\" alt=\"历史文件\"></p>\n<h2><span id=\"问题\">问题</span></h2>\n<h3><span id=\"代理的问题\">代理的问题</span></h3>\n<p><code>wails</code>比较奇怪的地方是在<code>build</code>的镜像，它的网络协议地址是<code>http://wails.localhost</code>，不是正常的本地localhost这样，所以默认在<code>amis</code>中，不加域名请求接口的话，接口前缀会被带上<code>wails.localhost</code>，例如<code>http://wails.localhost/api/v1/test/xxxxx</code>这样的。所以需要手动的对<code>fetcher</code>进行一些修改，对所有发起的请求加一个自定义的域名前缀，例如我这里改为了<code>http://127.0.0.1:32155</code>。</p>\n<h3><span id=\"cors问题\">CORS问题</span></h3>\n<p>因为浏览器安全规则的原因，所以跨域的限制是避免不了的，跨域的解决方式可以使用<code>Nginx</code>来解决。但我这里利用<code>wails</code>的Go语言挂了一个代理，监听<code>32155</code>端口，处理前端的接口请求，使用到的库是<code>net/http/httputil</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代理处理器</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> ProxyHandler <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    proxies     <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]*httputil.ReverseProxy</span><br><span class=\"line\">    sortedPaths []<span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewProxyHandler 创建代理处理器并排序路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewProxyHandler</span><span class=\"params\">(config *Config)</span> <span class=\"params\">(*ProxyHandler, error)</span></span> &#123;</span><br><span class=\"line\">    handler := &amp;ProxyHandler&#123;</span><br><span class=\"line\">        proxies: <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]*httputil.ReverseProxy),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, proxyConfig := <span class=\"keyword\">range</span> config.Proxies &#123;</span><br><span class=\"line\">        targetURL, err := url.Parse(proxyConfig.Target)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        proxy := httputil.NewSingleHostReverseProxy(targetURL)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 自定义 Director</span></span><br><span class=\"line\">        originalDirector := proxy.Director</span><br><span class=\"line\">        proxy.Director = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(req *http.Request)</span></span> &#123;</span><br><span class=\"line\">            originalDirector(req)</span><br><span class=\"line\">            req.Host = targetURL.Host</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 设置配置文件中定义的头部</span></span><br><span class=\"line\">            ......</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 自定义 ModifyResponse</span></span><br><span class=\"line\">        proxy.ModifyResponse = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(resp *http.Response)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">           \t</span><br><span class=\"line\">\t\t\t......</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        handler.proxies[proxyConfig.Path] = proxy</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 提取并排序路径，从长到短</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> path := <span class=\"keyword\">range</span> handler.proxies &#123;</span><br><span class=\"line\">        handler.sortedPaths = <span class=\"built_in\">append</span>(handler.sortedPaths, path)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sort.Slice(handler.sortedPaths, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i, j <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(handler.sortedPaths[i]) &gt; <span class=\"built_in\">len</span>(handler.sortedPaths[j])</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> handler, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(h *ProxyHandler)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    requestPath := c.Request.URL.Path</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, path := <span class=\"keyword\">range</span> h.sortedPaths &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> strings.HasPrefix(requestPath, path) &#123;</span><br><span class=\"line\">            proxy := h.proxies[path]</span><br><span class=\"line\">            proxy.ServeHTTP(c.Writer, c.Request)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    c.JSON(http.StatusNotFound, gin.H&#123;<span class=\"string\">\"message\"</span>: <span class=\"string\">\"Not found\"</span>&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">proxies:</span></span><br><span class=\"line\"><span class=\"attr\">  - path:</span> <span class=\"string\">\"/test\"</span></span><br><span class=\"line\"><span class=\"attr\">    target:</span> <span class=\"string\">\"http://localhost:4001\"</span></span><br><span class=\"line\"><span class=\"attr\">    headers:</span></span><br><span class=\"line\"><span class=\"attr\">      - key:</span> <span class=\"string\">\"X-Proxy-Header\"</span></span><br><span class=\"line\"><span class=\"attr\">        value:</span> <span class=\"string\">\"Value1\"</span></span><br><span class=\"line\"><span class=\"attr\">  - path:</span> <span class=\"string\">\"/api\"</span></span><br><span class=\"line\"><span class=\"attr\">    target:</span> <span class=\"string\">\"http://localhost:4001\"</span></span><br><span class=\"line\"><span class=\"attr\">    headers:</span></span><br><span class=\"line\"><span class=\"attr\">      - key:</span> <span class=\"string\">\"X-API-Header\"</span></span><br><span class=\"line\"><span class=\"attr\">        value:</span> <span class=\"string\">\"Value2\"</span></span><br><span class=\"line\"><span class=\"attr\">proxy_headers:</span></span><br><span class=\"line\"><span class=\"attr\">  - key:</span> <span class=\"string\">\"X-Custom-Header-1\"</span></span><br><span class=\"line\"><span class=\"attr\">    value:</span> <span class=\"string\">\"CustomValue1\"</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"下载文件\">下载文件</span></h3>\n<p>下载文件会报错：<code>Should have &quot;Content-Disposition&quot; in Header</code>。</p>\n<p>如issue所述——<a href=\"https://github.com/baidu/amis/issues/9265\" target=\"_blank\" rel=\"noopener\">9265</a>。我在解决时，没有查到这个解决方式，所以我用了另一个方式解决，后面也用了这个方式解决了，但是未解决，就不再尝试了（打包时间非常长，3min+）。</p>\n<p>修改<code>fetcher</code>函数。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (method !== <span class=\"string\">'post'</span> &amp;&amp; method !== <span class=\"string\">'put'</span> &amp;&amp; method !== <span class=\"string\">'patch'</span>) &#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\"></span><br><span class=\"line\">    增加返回值的处理流程</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (axios <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>)[method](url, config).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">        .......</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还是会有提示，不过还是能正常下载了。<code>Should have &quot;Content-Disposition&quot; in Header</code></p>\n<h3><span id=\"image类型不走fetcher\">image类型不走fetcher</span></h3>\n<p>还记得我们前面，我们设置了一个全局拦截器，是在<code>fetcher</code>中实现的，这里面设置了域名以及<code>Header</code>，但是<code>image</code>不走<code>fetcher</code>，这就比较难崩了，所以image还不能直接使用这种方式去请求。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"imageMode\"</span>: <span class=\"string\">\"original\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"src\"</span>: <span class=\"string\">\"/api/v1/download/image?id=$&#123;id&#125;\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"image\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以使用其他方式替换，例如使用api将图片数据请求过来，然后使用<code>tpl</code>组件，用原生<code>img</code>来处理图片显示的事情。</p>\n<h3><span id=\"涉及到的修改的文件\">涉及到的修改的文件</span></h3>\n<p>修改的库：<a href=\"https://github.com/aisuda/amis-editor-demo\" target=\"_blank\" rel=\"noopener\">amis-editor-demo</a>。</p>\n<p><code>/route/Editor.tsx</code>，Editor上的按钮以及对文件的处理。</p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"Wails","slug":"Wails","permalink":"chunlife.top/tags/Wails/"},{"name":"Amis","slug":"Amis","permalink":"chunlife.top/tags/Amis/"}]},{"title":"桌面客户端Golang-Wails快速开发","date":"2024-08-18T09:41:47.000Z","path":"2024/08/18/桌面客户端Golang-Wails快速开发/","content":"<p>之前还在做嵌入式的时候就用Qt做过客户端应用，但是转Go后，一直还没写过客户端，前面也用过Amis这类前端低代码，写过Web界面，算起来也是非常方便的，适合不想理会前端的各类知识。</p>\n<p>但是有些场景，用户就是需要桌面客户端这样的形式的时候，就没办法说用B/S这样的架构交付了。</p>\n<p>Go的GUI库，比较火的有两个，<code>Fyne</code>和<code>Wails</code>。经过一段时间的使用，这里推荐使用<code>Wails</code>。</p>\n<a id=\"more\"></a>\n<p>需要说明的是，当前<code>Wails</code>仅支持桌面端，不像<code>Fyne</code>是同时支持桌面、移动设备的。</p>\n<h3><span id=\"组件\">组件</span></h3>\n<p><code>Wails</code>的<a href=\"https://wails.io/zh-Hans/\" target=\"_blank\" rel=\"noopener\">官网</a>。</p>\n<p>使用<code>Wails</code>，就能利用起前端的各类资源，这里推荐一个前端库<a href=\"https://www.quasar-cn.cn/introduction-to-quasar\" target=\"_blank\" rel=\"noopener\"><code>quasar</code></a>，<code>quasar</code>库比较有那种桌面客户端的风格，不会像写<code>element-plus</code>一样，看起来跟Web页面一样。</p>\n<h3><span id=\"使用\">使用</span></h3>\n<p>因为我们需要的页面不会是那种非常复杂的页面，所以只需要些许JS和CSS基础即可，更何况当前使用时，可以随时借助各类AI工具，所以当前使用难度几乎是被降的很低的。</p>\n<p>我在使用时，只做一些单页面，对前端知识要求基本查<code>quasar</code>的文档，都有解决的方案（前端框架真的很卷）。</p>\n<p>我使用的模板：<a href=\"https://github.com/sgosiaco/wails-template-quasar-js\" target=\"_blank\" rel=\"noopener\">https://github.com/sgosiaco/wails-template-quasar-js</a></p>\n<p>这是使用wails实现的一个应用。</p>\n<p><img src=\"image-20240818184224418.png\" alt=\"打印页面\"></p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"Wails","slug":"Wails","permalink":"chunlife.top/tags/Wails/"}]},{"title":"SECS/GEM-Golang解包、封包库","date":"2023-11-15T02:54:14.000Z","path":"2023/11/15/SECS-GEM-Golang解包、封包库/","content":"<p>这一篇算是有时间就补一下以前做的事。之前有提过Go有Encode/Decode SML/HSMS消息的库，该库对SECS2基协议解析基础完备的支持，易于使用的话需要对其进行一些细微的修改。</p>\n<p>这个库的学习可以通过各个文件的Test案例进行了解，基本上使用起来不会有太大的问题。</p>\n<a id=\"more\"></a>\n<h2><span id=\"库简单讲解\">库简单讲解</span></h2>\n<p>库中对Go语言Duck Type的运用是很优秀的，而且也是很常用的。</p>\n<p>例如，通过对<a href=\"https://en.wikipedia.org/wiki/SECS-II\" target=\"_blank\" rel=\"noopener\">SECS-II</a>数据节点的抽象；对HSMS消息的抽象。这些在看源码时，都是可以有心学习的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ItemNode <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Size returns the array size of the data item.</span></span><br><span class=\"line\">    Size() <span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Variables returns the variable names in the node, in the insertion order.</span></span><br><span class=\"line\">    Variables() []<span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\">    FillVariables(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;) ItemNode</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ToBytes returns the byte representation of the data item.</span></span><br><span class=\"line\">    ToBytes() []<span class=\"keyword\">byte</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> HSMSMessage <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Type returns HSMS message type.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Return will be one of \"data message\", \"select.req\", \"select.rsp\", \"deselect.req\", \"deselect.rsp\",</span></span><br><span class=\"line\">\t<span class=\"comment\">// \"linktest.req\", \"linktest.rsp\", \"reject.req\", \"separate.req\", \"undefined\".</span></span><br><span class=\"line\">\tType() <span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// ToBytes returns byte representation of the HSMS message.</span></span><br><span class=\"line\">\tToBytes() []<span class=\"keyword\">byte</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，经过我对比其他库，这个库的优点是对消息中变量的支持，可以事先插入变量在SML消息中进行占位，在后面对这些变量占位进行填充。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NewIntNode(<span class=\"number\">2</span>, <span class=\"string\">\"var1\"</span>).FillVariables(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">\"var1\"</span>: <span class=\"number\">1</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &lt;I2[1] 1&gt;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>但是，这里存在一个问题，这个库对数据获取的没有提供一个好的方式，例如我想获取List嵌套下的某一个Int中的第二个元素，这个就没办法了，需要我们自己进行拓展。例如Java中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// github.com/kenta-shimizu/secs4java8</span></span><br><span class=\"line\"></span><br><span class=\"line\">Secs2 ss = Secs2.list(</span><br><span class=\"line\">    Secs2.binary((<span class=\"keyword\">byte</span>)<span class=\"number\">1</span>),\t<span class=\"comment\">/* 0 */</span></span><br><span class=\"line\">    Secs2.ascii(<span class=\"string\">\"MESSAGE-1\"</span>),\t<span class=\"comment\">/* 1 */</span></span><br><span class=\"line\">    Secs2.bool(<span class=\"keyword\">true</span>),\t<span class=\"comment\">/* 2 */</span></span><br><span class=\"line\">    Secs2.list(\t<span class=\"comment\">/* 3 */</span></span><br><span class=\"line\">        Secs2.list(\t<span class=\"comment\">/* 3,0 */</span></span><br><span class=\"line\">            Secs2.ascii(<span class=\"string\">\"KEY-1\"</span>),\t<span class=\"comment\">/* 3,0,0 */</span></span><br><span class=\"line\">            Secs2.int4(<span class=\"number\">100</span>, <span class=\"number\">101</span>, <span class=\"number\">102</span>)\t<span class=\"comment\">/* 3,0,1 */</span></span><br><span class=\"line\">        ),</span><br><span class=\"line\">        Secs2.list(\t<span class=\"comment\">/* 3,1 */</span></span><br><span class=\"line\">            Secs2.ascii(<span class=\"string\">\"KEY-2\"</span>),\t<span class=\"comment\">/* 3,1,0 */</span></span><br><span class=\"line\">            Secs2.int4(<span class=\"number\">200</span>, <span class=\"number\">201</span>, <span class=\"number\">202</span>)\t<span class=\"comment\">/* 3,1,1 */</span></span><br><span class=\"line\">        ),</span><br><span class=\"line\">        Secs2.list(\t<span class=\"comment\">/* 3,2 */</span></span><br><span class=\"line\">            Secs2.ascii(<span class=\"string\">\"KEY-3\"</span>),\t<span class=\"comment\">/* 3,2,0 */</span></span><br><span class=\"line\">            Secs2.int4(<span class=\"number\">300</span>, <span class=\"number\">301</span>, <span class=\"number\">302</span>)\t<span class=\"comment\">/* 3,2,1 */</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    Secs2.float4(<span class=\"number\">400.0F</span>),</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"# Get value by index\"</span>);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"getByte(0, 0):\\t\"</span> + ss.getByte(<span class=\"number\">0</span>, <span class=\"number\">0</span>));\t<span class=\"comment\">/* 1 */</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"getAscii(1):\\t\"</span> + ss.getAscii(<span class=\"number\">1</span>));\t<span class=\"comment\">/* \"MESSAGE-1\" */</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"getBoolean(2, 0):\\t\"</span> + ss.getBoolean(<span class=\"number\">2</span>, <span class=\"number\">0</span>));\t<span class=\"comment\">/* true */</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"getAscii(3, 0, 0):\\t\"</span> + ss.getAscii(<span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>));\t<span class=\"comment\">/* \"KEY-1\" */</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"getInt(3, 0, 1, 0):\\t\"</span> + ss.getInt(<span class=\"number\">3</span>, <span class=\"number\">0</span> , <span class=\"number\">1</span>, <span class=\"number\">0</span>));\t<span class=\"comment\">/* 100 */</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"getInt(3, 0, 1, 1):\\t\"</span> + ss.getInt(<span class=\"number\">3</span>, <span class=\"number\">0</span> , <span class=\"number\">1</span>, <span class=\"number\">1</span>));\t<span class=\"comment\">/* 101 */</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"getInt(3, 0, 1, 2):\\t\"</span> + ss.getInt(<span class=\"number\">3</span>, <span class=\"number\">0</span> , <span class=\"number\">1</span>, <span class=\"number\">2</span>));\t<span class=\"comment\">/* 102 */</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"getInt(3, 1, 1, 0):\\t\"</span> + ss.getInt(<span class=\"number\">3</span>, <span class=\"number\">1</span> , <span class=\"number\">1</span>, <span class=\"number\">0</span>));\t<span class=\"comment\">/* 200 */</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"getInt(3, 2, 1, 0):\\t\"</span> + ss.getInt(<span class=\"number\">3</span>, <span class=\"number\">2</span> , <span class=\"number\">1</span>, <span class=\"number\">0</span>));\t<span class=\"comment\">/* 300 */</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"getFloat(4, 0):\\t\"</span> + ss.getFloat(<span class=\"number\">4</span>, <span class=\"number\">0</span>));\t<span class=\"comment\">/* 400.0F */</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"修改\">修改</span></h2>\n<p>库中对消息节点的解析已经将数据解析到节点的values中，但是没有获取数据的method。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> IntNode <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbyteSize  <span class=\"keyword\">int</span>            <span class=\"comment\">// Byte size of the integers; should be either 1, 2, 4, or 8</span></span><br><span class=\"line\">\tvalues    []<span class=\"keyword\">int64</span>        <span class=\"comment\">// Array of integers</span></span><br><span class=\"line\">\tvariables <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span> <span class=\"comment\">// Variable name and its position in the data array</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里就是要将其暴露出去，给到外部进行获取。</p>\n<p><code>ItemNode</code>增加三个方法，Values、Get、Type.</p>\n<p>Values：获取节点上的数据；</p>\n<p>Get：获取节点，主要是List节点；</p>\n<p>Type：标识数据节点；</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ItemNode <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Get returns list itemNode</span></span><br><span class=\"line\">    Get(indices ...<span class=\"keyword\">int</span>) (ItemNode, error)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Values returns data list</span></span><br><span class=\"line\">    Values() <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Type returns item type</span></span><br><span class=\"line\">    Type() <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>List节点<code>Get</code>函数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(node *ListNode)</span> <span class=\"title\">Get</span><span class=\"params\">(indices ...<span class=\"keyword\">int</span>)</span> <span class=\"params\">(ItemNode, error)</span></span> &#123;</span><br><span class=\"line\">\titemNode := ItemNode(node)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(indices) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> node, <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, index := <span class=\"keyword\">range</span> indices &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> itemNode.Type() != <span class=\"string\">\"list\"</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">\"not list\"</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tlistNode := itemNode.(*ListNode)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> index &lt; <span class=\"number\">0</span> || index &gt;= <span class=\"built_in\">len</span>(listNode.values) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">\"index out of bounds error, size : %d\"</span>, <span class=\"built_in\">len</span>(listNode.values))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\titemNode = listNode.values[index]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> itemNode, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其他节点<code>Get</code>函数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(node *IntNode)</span> <span class=\"title\">Get</span><span class=\"params\">(indices ...<span class=\"keyword\">int</span>)</span> <span class=\"params\">(ItemNode, error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(indices) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> node, <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">\"not list, node is %s, indices is %v\"</span>, node, indices)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>给<code>DataMessage</code>添加获取节点数据的函数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GetAscii(indices ...<span class=\"keyword\">int</span>) (<span class=\"keyword\">string</span>, error)</span><br><span class=\"line\">GetByte(indices ...<span class=\"keyword\">int</span>) (<span class=\"keyword\">byte</span>, error)</span><br><span class=\"line\">GetBoolean(indices ...<span class=\"keyword\">int</span>) (<span class=\"keyword\">bool</span>, error)</span><br><span class=\"line\">GetFloat(indices ...<span class=\"keyword\">int</span>) (<span class=\"keyword\">float64</span>, error)</span><br><span class=\"line\">GetInt(indices ...<span class=\"keyword\">int</span>) (<span class=\"keyword\">int64</span>, error)</span><br><span class=\"line\">Get(indices ...<span class=\"keyword\">int</span>) (ItemNode, error)</span><br></pre></td></tr></table></figure>\n<p>这样，即可获取到指定数据节点的信息，效果和Java库是一致的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func TestMessageNode_ProducedByFactoryMethod_HSMS11(t *testing.T) &#123;</span><br><span class=\"line\">\tvar tests = []struct &#123;</span><br><span class=\"line\">\t\tdescription       string   // Test case description</span><br><span class=\"line\">\t\tinputMessageName  string   // Input to the factory method</span><br><span class=\"line\">\t\tinputStreamCode   int      // Input to the factory method</span><br><span class=\"line\">\t\tinputFunctionCode int      // Input to the factory method</span><br><span class=\"line\">\t\tinputWaitBit      int      // Input to the factory method</span><br><span class=\"line\">\t\tinputDirection    string   // Input to the factory method</span><br><span class=\"line\">\t\tinputItemNode     ItemNode // Input to the factory method</span><br><span class=\"line\">\t\tinputSessionID    int      // Input to the factory method</span><br><span class=\"line\">\t\tinputSystemBytes  []byte   // Input to the factory method</span><br><span class=\"line\">\t&#125;&#123;</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tdescription:       &quot;S127F255 W H&lt;-&gt;E 消息名称, upper boundary, nested list node&quot;,</span><br><span class=\"line\">\t\t\tinputMessageName:  &quot;消息名称&quot;,</span><br><span class=\"line\">\t\t\tinputStreamCode:   127,</span><br><span class=\"line\">\t\t\tinputFunctionCode: 255,</span><br><span class=\"line\">\t\t\tinputWaitBit:      1,</span><br><span class=\"line\">\t\t\tinputDirection:    &quot;H&lt;-&gt;E&quot;,</span><br><span class=\"line\">\t\t\tinputItemNode: NewListNode(</span><br><span class=\"line\">\t\t\t\tNewListNode(NewListNode()),</span><br><span class=\"line\">\t\t\t\tNewListNode(</span><br><span class=\"line\">\t\t\t\t\tNewIntNode(1, 33, 55),</span><br><span class=\"line\">\t\t\t\t\tNewASCIINode(&quot;test&quot;),</span><br><span class=\"line\">\t\t\t\t\tNewBinaryNode(1, 2, 255),</span><br><span class=\"line\">\t\t\t\t\tNewBooleanNode(false, true, true),</span><br><span class=\"line\">\t\t\t\t\tNewFloatNode(4, -1.1, 0.0, 1.0),</span><br><span class=\"line\">\t\t\t\t),</span><br><span class=\"line\">\t\t\t),</span><br><span class=\"line\">\t\t\tinputSessionID:   0xFFFF,</span><br><span class=\"line\">\t\t\tinputSystemBytes: []byte&#123;0xFF, 0xFF, 0xFF, 0xFF&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfor i, test := range tests &#123;</span><br><span class=\"line\">\t\tt.Logf(&quot;Test #%d: %s&quot;, i, test.description)</span><br><span class=\"line\">\t\tmsg := NewHSMSDataMessage(</span><br><span class=\"line\">\t\t\ttest.inputMessageName,</span><br><span class=\"line\">\t\t\ttest.inputStreamCode,</span><br><span class=\"line\">\t\t\ttest.inputFunctionCode,</span><br><span class=\"line\">\t\t\ttest.inputWaitBit,</span><br><span class=\"line\">\t\t\ttest.inputDirection,</span><br><span class=\"line\">\t\t\ttest.inputItemNode,</span><br><span class=\"line\">\t\t\ttest.inputSessionID,</span><br><span class=\"line\">\t\t\ttest.inputSystemBytes,</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t\tfmt.Println(msg.dataItem)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfmt.Println(&quot;-------------------&quot;)</span><br><span class=\"line\">\t\tnode, err := msg.Get(1, 0)</span><br><span class=\"line\">\t\tfmt.Println(node)</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\tgetInt, err := msg.GetInt(1, 0, 1)</span><br><span class=\"line\">\t\tfmt.Println(getInt, err)</span><br><span class=\"line\">\t\tgetAscii, err := msg.GetAscii(1, 1)</span><br><span class=\"line\">\t\tfmt.Println(getAscii, err)</span><br><span class=\"line\">\t\tgetByte, err := msg.GetByte(1, 2, 2)</span><br><span class=\"line\">\t\tfmt.Println(getByte, err)</span><br><span class=\"line\">\t\tgetBoolean, err := msg.GetBoolean(1, 3, 1)</span><br><span class=\"line\">\t\tfmt.Println(getBoolean, err)</span><br><span class=\"line\">\t\tgetFloat, err := msg.GetFloat(1, 4, 0)</span><br><span class=\"line\">\t\tfmt.Println(getFloat, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Test #0: S127F255 W H&lt;-&gt;E 消息名称, upper boundary, nested list node</span><br><span class=\"line\">&lt;L[2]</span><br><span class=\"line\">  &lt;L[1]</span><br><span class=\"line\">    &lt;L[0]&gt;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">  &lt;L[5]</span><br><span class=\"line\">    &lt;I1[2] 33 55&gt;</span><br><span class=\"line\">    &lt;A &quot;test&quot;&gt;</span><br><span class=\"line\">    &lt;B[3] 0b1 0b10 0b11111111&gt;</span><br><span class=\"line\">    &lt;BOOLEAN[3] F T T&gt;</span><br><span class=\"line\">    &lt;F4[3] -1.1 0 1&gt;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">-------------------</span><br><span class=\"line\">&lt;I1[2] 33 55&gt; &lt;nil&gt;</span><br><span class=\"line\">55 &lt;nil&gt;</span><br><span class=\"line\">test &lt;nil&gt;</span><br><span class=\"line\">255 &lt;nil&gt;</span><br><span class=\"line\">true &lt;nil&gt;</span><br><span class=\"line\">-1.1 &lt;nil&gt;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"SECS/GEM - Go","slug":"SECS-GEM-Go","permalink":"chunlife.top/tags/SECS-GEM-Go/"}]},{"title":"Go语言实现HTTP到gRPC请求转换的最简单方法","date":"2023-05-18T13:07:40.000Z","path":"2023/05/18/Go语言实现HTTP到gRPC请求转换的最简单方法/","content":"<p>上次我写了通过<code>protoreflect</code>的方法，自动代理服务，可以摆脱开proto文件的限制，这样网关可以将这些服务都自动代理起来。更进一步的，像现在微服务框架，如Kratos、ego、go-zero都兼顾根据proto文件上，根据<code>google/api/annotations.proto</code>增加的注解，生成HTTP的服务，而这些属性注释，网关都可以通过反射拿到，然后代理其HTTP。</p>\n<p>除此之外，HTTP —&gt; Gateway —&gt; GRPC 有没有省事点的方法呢？可以直接将HTTP/1.1协议转成GRPC兼容，然后将返回再翻译为HTTP/1.1。</p>\n<a id=\"more\"></a>\n<h3><span id=\"协议数据修改\">协议数据修改</span></h3>\n<p>这是偶然看到<a href=\"https://github.com/go-kratos/gateway\" target=\"_blank\" rel=\"noopener\">go-kratos/gateway</a>中实现的http—&gt;h2所使用的技术。</p>\n<p>这里利用了GRPC协议中为了兼容一些HTTP1.1端，在消息体的格式中，可使用<code>json</code>格式进行序列化（<code>application/grpc+json</code> ）。</p>\n<p>在使用此 <strong>Content-Type</strong> 时，gRPC 服务器会将 JSON 格式的数据转换为 Protocol Buffers 格式的数据，然后进行处理。所以使用什么数据格式传输，并不影响其协议依然为HTTP/2。</p>\n<h3><span id=\"代码分析\">代码分析</span></h3>\n<p>不想看代码，可以直接看<code>总结</code>中看如何实现的。</p>\n<h4><span id=\"配置文件\">配置文件</span></h4>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This is a gateway config.</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">helloworld</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">middlewares:</span>                         <span class=\"string\">公共的中间件，作用于所有路由</span></span><br><span class=\"line\"><span class=\"attr\">  - name:</span> <span class=\"string\">logging</span> </span><br><span class=\"line\"><span class=\"attr\">  - name:</span> <span class=\"string\">transcoder</span></span><br><span class=\"line\"><span class=\"attr\">endpoints:</span></span><br><span class=\"line\"><span class=\"attr\">  - path:</span> <span class=\"string\">/helloworld/*</span></span><br><span class=\"line\"><span class=\"attr\">    timeout:</span> <span class=\"number\">1</span><span class=\"string\">s</span></span><br><span class=\"line\"><span class=\"attr\">    protocol:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\"><span class=\"attr\">    host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\"><span class=\"attr\">    backends:</span></span><br><span class=\"line\"><span class=\"attr\">      - target:</span> <span class=\"string\">'127.0.0.1:8000'</span>     <span class=\"string\">直连后端服务</span></span><br><span class=\"line\"><span class=\"comment\">#      - target: 'discovery:///bbs'</span></span><br><span class=\"line\"><span class=\"attr\">    middlewares:</span>                     <span class=\"string\">私有中间件</span></span><br><span class=\"line\"><span class=\"attr\">      - name:</span> <span class=\"string\">circuitbreaker</span></span><br><span class=\"line\"><span class=\"attr\">        options:</span></span><br><span class=\"line\">          <span class=\"string\">'@type'</span><span class=\"string\">:</span> <span class=\"string\">type.googleapis.com/gateway.middleware.circuitbreaker.v1.CircuitBreaker</span></span><br><span class=\"line\"><span class=\"attr\">          successRatio:</span> <span class=\"string\">&#123;\"success\":0.6,</span> <span class=\"string\">\"request\"</span><span class=\"string\">:\"1\",</span> <span class=\"string\">\"bucket\"</span><span class=\"string\">:\"10\",</span> <span class=\"string\">\"window\"</span><span class=\"string\">:\"3s\"&#125;</span></span><br><span class=\"line\"><span class=\"attr\">          backupService:</span> <span class=\"string\">&#123;\"endpoint\":&#123;\"backends\":[&#123;\"target\":\"127.0.0.1:8001\"&#125;]&#125;&#125;</span></span><br><span class=\"line\"><span class=\"attr\">          assertCondtions:</span></span><br><span class=\"line\"><span class=\"bullet\">          -</span> <span class=\"string\">&#123;\"by_status_code\":\"200\"&#125;</span></span><br><span class=\"line\"><span class=\"attr\">  - path:</span> <span class=\"string\">/helloworld.Greeter/*</span></span><br><span class=\"line\"><span class=\"attr\">    method:</span> <span class=\"string\">POST</span></span><br><span class=\"line\"><span class=\"attr\">    timeout:</span> <span class=\"number\">1</span><span class=\"string\">s</span></span><br><span class=\"line\"><span class=\"attr\">    protocol:</span> <span class=\"string\">GRPC</span>                   <span class=\"string\">协议，将决定gateway以什么样的client去请求后端服务</span></span><br><span class=\"line\"><span class=\"attr\">    backends:</span></span><br><span class=\"line\"><span class=\"attr\">      - target:</span> <span class=\"string\">'127.0.0.1:9000'</span></span><br><span class=\"line\"><span class=\"attr\">    retry:</span></span><br><span class=\"line\"><span class=\"attr\">      attempts:</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attr\">      perTryTimeout:</span> <span class=\"number\">0.1</span><span class=\"string\">s</span></span><br><span class=\"line\"><span class=\"attr\">      conditions:</span></span><br><span class=\"line\"><span class=\"attr\">        - byStatusCode:</span> <span class=\"string\">'502-504'</span></span><br><span class=\"line\"><span class=\"attr\">        - byHeader:</span></span><br><span class=\"line\"><span class=\"attr\">            name:</span> <span class=\"string\">'Grpc-Status'</span></span><br><span class=\"line\"><span class=\"attr\">            value:</span> <span class=\"string\">'14'</span></span><br></pre></td></tr></table></figure>\n<h4><span id=\"proxy构建\">proxy构建</span></h4>\n<p>这里来看下来看下kratos-gateway的代码。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span>-kratos/gateway/cmd/gateway/main.<span class=\"keyword\">go</span></span><br><span class=\"line\">\tclientFactory := client.NewFactory(makeDiscovery())</span><br><span class=\"line\">\t<span class=\"keyword\">go</span>-kratos/gateway/client/factory.<span class=\"keyword\">go</span>   返回一个client生成的工厂函数，用于生成请求Grpc或http的client，根据config上定义的endpoint。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewFactory new a client factory.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewFactory</span><span class=\"params\">(r registry.Discovery, opts ...Option)</span> <span class=\"title\">Factory</span></span> &#123;</span><br><span class=\"line\">\to := &amp;options&#123;</span><br><span class=\"line\">\t\tpickerBuilder: p2c.NewBuilder(),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, opt := <span class=\"keyword\">range</span> opts &#123;</span><br><span class=\"line\">\t\topt(o)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(endpoint *config.Endpoint)</span> <span class=\"params\">(http.RoundTripper, error)</span></span> &#123;</span><br><span class=\"line\">      \t<span class=\"comment\">// 负载均衡选择实例</span></span><br><span class=\"line\">\t\tpicker := o.pickerBuilder.Build()</span><br><span class=\"line\">\t\tctx, cancel := context.WithCancel(context.Background())</span><br><span class=\"line\">\t\tapplier := &amp;nodeApplier&#123;</span><br><span class=\"line\">\t\t\tcancel:   cancel,</span><br><span class=\"line\">\t\t\tendpoint: endpoint,</span><br><span class=\"line\">\t\t\tregistry: r,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        <span class=\"comment\">// 创建client实例</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err := applier.apply(ctx, picker); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> newClient(applier, picker), <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// applier.apply</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(na *nodeApplier)</span> <span class=\"title\">apply</span><span class=\"params\">(ctx context.Context, dst selector.Selector)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> nodes []selector.Node</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, backend := <span class=\"keyword\">range</span> na.endpoint.Backends &#123;</span><br><span class=\"line\">\t\ttarget, err := parseTarget(backend.Target)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> target.Scheme &#123;</span><br><span class=\"line\">        <span class=\"comment\">// - target: '127.0.0.1:8000'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"direct\"</span>:</span><br><span class=\"line\">\t\t\tnode := newNode(backend.Target, na.endpoint.Protocol, weighted, <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;&#125;)</span><br><span class=\"line\">\t\t\tnodes = <span class=\"built_in\">append</span>(nodes, node)</span><br><span class=\"line\">\t\t\tdst.Apply(nodes)</span><br><span class=\"line\">        <span class=\"comment\">// #      - target: 'discovery:///bbs'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"discovery\"</span>:</span><br><span class=\"line\">\t\t\t....</span><br><span class=\"line\">            </span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> fmt.Errorf(<span class=\"string\">\"unknown scheme: %s\"</span>, target.Scheme)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// newNode，创建http/2或http/1.1的客户端    config中配置了GRPC</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newNode</span><span class=\"params\">(addr <span class=\"keyword\">string</span>, protocol config.Protocol, weight *<span class=\"keyword\">int64</span>, md <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>)</span> *<span class=\"title\">node</span></span> &#123;</span><br><span class=\"line\">\tnode := &amp;node&#123;</span><br><span class=\"line\">\t\tprotocol: protocol,</span><br><span class=\"line\">\t\taddress:  addr,</span><br><span class=\"line\">\t\tweight:   weight,</span><br><span class=\"line\">\t\tmetadata: md,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> protocol == config.Protocol_GRPC &#123;</span><br><span class=\"line\">\t\tnode.client = _globalH2Client</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tnode.client = _globalClient</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> node</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">defaultH2Client</span><span class=\"params\">()</span> *<span class=\"title\">http</span>.<span class=\"title\">Client</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;http.Client&#123;</span><br><span class=\"line\">\t\tCheckRedirect: defaultCheckRedirect,</span><br><span class=\"line\">\t\tTransport: &amp;http2.Transport&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// So http2.Transport doesn't complain the URL scheme isn't 'https'</span></span><br><span class=\"line\">\t\t\tAllowHTTP:          <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\tDisableCompression: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Pretend we are dialing a TLS endpoint.</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Note, we ignore the passed tls.Config</span></span><br><span class=\"line\">\t\t\tDialTLS: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(network, addr <span class=\"keyword\">string</span>, cfg *tls.Config)</span> <span class=\"params\">(net.Conn, error)</span></span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> net.DialTimeout(network, addr, _dialTimeout)</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了库<code>net/http2</code>，是Golang标准库中用于支持HTTP/2协议的包，它提供了HTTP/2客户端和服务器的实现，以及与HTTP/1.x的兼容性支持。</p>\n<p>从这里也就能看到实际上在gateway中的客户端请求的实例了，gateway通过它来请求到后端实际的服务。到这里还得看HTTP request是怎么转化到GRPC请求的。</p>\n<p>继续看Gateway怎么构建proxy的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">go</span>-kratos/gateway/cmd/gateway/main.<span class=\"keyword\">go</span></span><br><span class=\"line\">\tp.Update(bc)   根据配置路由信息，进行构建</span><br><span class=\"line\">\tbuildEndpoint</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Proxy)</span> <span class=\"title\">buildEndpoint</span><span class=\"params\">(e *config.Endpoint, ms []*config.Middleware)</span> <span class=\"params\">(http.Handler, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 生成实际访问的客户端实例</span></span><br><span class=\"line\">    tripper, err := p.clientFactory(e)</span><br><span class=\"line\">\t<span class=\"comment\">// 实例请求时增加拦截函数（公有的，log、trace、熔断器等）</span></span><br><span class=\"line\">\ttripper, err = p.buildMiddleware(e.Middlewares, tripper)</span><br><span class=\"line\">\t<span class=\"comment\">// 实例请求时增加拦截函数（私有，为这一路由独有的）</span></span><br><span class=\"line\">\ttripper, err = p.buildMiddleware(ms, tripper)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> http.Handler(http.HandlerFunc(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class=\"line\">\t\tstartTime := time.Now()</span><br><span class=\"line\">\t\tsetXFFHeader(req)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 把config信息带到每一个中间件函数中</span></span><br><span class=\"line\">\t\treqOpts := middleware.NewRequestOptions(e)</span><br><span class=\"line\">\t\tctx := middleware.NewRequestContext(req.Context(), reqOpts)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> resp *http.Response</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; retryStrategy.attempts; i++ &#123;</span><br><span class=\"line\">\t\t\t......</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 实际请求的地方，会从中间件一层一层请求到实际的client请求后端服务</span></span><br><span class=\"line\">\t\t\tresp, err = tripper.RoundTrip(req.Clone(tryCtx))</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">            ......</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tdoCopyBody := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">\t\t\t....</span><br><span class=\"line\">            </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tdoCopyBody()</span><br><span class=\"line\">\t\trequestsTotalIncr(labels, resp.StatusCode)</span><br><span class=\"line\">\t&#125;)), <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"请求协议转化\">请求—协议转化</span></h4>\n<p>实际请求时， 将进行协议中间件进行转化。</p>\n<p>协议转化在<a href=\"https://github.com/go-kratos/gateway/blob/main/middleware/transcoder/transcoder.go\" target=\"_blank\" rel=\"noopener\">go-kratos/gateway/middleware/transcoder/transcoder.go</a>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Middleware is a gRPC transcoder.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Middleware</span><span class=\"params\">(c *config.Middleware)</span> <span class=\"params\">(middleware.Middleware, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(next http.RoundTripper)</span> <span class=\"title\">http</span>.<span class=\"title\">RoundTripper</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> middleware.RoundTripperFunc(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(req *http.Request)</span> <span class=\"params\">(*http.Response, error)</span></span> &#123;</span><br><span class=\"line\">\t\t\tctx := req.Context()</span><br><span class=\"line\">\t\t\tcontentType := req.Header.Get(<span class=\"string\">\"Content-Type\"</span>)</span><br><span class=\"line\">            <span class=\"comment\">// 拿到配置信息</span></span><br><span class=\"line\">\t\t\tendpoint, _ := middleware.EndpointFromContext(ctx)</span><br><span class=\"line\">            <span class=\"comment\">// 该路由请求到的后端服务是否为GRPC，是或者其请求格式已经为GRPC，不需要进行下面转化操作</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> endpoint.Protocol != config.Protocol_GRPC || strings.HasPrefix(contentType, <span class=\"string\">\"application/grpc\"</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> next.RoundTrip(req)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tb, err := io.ReadAll(req.Body)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tbb := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"built_in\">len</span>(b)+<span class=\"number\">5</span>)</span><br><span class=\"line\">\t\t\tbinary.BigEndian.PutUint32(bb[<span class=\"number\">1</span>:], <span class=\"keyword\">uint32</span>(<span class=\"built_in\">len</span>(b)))</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">copy</span>(bb[<span class=\"number\">5</span>:], b)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// content-type:</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// - application/grpc+json</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// - application/grpc+proto</span></span><br><span class=\"line\">            <span class=\"comment\">// 将数据格式的定义进行转化</span></span><br><span class=\"line\">\t\t\treq.Header.Set(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/grpc+\"</span>+strings.TrimLeft(contentType, <span class=\"string\">\"application/\"</span>))</span><br><span class=\"line\">\t\t\treq.Header.Del(<span class=\"string\">\"Content-Length\"</span>)</span><br><span class=\"line\">\t\t\treq.ContentLength = <span class=\"keyword\">int64</span>(<span class=\"built_in\">len</span>(bb))</span><br><span class=\"line\">\t\t\treq.Body = ioutil.NopCloser(bytes.NewReader(bb))</span><br><span class=\"line\">\t\t\tresp, err := next.RoundTrip(req)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tdata, err := io.ReadAll(resp.Body)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Convert HTTP/2 response to HTTP/1.1</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Trailers are sent in a data frame, so don't announce trailers as otherwise downstream proxies might get confused.</span></span><br><span class=\"line\">            <span class=\"comment\">// HTTP trailers是HTTP消息的一部分，用于传输HTTP消息的元数据，例如消息的哈希值、压缩信息或长度等。</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> trailerName, values := <span class=\"keyword\">range</span> resp.Trailer &#123;</span><br><span class=\"line\">\t\t\t\tresp.Header[trailerName] = values</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tresp.Trailer = <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t\tresp.Header.Set(<span class=\"string\">\"Content-Type\"</span>, contentType)</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 不为0即异常。grpc-status转化为http code，错误详情：grpc-status-details-bin，grpc-message</span></span><br><span class=\"line\">            <span class=\"comment\">// grpc-status-details-bin是一个二进制元数据，它包含有关gRPC调用失败的更多详细信息，例如错误代码、错误消息和堆栈跟踪等。这些详细信息可以由gRPC客户端用于诊断和调试问题。</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// grpc-message是一个字符串元数据，其中包含有关gRPC调用失败的简要信息，例如错误消息。它通常用于向终端用户报告错误。</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 当gRPC调用失败时，gRPC服务器会将grpc-status-details-bin和grpc-message元数据作为响应的一部分发送回gRPC客户端。客户端可以访问这些元数据，以了解有关失败的更多信息，以及如何解决问题。</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> grpcStatus := resp.Header.Get(<span class=\"string\">\"grpc-status\"</span>); grpcStatus != <span class=\"string\">\"0\"</span> &#123;</span><br><span class=\"line\">\t\t\t\tcode, err := strconv.ParseInt(grpcStatus, <span class=\"number\">10</span>, <span class=\"number\">64</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tst := &amp;spb.Status&#123;</span><br><span class=\"line\">\t\t\t\t\tCode:    <span class=\"keyword\">int32</span>(code),</span><br><span class=\"line\">\t\t\t\t\tMessage: resp.Header.Get(<span class=\"string\">\"grpc-message\"</span>),</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> grpcDetails := resp.Header.Get(<span class=\"string\">\"grpc-status-details-bin\"</span>); grpcDetails != <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tdetails, err := decodeBinHeader(grpcDetails)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> err = proto.Unmarshal(details, st); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tdata, err := protojson.Marshal(st)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> newResponse(<span class=\"number\">200</span>, resp.Header, data)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// grpc返回数据前5个字节代表数据长度。</span></span><br><span class=\"line\">\t\t\tresp.Body = ioutil.NopCloser(bytes.NewReader(data[<span class=\"number\">5</span>:]))</span><br><span class=\"line\">\t\t\tresp.ContentLength = <span class=\"keyword\">int64</span>(<span class=\"built_in\">len</span>(data) - <span class=\"number\">5</span>)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Any content length that might be set is no longer accurate because of trailers.</span></span><br><span class=\"line\">            <span class=\"comment\">// 不再准确的原因是，HTTP/2的header是不体现在length，所以不能单纯的直接进行替换</span></span><br><span class=\"line\">\t\t\tresp.Header.Del(<span class=\"string\">\"Content-Length\"</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> resp, <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"总结\">总结</span></h3>\n<p>通过GRPC协议中为了兼容HTTP/1.1协议所给出传输格式<code>application/grpc+json</code>，使用<code>golang.org/x/net/http2</code>，通过修改HTTP请求头，可以做到使用HTTP访问到GRPC服务。以下是更简略的版本。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Test_defaultH2Client</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tcli := &amp;http.Client&#123;</span><br><span class=\"line\">\t\tCheckRedirect: defaultCheckRedirect,</span><br><span class=\"line\">\t\tTransport: &amp;http2.Transport&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// So http2.Transport doesn't complain the URL scheme isn't 'https'</span></span><br><span class=\"line\">\t\t\tAllowHTTP:          <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\tDisableCompression: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Pretend we are dialing a TLS endpoint.</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Note, we ignore the passed tls.Config</span></span><br><span class=\"line\">\t\t\tDialTLS: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(network, addr <span class=\"keyword\">string</span>, cfg *tls.Config)</span> <span class=\"params\">(net.Conn, error)</span></span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> net.DialTimeout(network, addr, _dialTimeout)</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tresp, err := cli.Post(<span class=\"string\">\"http://127.0.0.1:9000/helloworld.Greeter/SayHello\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"application/grpc+json\"</span>, strings.NewReader(<span class=\"string\">`&#123;\"hello\": \"2131\"&#125;`</span>))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(resp.Status)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"GRPC","slug":"GRPC","permalink":"chunlife.top/tags/GRPC/"}]},{"title":"自动mock grpc服务","date":"2023-04-01T09:51:27.000Z","path":"2023/04/01/自动mock-grpc服务/","content":"<p>众所周知，在编写GRPC服务应用时，需要获取相应的proto文件，生成server、client的打桩代码，借此即可访问服务，同时也能启动服务，但这里会有个问题，就是需要获取到对应的proto文件。我想直接知道对方的请求参数和返回参数，并由此来设定mock值，设定完成后，即可直接请求。</p>\n<p>基于以上的需要，进行相应的实现，即可得到所需的效果。</p>\n<a id=\"more\"></a>\n<h3><span id=\"动态获取proto\">动态获取proto</span></h3>\n<p>通过接口获取对应服务proto定义的能力，需要对方服务打开proto 反射。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s := grpc.NewServer()</span><br><span class=\"line\">pb.RegisterGreeterServer(s, &amp;server&#123;&#125;)</span><br><span class=\"line\">log.Printf(<span class=\"string\">\"server listening at %v\"</span>, lis.Addr())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Register reflection service on gRPC server.  \"google.golang.org/grpc/reflection\"</span></span><br><span class=\"line\">reflection.Register(s)</span><br></pre></td></tr></table></figure>\n<p><code>Register</code>其实是注册一个服务，里面就一个函数，可以拿到该proto的所有数据，如同在自己的项目中调用<code>reflection</code>库一般。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Register registers the server reflection service on the given gRPC server.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Register</span><span class=\"params\">(s GRPCServer)</span></span> &#123;</span><br><span class=\"line\">\tsvr := NewServer(ServerOptions&#123;Services: s&#125;)</span><br><span class=\"line\">\tv1alphagrpc.RegisterServerReflectionServer(s, svr)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"启动server\">启动server</span></h3>\n<p>启动一个可以接受任何请求的<code>GRPC</code>服务器，这里做一步如同<code>grpc proxy</code>的操作，不去注册固定的服务处理函数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s := grpc.NewServer(grpc.UnknownServiceHandler(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(srv <span class=\"keyword\">interface</span>&#123;&#125;, stream grpc.ServerStream)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取请求流的目的 Method 名称</span></span><br><span class=\"line\">\tfullMethodName, ok := grpc.MethodFromServerStream(stream)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> status.Errorf(codes.Internal, <span class=\"string\">\"failed to get method from server stream\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(fullMethodName)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 确定该服务是否已被注册，并找到准备好的返回值</span></span><br><span class=\"line\">\tresp, err := director(fullMethodName)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> status.Errorf(codes.InvalidArgument, <span class=\"string\">\"failed find string\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 然后将其发回去</span></span><br><span class=\"line\">\terr = stream.SendMsg(resp)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> status.Errorf(codes.Internal, <span class=\"string\">\"send msg error\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">err = s.Serve(listener)</span><br></pre></td></tr></table></figure>\n<h3><span id=\"使用\">使用</span></h3>\n<p>在前端界面上输入目标服务器的地址，获取到其接口和参数，然后填入mock值。</p>\n<p>新增的功能：</p>\n<ul>\n<li>自动生成参数，根据值类型；（像例如<code>yapi</code>）</li>\n<li>引入表达式，可以根据表达式对请求参数和返回值做一些灵活操作</li>\n<li>加入到注册中心，自动mock所有可被mock的服务</li>\n</ul>\n<h3><span id=\"参考\">参考</span></h3>\n<p><a href=\"https://github.com/fullstorydev/grpcurl\" target=\"_blank\" rel=\"noopener\">grpcurl</a></p>\n<p><a href=\"https://github.com/jhump/protoreflect\" target=\"_blank\" rel=\"noopener\">protoreflect</a></p>\n<p><a href=\"https://chai2010.cn/advanced-go-programming-book/ch4-rpc/ch4-08-grpcurl.html#48-grpcurl-%E5%B7%A5%E5%85%B7\" target=\"_blank\" rel=\"noopener\">grpcurl-工具</a></p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"GRPC","slug":"GRPC","permalink":"chunlife.top/tags/GRPC/"}]},{"title":"SECS/GEM协议学习","date":"2023-02-22T09:10:31.000Z","path":"2023/02/22/SECS-GEM协议学习/","content":"<h3><span id=\"开源\">开源</span></h3>\n<p>SECS/GEM 的库市面上是有开源软件可选的。例如：</p>\n<a id=\"more\"></a>\n<p>Python：</p>\n<p><a href=\"https://github.com/bparzella/secsgem\" target=\"_blank\" rel=\"noopener\">bparzella/secsgem</a></p>\n<p><a href=\"https://github.com/kenta-shimizu/pysemisecs\" target=\"_blank\" rel=\"noopener\">kenta-shimizu/pysemisecs</a></p>\n<p>C#：</p>\n<p><a href=\"https://github.com/mkjeff/secs4net\" target=\"_blank\" rel=\"noopener\">mkjeff/secs4net</a></p>\n<p>Java：</p>\n<p><a href=\"https://github.com/kenta-shimizu/secs4java8\" target=\"_blank\" rel=\"noopener\">kenta-shimizu/secs4java8</a></p>\n<h3><span id=\"资料\">资料</span></h3>\n<p>基础知识了解：</p>\n<p><a href=\"https://blog.csdn.net/jxb_memory/category_9885599.html\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/jxb_memory/category_9885599.html</a></p>\n<p>视频资料：</p>\n<p><a href=\"https://www.bilibili.com/video/BV1MU4y1v7hT/?spm_id_from=333.999.0.0&amp;vd_source=b670da3ecf6c8ddc9d65e67a875bde18\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV1MU4y1v7hT/?spm_id_from=333.999.0.0&amp;vd_source=b670da3ecf6c8ddc9d65e67a875bde18</a></p>\n<h3><span id=\"实践过程\">实践过程</span></h3>\n<p>对于新了解的协议还是比较好奇的，特别是Go中没有其实现。（工业软件中Go还是没有什么可以插足的）</p>\n<p>闲来无事，对基础协议进行一定量的开发，算是对协议的一个了解过程。其中，解析协议内容使用库<a href=\"https://github.com/wolimst/lib-secs2-hsms-go\" target=\"_blank\" rel=\"noopener\">wolimst/lib-secs2-hsms-go</a>。另外的操作就是对TCP连接的管理，以及针对协议中提到的几个Timeout时间，体现在协议中。在此基础就能实现大体协议的内容。</p>\n<p>ID间的联系：</p>\n<p><img src=\"image-20230227100537493.png\" alt=\"ID关系图示\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DeviceID(SessionID)：用于Host识别的设备号。</span><br><span class=\"line\"></span><br><span class=\"line\">CEID:event ID 即事件ID</span><br><span class=\"line\"></span><br><span class=\"line\">SVID:设备状态变量ID</span><br><span class=\"line\"></span><br><span class=\"line\">ECID:设备常量ID</span><br><span class=\"line\"></span><br><span class=\"line\">VID ：变量ID</span><br><span class=\"line\"></span><br><span class=\"line\">RPTID：report ID 即上报ID</span><br><span class=\"line\"></span><br><span class=\"line\">PPID：recipe ID 即配方ID（工艺ID）</span><br><span class=\"line\"></span><br><span class=\"line\">CHIPID：芯片ID</span><br></pre></td></tr></table></figure>\n<p>在实际做库的过程中，可以将各类数据都转化到一个层级进行管理，用各类map都搜集起来，这样数据的读和取都是统一对此层级负责的，也是只能从这层数据中拿到操作的，数据一致性也有所保证。</p>\n<hr>\n<p>至于Go中直接调用Python，或其他语言编成库等形式，应该也是可以尝试的。</p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"SECS/GEM","slug":"SECS-GEM","permalink":"chunlife.top/tags/SECS-GEM/"}]},{"title":"Golang oracle使用","date":"2022-10-27T07:05:38.000Z","path":"2022/10/27/Golang-oracle使用/","content":"<p>在<code>Go</code>语言中，对<code>Oracle</code>进行操作，比访问其他常见DB可谓是要麻烦一些，显而易见的问题是库的选择，这里我尝试了两种库：</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/sijms/go-ora\" target=\"_blank\" rel=\"noopener\">go-ora</a> + 官方库database/sql （<a href=\"http://github.com/jmoiron/sqlx%E3%80%81github.com/blockloop/scan\" target=\"_blank\" rel=\"noopener\">github.com/jmoiron/sqlx、github.com/blockloop/scan</a> 辅助）</p>\n</li>\n<li>\n<p><a href=\"https://github.com/mattn/go-oci8\" target=\"_blank\" rel=\"noopener\">go-oci8</a> + <a href=\"https://gitea.com/xorm/xorm\" target=\"_blank\" rel=\"noopener\">xorm</a></p>\n</li>\n</ul>\n<h2><span id=\"库的选择\">库的选择</span></h2>\n<p><code>go-ora</code>是原生Go实现的，不需要依赖CGo，相对比较方便，也比较易用，但在使用过程中，使用该库连接Oracle一段时间后，其会请求出错，我也对此提了<code>issue</code>，以及解决方法，但由于联系不上<code>maintainer</code>，所以无法确认解决方法是否靠谱了。</p>\n<p><a href=\"https://github.com/sijms/go-ora/issues/240\" target=\"_blank\" rel=\"noopener\">https://github.com/sijms/go-ora/issues/240</a></p>\n<blockquote>\n<p>也有人遇到了与我相似的问题，用我issue上提到的解决方式解决了该问题，但我依然不推荐这么操作。</p>\n</blockquote>\n<p><code>go-oci8</code>是使用了CGo实现了Oracle的客户端，虽然对环境有所依赖，好在库很稳定，不用担心出幺蛾子，且<code>xorm</code>实验性的支持，对只使用oracle基础功能来说，还是够用的。</p>\n<p>推荐使用下面这种。</p>\n<h2><span id=\"sql使用\">SQL使用</span></h2>\n<h3><span id=\"大小写\">大小写</span></h3>\n<p>在使用<code>oracle</code> Console时，输入表名、字段，不管大小写都可以识别。但其实这里有个误区。</p>\n<p><code>Oracle默认是大写的</code>，也就是说在没有使用双引号<code>&quot;</code>对表名和列名进行限定的时候，表名不过是小写还是大写，最后都默认成了大写。</p>\n<p>若是以<strong>双引号</strong>进行限定后，字段大小写就不再转化为默认的大写了。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> department (</span><br><span class=\"line\">     <span class=\"keyword\">id</span>           <span class=\"built_in\">NUMBER</span>(<span class=\"number\">10</span>)    <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">     DESCRIPTION  VARCHAR2(<span class=\"number\">50</span>)  <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>);</span><br></pre></td></tr></table></figure>\n<p>上面字段都会转化为大写，<code>DEPARTMENT</code>，<code>ID</code>，<code>DESCRIPTION</code>。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span> <span class=\"keyword\">FROM</span> department;     √</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">ID</span> <span class=\"keyword\">FROM</span> department;     √</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"string\">\"id\"</span> <span class=\"keyword\">FROM</span> department;   ×</span><br></pre></td></tr></table></figure>\n<p>明白上述所述后，使用<code>xorm</code>时需要注意的是。</p>\n<p>在使用xorm自动创建表时，其会根据你的注释的大小写，创建字段。这里就要区分一下了。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Info <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tType <span class=\"keyword\">int8</span> <span class=\"string\">`json:\"type,omitempty\" xorm:\"number(8) 'type'\"`</span></span><br><span class=\"line\">\tSn <span class=\"keyword\">string</span> <span class=\"string\">`json:\"sn,omitempty\" xorm:\"varchar2(64) 'sn'\"`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"时间\">时间</span></h3>\n<p>对时区的设置，这里是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER DATABASE SET TIME_ZONE=&apos;Asia/Shanghai&apos;;</span><br><span class=\"line\">ALTER SESSION SET TIME_ZONE =&apos;Asia/Shanghai&apos;;</span><br></pre></td></tr></table></figure>\n<p><code>update_time</code>、<code>created_time</code>常见的两个时间，保存时间戳是没有什么问题(<code>int64</code>)。但要保存time时间格式，估计会发现没法存进去。</p>\n<p><code>update_time</code>可以使用raw sql：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE xxxx SET &quot;max_id&quot;=&quot;max_id&quot; + &quot;step&quot;, &quot;update_time&quot; = TO_TIMESTAMP(&apos;%s&apos;, &apos;YYYY-MM-DD HH24:MI:SS.FF6&apos;) WHERE &quot;biz_tag&quot;=&apos;123&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">时间传入：time.Unix(time.Now().Unix(), 0).Format(&quot;2006-01-02 15:04:05.0000&quot;)</span><br></pre></td></tr></table></figure>\n<hr>\n<p><code>created_time</code> ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE &quot;xxxxxx&quot;(</span><br><span class=\"line\">    &quot;id&quot; NUMBER DEFAULT 1,</span><br><span class=\"line\">    &quot;created_time&quot; TIMESTAMP WITH LOCAL TIME ZONE DEFAULT CURRENT_TIMESTAMP,</span><br><span class=\"line\"></span><br><span class=\"line\">    PRIMARY KEY(&quot;id&quot;)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type xxxxx struct &#123;</span><br><span class=\"line\">\tCreatedTime      time.Time `json:&quot;created_time,omitempty&quot; xorm:&quot;TIMESTAMP(6) WITH LOCAL TIME ZONE default CURRENT_TIMESTAMP &apos;created_time&apos;&quot;` // 记录创建时间</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"主键\">主键</span></h3>\n<p>12版本以前没法像<code>MySQL</code>一样生成自增主键，需要一些曲线救国的方式。</p>\n<p>使用<code>SYS_GUID()</code>，系统根据当前时间和机器码，生成全球唯一的一个序列号。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE department (</span><br><span class=\"line\">     ID       varchar2(50)     default SYS_GUID() not null primary key,</span><br><span class=\"line\">     DESCRIPTION  VARCHAR2(50)  NOT NULL);</span><br></pre></td></tr></table></figure>\n<p>自增ID的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Oracle 12c之前：</span><br><span class=\"line\">-- 表定义</span><br><span class=\"line\">CREATE TABLE departments (</span><br><span class=\"line\">     ID           NUMBER(10)    NOT NULL,</span><br><span class=\"line\">     DESCRIPTION  VARCHAR2(50)  NOT NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER TABLE departments ADD (</span><br><span class=\"line\">    CONSTRAINT dept_pk PRIMARY KEY (ID));</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE SEQUENCE dept_seq START WITH 1;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 触发器定义</span><br><span class=\"line\">CREATE OR REPLACE TRIGGER dept_bir</span><br><span class=\"line\">    BEFORE INSERT ON departments</span><br><span class=\"line\">    FOR EACH ROW</span><br><span class=\"line\"></span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">    SELECT dept_seq.NEXTVAL</span><br><span class=\"line\">    INTO   :new.id</span><br><span class=\"line\">    FROM   dual;</span><br><span class=\"line\">END;</span><br><span class=\"line\"></span><br><span class=\"line\">12c：</span><br><span class=\"line\">CREATE TABLE MAPS</span><br><span class=\"line\">(</span><br><span class=\"line\">  MAP_ID INTEGER GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,</span><br><span class=\"line\">  MAP_NAME VARCHAR(24) NOT NULL,</span><br><span class=\"line\">  UNIQUE (MAP_ID, MAP_NAME)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"DB","slug":"DB","permalink":"chunlife.top/categories/DB/"}],"tags":[{"name":"oracle","slug":"oracle","permalink":"chunlife.top/tags/oracle/"}]},{"title":"Yapi的安装以及使用","date":"2022-07-21T06:05:32.000Z","path":"2022/07/21/Yapi的安装以及使用/","content":"<p>内网部署可综合管理并利于测试的工具——<code>Yapi</code>。</p>\n<p>在使用上，官方文档已经很清晰了，<a href=\"https://hellosean1025.github.io/yapi/documents/index.html\" target=\"_blank\" rel=\"noopener\">文档</a>。</p>\n<p>文章主要功夫是写一下安装环节遇到的问题，主要是项目年久失修，而各路环境又是突飞猛进的进行改变，所以造成其有兼容性问题。</p>\n<h3><span id=\"容器环境\">容器环境</span></h3>\n<p>docker部署<code>yapi</code>是极其方便易用的。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 账号：admin@docker.yapi</span></span><br><span class=\"line\"><span class=\"comment\"># 密码：adm1n</span></span><br><span class=\"line\">version: <span class=\"string\">'3'</span></span><br><span class=\"line\">services:</span><br><span class=\"line\">  yapi-web:</span><br><span class=\"line\">    image: jayfong/yapi:<span class=\"number\">1.10</span>.<span class=\"number\">2</span></span><br><span class=\"line\">    container_name: yapi-web</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - <span class=\"number\">40001</span>:<span class=\"number\">3000</span></span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - YAPI_ADMIN_ACCOUNT=admin@docker.yapi</span><br><span class=\"line\">      - YAPI_ADMIN_PASSWORD=adm1n</span><br><span class=\"line\">      - YAPI_CLOSE_REGISTER=true</span><br><span class=\"line\">      - YAPI_DB_SERVERNAME=yapi-mongo</span><br><span class=\"line\">      - YAPI_DB_PORT=<span class=\"number\">27017</span></span><br><span class=\"line\">      - YAPI_DB_DATABASE=yapi</span><br><span class=\"line\">      - YAPI_MAIL_ENABLE=false</span><br><span class=\"line\">      - YAPI_LDAP_LOGIN_ENABLE=false</span><br><span class=\"line\">      - YAPI_PLUGINS=[&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"interface-oauth2-token\"</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"add-user\"</span>&#125;]</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - yapi-mongo</span><br><span class=\"line\">    links:</span><br><span class=\"line\">      - yapi-mongo</span><br><span class=\"line\">    restart: unless-stopped</span><br><span class=\"line\">  yapi-mongo:</span><br><span class=\"line\">    image: mongo:<span class=\"number\">4.4</span>.<span class=\"number\">4</span></span><br><span class=\"line\">    container_name: yapi-mongo</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./data/db:/data/db</span><br><span class=\"line\">    <span class=\"keyword\">expose</span>:</span><br><span class=\"line\">      - <span class=\"number\">27017</span></span><br><span class=\"line\">    restart: unless-stopped</span><br></pre></td></tr></table></figure>\n<p>但这里面会碰到一个问题，在使用mock测试集的时候会碰到<code>safeify</code>引发的<code>Error: EROFS: read-only file system</code>问题，跟着<a href=\"https://github.com/YMFE/yapi/issues/2376\" target=\"_blank\" rel=\"noopener\">#2376</a>修改完成之后，使用<code>assert</code>依然会碰到<code>Error: Method Promise.prototype.then called on incompatible receiver [object Object]</code>。</p>\n<p>该问题也被记录在<a href=\"https://github.com/YMFE/yapi/issues/2536\" target=\"_blank\" rel=\"noopener\">#2536</a>。</p>\n<p>解决方法当时未找到，这里就没有深究了。</p>\n<h3><span id=\"本地部署\">本地部署</span></h3>\n<p>环境要求：</p>\n<blockquote>\n<p>Node.js（7.6+)</p>\n<p>MongoDB（2.6+）</p>\n</blockquote>\n<p>当前node版本太高，<code>Yapi</code>需要一个低版本的<code>node</code>。</p>\n<p>参考：<a href=\"https://jingyan.baidu.com/article/b2c186c86754afc46ef6ff04.html\" target=\"_blank\" rel=\"noopener\">怎么在Ubuntu中更新node的版本</a>，安装工具n。使用工具n，指定版本安装，我这里安装的是12.16.3。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo n 12.16.3</span><br></pre></td></tr></table></figure>\n<p>参考<a href=\"https://hellosean1025.github.io/yapi/devops/index.html#%e5%ae%89%e8%a3%85\" target=\"_blank\" rel=\"noopener\">官方安装文档</a>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir yapi</span><br><span class=\"line\">cd yapi</span><br><span class=\"line\">git clone https://github.com/YMFE/yapi.git vendors //或者下载 zip 包解压到 vendors 目录（clone 整个仓库大概 140+ M，可以通过 `git clone --depth=1 https://github.com/YMFE/yapi.git vendors` 命令减少，大概 10+ M）</span><br><span class=\"line\"></span><br><span class=\"line\">cp vendors/config_example.json ./config.json //复制完成后请修改相关配置</span><br><span class=\"line\"></span><br><span class=\"line\">cd vendors</span><br><span class=\"line\">npm install --production --registry https://registry.npm.taobao.org</span><br><span class=\"line\">npm run install-server //安装程序会初始化数据库索引和管理员账号，管理员账号名可在 config.json 配置</span><br><span class=\"line\">node server/app.js //启动服务器后，请访问 127.0.0.1:&#123;config.json配置的端口&#125;，初次运行会有个编译的过程，请耐心等候</span><br></pre></td></tr></table></figure>\n<p><code>config.json</code>中设置<code>MongoDB</code>的用户，需要MongoDB开启<code>auth</code>。</p>\n<blockquote>\n<p>注意，config.json的引用是在文件<code>server/yapi.js</code>中。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mongo:latest</span><br><span class=\"line\">docker run -itd --name mongo -p 27017:27017 mongo --auth</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -it mongo mongo admin</span><br><span class=\"line\"></span><br><span class=\"line\">//进入admin。如果没有admin库，会自动创建admin库</span><br><span class=\"line\">user admin</span><br><span class=\"line\"></span><br><span class=\"line\">//创建一个新账号 权限root</span><br><span class=\"line\">db.createUser(&#123;user:&quot;test1&quot;,pwd:&quot;test1&quot;,roles:[&quot;root&quot;]&#125;)</span><br><span class=\"line\">//创建一个新账号 用户名test1 密码test1 权限dbOwner 只能访问yapi数据库</span><br><span class=\"line\">db.createUser(&#123;user:&quot;test1&quot;,pwd:&quot;test1&quot;,roles:[&#123;role:&apos;dbOwner&apos;,db:&apos;yapi&apos;&#125;]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//账号授权：用户名 密码。 回车，返回1，认证成功。</span><br><span class=\"line\">db.auth(&quot;test1&quot;,&quot;test1&quot;)</span><br></pre></td></tr></table></figure>\n<p><code>config.json</code>中DB的设置：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"db\": &#123;                                                                                                                                               </span><br><span class=\"line\">  \"servername\": \"127.0.0.1\",                                                                                                                          </span><br><span class=\"line\">  \"DATABASE\": \"yapi\",                                                                                                                                 </span><br><span class=\"line\">  \"port\": 27017,                                                                                                                                      </span><br><span class=\"line\">  \"user\": \"test1\",                                                                                                                                    </span><br><span class=\"line\">  \"pass\": \"test1\",                                                                                                                                    </span><br><span class=\"line\">  \"authSource\": \"\"  // 若是为空验证失败，则填入admin试试                                                                                                                            </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所有新建完成后，<code>mock</code>会遇到新问题。</p>\n<p><code>UnhandledPromiseRejectionWarning: TypeError: Converting circular structure to JSON</code></p>\n<p>需要改动，<code>vendors/server/utils/sandbox.js</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Safeify = <span class=\"built_in\">require</span>(<span class=\"string\">'safeify'</span>).default;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sandboxFn</span>(<span class=\"params\">context, script</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建 safeify 实例</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> safeVm = <span class=\"keyword\">new</span> Safeify(&#123;</span><br><span class=\"line\">        timeout: <span class=\"number\">3000</span>,</span><br><span class=\"line\">        asyncTimeout: <span class=\"number\">60000</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 修复断言错误</span></span><br><span class=\"line\">        unrestricted: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        unsafe: &#123;</span><br><span class=\"line\">            modules: &#123;</span><br><span class=\"line\">                assert: <span class=\"string\">'assert'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    safeVm.preset(<span class=\"string\">'const assert= require(\"assert\");'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解决 https://github.com/YMFE/yapi/issues/2543, https://github.com/YMFE/yapi/issues/2357</span></span><br><span class=\"line\">    script += <span class=\"string\">`; return &#123;</span></span><br><span class=\"line\"><span class=\"string\">        Function: this.Function,</span></span><br><span class=\"line\"><span class=\"string\">        eval: this.eval,</span></span><br><span class=\"line\"><span class=\"string\">        header: this.header,</span></span><br><span class=\"line\"><span class=\"string\">        query: this.query,</span></span><br><span class=\"line\"><span class=\"string\">        body: this.body,</span></span><br><span class=\"line\"><span class=\"string\">        mockJson: this.mockJson,</span></span><br><span class=\"line\"><span class=\"string\">        params: this.params,</span></span><br><span class=\"line\"><span class=\"string\">        resHeader: this.resHeader,</span></span><br><span class=\"line\"><span class=\"string\">        httpCode: this.httpCode,</span></span><br><span class=\"line\"><span class=\"string\">        delay: this.delay,</span></span><br><span class=\"line\"><span class=\"string\">        Random: this.Random,</span></span><br><span class=\"line\"><span class=\"string\">        cookie: this.cookie</span></span><br><span class=\"line\"><span class=\"string\">    &#125;`</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 执行动态代码</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> safeVm.run(script, context)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放资源</span></span><br><span class=\"line\">    safeVm.destroy()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"开启ldap\">开启LDAP</span></h3>\n<p>开启之后即可接通公司的账户体系。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"ldapLogin\": &#123;                                                                                                                                           </span><br><span class=\"line\">      \"enable\": true,                                                                                                                                    </span><br><span class=\"line\">      \"server\": \"ldap://xxxxxx:389\",                                                                                                                 </span><br><span class=\"line\">      \"baseDn\": \"xxxx.xx\",    // 账户体系中的用户名                                                                                                                    </span><br><span class=\"line\">      \"bindPassword\": \"xxxxx\",                                                                                                                        </span><br><span class=\"line\">      \"searchDn\": \"DC=xxxx,DC=xxxx\",                                                                                                               </span><br><span class=\"line\">      \"searchStandard\": \"&amp;(objectClass=user)(sAMAccountName=%s)\",                                                                                        </span><br><span class=\"line\">      \"emailPostfix\": \"@xxxxxx.com\",                                                                                                                    </span><br><span class=\"line\">      \"emailKey\": \"userPrincipalName\",                                                                                                                   </span><br><span class=\"line\">      \"usernameKey\": \"cn\"                                                                                                                                </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"devops","slug":"devops","permalink":"chunlife.top/categories/devops/"}],"tags":[{"name":"yapi","slug":"yapi","permalink":"chunlife.top/tags/yapi/"}]},{"title":"MySQL 实战45讲 学习笔记","date":"2022-06-24T03:07:59.000Z","path":"2022/06/24/MySQL-实战45讲-学习笔记/","content":"<p>MySQL是Coder必备知识，最近我也是趁着自己有时间，看过一遍网络知识后，再回过头来看下MySQL，看MySQL的时候用到了Margin Note3，确实挺好用的，推荐学习时使用，电脑端使用book xnote。我会把思维导图丢到网页上来，也是方便我使用电脑查看。</p>\n<p>MySQL学习推荐课程：<a href=\"https://time.geekbang.org/column/intro/139?tab=catalog\" target=\"_blank\" rel=\"noopener\">MySQL 实战 45 讲</a></p>\n<a id=\"more\"></a>\n\n\n\t<div class=\"row\">\n    <embed src=\"MySQL 学习笔记_withMarginNotes.pdf\" width=\"100%\" height=\"550\" type=\"application/pdf\">\n\t</div>\n\n\n\n<hr>\n<h3><span id=\"问题手记\">问题手记</span></h3>\n<h4><span id=\"1-事务隔离级别引申出来的可见性问题若记录都未存在无行锁并发插入时无法按照预期进行更新\">1、事务隔离级别引申出来的可见性问题，若记录都未存在，无行锁，并发插入时无法按照预期进行更新；</span></h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`like`</span> (</span><br><span class=\"line\">  <span class=\"string\">`id`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  <span class=\"string\">`user_id`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`liker_id`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">KEY</span> <span class=\"string\">`uk_user_id_liker_id`</span> (<span class=\"string\">`user_id`</span>,<span class=\"string\">`liker_id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`friend`</span> (</span><br><span class=\"line\">  <span class=\"keyword\">id</span><span class=\"string\">` int(11) NOT NULL AUTO_INCREMENT,</span></span><br><span class=\"line\"><span class=\"string\">  `</span>friend_1_id<span class=\"string\">` int(11) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">  `</span>firned_2_id<span class=\"string\">` int(11) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">  UNIQUE KEY `</span>uk_friend<span class=\"string\">` (`</span>friend_1_id<span class=\"string\">`,`</span>firned_2_id<span class=\"string\">`)</span></span><br><span class=\"line\"><span class=\"string\">  PRIMARY KEY (`</span><span class=\"keyword\">id</span><span class=\"string\">`)</span></span><br><span class=\"line\"><span class=\"string\">) ENGINE=InnoDB;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>业务上有这样的需求，A、B两个用户，如果互相关注，则成为好友。设计上是有两张表，一个是like表，一个是friend表，like表有user_id、liker_id两个字段，我设置为复合唯一索引即uk_user_id_liker_id。语句执行逻辑是这样的：</p>\n</blockquote>\n<blockquote>\n<p>以A关注B为例：<br>\n第一步，先查询对方有没有关注自己（B有没有关注A）<br>\nselect * from like where user_id = B and liker_id = A;</p>\n</blockquote>\n<blockquote>\n<p>如果有，则成为好友<br>\ninsert into friend;</p>\n</blockquote>\n<blockquote>\n<p>没有，则只是单向关注关系<br>\ninsert into like;</p>\n</blockquote>\n<blockquote>\n<p>但是<strong>如果A、B同时关注对方</strong>，会出现不会成为好友的情况。因为上面第1步，双方都没关注对方。第1步即使使用了排他锁也不行，因为记录不存在，行锁无法生效。请问这种情况，在MySQL锁层面有没有办法处理？</p>\n</blockquote>\n<p>如图：</p>\n<img src=\"c45063baf1ae521bf5d98b6d7c0e0ced.png\" alt=\"并发“喜欢”逻辑操作顺序\" style=\"zoom: 50%;\">\n<p>A、B之间没有关注关系（没有记录），事务开始时，查询为空。</p>\n<p>对业务来说，双方已经互点关注了，已经不是<code>喜欢</code>了，而是需要在<code>friend</code>表中插入记录。</p>\n<p>如图示中，在进行查询时，选择的数据加上行锁也没啥用，毕竟在查询的时候数据都还不存在。</p>\n<p>首先，要给“like”表增加一个字段，比如叫作 relation_ship，并设为整型，取值1、2、3。</p>\n<blockquote>\n<p>值是1的时候，表示user_id 关注 liker_id;    0b01<br>\n值是2的时候，表示liker_id 关注 user_id;    0b10<br>\n值是3的时候，表示互相关注。                     0b11</p>\n</blockquote>\n<p>然后，当 A关注B的时候，逻辑改成如下所示的样子：</p>\n<p>应用代码里面，比较A和B的大小，如果A&lt;B，就执行下面的逻辑</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; begin; /*启动事务*/</span><br><span class=\"line\">insert into `like`(user_id, liker_id, relation_ship) values(A, B, 1) on duplicate key update relation_ship=relation_ship | 1;</span><br><span class=\"line\">select relation_ship from `like` where user_id=A and liker_id=B;</span><br><span class=\"line\">/*代码中判断返回的 relation_ship，</span><br><span class=\"line\">  如果是1，事务结束，执行 commit</span><br><span class=\"line\">  如果是3，则执行下面这两个语句：</span><br><span class=\"line\">  */</span><br><span class=\"line\">insert ignore into friend(friend_1_id, friend_2_id) values(A,B);</span><br><span class=\"line\">commit;</span><br></pre></td></tr></table></figure>\n<p>如果A&gt;B，则执行下面的逻辑</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; begin; /*启动事务*/</span><br><span class=\"line\">insert into `like`(user_id, liker_id, relation_ship) values(B, A, 2) on duplicate key update relation_ship=relation_ship | 2;</span><br><span class=\"line\">select relation_ship from `like` where user_id=B and liker_id=A;</span><br><span class=\"line\">/*代码中判断返回的 relation_ship，</span><br><span class=\"line\">  如果是2，事务结束，执行 commit</span><br><span class=\"line\">  如果是3，则执行下面这两个语句：</span><br><span class=\"line\">*/</span><br><span class=\"line\">insert ignore into friend(friend_1_id, friend_2_id) values(B,A);</span><br><span class=\"line\">commit;</span><br></pre></td></tr></table></figure>\n<p>这个设计里，让“like”表里的数据保证user_id &lt; liker_id，这样不论是A关注B，还是B关注A，在操作“like”表的时候，如果反向的关系已经存在，就会出现行锁冲突。</p>\n<blockquote>\n<p>把正反向的数据都转化到一行记录里面，而不是分开（通过A、B UserID的大小）</p>\n</blockquote>\n<p>然后，insert … on duplicate语句，确保了在事务内部，执行了这个SQL语句后，就强行占住了这个行锁，之后的select 判断relation_ship这个逻辑时就确保了是在行锁保护下的读操作。</p>\n<blockquote>\n<p>事务在执行第一条语句时开启，开启后，碰到<code>insert … on duplicate语句</code>（先判断记录是否存在，存在即update，不存在即insert）,修改语句，占用该行锁直到事务结束。（占不住则意味着要等待别人把该记录的行锁释放，也就是另外的事务结束）</p>\n</blockquote>\n<p>操作符 “|” 是按位或，连同最后一句insert语句里的ignore，是为了保证重复调用时的幂等性。</p>\n<blockquote>\n<p>insert ignore into，重复则忽略，不重复则插入。（重复时只是报警，不会报错）</p>\n</blockquote>\n<p>这样，即使在双方“同时”执行关注操作，最终数据库里的结果，也是like表里面有一条关于A和B的记录，而且relation_ship的值是3， 并且friend表里面也有了A和B的这条记录。</p>\n<hr>\n<p>这里的问题就是事务隔离引申出来的问题，“可见性”。当数据都还未出现呢，此时不管是<code>当前读</code>，还是<code>快照读</code>都得眼瞎。</p>\n<p>解决此问题，依然还是用到了行锁，精妙的地方是，利用了<code>insert … on duplicate</code>语句，创建与更新同时存在，后面的查询语句去<strong>更新验证结果</strong>，由于两阶段锁协议，所以查询语句也是带锁的。</p>\n","categories":[{"name":"DB","slug":"DB","permalink":"chunlife.top/categories/DB/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"chunlife.top/tags/MySQL/"}]},{"title":"go-kratos写代码浅记","date":"2022-06-16T08:08:08.000Z","path":"2022/06/16/go-kratos写代码浅记/","content":"<p>使用Kratos进行代码的开发，对一些简单功能进行简单的记录。</p>\n<a id=\"more\"></a>\n<h3><span id=\"jwt验证\">JWT验证</span></h3>\n<p>拦截中间件以及验证JWT Token，过滤掉不验证的URL。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewWhiteListMatcher</span><span class=\"params\">()</span> <span class=\"title\">selector</span>.<span class=\"title\">MatchFunc</span></span> &#123;</span><br><span class=\"line\">\twhiteList := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">struct</span>&#123;&#125;)</span><br><span class=\"line\">\twhiteList[<span class=\"string\">\"/xxx.v1.xxxxService/Login\"</span>] = <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx context.Context, operation <span class=\"keyword\">string</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> _, ok := whiteList[operation]; ok &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http.Middleware(</span><br><span class=\"line\">    selector.Server(</span><br><span class=\"line\">        recovery.Recovery(),</span><br><span class=\"line\">\t\tratelimit.Server(),</span><br><span class=\"line\">        jwt.Server(</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(token *jwt4.Token)</span> <span class=\"params\">(<span class=\"keyword\">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> []<span class=\"keyword\">byte</span>(auth.ApiKey), <span class=\"literal\">nil</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            jwt.WithSigningMethod(jwt4.SigningMethodHS256), <span class=\"comment\">// 设置加密算法</span></span><br><span class=\"line\">            jwt.WithClaims(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">jwt4</span>.<span class=\"title\">Claims</span></span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> &amp;jwt4.MapClaims&#123;&#125;</span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        jwtverify.Server(c),</span><br><span class=\"line\">    ).Match(NewWhiteListMatcher()).Build(),</span><br><span class=\"line\">),</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jwtverify.Server(c) 用来拦截解析出来的jwt，以作验证</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> JwtUser <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tUID <span class=\"keyword\">int64</span> <span class=\"string\">`json:\"uid\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Server</span><span class=\"params\">(config *conf.Server)</span> <span class=\"title\">middleware</span>.<span class=\"title\">Middleware</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(handler middleware.Handler)</span> <span class=\"title\">middleware</span>.<span class=\"title\">Handler</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx context.Context, req <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(<span class=\"keyword\">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tuser := JwtUser&#123;&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> claims, ok := jwt.FromContext(ctx); ok &#123;</span><br><span class=\"line\">\t\t\t\tarr, _ := json.Marshal(claims)</span><br><span class=\"line\">\t\t\t\tjson.Unmarshal(arr, &amp;user)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> user.UID == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.Unauthorized(<span class=\"string\">\"\"</span>, <span class=\"string\">\"jwt get user failed\"</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> handler(ctx, req)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/////////////////////////////////////////////////////////////////</span></span><br></pre></td></tr></table></figure>\n<p>Login生成token：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// generate token</span></span><br><span class=\"line\">claims := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims&#123;</span><br><span class=\"line\">    <span class=\"string\">\"uid\"</span>: user.Id,</span><br><span class=\"line\">    <span class=\"string\">\"exp\"</span>: time.Now().Unix() + <span class=\"number\">60</span>*<span class=\"number\">60</span>*<span class=\"number\">24</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">token, err := claims.SignedString([]<span class=\"keyword\">byte</span>(uc.key))</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>生成的token，前端放在<code>Header</code>的<code>Authorization</code>中。经过<code>jwt</code>中间件的解析，然后再经过我们写的中间件加上我们自己的验证方式，例如验证参数逻辑。</p>\n<h3><span id=\"中间件的执行顺序\">中间件的执行顺序</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.Middleware(</span><br><span class=\"line\">\t\t\tmiddleware,</span><br><span class=\"line\">\t\t\tmiddleware2,</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sayHelloHandler</span><span class=\"params\">(ctx http.Context)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t......</span><br><span class=\"line\">    </span><br><span class=\"line\">\thttp.SetOperation(ctx, <span class=\"string\">\"/helloworld.Greeter/SayHello\"</span>)</span><br><span class=\"line\">\th := ctx.Middleware(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx context.Context, req <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(<span class=\"keyword\">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"sayHelloHandler in\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &amp;helloworld.HelloReply&#123;Message: req.(*helloworld.HelloRequest).Name&#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\terr := ctx.Returns(h(ctx, &amp;in))</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"sayHelloHandler out\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//middleware in</span></span><br><span class=\"line\"><span class=\"comment\">//middleware 2 in</span></span><br><span class=\"line\"><span class=\"comment\">//sayHelloHandler in </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//middleware 2 out</span></span><br><span class=\"line\"><span class=\"comment\">//middleware out</span></span><br><span class=\"line\"><span class=\"comment\">//sayHelloHandler out</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理函数不使用上述格式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">uploadFile</span><span class=\"params\">(ctx http.Context)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"service uploadFile in\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用此格式，将无法使用http.Middleware中间件，因为其没有调用ctx.Middleware，也就没法链接插件。</span></span><br><span class=\"line\"><span class=\"comment\">// 同理，其他HTTP框架如gin，echo等均需满足此格式。</span></span><br></pre></td></tr></table></figure>\n<p>综上，我们自己写的代码要使用<code>Server Middleware</code>，需要按照上面的格式进行编写。</p>\n<p>另外还有很多插件形式：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">httpSrv := http.NewServer(</span><br><span class=\"line\">    http.Address(<span class=\"string\">\":8001\"</span>),</span><br><span class=\"line\">    http.Middleware(</span><br><span class=\"line\">        <span class=\"comment\">// add service filter</span></span><br><span class=\"line\">        serviceMiddleware,</span><br><span class=\"line\">        serviceMiddleware2,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"comment\">// add global filter</span></span><br><span class=\"line\">    http.Filter(globalFilter, globalFilter2),</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// register http hanlder to http server</span></span><br><span class=\"line\">helloworld.RegisterGreeterHTTPServer(httpSrv, s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// add route filter</span></span><br><span class=\"line\">r := httpSrv.Route(<span class=\"string\">\"/\"</span>, routeFilter, routeFilter2)</span><br><span class=\"line\"><span class=\"comment\">// add path filter to custom route</span></span><br><span class=\"line\">r.GET(<span class=\"string\">\"/hello/&#123;name&#125;\"</span>, sayHelloHandler, pathFilter, pathFilter2)</span><br></pre></td></tr></table></figure>\n<p>执行顺序为：<code>globalFilter(http)</code> --&gt; <code>routeFilter(http)</code> --&gt; <code>pathFilter(http)</code> --&gt; <code>serviceFilter(service)</code></p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"go-kratos","slug":"go-kratos","permalink":"chunlife.top/tags/go-kratos/"},{"name":"http","slug":"http","permalink":"chunlife.top/tags/http/"}]},{"title":"proto管理之submodule","date":"2022-05-09T09:02:40.000Z","path":"2022/05/09/proto管理之submodule/","content":"<p>使用Git Submodule方式管理proto文件，各项目直接依赖IDL文件本身，依赖源头均来自git子仓，保证依赖源的唯一性。对齐各服务间的proto文件版本。</p>\n<p>依赖问题引发的问题是很多的，对于依赖的管理也会出现很多，例如：</p>\n<blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/Dependency_hell\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Dependency_hell</a></p>\n<p><a href=\"https://zh.m.wikipedia.org/zh-hans/%E7%9B%B8%E4%BE%9D%E6%80%A7%E5%9C%B0%E7%8B%B1\" target=\"_blank\" rel=\"noopener\">https://zh.m.wikipedia.org/zh-hans/%E7%9B%B8%E4%BE%9D%E6%80%A7%E5%9C%B0%E7%8B%B1</a></p>\n</blockquote>\n<h2><span id=\"子仓目录\">子仓目录</span></h2>\n<p>参考Google家的库<a href=\"https://github.com/googleapis/googleapis\" target=\"_blank\" rel=\"noopener\">googleapis</a>：</p>\n<table>\n<thead>\n<tr>\n<th>目录</th>\n<th>举栗</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>总目录（子仓）</td>\n<td>xxxxxapis</td>\n</tr>\n<tr>\n<td>项目名</td>\n<td>cloud / ads / monitor</td>\n</tr>\n<tr>\n<td>模块名</td>\n<td>device / datacatalog / user</td>\n</tr>\n<tr>\n<td>版本</td>\n<td>v1 /  v2  /  v3</td>\n</tr>\n<tr>\n<td>文件</td>\n<td>service.proto、error.proto</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>子仓不保存IDL文件生成的中间文件，只保存原始文件。</p>\n</blockquote>\n<h2><span id=\"项目引入\">项目引入</span></h2>\n<ul>\n<li>引入子仓</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add https://xxxx.com/xxxx/myapis</span><br></pre></td></tr></table></figure>\n<p>子仓在引入后，不去更新，子仓会呈现固定的版本。</p>\n<img src=\"image-20220510094907212.png\" alt=\"目录结构\" style=\"zoom: 80%;\">\n<p>更新子仓，合并上游版本变化</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 进入子仓内，运行命令</span><br><span class=\"line\">$ git fetch</span><br><span class=\"line\">$ git merge origin/master</span><br><span class=\"line\"></span><br><span class=\"line\">// 也可以在主仓中，运行命令</span><br><span class=\"line\">$ git submodule update --remote myapis</span><br></pre></td></tr></table></figure>\n<p>更多关于子仓的操作命令，参考：<a href=\"https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97\" target=\"_blank\" rel=\"noopener\">Git-工具-子模块</a>，也可参考下图。</p>\n<p>脑图分享链接：<a href=\"https://naotu.baidu.com/file/df1c4f51d9617121e17b31ba6e577d3a?token=280c1c34c3b920e4\" target=\"_blank\" rel=\"noopener\">https://naotu.baidu.com/file/df1c4f51d9617121e17b31ba6e577d3a?token=280c1c34c3b920e4</a></p>\n<img src=\"Git-Sub子仓.png\" alt=\"Git-Sub子仓\" style=\"zoom:80%;\">\n<h2><span id=\"proto文件\">proto文件</span></h2>\n<p>proto文件中，<code>package</code>、<code>option go_package</code>，这两个参数是我们需要注意的：</p>\n<p><code>package</code>：即别的proto文件在引用该文件后，其使用的索引前缀。</p>\n<p><code>option go_package</code>： protoc 编译时，生成的路径地址，可以用go_out设置生成的路径，使用<code>source_relative</code>让文件生成在相对路径中。</p>\n<p>proto文件语法以及版本追踪工具：</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/bufbuild/buf\" target=\"_blank\" rel=\"noopener\">buf</a> 推荐</p>\n</li>\n<li>\n<p><a href=\"https://github.com/nilslice/protolock\" target=\"_blank\" rel=\"noopener\">protolock</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/googleapis/api-linter\" target=\"_blank\" rel=\"noopener\">api-linter</a></p>\n</li>\n</ul>\n<h2><span id=\"编译\">编译</span></h2>\n<p>由于依赖原始文件，在拉取到子仓后，或是更新到最新子仓后，proto文件都应是再次编译，故在<code>Makefile</code>中，<code>build</code>命令中，需要加入重新编译proto文件的操作，让proto文件每次都保持最新状态，防止中间版本的出现。</p>\n<blockquote>\n<p>也可以使用例如<em>BAZEL</em>编译，声名依赖，指定proto文件。</p>\n</blockquote>\n<h2><span id=\"实践例子\">实践例子</span></h2>\n<p>案例：<a href=\"https://github.com/younglifestyle/kratos-layout\" target=\"_blank\" rel=\"noopener\">kratos-layout</a></p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Protobuff","slug":"Protobuff","permalink":"chunlife.top/tags/Protobuff/"},{"name":"submodule","slug":"submodule","permalink":"chunlife.top/tags/submodule/"}]},{"title":"go-kratos HTTP方法支持以及FieldMask的使用简介","date":"2022-05-06T08:49:03.000Z","path":"2022/05/06/go-kratos-HTTP方法支持以及FieldMask的使用简介/","content":"<p>kratos 的proto http 插件——<code>protoc-gen-go-http</code>，对body以及query参数只能选择其一支持，不论其<code>Method</code>为何种。query、vars支持同时存在。</p>\n<p>源码可查：<code>go-kratos/kratos/cmd/protoc-gen-go-http/template.go</code>。</p>\n<p>和<a href=\"https://cloud.google.com/apis/design/standard_methods?hl=zh-cn#create\" target=\"_blank\" rel=\"noopener\">Google API 设计指南</a>上对方法的设计有点不一样。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>GET</th>\n<th>POST</th>\n<th>PUT</th>\n<th>DELETE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>query (/hello?x=s)</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>vars (/hello/{name})</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>body</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n</tbody>\n</table>\n<p>body与query同时存在：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service Auth &#123;</span><br><span class=\"line\">    rpc Register (RegisterReq) returns (RegisterReply) &#123;</span><br><span class=\"line\">        option (google.api.http) = &#123;</span><br><span class=\"line\">            post: &quot;/api/v1/mdm/register&quot;</span><br><span class=\"line\">            body: &quot;user_info&quot;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">message RegisterReq &#123;</span><br><span class=\"line\">    string username = 1;</span><br><span class=\"line\">    string password = 2;</span><br><span class=\"line\">    message UserInfo &#123;</span><br><span class=\"line\">        string info = 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    UserInfo user_info = 3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">message RegisterReply &#123;</span><br><span class=\"line\">    int64 id = 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"header中解析数据\">Header中解析数据</span></h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// client发上来的header保存在此处</span><br><span class=\"line\">transport.FromClientContext(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">transport.FromServerContext(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">和&quot;google.golang.org/grpc/metadata&quot;中的函数同：</span><br><span class=\"line\">FromIncomingContext、FromOutgoingContext</span><br></pre></td></tr></table></figure>\n<h3><span id=\"请求中的参数解析\">请求中的参数解析</span></h3>\n<p>从test文件的示例可以看出，<code>github.com/go-kratos/kratos/encoding/form/form_test.go</code>，解析URL中的嵌套数据的方法：</p>\n<h4><span id=\"嵌套参数\">嵌套参数</span></h4>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message HelloRequest &#123;</span><br><span class=\"line\">  string name = 1;</span><br><span class=\"line\">  message test &#123;</span><br><span class=\"line\">    string one = 1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  test ones = 2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>URL Query：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8000/helloworld?ones.one=1234</span><br></pre></td></tr></table></figure>\n<h4><span id=\"数组参数\">数组参数</span></h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Simples: []string&#123;&quot;3344&quot;, &quot;5566&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">simples=3344&amp;simples=5566</span><br></pre></td></tr></table></figure>\n<h4><span id=\"fieldmask参数\">FieldMask参数</span></h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Field:     &amp;fieldmaskpb.FieldMask&#123;Paths: []string&#123;&quot;1&quot;, &quot;2&quot;&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">field=1,2</span><br></pre></td></tr></table></figure>\n<p><code>FieldMask</code>借助库：</p>\n<p><a href=\"https://github.com/mennanov/fmutils\" target=\"_blank\" rel=\"noopener\">https://github.com/mennanov/fmutils</a></p>\n<p><a href=\"https://github.com/mennanov/fieldmask-utils\" target=\"_blank\" rel=\"noopener\">https://github.com/mennanov/fieldmask-utils</a></p>\n<p>不过当前Kratos对query中的<code>fieldmask</code>会进行大写转换，导致其字段无法进行有效的<code>Filter</code>。我提了一个<a href=\"https://github.com/go-kratos/kratos/issues/1969\" target=\"_blank\" rel=\"noopener\">issue</a>。</p>\n<p>fieldmask_utils是对字段名进行匹配，而不是tag名，而Kratos则会将Me ——&gt; _me，而其字段为<code>Me</code>，那库则无法将其正常过滤，正常GRPC协议不会出现此转换，此转换应该是Kratos HTTP decode request时发生的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fieldmask_utils <span class=\"string\">\"github.com/mennanov/fieldmask-utils\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以对fieldmask做一下中间拦截，也可以直接返回</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">naming</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> s == <span class=\"string\">\"foo\"</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Foo\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> request UpdateUserRequest</span><br><span class=\"line\">\tuserDst := &amp;testproto.User&#123;&#125; <span class=\"comment\">// a struct to copy to</span></span><br><span class=\"line\">\tmask, _ := fieldmask_utils.MaskFromPaths(request.FieldMask.Paths, naming)</span><br><span class=\"line\">\tfieldmask_utils.StructToStruct(mask, request.User, userDst)</span><br><span class=\"line\">\t<span class=\"comment\">// Only the fields mentioned in the field mask will be copied to userDst, other fields are left intact</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>FieldMask</code>用在response、request参数限制返回，以及指定参数的更新上。</p>\n<p><a href=\"https://mp.weixin.qq.com/s/L7He7M4JWi84z1emuokjbQ\" target=\"_blank\" rel=\"noopener\">Netflix API 设计实践: 使用FieldMask</a></p>\n<p>request中指定paths，response根据paths mask参数，返回需要的字段。</p>\n<p><a href=\"https://mp.weixin.qq.com/s/uRuejsJN37hdnCN4LLeBKQ\" target=\"_blank\" rel=\"noopener\">Netflix API 设计实践(二): 使用FieldMask进行数据变更</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message UpdateProductionRequest &#123;</span><br><span class=\"line\">  ProductionUpdateOperation update = 1;</span><br><span class=\"line\">  google.protobuf.FieldMask update_mask = 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;update&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;format&quot;: &quot;test&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&quot;update_mask&quot;: [</span><br><span class=\"line\">\t\t&quot;format&quot;, </span><br><span class=\"line\">\t\t&quot;schedule.planned_launch_date&quot;,</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更新操作就会执行更新<code>format</code>，<code>schedule.planned_launch_date</code>两个字段，由于后者没有传值，变相的也就是将此字段置空。</p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"go-kratos","slug":"go-kratos","permalink":"chunlife.top/tags/go-kratos/"},{"name":"fieldmask","slug":"fieldmask","permalink":"chunlife.top/tags/fieldmask/"},{"name":"Protobuff","slug":"Protobuff","permalink":"chunlife.top/tags/Protobuff/"}]},{"title":"Meituan-Leaf Golang实现","date":"2022-05-04T04:44:14.000Z","path":"2022/05/04/Meituan-Leaf-Golang实现/","content":"<p>这一部分由于内部技术栈的问题，需要统一，同时，需要有更多的改造，接入公司内部RPC，导入一致的服务治理等需求，所以需要一个Go版本的发号器，搜了网上很多版本，发现并没有<code>Leaf</code>的替代版本，而Leaf的实现细节有很多文章都分析过了，这样看起来移植一下也不困难了。</p>\n<p>美团Leaf的技术细节在官方文档中介绍的很详细，这里参考其技术实现细节<a href=\"https://tech.meituan.com/2017/04/21/mt-leaf.html\" target=\"_blank\" rel=\"noopener\">Leaf——美团点评分布式ID生成系统</a>。</p>\n<h3><span id=\"遇到的问题\">遇到的问题</span></h3>\n<h4><span id=\"号段模式\">号段模式</span></h4>\n<p>在号段模式时，碰到的问题主要有两个：</p>\n<ul>\n<li>锁竞的问题</li>\n<li>context传递的问题</li>\n</ul>\n<p>锁竞争的问题是在请求中使用锁，但我在最初的版本中，当并发比较大时，就会出现死锁的问题。后面使用闭包+<code>defer</code>解决了此问题。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> value := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">int64</span></span> &#123;</span><br><span class=\"line\">    cacheSegmentBuffer.RLock()</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> cacheSegmentBuffer.RUnLock()</span><br><span class=\"line\"></span><br><span class=\"line\">    ......</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">&#125;(); value != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>context传递的问题，这个其实在<code>gin</code>中就碰到过，在handler中开协程出去，若是将handler中的context传递过去，这里面就会出问题，因为handler中的context在handler主体执行完后，会执行context的cancel（若该上下文其为timeout context），也就会导致协程若是用到了这个上下文也会被cancel。</p>\n<p>所以这里我改为在传递的时候传入<code>context.TODO()</code>。</p>\n<h4><span id=\"雪花算法\">雪花算法</span></h4>\n<p>这里面遇到的问题，就是在创建实例节点的时候，没有自增序号的问题，我这里借助<code>etcd</code>的迷你事务<code>TXN</code>，通过乐观锁形式的创建方式，去创建<code>key</code>，这样来防止创建重复的键值。</p>\n<h3><span id=\"输出\">输出</span></h3>\n<p><a href=\"https://github.com/younglifestyle/seg-server\" target=\"_blank\" rel=\"noopener\">https://github.com/younglifestyle/seg-server</a></p>\n<h3><span id=\"参考\">参考</span></h3>\n<p><a href=\"https://blog.csdn.net/bskfnvjtlyzmv867/article/details/90175306\" target=\"_blank\" rel=\"noopener\">美团Leaf源码——号段模式源码解析</a></p>\n<p><a href=\"https://blog.csdn.net/bskfnvjtlyzmv867/article/details/90247036?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165120147516782184621735%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=165120147516782184621735&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-2-90247036.nonecase&amp;utm_term=leaf&amp;spm=1018.2226.3001.4450\" target=\"_blank\" rel=\"noopener\">美团Leaf源码——snowflake模式源码解析</a></p>\n<p><a href=\"https://blog.51cto.com/u_12497420/3357165\" target=\"_blank\" rel=\"noopener\">美团Leaf snowflake模式详解</a></p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"Leaf","slug":"Leaf","permalink":"chunlife.top/tags/Leaf/"}]},{"title":"服务器文件分片合并下载","date":"2022-05-04T04:40:35.115Z","path":"2022/05/04/服务器文件分片合并下载/","content":"<p>作为一个文件服务器，文件就分为大文件和小文件，小文件嘛，好处理，毕竟不大，主要关注的点就是，细碎，需要集中管理，比如将其塞到一个文件中合并存储，当然，这玩意不是我现在关注的点。这里关注的是大文件的操作。</p>\n<a id=\"more\"></a>\n<p>以下大多文字信息均来自：<a href=\"https://segmentfault.com/a/1190000000725971\" target=\"_blank\" rel=\"noopener\">服务器端文件分片合并的思考和实践</a></p>\n<h2><span id=\"大文件的需求\">大文件的需求</span></h2>\n<p>文件上传是个很常见的需求。尽管<code>HTTP</code>是基于<code>TCP</code>上层的协议，但是HTTP协议本身并不适合处理超大的请求体，文件上传有很大的稳定性问题，如果中途断开了，将前功尽弃。为了改善用户体验或者缓解服务器压力，通常会考虑将文件分成小片，将小片一个个上传，如果中途断开了也能从某个失败的小片开始继续上传。</p>\n<p>在前端的处理上，对于Web页面，可以采用<a href=\"http://www.plupload.com/\" target=\"_blank\" rel=\"noopener\">plupload</a>作为上传组件，该组件支持html5、flash、sl等多种上传方式，因此，可以提供较好的浏览器兼容性。七牛云存储的<a href=\"https://github.com/qiniupd/qiniu-js-sdk/\" target=\"_blank\" rel=\"noopener\">js-sdk</a>就是基于这个组件开发的。不过本文的重点并不是讨论前端技术，关于前端就到此为止。</p>\n<hr>\n<h2><span id=\"文件下载\">文件下载</span></h2>\n<p>大文件上传时普遍都采取分片的方式进行上传，那服务器接收的分片也会有一个整合的过程，当然，博客里也提到一些整合的方式介绍，我这里是比较中意其说的不合并的方式，有几个原因：</p>\n<p>一、合并占用IO操作，消耗性能和时间；</p>\n<p>二、文件分片有利于数据加密；</p>\n<p>这是我想的两点，所以，我并没有使得文件合并这个操作出现在我的服务中，我参考了博客中说的一个操作，HTTP流。</p>\n<blockquote>\n<h4><span id=\"为什么非要合并\">为什么非要合并!</span></h4>\n<p>再思考下去，如果文件系统无法做到将分片直接连接起来的的话，那么从用户接口层(HTTP)是否能做到呢？试想，<strong>通过HTTP的方式提供文件的访问，如果HTTP服务器能够知道这个文件是由多个小文件按何种顺序组成的，那么就可以按照顺序将分片依次放在同一个HTTP流中返回，对用户来说一次请求还是得到一个文件，好像文件是合并好的一样，但实际上文件在文件系统并不存在。</strong></p>\n<p>这样做需要单独将分片的顺序维护好，每次都要读出分片的顺序和位置，然后依次一个个写入HTTP流中。但是高层的Web编程框架似乎无法支持这种做法。</p>\n</blockquote>\n<h2><span id=\"代码\">代码</span></h2>\n<p>这里的代码要修改HTTP库中的http.serveFile函数。</p>\n<p><code>serveContent</code>函数我砍掉了一些操作，比如支持HTTP的Range，针对于实际的业务场景，客户端断点续传，多线程下载那肯定是要支持的，我这里是处于简化，直接砍掉了这个操作。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ServeMyFile</span><span class=\"params\">(w http.ResponseWriter, r *http.Request, name <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\tdir, baseName := filepath.Split(name)</span><br><span class=\"line\">\tserveFile(w, r, http.Dir(dir), baseName)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">toHTTPError</span><span class=\"params\">(err error)</span> <span class=\"params\">(msg <span class=\"keyword\">string</span>, httpStatus <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> os.IsNotExist(err) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"404 page not found\"</span>, http.StatusNotFound</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> os.IsPermission(err) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"403 Forbidden\"</span>, http.StatusForbidden</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// Default:</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"500 Internal Server Error\"</span>, http.StatusInternalServerError</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// name is '/'-separated, not filepath.Separator.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">serveFile</span><span class=\"params\">(w http.ResponseWriter, r *http.Request, fs http.FileSystem, name <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\tf, err := fs.Open(name)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tmsg, code := toHTTPError(err)</span><br><span class=\"line\">\t\thttp.Error(w, msg, code)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\td, err := f.Stat()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tmsg, code := toHTTPError(err)</span><br><span class=\"line\">\t\thttp.Error(w, msg, code)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbuffer := bytes.NewBuffer(<span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\">\tbw := bufio.NewWriter(buffer)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> size <span class=\"keyword\">int64</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// serveContent will check modification time</span></span><br><span class=\"line\">\tsizeFunc := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">int64</span>, error)</span></span> &#123; <span class=\"keyword\">return</span> size, <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> d.IsDir() &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//dir := fs.(http.Dir)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tdirs, err := f.Readdir(<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\thttp.Error(w, <span class=\"string\">\"Error reading directory\"</span>, http.StatusInternalServerError)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// a, b, c ..., 保存文件的时候即以字母做顺序标记了，根据个人修改</span></span><br><span class=\"line\">\t\tsort.Slice(dirs, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i, j <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123; <span class=\"keyword\">return</span> dirs[i].Name() &lt; dirs[j].Name() &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, ff := <span class=\"keyword\">range</span> dirs &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !ff.IsDir() &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 以Dir为相对路径，接上ff.Name()，也就是[Dir/name]</span></span><br><span class=\"line\">\t\t\t\tfi, err := fs.Open(path.Join(name, ff.Name()))</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tmsg, code := toHTTPError(err)</span><br><span class=\"line\">\t\t\t\t\thttp.Error(w, msg, code)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tio.Copy(bw, fi)</span><br><span class=\"line\">\t\t\t\tsize += ff.Size()</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tserveContent(w, r, d.Name(), d.ModTime(), sizeFunc, bytes.NewReader(buffer.Bytes()))</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tsize = d.Size()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tserveContent(w, r, d.Name(), d.ModTime(), sizeFunc, f)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> unixEpochTime = time.Unix(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// isZeroTime reports whether t is obviously unspecified (either zero or Unix()=0).</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">isZeroTime</span><span class=\"params\">(t time.Time)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> t.IsZero() || t.Equal(unixEpochTime)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setLastModified</span><span class=\"params\">(w http.ResponseWriter, modtime time.Time)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !isZeroTime(modtime) &#123;</span><br><span class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"Last-Modified\"</span>, modtime.UTC().Format(http.TimeFormat))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">serveContent</span><span class=\"params\">(w http.ResponseWriter, r *http.Request, name <span class=\"keyword\">string</span>, modtime time.Time, sizeFunc <span class=\"keyword\">func</span>()</span> <span class=\"params\">(<span class=\"keyword\">int64</span>, error)</span>, <span class=\"title\">content</span> <span class=\"title\">io</span>.<span class=\"title\">ReadSeeker</span>)</span> &#123;</span><br><span class=\"line\">\tsetLastModified(w, modtime)</span><br><span class=\"line\"></span><br><span class=\"line\">\tsize, err := sizeFunc()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsendSize := size</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sendContent io.Reader = content</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> size &gt;= <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"Accept-Ranges\"</span>, <span class=\"string\">\"bytes\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> w.Header().Get(<span class=\"string\">\"Content-Encoding\"</span>) == <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\t\tw.Header().Set(<span class=\"string\">\"Content-Length\"</span>, strconv.FormatInt(sendSize, <span class=\"number\">10</span>))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tw.WriteHeader(http.StatusOK)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r.Method != <span class=\"string\">\"HEAD\"</span> &#123;</span><br><span class=\"line\">\t\tio.CopyN(w, sendContent, sendSize)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"服务器下载","slug":"服务器下载","permalink":"chunlife.top/tags/服务器下载/"},{"name":"分片合并","slug":"分片合并","permalink":"chunlife.top/tags/分片合并/"}]},{"title":"服务治理——监控","date":"2022-04-06T09:35:56.000Z","path":"2022/04/06/服务治理——监控/","content":"<p>本篇将演示如何简单的搭建起整个监控平台。当前服务主要使用语言为Go，所以下面均用Go作为后端服务。</p>\n<p>看下服务治理的大概定义：</p>\n<blockquote>\n<p><strong>1、服务注册与发现。</strong></p>\n<p><strong>2、可观测性。</strong></p>\n<p><strong>3、流量管理。</strong></p>\n<p><strong>4、安全。</strong></p>\n<p><strong>5、控制。</strong></p>\n<p><a href=\"https://www.zhihu.com/question/56125281/answer/1099439237\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/56125281/answer/1099439237</a></p>\n</blockquote>\n<p>那监控就属于服务治理中的<code>可观测性</code>——常见的包括监控（Metrics）、日志（Logging）、调用追踪（Trace）。而本篇则是着重讲述监控这一点。</p>\n<p>服务在运行时，会产生很多数据指标（CPU、内存占用，QPS等），而这些数据的产生则可由服务本身记录，例如发送一个HTTP请求，就加<code>1</code>，与逻辑无关，却又是与数据相关的搜集代码就是埋点操作。普通服务状态下，我们使用微服务框架去封装以及分层这一步操作。</p>\n<h2><span id=\"框架\">框架</span></h2>\n<p>对常见协议的Metrics收集，HTTP/GRPC。</p>\n<p>目前业务上使用的是<a href=\"https://github.com/asim/go-micro\" target=\"_blank\" rel=\"noopener\">Go-Micro</a>，不过Go-Micro没写HTTP的指标收集，这个比较简单，需要自己添加一下，使用gin自带的也可以。</p>\n<p><a href=\"https://github.com/go-kratos/kratos\" target=\"_blank\" rel=\"noopener\">Kratos</a>和<a href=\"https://github.com/zeromicro/go-zero\" target=\"_blank\" rel=\"noopener\">go-zero</a>都自带了，比较省心。</p>\n<h2><span id=\"服务组件\">服务组件</span></h2>\n<p>使用docker-compose将服务一次性全部启动。</p>\n<p><a href=\"https://github.com/Einsteinish/Docker-Compose-Prometheus-and-Grafana/blob/master/docker-compose.yml\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<p>在<code>docker-compose.yml</code>中加入，钉钉通知插件。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#钉钉插件</span></span><br><span class=\"line\">  webhook:</span><br><span class=\"line\">    image: timonwong/prometheus-webhook-dingtalk:v1.<span class=\"number\">4.0</span></span><br><span class=\"line\">    restart: <span class=\"string\">\"always\"</span></span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - <span class=\"number\">8060</span>:<span class=\"number\">8060</span></span><br><span class=\"line\">    container_name: <span class=\"string\">\"dingtalk\"</span>           </span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /etc/localtime:/etc/localtime:ro</span><br><span class=\"line\">    command:</span><br><span class=\"line\">      - <span class=\"string\">'--ding.profile=webhook1=https://oapi.dingtalk.com/robot/send?access_token=xxxxxxxxxxx'</span> <span class=\"comment\">#token指定钉钉</span></span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - monitor-net</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Token从钉钉群里的自定义机器人中获取</p>\n<p>另外注意，dingtalk组件版本为v1.4.0，v2版本后此启动方式将报错。V2版本<a href=\"https://github.com/timonwong/prometheus-webhook-dingtalk/issues/167#issuecomment-964741026\" target=\"_blank\" rel=\"noopener\">使用</a>。</p>\n<p>‘config.yml’ does not exist, try --help</p>\n</blockquote>\n<p><code>alertmanager/config.yml</code>修改：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">route:</span></span><br><span class=\"line\"><span class=\"attr\">    receiver:</span> <span class=\"string\">'webhook'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">receivers:</span></span><br><span class=\"line\"><span class=\"attr\">    - name:</span> <span class=\"string\">'webhook'</span></span><br><span class=\"line\"><span class=\"attr\">      webhook_configs:</span></span><br><span class=\"line\"><span class=\"attr\">          - send_resolved:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">            url:</span> <span class=\"string\">'http://dingtalk:8060/dingtalk/webhook1/send'</span></span><br></pre></td></tr></table></figure>\n<p><code>prometheus</code>的配置文件中，指定了<code>alertmanager</code>的地址，以及报警规则的文件位置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Load and evaluate rules in this file every 'evaluation_interval' seconds.</span></span><br><span class=\"line\"><span class=\"attr\">rule_files:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">\"alert.rules\"</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"attr\">alerting:</span></span><br><span class=\"line\"><span class=\"attr\">  alertmanagers:</span></span><br><span class=\"line\"><span class=\"attr\">  - scheme:</span> <span class=\"string\">http</span></span><br><span class=\"line\"><span class=\"attr\">    static_configs:</span></span><br><span class=\"line\"><span class=\"attr\">    - targets:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">'alertmanager:9093'</span></span><br></pre></td></tr></table></figure>\n<p><code>alert.rules</code>文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">groups:</span></span><br><span class=\"line\"><span class=\"attr\">- name:</span> <span class=\"string\">targets</span></span><br><span class=\"line\"><span class=\"attr\">  rules:</span></span><br><span class=\"line\"><span class=\"attr\">  - alert:</span> <span class=\"string\">monitor_service_down</span></span><br><span class=\"line\"><span class=\"attr\">    expr:</span> <span class=\"string\">up</span> <span class=\"string\">==</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">    for:</span> <span class=\"number\">30</span><span class=\"string\">s</span></span><br><span class=\"line\"><span class=\"attr\">    labels:</span></span><br><span class=\"line\"><span class=\"attr\">      severity:</span> <span class=\"string\">critical</span></span><br><span class=\"line\"><span class=\"attr\">    annotations:</span></span><br><span class=\"line\"><span class=\"attr\">      summary:</span> <span class=\"string\">\"监控报警 - Monitor service non-operational\"</span></span><br><span class=\"line\"><span class=\"attr\">      description:</span> <span class=\"string\">\"Service <span class=\"template-variable\">&#123;&#123; $labels.instance &#125;&#125;</span> is down.\"</span></span><br></pre></td></tr></table></figure>\n<p><code>grafana</code>需要饼图插件的话，可以下命令获取：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> https://grafana.com/grafana/plugins/grafana-piechart-panel/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker <span class=\"built_in\">exec</span> -it -u root grafana grafana-cli plug</span></span><br><span class=\"line\">ins install grafana-piechart-panel</span><br></pre></td></tr></table></figure>\n<h2><span id=\"结果\">结果</span></h2>\n<h3><span id=\"展示\">展示</span></h3>\n<img src=\"image-20220406201110956.png\" alt=\"Kratos监控\" style=\"zoom: 33%;\">\n<h3><span id=\"报警\">报警</span></h3>\n<img src=\"image-20220406201208499.png\" alt=\"报警示例\" style=\"zoom: 80%;\">\n<h2><span id=\"资料\">资料</span></h2>\n<p>prometheus服务自发现，不需要手动去修改文件，指定prometheus的监控程序。</p>\n<p><a href=\"https://prometheus.io/blog/2018/07/05/implementing-custom-sd/\" target=\"_blank\" rel=\"noopener\">https://prometheus.io/blog/2018/07/05/implementing-custom-sd/</a></p>\n<p><a href=\"https://github.com/KatePang13/prometheus_docs/blob/main/content/blog/2015-08-17-service-discovery-with-etcd.md\" target=\"_blank\" rel=\"noopener\">https://github.com/KatePang13/prometheus_docs/blob/main/content/blog/2015-08-17-service-discovery-with-etcd.md</a></p>\n<p>prometheus服务发现实现：<a href=\"https://github.com/fabxc/prom_sd_example\" target=\"_blank\" rel=\"noopener\">https://github.com/fabxc/prom_sd_example</a></p>\n<p>promQL的语法：<a href=\"https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/promql/prometheus-query-language\" target=\"_blank\" rel=\"noopener\">https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/promql/prometheus-query-language</a></p>\n<p>非常全的对prometheus各组件采集的文档：<a href=\"https://erdong.site/prometheus-notes/\" target=\"_blank\" rel=\"noopener\">https://erdong.site/prometheus-notes/</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/OVYb6VkTCN2QhfODy49_uA\" target=\"_blank\" rel=\"noopener\">Prometheus 生产部署案例</a></p>\n<p><a href=\"https://github.com/flaviostutz/promster\" target=\"_blank\" rel=\"noopener\">多层级数据指标收集</a></p>\n<hr>\n<p>P95、P90的值都比较重要，是查看接口性能的一个重要指标。</p>\n<p><a href=\"https://www.cnblogs.com/hunternet/p/14354983.html\" target=\"_blank\" rel=\"noopener\">P95，P90值的含义</a></p>\n<p><a href=\"https://stackoverflow.com/questions/64610285/prometheus-latency-graph-in-histogram-and-calculate-percentile\" target=\"_blank\" rel=\"noopener\">计算95线</a></p>\n","categories":[{"name":"分布式服务","slug":"分布式服务","permalink":"chunlife.top/categories/分布式服务/"}],"tags":[{"name":"monitor","slug":"monitor","permalink":"chunlife.top/tags/monitor/"},{"name":"prometheus","slug":"prometheus","permalink":"chunlife.top/tags/prometheus/"}]},{"title":"docker基础命令以及多阶段编译","date":"2022-03-28T13:31:53.000Z","path":"2022/03/28/docker基础命令以及多阶段编译/","content":"<p>整理一下docker的基础命令，以及多阶段编译的简单应用。</p>\n<h2><span id=\"基础命令\">基础命令</span></h2>\n<ul>\n<li>FROM</li>\n</ul>\n<p>拉取一个基准环境镜像</p>\n<ul>\n<li>RUN</li>\n</ul>\n<p>运行指令</p>\n<ul>\n<li>COPY</li>\n</ul>\n<p>将宿主机的目录复制到镜像中，注意目录路径</p>\n<ul>\n<li>WORKDIR</li>\n</ul>\n<p>改变在容器的当前目录</p>\n<ul>\n<li>EXPOSE</li>\n</ul>\n<p>表示容器会暴露此端口，但不是真正的在运行时暴露这个端口，只是一个类似于文档的作用，真正的暴露还是在docker -p 8000:8000，这样做一个端口的映射</p>\n<ul>\n<li>ENTRYPOINT</li>\n</ul>\n<p>类似的是CMD命令，ENTRYPOINT 是容器启动时执行的不变的命令，CMD是可以被用户修改的参数。</p>\n<p>ENTRYPOINT [ “echo”, “a” ]</p>\n<p>CMD [ “b” ]</p>\n<p>执行结果： a, b</p>\n<p>Docker run -p 8000:8000 imageName c d e</p>\n<p>执行结果：a c d e ( ENTRYPOINT 正常情况下不会被覆盖，CMD是提供个默认值，可被重写 )</p>\n<h2><span id=\"构建\">构建</span></h2>\n<p>目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/learn-docker</span><br><span class=\"line\">├── Dockerfile</span><br><span class=\"line\">├── go.mod</span><br><span class=\"line\">├── go.sum</span><br><span class=\"line\">└── hello</span><br><span class=\"line\">    └── main.go</span><br><span class=\"line\"></span><br><span class=\"line\">1 directory, 4 files</span><br></pre></td></tr></table></figure>\n<p>代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/gin-gonic/gin\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">\tr.GET(<span class=\"string\">\"/hello\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tc.String(http.StatusOK, <span class=\"string\">\"hello world!!!\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t_ = r.Run(<span class=\"string\">\":8080\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Dockerfile：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动编译环境</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> golang:<span class=\"number\">1.17</span>-alpine AS builder</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置编译环境</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> go env -w GO111MODULE=on</span></span><br><span class=\"line\"><span class=\"bash\">RUN go env -w GOPROXY=https://goproxy.cn,direct</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># 拷贝源代码到镜像中</span></span></span><br><span class=\"line\"><span class=\"bash\">COPY . /go/src/learn-docker</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># 编译</span></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># 进入代码目录</span></span></span><br><span class=\"line\"><span class=\"bash\">WORKDIR /go/src/learn-docker</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># 微服务中，编译指定的项目即可，不建议编译整个大型项目，浪费时间，同时也容易构建失败</span></span></span><br><span class=\"line\"><span class=\"bash\">RUN go install ./hello/...</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\">FROM alpine:3.15</span></span><br><span class=\"line\"><span class=\"bash\">COPY --from=builder /go/bin/hello /bin/hello</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># 申明暴露的端口</span></span></span><br><span class=\"line\"><span class=\"bash\">EXPOSE 8080</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># 设置服务入口</span></span></span><br><span class=\"line\"><span class=\"bash\">ENTRYPOINT [ <span class=\"string\">\"/bin/hello\"</span> ]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>命令执行的顺序会影响构建速度，不变的命令应在之前运行，变化的放在后面，不变的会尽量用到cache。</p>\n</blockquote>\n<p>构建：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker build -t hello -f Dockerfile .</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker image ls</span></span><br><span class=\"line\">REPOSITORY                     TAG       IMAGE ID       CREATED          SIZE</span><br><span class=\"line\">hello                          latest    530fe26c543a   31 minutes ago   14.7MB</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"devops","slug":"devops","permalink":"chunlife.top/categories/devops/"}],"tags":[{"name":"docker","slug":"docker","permalink":"chunlife.top/tags/docker/"}]},{"title":"网络第二序章—传输层","date":"2022-03-22T10:15:44.000Z","path":"2022/03/22/网络第二序章—传输层/","content":"<p>传输层：UDP和TCP。</p>\n<p>这俩协议真是有太多说的了，毕竟网络里头，TCP/IP协议栈，可太重要了。</p>\n<h2><span id=\"tcp与udp区别\">TCP与UDP区别</span></h2>\n<p>常见的，TCP是面向连接的，UDP是面向无连接的。</p>\n<p>在互通之前，面向连接的协议会先建立连接。例如，TCP会三次握手，而UDP不会。</p>\n<blockquote>\n<p>什么是连接呢？</p>\n<p>所谓连接，即是两端的状态维护，中间过程没有所谓的连接，一旦传输失败，一端收到消息，才知道状态的变化</p>\n<p>为了在客户端和服务端维护连接，而建立一定的数据结构来维护双方交互的状态，用这样的数据结构来保证所谓的面向连接的特性。</p>\n</blockquote>\n<ul>\n<li>\n<p><strong>TCP提供可靠交付</strong>。通过TCP连接传输的数据，无差错、不丢失、不重复、并且按序到达。<strong>UDP继承了IP包的特性，不保证不丢失，不保证按顺序到达。</strong></p>\n</li>\n<li>\n<p><strong>TCP是面向字节流的</strong>。发送的时候发的是一个流，没头没尾。而<strong>UDP继承了IP的特性，基于数据报的，一个一个地发，一个一个地收。</strong></p>\n</li>\n<li>\n<p><strong>TCP是可以有拥塞控制的</strong>。它意识到包丢弃了或者网络的环境不好了，就会根据情况调整自己的行为，看看是不是发快了，要不要发慢点。<strong>UDP就不会，应用让我发，我就发。</strong></p>\n</li>\n</ul>\n<p>因而<strong>TCP其实是一个有状态服务</strong>，里面精确地记着发送了没有，接收到没有，发送到哪个了，应该接收哪个了，错一点儿都不行。而<strong>UDP则是无状态服务。</strong></p>\n<h2><span id=\"udp\">UDP</span></h2>\n<h3><span id=\"包头格式\">包头格式</span></h3>\n<p><img src=\"image-20220322184642440.png\" alt=\"UDP包头格式\"></p>\n<p>IP层中的IP头里面定义了传输层是UDP还是TCP协议。</p>\n<p>UDP可以看到格式比较简单，基本上只用到了端口号。</p>\n<h3><span id=\"udp特点\"><strong>UDP</strong>特点</span></h3>\n<p>第一，<strong>沟通简单</strong>，不需要（大量的数据结构、处理逻辑、包头字段）。</p>\n<p>第二，<strong>无需连接</strong>。它不会建立连接，虽然有端口号，但是监听在这个地方，谁都可以传给他数据，他也可以传给任何人数据，甚至可以同时传给多个人数据。</p>\n<p>第三，<strong>无拥塞控制</strong>。不会根据网络的情况进行发包的拥塞控制，无论网络丢包丢成啥样了，它该怎么发还怎么发。</p>\n<h3><span id=\"udp的三大使用场景\"><strong>UDP的三大使用场景</strong></span></h3>\n<p>第一，<strong>需要资源少，在网络情况比较好的内网，或者对于丢包不敏感的应用</strong>。</p>\n<p>第二，<strong>不需要一对一沟通，建立连接，而是可以广播的应用</strong>。</p>\n<p>第三，<strong>需要处理速度快，时延低，可以容忍少数丢包，但是要求即便网络拥塞，也毫不退缩，一往无前的时候</strong>。</p>\n<hr>\n<p>UDP虽然简单，但它有简单的用法。它可以用在环境简单、需要多播、应用层自己控制传输的地方。例如DHCP、VXLAN、QUIC等。</p>\n<h2><span id=\"tcp\">TCP</span></h2>\n<h3><span id=\"包头格式\"><strong>包头格式</strong></span></h3>\n<p><img src=\"image-20220322184908909.png\" alt=\"TCP包头格式\"></p>\n<p>TCP包头很复杂，但是主要关注五个问题，顺序问题，丢包问题，连接维护，流量控制，拥塞控制；</p>\n<p><strong>顺序问题</strong>：为了解决包乱序问题，使用“序号”编号，确定先来后到的顺序；确认序号，发出去的包应该有确认，如果没有收到就应该重新发送，直到送达。</p>\n<p><strong>丢包问题</strong>：从IP层面来讲，如果网络状况的确那么差，是没有任何可靠性保证的，而作为IP的上一层TCP也无能为力，唯一能做的就是更加努力，不断重传，通过各种算法保证。</p>\n<p><strong>连接维护</strong>：状态位。例如SYN是发起一个连接，ACK是回复，RST是重新连接，FIN是结束连接等。TCP是面向连接的，因而双方要维护连接的状态，这些带状态位的包的发送，会引起双方的状态变更。</p>\n<p><strong>流量控制</strong>：解决的是发送方和接收方速率不匹配的问题，发送方发送过快接收方就来不及接收和处理。采用的机制是滑动窗口的机制，控制的是发送了但未被Ack的包数量。</p>\n<p><strong>拥塞控制</strong>：解决的是避免网络资源被耗尽的问题，通过大家自律的采取避让的措施，来避免网络有限资源被耗尽。当出现丢包时，控制发送的速率达到降低网络负载的目的。</p>\n<p>流量控制和拥塞控制，一个是对另一端的，一个是针对网络的。</p>\n<h3><span id=\"tcp的三次握手\"><strong>TCP的三次握手</strong></span></h3>\n<img src=\"image-20220322185046835.png\" alt=\"TCP的三次握手\" style=\"zoom: 67%;\">\n<p>常称为“请求-&gt;应答-&gt;应答之应答”的三个回合。总之，这个流程即是让C/S端都做到消息<strong>一去一回</strong>。</p>\n<p>三次握手除了双方建立连接外，主要还是为了沟通一件事情，就是<strong>TCP包的序号的问题</strong>。</p>\n<p>Client要告诉Server，我这发起的包的序号起始是从哪个号开始的，Server同样也要告诉Client，Server发起的包的序号起始是从哪个号开始的。</p>\n<p>为什么序号不能都从1开始呢？因为这样往往会出现冲突。</p>\n<p>在同一时间，同一序号的包因为重启等各类因素出现在网络上，导致接收错误。</p>\n<p>因而，每个连接都要有不同的序号。这个序号的起始序号是随着时间变化的，可以看成一个32位的计数器，每4us加一，如果计算一下，如果到重复，需要4个多小时，那个绕路的包早就死翘翘了，因为我们都知道IP包头里面有个TTL，也即生存时间。</p>\n<h3><span id=\"tcp四次挥手\"><strong>TCP四次挥手</strong></span></h3>\n<img src=\"image-20220322185359208.png\" alt=\"TCP四次挥手\" style=\"zoom:67%;\">\n<p>你关闭你的发送通道，我关闭我的发送通道。（给对方留下时间准备关闭连接）</p>\n<p>FIN_WAIT_2，如果这个时候Server直接跑路，则Client将永远在这个状态。TCP协议里面并没有对这个状态的处理，但是Linux有，可以调整tcp_fin_timeout这个参数(default 60s)，设置一个超时时间。超时后会直接进入Closed状态。</p>\n<p>TIME_WAIT状态，保证ACK能发送到对端，同时保证对端的包都被当前的Client端消耗掉(免得被下一个使用此端口的client端接收到)。</p>\n<p>若是Client端已经等了2MSL，状态会转至Closed状态。Server超过了2MSL的时间，依然没有收到Client发的FIN的ACK，按照TCP的原理，Server还会重发FIN，这个时候Client再收到这个包之后，Client会直接发送RST，Server就知道Client已经关闭了。</p>\n<p>等待的时间设为2MSL，<strong>MSL</strong>是<strong>Maximum Segment Lifetime</strong>，<strong>报文最大生存时间</strong>，它是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。因为TCP报文基于是IP协议的，而IP头中有一个TTL域，是IP数据报可以经过的最大路由数，每经过一个处理他的路由器此值就减1，当此值为0则数据报将被丢弃，同时发送ICMP报文通知源主机。协议规定MSL为2分钟，实际应用中常用的是30秒，1分钟和2分钟等。</p>\n<h3><span id=\"问题\"><strong>问题</strong></span></h3>\n<ul>\n<li>TCP已经有重试机制了，为什么应用层还会写重试？</li>\n</ul>\n<p>应用层重试是解决应用层的错误</p>\n<ul>\n<li>报文最大生存时间（MSL）和IP协议的路由条数（TTL）什么关系呢</li>\n</ul>\n<p>都和报文生存有关，前者是时间维度的概念，后者是经过路由跳数，不是时间单位.</p>\n<hr>\n<p>TCP中的顺序问题、丢包，以及超时传递，滑动窗口、拥塞控制，非常推荐大家阅读<a href=\"https://time.geekbang.org/column/intro/85\" target=\"_blank\" rel=\"noopener\">趣谈网络协议</a>“第12讲讲TCP协议（下）”。建议需要的时候拿出来反复理解。</p>\n<p>这里我只提一个TCP队首阻塞的问题，HTTP的队首阻塞是因为HTTP1.1规定先收到的请求要先返回，这样，如果前面的请求耗用太多，就会出现请求队列阻塞的问题。</p>\n<p>我们知道HTTP 2.0解决了这个问题(后面介绍HTTP2.0)，但因为TCP的特性，还是有队首阻塞的问题(这里是传输层的问题，1.1是应用层的问题)。这里需要了解TCP保证顺序性的特性以及滑动窗口的相关知识。</p>\n<p>在TCP协议中，接收端的窗口的起始点是下一个要接收并且ACK的包，即便后来的包都到了，放在缓存里面，窗口也不能右移，因为TCP的ACK机制是基于序列号的累计应答，一旦ACK了一个系列号，就说明前面的都到了，所以只要前面的没到，后面的到了也不能ACK，就会导致后面的到了，也有可能超时重传，浪费带宽。</p>\n<p><img src=\"f7b1d3bc6b6d8e55f0951e82294c8ba4.jpg\" alt=\"接收端窗口\"></p>\n","categories":[{"name":"系统","slug":"系统","permalink":"chunlife.top/categories/系统/"}],"tags":[{"name":"网络","slug":"网络","permalink":"chunlife.top/tags/网络/"}]},{"title":"网络知识第一序章","date":"2022-03-17T14:40:29.000Z","path":"2022/03/17/网络知识第一序章/","content":"<p>趁着这段时间有点时间，把之前了解的零零散散的网络知识笔记都整理了一下，集中回顾一遍，加深一下印象。</p>\n<p>网络方面的东西，我也是后面才去详细了解的，之前知道的都比较片面，对一些点知道的比较浅，也就对UDP、TCP了解的会稍微多一点，后面当我详细去了解的时候，我发现看完之后豁然开朗，就像表面上没改变什么，但实际上对上层的事了解的更多了，很玄妙的感觉。</p>\n<a id=\"more\"></a>\n<h2><span id=\"http请求发送网络各层级操作一览\">HTTP请求发送，网络各层级操作一览</span></h2>\n<img src=\"image-20220317224215558.png\" alt=\"网络请求协议一览\" style=\"zoom:80%;\">\n<p>对于二层设备、三层设备、四层LB和七层LB的时候，其对应的就是网络协议中的不同层级。</p>\n<p>网络中的上下层，其实更具体的说是内外层，最外层是MAC地址，最内层是HTTP包。</p>\n<p>发送端类似于打包，接收端类似于拆封。</p>\n<p>当一个网络包从一个网口经过的时候，你看到了，首先先看看要不要请进来，处理一把。有的网口配置了<em>混杂模式</em>，凡是经过的，全部拿进来。</p>\n<p>所谓的二层设备、三层设备，都是这些设备上跑的程序不同而已。一个HTTP协议的包经过一个二层设备，二层设备收进去的是整个网络包。这里面HTTP、TCP、 IP、 MAC都有。什么叫二层设备呀，就是只把MAC头摘下来，看看到底是丢弃、转发，还是自己留着。那什么叫三层设备呢？就是把MAC头摘下来之后，再把IP头摘下来，看看到底是丢弃、转发，还是自己留着。</p>\n<h2><span id=\"四层-七层负载均衡\">四层、七层负载均衡</span></h2>\n<p><img src=\"L4-L7.png\" alt=\"L4-L7\"></p>\n<p><img src=\"image-20220317224604271.png\" alt=\"OSI七层网络模型\"></p>\n<p>负载均衡又分为四层负载均衡和七层负载均衡。四层负载均衡工作在OSI模型的传输层，主要工作是转发，它在接收到客户端的流量以后通过修改数据包的地址信息将流量转发到应用服务器。</p>\n<p>七层负载均衡工作在OSI模型的应用层，因为它需要解析应用层流量，所以七层负载均衡在接到客户端的流量以后，还需要一个完整的TCP/IP协议栈。七层负载均衡会与客户端建立一条完整的连接并将应用层的请求流量解析出来，再按照调度算法选择一个应用服务器，并与应用服务器建立另外一条连接将请求发送过去，因此七层负载均衡的主要工作就是代理。</p>\n<blockquote>\n<p>图自：<a href=\"https://tech.meituan.com/2017/01/05/mgw.html\" target=\"_blank\" rel=\"noopener\">https://tech.meituan.com/2017/01/05/mgw.html</a></p>\n</blockquote>\n<p>L4负载均衡，更准确的术语是“第 3/4 层负载平衡”——因为负载平衡器的决定基于两个 IP 地址源服务器和目标服务器（第 3 层）以及应用程序的 TCP 端口号（第 4 层）。“第 7 层负载平衡”更准确的术语可能是“第 5 层到第 7 层负载平衡”，因为 HTTP 结合了 OSI 第 5、6 和 7 层的功能。</p>\n<ul>\n<li>\n<p>问：图中为什么经过L4转发是直连到后端server，L7不是？</p>\n</li>\n<li>\n<p>答：L4是基于传输层，也就是TCP/UDP这一层，以TCP为例，看看TCP包头的格式以及IP包头格式：</p>\n</li>\n</ul>\n<img src=\"image-20220317224437459.png\" alt=\"TCP包头格式\" style=\"zoom: 50%;\">\n<img src=\"image-20220317224819948.png\" alt=\"IP以及MAC头\" style=\"zoom: 67%;\">\n<p>一个完整的网络如下：</p>\n<p><img src=\"%E7%BD%91%E7%BB%9C%E5%8C%85.png\" alt=\"完整包\"></p>\n<p>客户端向负载均衡发送SYN请求建立第一次连接，通过配置的负载均衡算法选择一台后端服务器，并且将报文中的IP地址信息修改为后台服务器的IP地址信息，<strong>因此TCP三次握手连接是与后端服务器直接建立起来的。</strong></p>\n<p>七层服务均衡在应用层选择服务器，只能先与负载均衡设备进行TCP连接，<strong>然后负载均衡设备再与后端服务器建立另外一条TCP连接通道。</strong></p>\n<p>到L7 Server时，网络包已经被扒得只剩下HTTP数据了，无法做更多的更底层协议的操作。但更方便做数据清洗，因为这已经是原始的数据了，可以根据规则筛选数据。</p>\n<h2><span id=\"dhcp动态分配ip\">DHCP动态分配IP</span></h2>\n<p>Linux 通过判断判断IP的网段，来判断一个IP是否与自己处于同一网络环境内。（至于实际其是否在同一环境则未知）。</p>\n<p>在同一网段，它才会发送ARP请求，获取MAC地址。</p>\n<p><strong>如果这是一个跨网段的调用，它便不会直接将包发送到网络上，而是企图将包发送到网关。</strong></p>\n<p>如果你配置了网关的话，Linux会获取网关的MAC地址，然后将包发出去。</p>\n<p>如果没有配置网关呢？那包压根就发不出去。</p>\n<p>IP配置：<strong>不同系统的配置文件格式不同，但是无非就是CIDR、子网掩码、广播地址和网关地址</strong>。</p>\n<ul>\n<li>CIDR： 10.100.122.2/24，24的意思是，32位中，前24位是网络号，后8位是主机号。一般家里地上网设备不会超过256个，所以/24基本就够了。有时候我们也能见到/16的CIDR，这两种是最常见的，也是最容易理解的。</li>\n<li>广播地址，10.100.122.255</li>\n<li>子网掩码，255.255.255.0</li>\n</ul>\n<hr>\n<p>DHCP（Dynamic Host Configuration Protocol，动态主机配置协议）是一个局域网的网络协议，使用UDP协议工作， 主要给内部网络或 网络服务供应商自动分配 IP地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    Title: DHCP数据发送过程</span><br><span class=\"line\"></span><br><span class=\"line\">    participant client as 客户端</span><br><span class=\"line\">    participant server as DHCP服务器</span><br><span class=\"line\"></span><br><span class=\"line\">    client -&gt;&gt; server: 广播DHCP Discover</span><br><span class=\"line\">    server -&gt;&gt; client: 为客户端保留IP地址(DHCP Offer)</span><br><span class=\"line\">    client -&gt;&gt; server: 选择并接受一个地址(DHCP Request)</span><br><span class=\"line\">    server -&gt;&gt; client: 确认客户端IP地址(DHCP ACK)</span><br></pre></td></tr></table></figure>\n<p>客户机会在租期过去50%的时候，直接向为其提供IP地址的DHCP Server发送DHCP request消息包。</p>\n<p>客户机接收到该服务器回应的DHCP ACK消息包，会根据包中所提供的新的租期以及其他已经更新的TCP/IP参数，更新自己的配置。这样，IP租用更新就完成了。</p>\n<h2><span id=\"物理层到mac层\">物理层到MAC层</span></h2>\n<h3><span id=\"物理层\">物理层</span></h3>\n<p>正常两台电脑是可以直接互联的，需要配置这两台电脑的IP地址（相同网段）、子网掩码和默认网关。再配上一根交叉网线。（以前不同，还以为网线都是一类——交叉直连网线，后面搞嵌入式才发现交叉、直连是两种网线，当前网卡已可以自适应）</p>\n<p>两台电脑互联即构成局域网，即LAN。</p>\n<p>多台电脑也可以使用集线器（Hub）。这种设备有多个口，可以将宿舍里的多台电脑连接起来。但是，和交换机不同，集线器没有大脑，它完全在物理层工作。它会将自己收到的每一个字节，都复制到其他端口上去。这是第一层物理层联通的方案。</p>\n<h3><span id=\"mac层数据链路层\">MAC层（数据链路层）</span></h3>\n<p><strong>多电脑连接中，Hub采取的是广播的模式，如果每一台电脑发出的包，宿舍的每个电脑都能收到。传输数据过程中易产生冲突，带宽利用率不高</strong></p>\n<p>MAC层就是用来解决多路访问的堵车问题的。而交换机的出现也是在解决了在广播的情况下，避免冲突的产生。</p>\n<p>不使用广播方式，就需要解决几个问题：</p>\n<ol>\n<li>这个包是发给谁的？谁应该接收？</li>\n<li>大家都在发，会不会产生混乱？有没有谁先发、谁后发的规则？</li>\n<li>如果发送的时候出现了错误，怎么办？</li>\n</ol>\n<p><strong>大家都在发，会不会产生混乱？有没有谁先发、谁后发的规则？</strong></p>\n<p><strong>MAC</strong>的全称是<strong>Medium Access Control</strong>，即<strong>媒体访问控制。<strong>控制在往媒体上发数据的时候，谁先发、谁后发的问题。防止发生混乱。这解决的是第二个问题。这个问题中的规则，学名叫</strong>多路访问</strong>。以太网中使用<strong>随机接入协议。</strong>（需要发就发，网络堵塞的适合就等会再发）</p>\n<p>解决了第二个问题，就是解决了媒体接入控制的问题，MAC的问题也就解决好了。这和MAC地址没什么关系。</p>\n<p><strong>这个包是发给谁的？谁应该接收？</strong></p>\n<p>这里用到一个物理地址，叫作**链路层地址。**但是因为第二层主要解决媒体接入控制的问题，所以它常被称为MAC地址。</p>\n<p>解决第一个问题就牵扯到第二层的网络包<strong>格式</strong>。对于以太网，第二层的最开始，就是目标的MAC地址和源的MAC地址。</p>\n<p><img src=\"image-20220317225546905.png\" alt=\"MAC包头\"></p>\n<p>接下来是类型，大部分的类型是IP数据包，然后IP里面包含TCP、UDP，以及HTTP等，这都是里层封装的事情。</p>\n<p>有了这个目标MAC地址，数据包在链路上广播，MAC的网卡才能发现，这个包是给它的。MAC的网卡把包收进来，然后打开IP包，发现IP地址也是自己的，再打开TCP包，发现端口是自己，也就是80，而nginx就是监听80。</p>\n<p>对于以太网，第二层的最后面是<strong>CRC</strong>，也就是<strong>循环冗余检测</strong>。通过XOR异或的算法，来计算整个包是否在发送的过程中出现了错误，主要解决第三个问题。</p>\n<p>正常情况下是只知道对方的IP，不知道MAC地址的，这就需要用到<strong>ARP协议</strong>，就是已知IP地址，求MAC地址的协议。即发送一个广播包，谁是这个IP谁来回答。为了避免每次都用ARP请求，机器本地也会进行ARP缓存。当然机器会不断地上线下线，IP也可能会变，所以ARP的MAC地址缓存过一段时间就会过期。</p>\n<p>交换机是有MAC地址学习能力的，学完了它就知道谁在哪儿了，不用广播了。</p>\n<hr>\n<p>总结：</p>\n<p>Hub：</p>\n<p>1.一个广播域，一个冲突域。</p>\n<p>2.传输数据的过程中易产生冲突，带宽利用率不高</p>\n<p>Switch：</p>\n<p>1.在划分<code>vlan</code>的前提下可以实现多个广播域，每个接口都是一个单独的冲突域</p>\n<p>2.通过自我学习的方法可以构建出CAM表，并基于CAM进行转发数据。</p>\n<p>3.支持生成树算法（STP，全称Spanning Tree Protocol）。可以构建出物理有环，逻辑无环的网络，网络冗余和数据传输效率都甩Hub好几条街。SW是目前组网的基本设备之一。</p>\n<blockquote>\n<p><em>CAM表，我理解其就是<strong>MAC</strong>表，也就是<strong>MAC</strong>地址与<strong>Port</strong>的对应的一个<strong>table</strong>。</em></p>\n<p><em>冲突域（物理分段）：同一物理网段上所有节点的集合或以太网上竞争同一带宽的节点集合</em></p>\n<p><em>广播域：接收同样广播消息的节点的集合</em></p>\n</blockquote>\n<p>交换机MAC头：</p>\n<p><img src=\"%E4%BA%A4%E6%8D%A2%E6%9C%BAMAC%E5%A4%B4.png\" alt=\"交换机MAC头\"></p>\n<p>这样只有相同VLAN ID的包，才会互相转发，不同VLAN的包，是看不到的。</p>\n<p>我们可以设置交换机每个口所属的VLAN。</p>\n<p>交换机之间通过<strong>Trunk口</strong>连接，它可以转发属于任何VLAN的口。</p>\n<p><strong>如果没有STP算法：</strong></p>\n<p>ARP广播时，交换机会将一个端口收到的包转发到其它所有的端口上。</p>\n<p>比如数据包经过交换机A到达交换机B，交换机B又将包复制为多份广播出去。</p>\n<p>如果整个局域网存在一个环路，使得数据包又重新回到了最开始的交换机A，这个包又会被A再次复制多份广播出去。</p>\n<p>如此循环，数据包会不停得转发，而且越来越多，最终占满带宽，或者使解析协议的硬件过载，行成广播风暴。</p>\n<h2><span id=\"icmp与ping\">ICMP与Ping</span></h2>\n<p>ICMP相当于网络世界的侦察兵。有两种类型的ICMP报文，一种是主动探查的查询报文，一种异常报告的差错报文；</p>\n<p>ping使用查询报文，Traceroute使用差错报文。(其在网络层，自然包裹IP头)</p>\n<img src=\"image-20220317230204200.png\" alt=\"ICMP报文\" style=\"zoom:80%;\">\n<p><strong>查询报文，是一种主动请求，并且获得主动应答的ICMP协议。</strong></p>\n<p>对ping的主动请求，进行网络抓包，称为<strong>ICMP ECHO REQUEST</strong>。同理主动请求的回复，称为<strong>ICMP ECHO REPLY</strong>。</p>\n<ul>\n<li>标识符：区别不同的功能包；</li>\n<li>序号：一组包的编号；</li>\n<li>数据：ping还会存放发送请求的时间值，来计算往返时间，说明路程的长短</li>\n</ul>\n<p><strong>差错报文类型</strong>，返回时，类型代表出错类型。例如<strong>终点不可达为3，源抑制为4，超时为11，重定向为5</strong>。</p>\n<p>差错报文后面是跟上出错的那个IP包的IP头和IP正文的前8个字节。</p>\n<p><strong>Traceroute</strong>：</p>\n<ul>\n<li><strong>故意设置特殊的TTL，来追踪去往目的地时沿途经过的路由器</strong></li>\n</ul>\n<p>使用IP header的TTL（Time To Live）这个field，Traceroute的参数指向某个目的IP地址，它会发送一个UDP的数据包。将TTL设置成1，路由器拿到包后将TTL减1，TTL为0，则会返回ICMP time exceeded</p>\n<p>怎么知道UDP有没有到达目的主机呢？Traceroute程序会发送一份UDP数据报给目的主机，但它会选择一个不可能的值作为UDP端口号（大于30000）。当该数据报到达时，将使目的主机的 UDP模块产生一份“端口不可达”错误ICMP报文。如果数据报没有到达，则可能是超时。</p>\n<ul>\n<li><strong>故意设置不分片，从而确定路径的MTU(最大传输单元)</strong></li>\n</ul>\n<p>若ICMP差错报文自身出错，则不再发送关于差错报文的差错报文。</p>\n<p><strong>为何传递UDP包其返回ICMP报文？</strong></p>\n<p>协议栈能正常走到UDP，就正常返回UDP。</p>\n<p>还没到UDP和TCP的传输层，所以UDP出错可以返回ICMP差错报文。（ICMP属于网络层，是管理和控制IP的一种协议）</p>\n<h2><span id=\"参考文献\">参考文献</span></h2>\n<p><a href=\"https://time.geekbang.org/column/intro/85\" target=\"_blank\" rel=\"noopener\">趣谈网络协议</a></p>\n<p><a href=\"https://tech.meituan.com/2017/01/05/mgw.html\" target=\"_blank\" rel=\"noopener\">https://tech.meituan.com/2017/01/05/mgw.html</a></p>\n<p><a href=\"https://blog.csdn.net/ugly_girl/article/details/80901887\" target=\"_blank\" rel=\"noopener\">冲突域和广播域的区分</a></p>\n<p><a href=\"https://blog.csdn.net/q235990/article/details/88177202\" target=\"_blank\" rel=\"noopener\">网络: 快速理解NAT与NAPT的区别</a></p>\n<p><a href=\"https://blog.csdn.net/qq_35733751/article/details/80053091\" target=\"_blank\" rel=\"noopener\">11-ICMP差错报告报文</a></p>\n<p><a href=\"https://www.nginx.com/resources/glossary/layer-4-load-balancing/\" target=\"_blank\" rel=\"noopener\">What Is Layer 4 Load Balancing?</a></p>\n","categories":[{"name":"系统","slug":"系统","permalink":"chunlife.top/categories/系统/"}],"tags":[{"name":"网络","slug":"网络","permalink":"chunlife.top/tags/网络/"}]},{"title":"从Linux架构中学习开发","date":"2022-03-10T12:11:28.000Z","path":"2022/03/10/从Linux架构中学习开发/","content":"<p>软件架构大多数情况下不会影响我们将来上线产品，但糟糕的代码必然会堆积成山，由我们未来背负。这里我们首先要明白软件开发的两个难点：</p>\n<p>技术难，代码量可能不多，但都是一些比较核心的需要攻坚型的问题，不是靠“堆人”就能搞定的，比如自动驾驶、图像识别、高性能消息队列等；</p>\n<p>复杂度，意思是说，技术不难，但项目很庞大，业务复杂，代码量多，参与开发的人多，比如物流系统、财务系统等。</p>\n<p>而恰好，<strong>软件架构的终极目标是，用最小的人力成本来满足构建和维护该系统的需求。</strong></p>\n<h2><span id=\"封装与抽象\">封装与抽象</span></h2>\n<p>“一切皆文件”就体现了封装和抽象的设计思想。</p>\n<p>封装了不同类型设备的访问细节，抽象为统一的文件访问方式，更高层的代码就能基于统一的访问方式，来访问底层不同类型的设备。这样做的好处是，隔离底层设备访问的复杂性。统一的访问方式能够简化上层代码的编写，并且代码更容易复用。</p>\n<p>除此之外，抽象和封装还能有效控制代码复杂性的蔓延，将复杂性封装在局部代码中，隔离实现的易变性，提供简单、统一的访问接口，让其他模块来使用，其他模块基于抽象的接口而非具体的实现编程，代码会更加稳定。</p>\n<hr>\n<p>这里包括底层驱动都做了很多封装和抽象，实现一个新的驱动程序也只用填充已经规范好的<code>handler</code>，其他的无需多少考虑。</p>\n<h2><span id=\"分层与模块化\">分层与模块化</span></h2>\n<p>不同的模块之间通过接口来进行通信，模块之间耦合很小，每个小的团队聚焦于一个独立的高内聚模块来开发，最终像搭积木一样，将各个模块组装起来，构建成一个超级复杂的系统。</p>\n<p>面对复杂系统的开发，我们要善于应用分层技术，把容易复用、跟具体业务关系不大的代码，尽量下沉到下层，把容易变动、跟具体业务强相关的代码，尽量上移到上层。</p>\n<hr>\n<p>对于Linux来说，还是拿驱动举例，一个PCI的串口设备，首先其是PCI设备，其又是serial设备，那将它整体注册到PCI总线上，初始化完PCI相关的之后，实际操作代码还是串口设备的方式。</p>\n<p>分层也在DDD中体现的很明显，像repo层，专注于与数据进行交互，业务代码上浮，这样，BIZ层不需要关心底层数据库是否变化，只用具体关心数据拿到手之后做什么操作。</p>\n<h2><span id=\"基于接口通信\">基于接口通信</span></h2>\n<p>依赖接口，而不是依赖具体的实现。</p>\n<p>暴露给其他层的是接口，屏蔽复杂实现于接口内部，这样内部修改，也不会影响到其他层的代码。</p>\n<h2><span id=\"高内聚-松耦合\">高内聚、松耦合</span></h2>\n<p>这个更多的是一个通用的设计思想，代码符合以上的设计理念，其自然也就符合高内聚，低耦合。</p>\n<p>我的理解是，功能上模块进行聚合，集中在几个实例中，对外界依赖少，代码集中。向外提供接口，向内调用接口。</p>\n<h2><span id=\"为扩展而设计\">为扩展而设计</span></h2>\n<p>识别出代码可变部分和不可变部分，将可变部分封装起来，隔离变化，提供抽象化的不可变接口，供上层系统使用。当具体的实现发生变化的时候，我们只需要基于相同的抽象接口，扩展一个新的实现，替换掉老的实现即可，上游系统的代码几乎不需要修改。</p>\n<hr>\n<p>我的理解是，已经实现的接口在保持不变的前提下（面子），继承该接口，改变某个接口内部功能，完成功能扩展。</p>\n<h2><span id=\"kiss首要原则\">KISS首要原则</span></h2>\n<p>不管是自己还是团队，在参与大型项目开发的时候，要尽量避免过度设计、过早优化，在扩展性和可读性有冲突的时候，或者在两者之间权衡，模棱两可的时候，应该选择遵循KISS原则，首选可读性。</p>\n<hr>\n<p>这个深有体会，在实际开发过程中，没有必要提前设想的，不要实现，比如某个功能可以动态变化，但当前以及可见的未来并不需要此功能，实际做出来就很复杂，反而当前的设计都会很难用。</p>\n<h2><span id=\"最小惊奇原则\">最小惊奇原则</span></h2>\n<p>在做设计或者编码的时候要遵守统一的开发规范，避免反直觉的设计。</p>\n<hr>\n<p>在Go中，可能会好一点，毕竟代码风格比较统一，但实际还会有很多写代码时，用法上出现很多问题，这个问题，我觉得还是得靠code review和lint工具来解决，由上至下，加上强制工具。</p>\n<h2><span id=\"总结\">总结</span></h2>\n<p>在开发中，经常听到的就是，<strong>我们可以未来再重构代码，产品上线最重要</strong>，但实际上重构永远不会来，往往自己欺骗自己，屎山代码就是这么来的，而且<code>熵增</code>是持续的，若不从最开始控制结构，那结构往往从一开始就不复存在。</p>\n<h2><span id=\"参考文献\">参考文献</span></h2>\n<p><a href=\"https://time.geekbang.org/column/intro/100039001\" target=\"_blank\" rel=\"noopener\">设计模式之美</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/ZCoc3qA_r1fKzPOURA2V2g\" target=\"_blank\" rel=\"noopener\">从Kratos设计看Go微服务工程实践</a></p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"chunlife.top/tags/设计模式/"}]},{"title":"Frangipani: A Scalable Distributed File System 翻译 上","date":"2022-01-02T19:21:05.000Z","path":"2022/01/03/Frangipani-A-Scalable-Distributed-File-System/","content":"<h1><span id=\"frangipani-一个可伸缩的分布式文件系统\">Frangipani: 一个可伸缩的分布式文件系统</span></h1>\n<h2><span id=\"摘要\">摘要</span></h2>\n<p>理想的分布式文件系统应该为所有用户提供对同一组文件的一致的统一的访问，并且可以任意伸缩，以便为不断增长的用户社区提供更多的存储空间和更高的性能。尽管组件出现故障，但它仍然具有很高的可用性。这将需要最少的人工管理，并且随着添加更多组件，管理不会变得更加复杂。</p>\n<p>Frangipani是一种新的文件系统，它近似于这种理想状态，而且由于它的两层结构，构建起来相对容易。底层是Petal(在之前的文章描述过)，这是一种分布式存储服务，提供可扩展、高可用性、自动管理的虚拟磁盘。在上层，多台机器在共享的Petal虚拟磁盘上运行相同的Frangipani文件系统代码，使用分布式锁服务来确保一致性。</p>\n<p>Frangipani是在拥有统一管理下的集群中运行的，可以安全的通信。因此，机器之间相互信任，共享虚拟磁盘方法是可行的。当然，Frangipani文件系统可以使用普通网络文件访问协议剔除不受信任的机器。</p>\n<p>我们在运行数码UNIX 4.0的<code>AlphaS</code>集合上实施了Frangipani。初始测量表明，Frangipani随着服务器的增加，其依然具有优异的单服务器性能和可扩展性。</p>\n<h2><span id=\"1-介绍\">1  介绍</span></h2>\n<p>使用当下技术构建的可应用于大型、持续增长的计算机集群的文件管理系统，处理现有业务来说是一项艰巨的任务。其困局是，为了保存更多文件并为更多用户提供服务，必须添加更多磁盘，连接到更多机器上。 这些组件中的每一个都需要人工维护。 文件组通常手动分配到特定磁盘，然后在组件装满、出现故障或成为性能热点时手动移动或复制。 使用RAID技术将多个磁盘驱动器连接成一个单元只是部分解决方案；当系统变得足够大，需要多个raid和多个服务器时，仍然会出现管理问题。</p>\n<p>Frangipani是一种新的可扩展的分布式文件系统，它将多台机器上的磁盘集合管理为一个共享存储池。假定这些机器处于共同的管理之下，并且能够安全地通信。在构建分布式文件系统方面，已经有很多早期的尝试，它们在吞吐量和容量上都有很好的扩展性[1,11,19,20,21,22,26,31,33,34]。Frangipani的一个显著特征是它有一个非常简单的内部结构—一组相互协作的机器使用一个公共存储并用锁同步对该存储的访问。这个简单的结构使我们能够用很少的机器处理系统恢复、重新配置和负载平衡。Frangipani的另一个关键在于，它结合了一组特性，使其比我们所知道的现有文件系统更容易使用和管理Frangipani。</p>\n<ol>\n<li>所有用户都会给出相同一组文件的一致视图。</li>\n<li>可以轻松地将更多服务器添加到现有Frangipani集群中，以增加其存储容量和吞吐量，而无需更改现有服务器的配置或中断其操作。这些服务器可以被看作是“砖块”，可以增量堆叠，以根据需要构建尽可能大的文件系统。</li>\n<li>系统管理员可以添加新用户，而无需考虑哪些计算机将管理其数据或哪些磁盘将存储数据。</li>\n<li>系统管理员可以在不关闭整个文件系统的情况下对整个文件系统进行完整且一致的备份。备份可以在线保存，允许用户快速访问意外删除的文件。</li>\n<li>文件系统能够容忍机器、网络和磁盘故障，并在无需操作员干预的情况下进行恢复。</li>\n</ol>\n<p>Frangipani位于Petal[24]之上，Petal是一个易于管理的分布式存储系统，它为客户端提供虚拟磁盘。与物理磁盘一样，Petal虚拟磁盘提供了可以在块中读写的存储空间。与物理磁盘不同，虚拟磁盘提供不连续的2<sup>64</sup>字节地址空间，物理存储空间按需分配。Petal可以选择性的复制数据以实现高可用性。Petal还提供了高效的快照[7,10]来支持一致的备份。Frangipani从底层存储系统继承了许多可伸缩性、容错性和易于管理的特性，但是需要仔细设计才能将这些属性扩展到文件系统级别。下一节将详细介绍Frangipani的结构及其与Petal的关系。</p>\n<p><img src=\"image-20220103003019974-16411513573451.png\" alt=\"图1：Frangipani分层。几个可互换的Frangipani服务器提供对一个Petal虚拟磁盘上的一组文件的访问\"></p>\n<p>图1演示了Frangipani系统中的分层。多个可互换的Frangipani服务器通过在共享的Petal虚拟磁盘上运行来提供对相同文件的访问，用锁来协调它们的操作，以确保一致性。文件系统层可以通过添加Frangipani服务器来缩放。它通过自动从服务器故障中恢复并继续使用幸存的服务器来实现容错。它在单一的网络文件服务器上提供了改进的负载平衡，通过分流文件系统负载并将其转移到正在使用这些文件的机器上。Petal和锁服务也被用于在可伸缩性、容错和负载平衡方面。</p>\n<p>Frangipani服务器，Petal服务器和锁服务相互信任。Frangipani设计之初用于在单个管理域内的工作站集群中运行良好，但Frangipani文件系统可以导出到其他域。因此，Frangipani可以看作是一个集群文件系统。</p>\n<p>我们已经在DIGITAL Unix 4.0下实现了Frangipani。由于Frangipani在现有Petal服务之上的清晰分层，我们能够在短短几个月内实现一个工作系统。</p>\n<p>Frangipani针对具有程序开发和工程工作负载的环境。我们的测试表明，在此类工作负载上，Frangipani具有出色的性能，并缩小网络限制。</p>\n<h2><span id=\"2-系统结构\">2  系统结构</span></h2>\n<p>图2描述了系统的一个经典情况。上面显示的机器运行用户程序和Frangipani文件服务器模块；它们可以是无磁盘的。底部显示的运行Petal和分布式锁服务。</p>\n<p><img src=\"image-20220103005242815-16411513573463.png\" alt=\"图2：Frangipani结构。在一个典型的Frangipani配置中，一些机器运行用户程序和Frangipani文件服务器模块；另一些运行Petal和分布式锁服务。在其他配置中，相同的机器可能同时扮演这两个角色。\"></p>\n<p>Frangipani的组件不必完全按照图2所示的方式分配给机器。Frangipani和Petal服务器不需要在单独的机器上；每台Petal机器也可以运行Frangipani，特别是在花瓣机器没有重载的情况下。分布式锁服务独立于系统的其他部分;我们展示了在每台Petal服务器上运行一个lock服务器，但它们也可以在Frangipani主机或任何其他可用的机器上运行。</p>\n<h3><span id=\"21-组件\">2.1  组件</span></h3>\n<p>如图2所示，用户程序通过标准操作系统调用接口访问Frangipani。在不同机器上运行的程序都看到相同的文件，它们的视图是一致的；也就是说，对一台计算机上的文件或目录所做的更改在所有其他计算机上都立即可见。程序基本上得到了与本地Unix文件系统相同的语义保证：对文件内容的更改通过本地内核缓冲池暂存，在下一次适用的fsync或sync系统调用之前不能保证到达非易失性存储，但是元数据的更改会被记录下来，并且可以选择在系统调用返回时保证为非易失性。与本地文件系统语义稍有不同的是，Frangipani仅粗略地维护一个文件的最后访问时间，以避免每次读取数据时都进行元数据写操作</p>\n<blockquote>\n<p>元数据：将元数据定义为除普通文件内容以外的任何磁盘数据结构。</p>\n</blockquote>\n<p>每台机器上的Frangipani文件服务器模块在操作系统内核内运行。它将自己注册到内核的文件系统中，作为可用的文件系统实现之一。文件服务器模块使用内核的缓冲池来缓存最近使用的文件中的数据。它使用本地Petal设备驱动程序读取和写入Petal虚拟磁盘。所有文件服务器在共享Petal磁盘上读取和写入相同的文件系统数据结构，但每个服务器在Petal磁盘的不同部分保留其自己的挂起更改重做日志。日志保存在Petal中，以便在Frangipani服务器崩溃时，另一台服务器可以访问日志并运行恢复。Frangipani服务器之间不需要直接通信；它们只与Petal和锁服务通信。这使服务器的添加、删除和恢复变得简单。</p>\n<p>Petal设备驱动程序隐藏了Petal的分布式特性，使得Petal对于操作系统的更高层来说就像一个普通的本地磁盘。驱动程序负责于对应的Petal服务器通信，并在发生故障时切换到另一个服务器。任何Digital Unix文件系统都可以在Petal上运行，但只有Frangipani提供了从多台机器对相同文件的一致访问。</p>\n<p>Petal服务器协同运行，为Frangipani提供大型的、可伸缩的、容错的虚拟磁盘，这些虚拟磁盘是在连接到每个服务器的普通物理磁盘之上实现的。Petal可以容忍一个或多个磁盘或服务器故障，只要Petal服务器的大部分保持正常并保持通信，每个数据块至少有一个副本保持物理上可访问。花瓣的更多细节可在另一份文件[24]。</p>\n<p>锁服务是一种通用服务，它向网络上的客户端提供<code>多读/单写</code>锁。它的实现是分布式的，以容错和可扩展的性能。Frangipani使用锁服务来协调对虚拟磁盘的访问，并在多个服务器上保持缓冲区缓存一致。</p>\n<h3><span id=\"22-安全和客户端服务器配置\">2.2  安全和客户端/服务器配置</span></h3>\n<p>在图2所示的配置中，运行用户程序的每台计算机也运行一个Frangipani文件服务器模块。这种配置有可能实现良好的负载平衡和扩展，但会带来安全问题。任何Frangipani机器都可以读取或写入共享Petal虚拟磁盘的任何块，因此Frangipani必须仅在具有可信操作系统的机器上运行；Frangipani机器向Petal验证自己是否代表特定用户是不够的，就像在NFS等远程文件访问协议中所做的那样。完全安全性还要求Petal服务器和锁服务器在受信任的操作系统上运行，并要求所有三种类型的组件彼此进行身份验证。最后，为了确保文件数据保密，应防止用户在连接Petal和Frangipani机器的网络上窃听。</p>\n<p>通过将机器放置在一个环境中，防止用户在机器上启动修改过的操作系统内核，并将其与用户进程无权访问的专用网络互连，可以完全解决这些问题。这并不一定意味着必须将机器锁定在具有专用物理网络的房间中；可以使用已知的用于安全引导、身份验证和加密链接的加密技术[13,37]。此外，在许多应用中，部分解决方案是可以接受的；典型的现有NFS安装对于在工作站上引导修改过的内核的用户的网络窃听甚至数据修改都不安全。到目前为止，我们还没有实施任何这些安全措施，但是我们可以通过让Petal服务器只接受来自属于受信任的Frangipani服务器机器的网络地址列表的请求，大致达到NFS安全级别。</p>\n<p>Frangipani文件系统可以使用图3所示的配置导出到管理域之外的不受信任的机器。这里我们区分Frangipani客户端和服务器。只有受信任的Frangipani服务器与Petal和锁服务通信。它们可以位于受限环境中，并通过如上所述的专用网络互连。远程、不受信任的客户端通过单独的网络与Frangipani服务器通信，无法直接访问Petal服务器。</p>\n<p><img src=\"image-20220103011830187-16411513573462.png\" alt=\"图3:客户机/服务器配置 Frangipani服务器不仅可以为本地计算机提供文件访问，还可以为通过标准网络文件系统协议连接的远程客户端计算机提供文件访问。\"></p>\n<p>客户端可以使用主机操作系统支持的任何文件访问协议（如DCE/DFS、NFS或SMB）与Frangipani服务器通信，因为Frangipani看起来就像运行Frangipani服务器的机器上的本地文件系统。当然，一个支持一致性访问的协议(例如 DCE/DFS)是最好的，这样Frangipani跨多个服务器的一致性就不会在下一级丢失。( ? )   理想情况下，该协议还应该支持从一个Frangipani服务器到另一个Frangipani服务器的故障转移。刚才提到的协议不直接支持故障转移，但是让新机器接管故障机器的IP地址的技术已经在其他系统中使用过[3,25]，也可以在这里应用。</p>\n<p>除了安全性之外，使用此客户机/服务器配置还有第二个原因。因为Frangipani在内核中运行，所以它不能在不同的操作系统甚至不同版本的Unix之间快速移植。客户端可以通过远程访问受支持的系统，从不受支持的系统使用Frangipani。</p>\n<h3><span id=\"23-讨论\">2.3  讨论</span></h3>\n<p>将文件系统分为两层构建的想法——较低级别提供存储库，较高级别提供名称、目录和文件——并不是Frangipani所独有的。我们知道的最早的例子是通用文件服务器[4]。然而，Petal提供的存储设施与早期的系统有很大不同，这也导致了不同的更高级别结构。第10节包含与以前系统的详细比较。</p>\n<p>Frangipani的设计目的是与Petal提供的存储空间配合使用。我们还没有充分考虑开发NASD等替代存储抽象所需的设计更改[13]。</p>\n<p>Petal提供了高可用性存储，可以随着资源的添加而扩展吞吐量和容量。然而，Petal没有提供在多个客户端之间协调或共享存储的功能。此外，大多数应用程序不能直接使用Petal的客户端接口，因为它是磁盘类型而不是文件类型。Frangipani提供了一个文件系统层，使Petal在保留和扩展其良好属性的同时对应用程序有用。</p>\n<p>Frangipani的优势在于它允许透明的添加服务器、删除和故障恢复。通过将预写式日志和锁与一个统一的可访问的、高可用性的存储结合起来，它能够轻松地做到这一点。</p>\n<p>Frangipani的另一个优势是它能够在系统运行时创建一致的备份。第8节讨论了Frangipani的备份机制。</p>\n<p><img src=\"image-20220103015153021-16411513573464.png\" alt=\"图4:磁盘布局。 Frangipani利用Petal巨大而不连续的磁盘地址空间来简化其数据结构。每个服务器都有自己的日志和自己的分配位图空间块。\"></p>\n<p>Frangipani的设计有三个方面可能会有问题。将Frangipani与复制的Petal虚拟磁盘一起使用，意味着日志记录有时会发生两次，一次是到Frangipani日志，另一次是在Petal本身。其次，Frangipani在放置数据时不使用磁盘位置信息，事实上它不能，因为Petal虚拟了磁盘。最后，Frangipani锁定整个文件和目录，而不是单个块。我们没有足够的使用经验来评估我们设计的这些方面，但尽管如此，Frangipani在我们测试的工程工作负载上的测量性能还是不错的。</p>\n<h2><span id=\"3-磁盘布局\">3  磁盘布局</span></h2>\n<p>Frangipani使用Petal的大而稀疏的磁盘地址空间来简化其数据结构。这个总体思路让人想起了过去在大内存地址空间的计算机编程工作。有这么多的地址空间可用，可以慷慨地将其分割开来。</p>\n<p>Petal虚拟磁盘有2<sup>64</sup>字节的地址空间。Petal仅在写入虚拟地址时才将物理磁盘空间提交给虚拟地址。Petal还提供了一个decommit原语，可以释放支持一系列虚拟磁盘地址的物理空间。</p>\n<p>为了保持内部数据结构的小型化，Petal以相当大的块（目前为64 KB）提交和释放空间。也就是说，每个64 KB的地址范围【a*2<sup>16</sup>，(a+1)*2<sup>16</sup>】（其中一些数据已写入且未解除提交）都分配有64 KB的物理磁盘空间。因此，Petal客户机不能使其数据结构过于稀疏，否则过多的物理磁盘空间将因碎片化而被浪费。图4显示了Frangipani是如何划分其虚拟磁盘空间的。</p>\n<p>第一个区域存储共享的配置参数和内务管理信息(housekeeping information,<code>不太理解</code>)。我们允许这个区域有一兆字节（TB）的虚拟空间，但实际上目前只使用了其中的几千字节。</p>\n<p>第二个区域存储日志。每台Frangipani服务器获得 一部分空间来存放它的私人日志。我们已经为这个区域保留了 1TB（2<sup>40</sup>字节）给这个区域，划分为256个日志。这 这个选择限制了我们目前的实施，使其只能容纳256个服务器，但这很容易进行调整。</p>\n<p>第三个区域用于分配位图，以描述剩余区域中的哪些块是空闲的。每个Frangipani服务器都会锁定位图空间的一部分以供其专用。当服务器的位图空间填满时，它会查找并锁定另一个未使用的部分。位图区域的长度为3 TB。</p>\n<p>第四个区域存放节点。每个文件都需要一个<code>inode</code>来保存其元数据，如时间戳和指向其数据位置的指针。符号链接将其数据直接存储在inode节点中。我们将节点的长度定为512字节，也就是一个磁盘块的大小，从而避免了服务器之间不必要的争夺（“虚假共享”），如果两个服务器需要访问同一块中的不同节点，就会出现这种情况。我们分配了1TB的节点空间，允许2<sup>31</sup>个节点的空间。分配位图和节点之间的映射是固定的，所以每个Frangipani服务器只从与分配位图的部分相对应的节点空间中为新文件分配节点。但任何Frangipani服务器都可以读取、写入或释放任何现有文件的节点。</p>\n<p>第五个区域存放小数据块，每个4 KB（2<sup>12</sup>字节）大小。一个文件的前64 KB（16个块）被存储在小块中。如果一个文件增长到超过64KB，剩下的就存储在一个大块中。我们为小块分配2<sup>47</sup>个字节，因此最多允许有2<sup>35</sup>个小块，是最大节点数的16倍。</p>\n<p>Petal地址空间的其余部分存放大数据块。每个大数据块都保留了1TB的地址空间。</p>\n<p>我们使用4KB块的磁盘布局策略可能会比更谨慎地支配磁盘空间的策略遭受更多的碎片。另外，为每个节点分配512字节的空间也有些浪费。我们可以通过将小文件存储在inode本身来缓解这些问题[29]。我们的设计所获得的是简单性，我们相信这对于额外的物理磁盘空间的成本来说是一个合理的权衡。</p>\n<p>目前的方案将Frangipani限制在略低于2<sup>24</sup>（1600万）大文件，其中大文件是指大于64KB的任何文件。另外，任何文件都不能大于16个小块加一个大块（64KB加1TB）。如果这些限制被证明太小，我们可以很容易地减少大块的大小，从而使更多的数量可用，并允许大文件跨越一个以上的大块，从而提高最大文件大小。如果2<sup>64</sup>字节的地址空间限制被证明是不够的，一个Frangipani服务器可以在多个虚拟磁盘上支持多个Frangipani文件系统。</p>\n<p>我们根据早期文件系统的使用经验，选择了这些文件系统参数。我们相信我们的选择将为我们提供良好的服务，但只有时间和使用才能证实这一点。Frangipani的设计足够灵活，我们可以以文件系统的备份和恢复为代价来试验不同的布局。</p>\n<blockquote>\n<p>在本节中，文件一词包括目录、符号链接等。</p>\n</blockquote>\n<h2><span id=\"4-记录和恢复\">4 记录和恢复</span></h2>\n<p>Frangipani使用元数据的预写重做日志记录来简化故障恢复并提高性能；用户数据不被记录。每个Frangipani服务器在Petal中都有自己的私有日志。当Frangipani文件服务器需要进行元数据更新时，它首先创建一个描述更新的记录，并将其附加到其内存中的日志中。这些日志记录会按照它们所描述的更新被请求的顺序定期写入Petal。(我们可以选择让日志记录同步写入。这提供了更好的故障语义，但增加了元数据操作的延迟。）。只有在日志记录<br>\n被写入Petal之后，服务器才会修改其固定位置中的实际元数据。Unix update demon会定期（大约每30秒）更新固定位置。</p>\n<p>日志的大小是有限制的，在目前的实现中是128KB。考虑到Petal的分配策略，一个日志将由两个不同的物理磁盘上的两个64KB的片段组成。为每个日志分配的空间被作为一个循环缓冲区管理。当日志填满时，Frangipani会回收最旧的25%的日志空间，用于新的日志条目。通常情况下，回收区域的所有条目都是指已经写入Petal的元数据块（在之前的同步操作中），在这种情况下，不需要进行额外的Petal写入。如果有尚未写入的元数据块，这项工作将在日志被回收之前完成。考虑到日志的大小和Frangipani日志记录的典型大小（80-128字节），如果在两个周期性同步操作之间有大约1000-1600个修改元数据的操作，日志就会被填满。</p>\n<p>如果一个Frangipani服务器崩溃了，系统最终会检测到失败，并在该服务器的日志上运行恢复。故障可能是由故障服务器的客户端检测到的，或者当锁服务要求故障服务器返回它所持有的锁而没有得到答复时。恢复守护进程被隐式的赋予失败服务器的日志和锁的所有权。该守护进程找到日志的开始和结束，然后按顺序检查每条记录，执行每一个尚未完成的描述性更新。在日志处理完成后，恢复进程释放其所有的锁并释放日志。然后，其他Frangipani服务器可以不受故障服务器的阻碍，故障服务器本身也可以选择重新启动（有一个空日志）。只要底层的Petal卷保持可用，系统就可以容忍无限数量的Frangipani服务器故障。</p>\n<p>为了确保恢复能够找到日志的结尾（即使磁盘控制器不按顺序写入数据），我们在日志的每个512字节块上附加一个单调增加的日志序列号。通过找到一个低于前一个的序列号，可以可靠地检测到日志的结束。</p>\n<p>Frangipani确保在有多个日志的情况下，日志和恢复工作正常。这需要注意几个细节。</p>\n<p>首先，Frangipani的锁协议，在下一节中描述，确保不同服务器对相同数据的更新请求是序列化的。覆盖脏数据的写锁只有在脏数据被写入 Petal 之后才能更改所有者，可以是原始锁持有者写入，也可以是代表它运行的恢复进程写入。这意味着对于任何给定的块，最多只能有一个日志保存未完成的更新。</p>\n<p>其次，Frangipani确保恢复只适用于自服务器获得覆盖它们的锁后所记录的更新，并且它仍然持有这些锁。这是为了确保锁协议所规定的序列化不被违反而需要的。我们通过强制执行一个更强的条件来实现这一保证：恢复绝不重复描述已经完成的更新的日志记录。为了实现后者，我们在每个512字节的元数据块上保留一个版本号。元数据如目录，它跨越了多个块，有多个版本号。对于日志记录所更新的每一个块，该记录包含了对更改的描述和新的版本号。在恢复过程中，只有当块的版本号小于记录的版本号时，才会应用对块的修改。</p>\n<p>因为用户数据的更新没有被记录下来，只有元数据块有预留空间给版本号。这就产生了一个强制性的问题。如果一个块被用于元数据，被释放，然后又被重新用于用户数据，那么在版本号被错误的用户数据覆盖后，引用该块的旧日志记录可能不会被正确跳过。Frangipani通过重用释放的元数据块来保存新的元数据，从而避免了这个问题。</p>\n<p>最后，Frangipani确保在任何时候只有一个恢复进程试图重放特定服务器的日志区域。锁服务通过授予活动的恢复进程对日志的独占锁来保证这一点。</p>\n<p>Frangipani的记录和恢复方案假定，磁盘写入失败会使单个扇区的内容处于旧状态或新状态，但绝不会同时处于这两种状态。如果一个扇区被损坏，以至于读取它时出现CRC错误，Petal的内置复制通常可以恢复它。如果一个扇区的两个副本都丢失了，或者Frangipani的数据结构被软件错误破坏了，就需要一个元数据一致性检查和修复工具（像Unix fsck）。到目前为止，我们还没有实现这样的工具。</p>\n<p>Frangipani的日志不是为了向用户提供高级别的语义保证。它的目的是提高元数据更新的性能，并通过避免每次服务器故障时运行fsck等程序来加速故障恢复。只有元数据被记录下来，而不是用户数据，所以用户不能保证在故障后文件系统的状态在他看来是一致的。我们并不声称这些语义是理想的，但它们与标准的本地Unix文件系统所提供的相同。在本地 Unix 文件系统和 Frangipani 中，用户可以通过在适当的检查点调用 fsync 来获得更好的一致性语义。</p>\n<p>Frangipani的日志记录是应用了最早为数据库开发的技术[2]，后来被用于其他几个基于日志的文件系统[9, 11, 16, 18]。Frangipani不是一个日志结构的文件系统[32]；它不把所有的数据保存在日志中，而是维护传统的磁盘数据结构，用一个小的日志作为辅助，以提供更好的性能和故障原子性。与上述其他基于日志的文件系统不同，但与日志结构的文件系统Zebra[17]和xFS[1]一样，Frangipani保留多个日志。</p>\n<h2><span id=\"5-同步和缓存的一致性\">5 同步和缓存的一致性</span></h2>\n<p>由于多个Frangipani服务器都在修改共享的磁盘数据结构，因此需要谨慎地进行同步，以便为每个服务器提供一致的数据视图，同时允许有足够的并发性，以便在负载增加或服务器增加时扩展性能。Frangipani使用多读/单写锁来实现必要的同步。当锁服务检测到冲突的锁请求时，会要求锁的当前持有者释放或降级以消除冲突。</p>\n<p>一个读锁允许服务器从磁盘上读取相关数据并进行缓存。如果一个服务器被要求释放它的读锁，它必须在遵守之前使其缓存条目失效。写锁允许服务器读取或写入相关的数据并缓存它。服务器缓存的磁盘块副本只有在它持有相关的写锁时才能与磁盘上的版本不同。因此，如果一个服务器 被要求释放其写锁或将其降级为读锁，它必须在遵守之前将脏数据写到磁盘。如果是降级锁，它可以保留其缓存条目，但如果释放锁，则必须使其失效。</p>\n<p>当写锁被释放或降级时，我们可以选择绕过磁盘，将脏数据直接转发给请求者，而不是将脏数据刷到磁盘。出于简单的原因，我们没有这样做。首先，在我们的设计中，Frangipani服务器不需要相互通信。它们只与Petal和锁服务器进行通信。其次，我们的设计确保当一个服务器崩溃时，我们只需要处理该服务器使用的日志。如果直接转发脏缓冲区，并且具有脏缓冲区的目标服务器崩溃，那么指向脏缓冲区的日志条目可能分布在多台机器上。这将给恢复和在日志空间填满时回收日志空间带来问题。</p>\n<p>我们将磁盘上的结构分为逻辑段，并为每个段加锁。为了避免错误的共享，我们确保一个磁盘扇区不包含一个以上可以共享的数据结构。我们将磁盘上的数据结构划分为可上锁的段，旨在保持锁的数量合理地少，但又能避免普通情况下的锁争夺，从而使锁服务不成为系统的瓶颈。</p>\n<p>因为日志是私有的，所以每个日志都是一个单独的可锁定段。位图空间也被划分为独占锁定的段，这样当分配新文件时就不会有争用。当前未分配给文件的数据块或索引节点受到分配位图段上的锁的保护，该段上的锁持有标记为空闲的位。最后，每个文件、目录或符号链接都是一个段;也就是说，一个锁同时保护inode和它所指向的任何文件数据。这种每个文件的锁粒度适合于很少并发写共享的工程工作负载。然而，其他工作负载可能需要更细粒度的锁定。</p>\n<p>有些操作需要原子化的更新由不同锁覆盖的几个磁盘数据结构。我们通过对这些锁进行全局排序并在两个阶段获得这些锁来避免死锁。首先，一个服务器确定它需要什么锁。这可能涉及到获取和释放一些锁，例如在一个目录中查找名字。其次，它按照节点地址对锁进行排序，并依次获取每个锁。然后，服务器检查它在第一阶段检查的任何对象是否在其锁被释放时被修改。如果是的话，它就释放锁，并循环重复第一阶段。否则，它就执行操作，弄脏缓存中的一些块，并写一条日志记录。它保留每个锁，直到它覆盖的脏块被写回磁盘。</p>\n<p>我们刚刚描述的缓存一致性协议与Echo[26]、Andrew文件系统[19]、DCE/DFS[21]和Sprite[30]中用于客户端文件缓存的协议相似。避免死锁的技术与Echo的类似。和Frangipani一样，Oracle数据库（Oracle Parallel Server），也是将脏数据写入磁盘，而不是在写入锁的后续所有者之间使用缓存到缓存的传输。</p>\n<h2><span id=\"6-锁服务\">6  锁服务</span></h2>\n<p>Frangipani只需要其lock server的一小部分通用功能，而且我们不希望该服务在正常运行中成为性能瓶颈，因此许多不同的实现可以满足其要求。在Frangipani项目的过程中，我们已经使用了三种不同的lock server的实现，并且其他现有的lock server可以提供必要的功能，也许只需在上面加一层薄薄的代码。</p>\n<p>lock server提供多读/单写锁。锁是粘性的；也就是说，一个客户端通常会保留一个锁，直到其他客户端需要一个冲突的锁。(回顾一下，锁服务的客户端是Frangipani服务器）。</p>\n<p>锁定服务使用租约来处理客户端故障[15, 26]。当一个客户端第一次通讯lock server时，它获得了一个租约。客户端获得的所有锁都与租约相关。每个租约都有一个过期时间，目前设置为创建或最后一次更新后的30秒。客户端<br>\n必须在到期时间前更新其租约，否则服务会认为它已经失败。</p>\n<p>网络故障可以阻止Frangipani服务器更新其租约，即使它没有崩溃。当这种情况发生时，服务器会丢弃它所有的锁和缓存中的数据。如果缓存中的任何东西是脏的，Frangipani会打开一个内部标志，使所有来自用户程序的后续请求返回一个错误。文件系统必须被卸载以清除这个错误状况。我们选择了这种激烈的报错方式，使它难以被无意中忽略。</p>\n<p>我们最初的lock server实现是一个单一的、集中的服务器，它将所有的锁状态保存在易失性内存中。这样的服务器对Frangipani来说是足够的，因为Frangipani servers和他们的日志持有足够的状态信息，即使锁服务在崩溃中失去了所有的状态，也可以恢复。然而，锁服务的失败将导致一个巨大的性能故障。</p>\n<p>我们的第二个实施方案将锁的状态存储在Petal虚拟磁盘上，在返回客户端之前，将每个锁的状态变化写到Petal上。如果主lock server崩溃了，备份服务器将从Petal中读取当前状态并接管，以提供持续服务。有了这个方案，故障恢复更加透明，但普通情况下的性能比集中式的内存方法要差。在进入下一个实施方案之前，我们没有完全实现对所有故障模式的自动恢复。</p>\n<p>我们的第三个也是最后一个锁服务实现是完全分布式的，用于容错和可扩展的性能。它由一组相互合作的锁服务器和一个连接到每个Frangipani服务器的办事员模块组成。</p>\n<p>锁服务将锁组织成由ASCII字符串命名的表。表内的各个锁是由64位整数命名的。回顾一下，一个Frangipani文件系统只使用一个Petal虚拟磁盘，尽管多个Frangipani文件系统可以安装在同一台机器上。每个文件系统都有一个与之相关的表。当一个Frangipani文件系统被挂载时，Frangipani服务器调用clerk，打开与该文件系统相关的锁表。锁服务器在成功打开时给clerk一个租赁标识符，这个标识符被用于他们之间所有的次序通信。当文件系统被卸载时，clerk关闭锁表。(<code>clerk翻译应该有点问题，我理解的客户端</code>)</p>\n<p>客户端和锁服务器通过异步消息而不是RPC进行通信，以尽量减少内存的使用量，并实现良好的灵活性和性能。对锁进行操作的基本消息类型是请求、授予、撤销和释放。请求和释放消息类型是由客户端发送给锁服务器的，而授予和撤销消息类型是由锁服务器发送给客户端的。锁的升级和降级操作也是使用这四种消息类型处理的。</p>\n<p>锁服务使用一个容错的分布式故障检测机制来检测锁服务器的崩溃。这与Petal使用的机制相同。它是基于各组服务器之间及时交换心跳信息。它使用多数共识来容忍网络分区。</p>\n<p>锁在服务器和每个clerk那里都要消耗内存。在我们目前的实现中，服务器为每个锁分配了112个字节的块，此外还有104个字节给每个有未决或已批准的锁请求的clerk。每个客户端每个锁占用232字节。为了避免因为粘性锁而消耗过多的内存，clerk 会丢弃那些长时间（1小时）没有使用的锁。</p>\n<p>使用Lamport的Paxos算法[23]，在所有锁服务器上持续复制少量不经常变化的全局状态信息。锁服务重复使用最初为Petal编写的Paxos的实现。全局状态信息包括一个锁服务器的列表，每个服务器负责服务的锁的列表，以及已经打开但尚未关闭每个锁表的clerk的列表。这些信息被用来达成共识，在锁服务器之间重新分配锁，在锁服务器崩溃后从clerk那里恢复锁状态，并促进Frangipani服务器的恢复。为了提高效率，锁被划分为大约一百个不同的锁组，并按组分配给服务器，而不是单独分配。</p>\n<p>锁偶尔会在不同的锁服务器之间重新分配，以弥补一个崩溃的锁服务器或利用一个新恢复的锁服务器。当一个锁服务器被永久地添加到系统中或从系统中移除时，也会发生类似的重新分配。在这种情况下，锁总是被重新分配，以便每个服务器提供的锁的数量是平衡的，重新分配的数量是最小的，并且每个锁正好由一个锁服务器提供。重新分配分两个阶段进行。在第一阶段，失去锁的锁服务器从其内部状态中丢弃这些锁。在第二阶段，获得锁的锁服务器与打开相关锁表的办事员联系。这些服务器从clerk那里恢复其新锁的状态，而clerk则被告知其锁的新服务器。</p>\n<p>当Frangipani服务器崩溃时，在执行适当的恢复操作之前，无法释放其拥有的锁。具体来说，必须处理崩溃的Frangipani服务器的日志，并且必须将任何挂起的更新写入Petal。当Frangipani服务器的租约到期时，锁服务将要求另一台Frangipani机器上的clerk执行恢复，然后重新租用属于崩溃的Frangipani服务器的所有锁。该clerk被授予一个锁，以确保以独占方式访问日志。此锁本身由租约覆盖，因此如果此恢复过程失败，锁服务将启动另一个恢复过程。</p>\n<p>一般来说，Frangipani系统可以容忍网络分区，在可能的情况下继续运行，否则会麻利的关闭。具体来说，Petal可以在网络分区的情况下继续运行，只要大多数Petal服务器保持正常并处于通信状态，但如果大多数分区中没有副本，Petal虚拟磁盘的部分将无法访问。只要大多数锁服务器保持正常并处于通信状态，锁服务就会继续运行。如果一个Frangipani服务器被分区离开了锁服务，它将无法续租。锁服务将宣布这样的Frangipani服务器死亡，并从它在Petal上的日志开始恢复。如果一个Frangipani服务器被脑裂无法访问Petal，它将无法读取或写入虚拟磁盘。在这两种情况下，服务器将不允许用户进一步访问受影响的文件系统，直到脑裂恢复和文件系统被重新挂载。</p>\n<p>当Frangipani server的租约过期时，有一个小的危险。如果服务器没有真正崩溃，而只是由于网络问题与锁服务失去联系，它可能在租约过期后仍然试图访问Petal。Frangipani服务器会检查它的租约是否仍然有效（并且在一定的时间内仍然有效），在失效之前依然试图对Petal进行写入。然而，当写请求到达时，Petal不做任何检查。因此，如果在Frangipani的租约检查和随后的写请求到达Petal之间有足够的时间延迟，我们可能会有一个问题：租约可能已经过期，锁已经给了另一个服务器。我们使用了足够大的误差范围（15秒），在正常情况下，这个问题不会发生，但我们不能绝对排除它。</p>\n<p>在未来，我们希望能消除这种危险；一种可行的方法是如下。我们在每个写给Petal的请求上添加一个到期时间戳。时间戳设置为生成写请求时的当前租约到期时间，减去锁延时删除的时间。然后我们让Petal忽略任何时间戳小于当前时间的写请求。只要Petal和Frangipani服务器上的时钟同步在差值范围内，这种方法就能可靠地拒绝租约过期的写入。</p>\n<p>另一种不需要同步时钟的方法是将锁服务器与Petal集成，并将从锁服务器获得的租约标识符包含在每个对Petal的写入请求中。然后，Petal将拒绝任何具有过期租约标识符的写入请求。</p>\n<h2><span id=\"7-添加和删除服务器\">7 添加和删除服务器</span></h2>\n<p>随着Frangipani安装的增长和变化，系统管理员偶尔会需要增加或删除服务器机器。Frangipani的设计使这项任务变得简单。</p>\n<p>在一个正在运行的系统中添加另一个Frangipani服务器，只需要少量的管理工作。新的服务器只需要被告知使用哪个Petal虚拟磁盘和在哪里找到锁服务。新的服务器与锁服务通讯以获得租约，从租约标识符中确定使用哪一部分日志空间，然后开始运行。管理员不需要接触其他服务器；它们会自动适应新服务器的存在。</p>\n<p>移除Frangipani服务器甚至更容易。简单地关闭服务器就可以了。服务器最好刷新所有脏数据并在停止前释放其锁，但这并不是严格的需要。如果服务器突然停止，在下次启动时，它先获取一个锁，然后在它的日志上运行恢复程序，使共享磁盘进入一个一致的状态。同样，管理员不需要接触其他服务器。</p>\n<p>Petal服务器也可以透明地添加和删除，如Petal论文[24]中所述。锁定服务器的添加和删除方式类似。</p>\n<h2><span id=\"8-备份\">8 备份</span></h2>\n<p>Petal的快照功能为我们提供了一种方便的方式，使Frangipani文件系统的完整转储一致。Petal允许客户在任何时间点创建一个虚拟磁盘的精确拷贝。快照副本与普通虚拟磁盘相同，只是无法修改。为了提高效率，该实现使用了写时拷贝技术。快照是崩溃一致的；也就是说，快照反映了一种一致的状态，如果所有Frangipani服务器崩溃，Petal虚拟磁盘可能会处于这种状态。</p>\n<p>因此，我们可以简单地通过提取Petal快照并复制到磁带上来备份一个Frangipani文件系统。该快照将包括所有的日志，因此可以通过将其恢复到新的Petal虚拟磁盘，并在每个日志上运行恢复功能来恢复它。由于崩溃的一致性，从快照中恢复与从整个系统的电源故障中恢复的问题相同。</p>\n<p>我们可以通过对Frangipani的一个小改动来改进这个方案，创建在文件系统层面上一致的快照，并且不需要恢复。我们可以通过让备份程序强制所有的Frangipani服务器进入一个屏障来实现这一目标，该屏障使用一个由锁服务提供的普通全局锁。Frangipani服务器以共享模式获得这个锁，以进行任何修改操作，而备份程序则以独占模式请求它。当Frangipani服务器收到释放屏障锁的请求时，它通过阻止所有修改数据的新文件系统调用进入屏障，清理其缓存中的所有脏数据，然后释放该锁。当所有的Frangipani服务器都进入屏障时，备份程序能够获得最终锁；然后，它创建一个Petal快照并释放锁。此时，服务器以共享模式重新获取锁，并恢复正常操作。</p>\n<p>使用后一种方案，新快照可以作为Frangipani卷装载，而无需恢复。新卷可以在线访问以检索单个文件，也可以以传统备份格式转储到磁带上，而不需要Frangipani进行恢复。但是，新卷必须以只读方式装载，因为Petal快照当前是只读的。将来，我们可能会扩展Petal以支持可写快照，或者在Petal上实现一个分层来模拟它们。</p>\n","categories":[{"name":"分布式服务","slug":"分布式服务","permalink":"chunlife.top/categories/分布式服务/"}],"tags":[{"name":"论文","slug":"论文","permalink":"chunlife.top/tags/论文/"},{"name":"A Scalable Distributed File System","slug":"A-Scalable-Distributed-File-System","permalink":"chunlife.top/tags/A-Scalable-Distributed-File-System/"}]},{"title":"Amazon Aurora以及ZK论文学习","date":"2022-01-02T15:00:12.000Z","path":"2022/01/02/Amazon-Aurora以及ZK论文学习/","content":"<h3><span id=\"论文理解\">论文理解</span></h3>\n<p>ZK的论文里面的东西感觉很多都是和ETCD相似的，之前也写过ZK的一些不同的点，原理上，毕竟其也是基于raft协议的，操作上相似感觉比较合理。</p>\n<p>Aurora，这里面还是有很多东西的，不管是基于MySQL的改造（canal搬运log感觉很像），另外还有quorum因地制宜的使用，数据库服务与存储层服务的分层设计，简化副本复制，采用链式复制等，对这种大型服务的设计能力可见一斑。</p>\n<p><img src=\"v2-8aa123d892340535ea3604e5bf4bfa49_720w.jpg\" alt=\"论文总结\"></p>\n<h2><span id=\"资料\">资料</span></h2>\n<p>思维导图文件：</p>\n<p><a href=\"https://pan.baidu.com/link/zhihu/79hWzOuMhjikTJ1ER3Xw1XZmQCW0JESwdsBT==\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/link/zhihu/79hWzOuMhjikTJ1ER3Xw1XZmQCW0JESwdsBT==</a></p>\n<p><em>思维导图中有很多链接，以及我附带的一些文章附件，用于帮助理解。</em></p>\n<p>论文翻译的地址：</p>\n<p><a href=\"https://iswade.github.io/translate/zookeeper/\" target=\"_blank\" rel=\"noopener\">Zookeeper论文翻译 - iswade’s blog</a></p>\n<p><a href=\"https://xie.infoq.cn/article/09849d56c3b18064af6c7f857\" target=\"_blank\" rel=\"noopener\">【译】Amazon Aurora: Design Considerations for High Throughput Cloud-Native Relational Databases 上篇</a><a href=\"https://link.zhihu.com/?target=https%3A//xie.infoq.cn/article/09849d56c3b18064af6c7f857\" target=\"_blank\" rel=\"noopener\">https://link.zhihu.com/?target=https%3A//xie.infoq.cn/article/09849d56c3b18064af6c7f857</a>)</p>\n<h2><span id=\"mysql-binlog的理解\">Mysql binlog的理解</span></h2>\n<p>只依靠binlog是没有crash-safe能力的，所以InnoDB使用另外一套日志系统——也就是redo log来实现crash-safe能力。</p>\n<p>这两种日志有以下三点不同。</p>\n<ol>\n<li>redo     log是InnoDB引擎特有的；binlog是MySQL的Server层实现的，所有引擎都可以使用。</li>\n<li>redo log是物理日志，记录的是“在某个数据页上做了什么修改”( a1 — &gt; a2 )；binlog是逻辑日志，记录的是这个语句的原始逻辑，比如“给ID=2这一行的c字段加1 ”。</li>\n<li>redo log是循环写的，空间固定会用完；binlog是可以追加写入的。“追加写”是指binlog文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li>\n</ol>\n<p>Binlog有两种模式，statement 格式的话是记sql语句， row格式会记录行的内容，记两条，更新前和更新后都有。</p>\n<p><strong>图中浅色框表示是在</strong>innodb<strong>内部执行的，深色框表示是在执行器中执行的。</strong></p>\n<p><img src=\"image-20220102230621250.png\" alt=\"MySQL执行流程\"></p>\n<p>两阶段提交是指redo log类似于事务写日志的方式，只有在确认binlog 被实际落盘时，才会出现提交redo log的情况。</p>\n<p><strong>分阶段失败</strong></p>\n<p><strong>1 prepare阶段  2 写binlog  3 commit</strong></p>\n<p>当在2之前崩溃时</p>\n<p>重启恢复：后发现没有commit，回滚。  备份恢复：没有binlog 。</p>\n<p>结果：一致</p>\n<p>当在3之前崩溃</p>\n<p>重启恢复：虽没有commit，但满足prepare和binlog完整，所以重启后会自动commit。</p>\n<p>备份：有binlog。</p>\n<p>结果： 一致</p>\n<blockquote>\n<p>binlog用于备份，redolog则保证binlog的正确性，提供crash-safe能力，redo log循环写，不持久保存，binlog则进行“归档”。</p>\n</blockquote>\n<p>MySQL中<strong>undo</strong>的内容会被记录到redo中吗？会的</p>\n<p>比如一个事务在执行到一半的时候实例崩溃了，在恢复的时候先恢复redo，再根据redo构造undo回滚宕机前没有提交的事务</p>\n<p>数据被修改一般会积累再内存中(如图上)，累积一段后再刷入磁盘，如果这个时候崩溃，也不会出现什么问题，重启时会扫描binlog，没有写入磁盘的数据也会在此时被写入。</p>\n","categories":[{"name":"分布式服务","slug":"分布式服务","permalink":"chunlife.top/categories/分布式服务/"}],"tags":[{"name":"MIT 6.824","slug":"MIT-6-824","permalink":"chunlife.top/tags/MIT-6-824/"},{"name":"论文","slug":"论文","permalink":"chunlife.top/tags/论文/"}]},{"title":"使用Go按周日到周六为一周，获取周数","date":"2021-12-21T10:56:06.000Z","path":"2021/12/21/使用Go按周日到周六为一周，获取周数/","content":"<p>因为有个业务需要算周别，且是按照周天到周六的算法，和常见的周一到周天，有些区别，所以<code>ISOWeek</code>函数就不好使了，找了下发现Go没有现成的，也没人实现过，所以就有了这篇文章。</p>\n<a id=\"more\"></a>\n<p>推荐代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">weekStartEnd</span><span class=\"params\">(year, week <span class=\"keyword\">int</span>)</span> <span class=\"params\">(time.Time, time.Time, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> week &lt; <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> time.Time&#123;&#125;, time.Time&#123;&#125;, fmt.Errorf(<span class=\"string\">\"week number must be greater than 0\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 计算年份的1月1日</span></span><br><span class=\"line\">\tfirstDayOfYear := time.Date(year, time.January, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, time.UTC)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 计算1月1日是周几 (0: 周日, 1: 周一, ..., 6: 周六)</span></span><br><span class=\"line\">\tdayOfWeek := <span class=\"keyword\">int</span>(firstDayOfYear.Weekday())</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 计算第一周的起始日期</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> daysToFirstWeek <span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> dayOfWeek == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tdaysToFirstWeek = <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tdaysToFirstWeek = <span class=\"number\">8</span> - dayOfWeek</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfirstWeekStart := firstDayOfYear.AddDate(<span class=\"number\">0</span>, <span class=\"number\">0</span>, daysToFirstWeek<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 计算指定周的起始和结束日期</span></span><br><span class=\"line\">\tweekStart := firstWeekStart.AddDate(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">7</span>*(week<span class=\"number\">-1</span>))</span><br><span class=\"line\">\tweekEnd := weekStart.AddDate(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> weekStart, weekEnd, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestTime</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tyear := <span class=\"number\">2022</span></span><br><span class=\"line\">\tweek := <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tstart, end, err := weekStartEnd(year, week)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"Error:\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"Year %d, week %d starts on %s and ends on %s\\n\"</span>, year, week, start.Format(<span class=\"string\">\"2006-01-02\"</span>), end.Format(<span class=\"string\">\"2006-01-02\"</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以前的实现，直接上代码吧：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> timex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\ttime.Time</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newDate</span><span class=\"params\">(year <span class=\"keyword\">int</span>, month time.Month, day <span class=\"keyword\">int</span>, hour <span class=\"keyword\">int</span>, min <span class=\"keyword\">int</span>, sec <span class=\"keyword\">int</span>, nsec <span class=\"keyword\">int</span>, loc *time.Location)</span> <span class=\"title\">timex</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> timex&#123;time.Date(year, month, day, hour, min, sec, nsec, loc)&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ISO Week 周一到周天</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(tx timex)</span> <span class=\"title\">whichWeek</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//tx := time.Now()</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// https://weeknumber.com/?q=02%2F01%2F2022</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// Thursday in current week decides the year.</span></span><br><span class=\"line\">\ttm1 := time.Date(tx.Year(), tx.Month(), tx.Day()+<span class=\"number\">3</span>-(<span class=\"keyword\">int</span>(tx.Weekday())+<span class=\"number\">6</span>)%<span class=\"number\">7</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, time.UTC)</span><br><span class=\"line\">\t<span class=\"comment\">// January 4 is always in week 1.</span></span><br><span class=\"line\">\tweek1 := time.Date(tm1.Year(), <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, time.UTC)</span><br><span class=\"line\">\t<span class=\"comment\">// Adjust to Thursday in week 1 and count number of weeks from date to week1.</span></span><br><span class=\"line\">\tabs := <span class=\"number\">1</span> + math.Round((<span class=\"keyword\">float64</span>((tm1.Unix()-week1.Unix())/<span class=\"number\">86400</span>)-<span class=\"keyword\">float64</span>(<span class=\"number\">3</span>)+<span class=\"keyword\">float64</span>((<span class=\"keyword\">int</span>(week1.Weekday())+<span class=\"number\">6</span>)%<span class=\"number\">7</span>))/<span class=\"number\">7</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">int</span>(abs)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 周天到周六</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(tx timex)</span> <span class=\"title\">whichWeek2</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttm1 := time.Date(tx.Year(), tx.Month(), tx.Day()+<span class=\"number\">4</span>-<span class=\"keyword\">int</span>(tx.Weekday()), <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, time.UTC)</span><br><span class=\"line\">\tyearStart := time.Date(tm1.Year(), <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, time.UTC)</span><br><span class=\"line\">\tsd := math.Ceil((<span class=\"keyword\">float64</span>((tm1.Unix()-yearStart.Unix())/<span class=\"number\">86400</span>) + <span class=\"number\">1</span>) / <span class=\"number\">7</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">int</span>(sd)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算周开始的起始时间</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(tx timex)</span> <span class=\"title\">WeekStart</span><span class=\"params\">(year, week <span class=\"keyword\">int</span>)</span> <span class=\"title\">time</span>.<span class=\"title\">Time</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> year == <span class=\"number\">0</span> || week == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tyear = tx.Year()</span><br><span class=\"line\">\t\tweek = <span class=\"keyword\">int</span>(tx.Weekday())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Start from the middle of the year:</span></span><br><span class=\"line\">\tt2 := newDate(year, <span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, time.UTC)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Roll back to Monday:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> wd := t2.Weekday(); wd != time.Sunday &#123;</span><br><span class=\"line\">\t\tt2.Time = t2.AddDate(<span class=\"number\">0</span>, <span class=\"number\">0</span>, -<span class=\"keyword\">int</span>(wd))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Difference in weeks:</span></span><br><span class=\"line\">\tw := t2.whichWeek2()</span><br><span class=\"line\">\tt2.Time = t2.AddDate(<span class=\"number\">0</span>, <span class=\"number\">0</span>, (week-w)*<span class=\"number\">7</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> wd := t2.Weekday(); wd != time.Sunday &#123;</span><br><span class=\"line\">\t\tt2.Time = t2.AddDate(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-6</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> t2.Time</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算ISO周别的起始时间</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WeekStart</span><span class=\"params\">(year, week <span class=\"keyword\">int</span>)</span> <span class=\"title\">time</span>.<span class=\"title\">Time</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Start from the middle of the year:</span></span><br><span class=\"line\">\tt := time.Date(year, <span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, time.UTC)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Roll back to Monday:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> wd := t.Weekday(); wd == time.Sunday &#123;</span><br><span class=\"line\">\t\tt = t.AddDate(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-6</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tt = t.AddDate(<span class=\"number\">0</span>, <span class=\"number\">0</span>, -<span class=\"keyword\">int</span>(wd)+<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Difference in weeks:</span></span><br><span class=\"line\">\t_, w := t.ISOWeek()</span><br><span class=\"line\">\tt = t.AddDate(<span class=\"number\">0</span>, <span class=\"number\">0</span>, (week-w)*<span class=\"number\">7</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> wd := t.Weekday(); wd != time.Sunday &#123;</span><br><span class=\"line\">\t\tt = t.AddDate(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-6</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tt = t.AddDate(<span class=\"number\">0</span>, <span class=\"number\">0</span>, -<span class=\"keyword\">int</span>(wd)+<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考链接：</p>\n<blockquote>\n<p><a href=\"https://stackoverflow.com/questions/52300644/date-range-by-week-number-golang\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/52300644/date-range-by-week-number-golang</a></p>\n<p><a href=\"https://stackoverflow.com/questions/45910292/get-week-number-with-week-starting-from-sunday\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/45910292/get-week-number-with-week-starting-from-sunday</a></p>\n</blockquote>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"获取周别 - Go","slug":"获取周别-Go","permalink":"chunlife.top/tags/获取周别-Go/"}]},{"title":"兼容Redis协议的kafka消息中间件服务","date":"2021-11-19T14:17:28.000Z","path":"2021/11/19/兼容Redis协议的消息中间件服务/","content":"<p>内部一直需要使用消息队列，所以这边考虑写一个中间件简化这些代码交互，将交互统统归化统一为单纯的发送/接受处理函数。最近也算是完成了中间件CS端的编写了。</p>\n<p>消息中间件的作用是为了简化应用程序对消息队列的交互，让应用程序更多的关心代码逻辑，不用关心<code>Kafka</code>的操作。兼容<code>Redis</code>协议，可以更为方便去掉写客户端的麻烦事（可以使用<code>Redis</code>客户端，后面会提）。</p>\n<h2><span id=\"redis协议解析\">Redis协议解析</span></h2>\n<p>兼容<code>Redis</code><a href=\"http://redisdoc.com/topic/protocol.html\" target=\"_blank\" rel=\"noopener\">协议</a>，<code>redis</code>C/S使用的是<code>TCP</code>连接，协议编码为二进制，类似于这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;*3\\r\\n$3\\r\\nSET\\r\\n$5\\r\\nmykey\\r\\n$7\\r\\nmyvalue\\r\\n&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">通过检查服务器发回数据的第一个字节， 可以确定这个回复是什么类型：</span><br><span class=\"line\"></span><br><span class=\"line\">状态回复（status reply）的第一个字节是 &quot;+&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">错误回复（error reply）的第一个字节是 &quot;-&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">整数回复（integer reply）的第一个字节是 &quot;:&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">批量回复（bulk reply）的第一个字节是 &quot;$&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">多条批量回复（multi bulk reply）的第一个字节是 &quot;*&quot;</span><br></pre></td></tr></table></figure>\n<p>也就是在处理逻辑上，套一层协议解析。像<code>Go Redis</code>客户端肯定是都实现了协议解析的，但有更方便的做法，使用**<a href=\"https://github.com/tidwall/redcon\" target=\"_blank\" rel=\"noopener\">redcon</a>**。这个库帮我们做掉了协议套壳的那一层。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"sync\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/tidwall/redcon\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> addr = <span class=\"string\">\":6380\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mu sync.RWMutex</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> items = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>][]<span class=\"keyword\">byte</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ps redcon.PubSub</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> log.Printf(<span class=\"string\">\"started server at %s\"</span>, addr)</span><br><span class=\"line\">\terr := redcon.ListenAndServe(addr,</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(conn redcon.Conn, cmd redcon.Command)</span></span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 参数处理逻辑</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span> strings.ToLower(<span class=\"keyword\">string</span>(cmd.Args[<span class=\"number\">0</span>])) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\tconn.WriteError(<span class=\"string\">\"ERR unknown command '\"</span> + <span class=\"keyword\">string</span>(cmd.Args[<span class=\"number\">0</span>]) + <span class=\"string\">\"'\"</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"ping\"</span>:</span><br><span class=\"line\">\t\t\t\tconn.WriteString(<span class=\"string\">\"PONG\"</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"quit\"</span>:</span><br><span class=\"line\">\t\t\t\tconn.WriteString(<span class=\"string\">\"OK\"</span>)</span><br><span class=\"line\">\t\t\t\tconn.Close()</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 设置标志位，置1 拒绝连接接入</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(conn redcon.Conn)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Use this function to accept or deny the connection.</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// log.Printf(\"accept: %s\", conn.RemoteAddr())</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\">// close时，清除Kafka相关资源</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(conn redcon.Conn, err error)</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// This is called when the connection has been closed</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// log.Printf(\"closed: %s, err: %v\", conn.RemoteAddr(), err)</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"kafka交互\">Kafka交互</span></h2>\n<p>Kafka交互使用的库是：<a href=\"github.com/Shopify/sarama\">sarama</a>。</p>\n<p>以前<code>sarama</code>这块实现缺的地方是对<code>offset</code>的更多底层操作，没将mark权限暴露给开发者来做。需要借助另一个库<a href=\"https://github.com/bsm/sarama-cluster\" target=\"_blank\" rel=\"noopener\"><em>sarama</em>-<em>cluster</em></a> 来做。但现在它已经把这块给做掉了，所以单用这个库是没有什么问题的。</p>\n<p>实际操作参考官方库案例：<a href=\"https://github.com/Shopify/sarama/blob/main/examples/consumergroup/main.go\" target=\"_blank\" rel=\"noopener\">https://github.com/Shopify/sarama/blob/main/examples/consumergroup/main.go</a></p>\n<h2><span id=\"客户端\">客户端</span></h2>\n<p>客户端的编写会是比较麻烦的点，应该中间件使用的是<code>redis</code>协议，那客户端需要也兼容它，那我们怎么兼容呢？</p>\n<p>由于服务端使用了<code>Redis</code>兼容，那客户端，是可以直接使用<code>Redis</code>的库的，比如<a href=\"https://github.com/go-redis/redis\" target=\"_blank\" rel=\"noopener\">go-redis/redis</a>。选用这个库是因为其把连接池和重试策略都做了，这样我们可以复用这个连接库，往里面添加自己的逻辑代码即可。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis.Options&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//连接信息</span></span><br><span class=\"line\">\t\tNetwork:  <span class=\"string\">\"tcp\"</span>,                  <span class=\"comment\">//网络类型，tcp or unix，默认tcp</span></span><br><span class=\"line\">\t\tAddr:     <span class=\"string\">\"127.0.0.1:6379\"</span>, <span class=\"comment\">//主机名+冒号+端口，默认localhost:6379</span></span><br><span class=\"line\">\t\tPassword: <span class=\"string\">\"\"</span>,                     <span class=\"comment\">//密码, 发送auth指令，带着ps参数，可作为中间件验证</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t<span class=\"comment\">//连接池容量及闲置连接数量</span></span><br><span class=\"line\">\t\tPoolSize:     <span class=\"number\">15</span>, <span class=\"comment\">// 连接池最大socket连接数，默认为4倍CPU数， 4 * runtime.NumCPU</span></span><br><span class=\"line\">\t\tMinIdleConns: <span class=\"number\">10</span>, <span class=\"comment\">//在启动阶段创建指定数量的Idle连接，并长期维持idle状态的连接数不少于指定数量；。</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t<span class=\"comment\">//超时</span></span><br><span class=\"line\">\t\tDialTimeout:  <span class=\"number\">5</span> * time.Second, <span class=\"comment\">//连接建立超时时间，默认5秒。</span></span><br><span class=\"line\">\t\tReadTimeout:  <span class=\"number\">3</span> * time.Second, <span class=\"comment\">//读超时，默认3秒， -1表示取消读超时</span></span><br><span class=\"line\">\t\tWriteTimeout: <span class=\"number\">3</span> * time.Second, <span class=\"comment\">//写超时，默认等于读超时</span></span><br><span class=\"line\">\t\tPoolTimeout:  <span class=\"number\">4</span> * time.Second, <span class=\"comment\">//当所有连接都处在繁忙状态时，客户端等待可用连接的最大等待时长，默认为读超时+1秒。</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t<span class=\"comment\">//闲置连接检查包括IdleTimeout，MaxConnAge</span></span><br><span class=\"line\">\t\tIdleCheckFrequency: <span class=\"number\">60</span> * time.Second, <span class=\"comment\">//闲置连接检查的周期，默认为1分钟，-1表示不做周期性检查，只在客户端获取连接时对闲置连接进行处理。</span></span><br><span class=\"line\">\t\tIdleTimeout:        <span class=\"number\">5</span> * time.Minute,  <span class=\"comment\">//闲置超时，默认5分钟，-1表示取消闲置超时检查</span></span><br><span class=\"line\">\t\tMaxConnAge:         <span class=\"number\">0</span> * time.Second,  <span class=\"comment\">//连接存活时长，从创建开始计时，超过指定时长则关闭连接，默认为0，即不关闭存活时长较长的连接</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t<span class=\"comment\">//命令执行失败时的重试策略</span></span><br><span class=\"line\">\t\tMaxRetries:      <span class=\"number\">0</span>,                      <span class=\"comment\">// 命令执行失败时，最多重试多少次，默认为3</span></span><br><span class=\"line\">\t\tMinRetryBackoff: <span class=\"number\">8</span> * time.Millisecond,   <span class=\"comment\">//每次计算重试间隔时间的下限，默认8毫秒，-1表示取消间隔</span></span><br><span class=\"line\">\t\tMaxRetryBackoff: <span class=\"number\">512</span> * time.Millisecond, <span class=\"comment\">//每次计算重试间隔时间的上限，默认512毫秒，-1表示取消间隔</span></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"总结\">总结</span></h2>\n<p>最好，整体写完中间件全部服务还是花了一些功夫，主要是一些细节需要抠，特别是<code>Kafka sarama</code>的使用，大家还是优先使用<em>sarama</em>-<em>cluster</em>，我看了一些仓库使用<code>sarama</code>的方式，里面其实也有一些细节处有问题，但可能其他库的使用环境不会触发那些个问题把。</p>\n<p>另外就是使用<code>redis</code>库时，中间件不回发数据，客户端其会重试发送数据，尝试获取返回结果，所以返回数据时需要妥善处理。</p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"redis","slug":"redis","permalink":"chunlife.top/tags/redis/"},{"name":"kafka","slug":"kafka","permalink":"chunlife.top/tags/kafka/"}]},{"title":"kong网关-http转grpc使用","date":"2021-11-13T03:50:22.000Z","path":"2021/11/13/kong网关-http转grpc使用/","content":"<p>正常项目中，对外提供的接口都是HTTP接口，可是后端架构中，我们内部已经迭代成gRPC版本了。这样还得做一层抽象HTTP层去调用server端的GRPC，在项目中，能免去这个HTTP层吗？</p>\n<p>答案是可以的，使用网关，通过网关层做掉HTTP转GRPC的协议这层，这样就可以尽量让后端都提供出grpc了。</p>\n<p>网关的选择有很多种，这里选型有，apisix、kong以及envoy，前两者是lua+openresty，后者是C++，考虑到维护性（<code>C++的水太深，我把握不住</code>），故直接选择前两者。</p>\n<h2><span id=\"对比\">对比</span></h2>\n<p>详细的对比结果没啥意义，各个公司都有自己的考量，我就不放了。</p>\n<p>相比较于grpc的支持，<code>apisix</code>只能说不太行，首先<code>dashboard(社区版)</code>的支持就没做好，管理proto文件不方便，得通过API导入，且不支持proto文件依赖。</p>\n<p>kong可以，所以我选择kong。</p>\n<p>至于其他方面的对比，或者说部署上，我还是偏向于apisix的，因为它是依托于etcd完成的整体构建，比kong使用DB+轮询的方式，配置下发响应，以及维护难度上，还是领先不少的。</p>\n<h2><span id=\"kong的使用\">kong的使用</span></h2>\n<p>搭建的过程直接使用docker-compose一键搭建。(<code>只作为验证</code>)</p>\n<p><a href=\"https://gist.github.com/adib-enc/d82415128cdb6d313e54d5b606e8c1ab\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/adib-enc/d82415128cdb6d313e54d5b606e8c1ab</a></p>\n<p>KONG中有两个针对GRPC的插件，GRPC-web和GRPC-Gateway，</p>\n<p><code>GRPC-web</code>插件不需要proto文件做额外的注解。</p>\n<p><img src=\"clip_image001-16367850272561.png\" alt=\"proto file\"></p>\n<p>访问接口，则需要使用POST Method，数据通过<code>JSON</code>传输。</p>\n<p><code>GRPC-Gateway</code> 使用GRPC所带的注解，可以使用不同Restful的方法，是理想的状态。</p>\n<p><img src=\"clip_image001-16367851199143.png\" alt=\"带annotations.proto的proto\"></p>\n<p>引入<strong>annotations.proto</strong>文件，其protobuf所扩展的HTTP Option，在proto文件中对函数转换HTTP提供支持，protoc工具在编译时，会把HTTP相关信息一并写入<code>.pb.go</code>文件。</p>\n<h2><span id=\"问题\">问题</span></h2>\n<p>现阶段两者都有个问题：</p>\n<p>proto文件更新；proto文件被加载过一次后，KONG在map中若找到此文件，则不会去解析文件，只会从缓存中拿取。</p>\n<p><a href=\"https://github.com/Kong/kong/blob/master/kong/plugins/grpc-gateway/deco.lua\" target=\"_blank\" rel=\"noopener\">https://github.com/Kong/kong/blob/master/kong/plugins/grpc-gateway/deco.lua</a></p>\n<p><img src=\"clip_image001.png\" alt=\"解析proto file\"></p>\n<p><strong>解决问题的方法</strong></p>\n<ul>\n<li>\n<p>单点上要引入一个手动触发更新的trigger，让插件重新读取一次数据。</p>\n</li>\n<li>\n<p>分布式多体的场景，则需要引入<code>Redis</code>了，由于不是<code>etcd</code>，所以<code>kong</code>只能借助到共享内存来完成。proto file保存到某一节点即可，但此节点承担起了预备数据的责任。</p>\n</li>\n</ul>\n<h2><span id=\"参考资料\">参考资料</span></h2>\n<p>kong的很多方面其实很多博客都讲解的非常详尽了，我其实也是搜集了很多放在<code>OneNote</code>上，这里我就不截取内容了，把链接丢在这里。</p>\n<p><strong>Kong中使用grpc-web插件代理grpc服务时遇到的坑</strong></p>\n<p>来自 <a href=\"https://www.jianshu.com/p/0a7e3a8fa8a0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/0a7e3a8fa8a0</a></p>\n<p><strong>Kong 插件开发指南</strong></p>\n<p>来自 <a href=\"https://ms2008.github.io/2018/06/19/kong-plugin-development/\" target=\"_blank\" rel=\"noopener\">https://ms2008.github.io/2018/06/19/kong-plugin-development/</a></p>\n<p><strong>kong – 如何编写插件</strong></p>\n<p>来自 &lt;<a href=\"https://yuerblog.cc/2019/12/18/kong-%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E6%8F%92%E4%BB%B6/\" target=\"_blank\" rel=\"noopener\">https://yuerblog.cc/2019/12/18/kong-%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E6%8F%92%E4%BB%B6/</a>&gt;</p>\n<p><strong>云原生网关 Kong 源码分析</strong></p>\n<p>来自 &lt;<a href=\"https://cloudnative.to/blog/kong-source-code-reading/#1-%E6%A6%82%E8%BF%B0\" target=\"_blank\" rel=\"noopener\">https://cloudnative.to/blog/kong-source-code-reading/#1-%E6%A6%82%E8%BF%B0</a>&gt;</p>\n<p><strong>分布式系统的负载均衡</strong>来自 <a href=\"https://z.itpub.net/article/detail/9B74CCC9C2F14E3BEA5E548C63B16315\" target=\"_blank\" rel=\"noopener\">https://z.itpub.net/article/detail/9B74CCC9C2F14E3BEA5E548C63B16315</a></p>\n<p><strong>插件使用</strong>：<a href=\"https://tech.aufomm.com/tags/kong-plugin/\" target=\"_blank\" rel=\"noopener\">https://tech.aufomm.com/tags/kong-plugin/</a></p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"GRPC","slug":"GRPC","permalink":"chunlife.top/tags/GRPC/"},{"name":"KONG","slug":"KONG","permalink":"chunlife.top/tags/KONG/"}]},{"title":"API幂等的模型简略","date":"2021-10-16T16:05:36.000Z","path":"2021/10/17/API幂等的模型简略/","content":"<p>最近在项目中要考虑一个接口幂等问题，幂等既是，多次请求请求接口，接口操作的东西都不会被其后续的重复请求所改变，维持第一次请求成功时的样子。</p>\n<p>例如查询操作，不管查询多少次，在数据不变的情况下，查询到的数据都是一样的；删除一条数据也是，删一次和多次，都已经将数据删除了。</p>\n<h2><span id=\"总结\">总结</span></h2>\n<p>幂等的很多结论以及方法都已经是个老话题了，看这个<a href=\"https://blog.csdn.net/u011635492/article/details/81058153\" target=\"_blank\" rel=\"noopener\">博客</a>总结的，方法和总结基本都全说了：</p>\n<hr>\n<p>幂等与你是不是分布式高并发还有JavaEE都没有关系。<strong>关键是你的操作是不是幂等的</strong>。</p>\n<p>一个幂等的操作典型如：把编号为5的记录的A字段设置为0这种操作不管执行多少次都是幂等的。</p>\n<p>一个非幂等的操作典型如：把编号为5的记录的A字段增加1这种操作显然就不是幂等的。</p>\n<p>要做到幂等性，从接口设计上来说不设计任何非幂等的操作即可。</p>\n<p>譬如说需求是：当用户点击赞同时，将答案的赞同数量+1。改为：当用户点击赞同时，确保答案赞同表中存在一条记录，用户、答案。赞同数量由答案赞同表统计出来。</p>\n<hr>\n<h2><span id=\"分析\">分析</span></h2>\n<p>达成幂等，这里选用幂等号来完成，这里会碰到一些异常情况。</p>\n<p>首先我们要清楚，接口请求大体分为三个阶段：</p>\n<ol>\n<li>调用方发起请求，且被对方接收到；</li>\n<li>执行接口处理逻辑；</li>\n<li>执行返回；</li>\n</ol>\n<p>1、3阶段对整体访问来说无伤大雅，总体上，幂等号都已经被设置上了，但在阶段二，就有可能出现幂等号保存了，结果业务挂了，导致数据不一致，这样会让调用方的逻辑造成迷惑。请求并没有成功，但重试请求却无法执行了。</p>\n<p>总结一下：</p>\n<ul>\n<li><strong>业务代码异常处理</strong>，是否阻止该接口继续被调用，由开发自行设置；</li>\n<li><strong>业务系统宕机处理</strong>，会造成数据不一致问题，前面提到了，使用手动补偿，或者MySQL事务的方式人工补偿或避免该问题的产生；</li>\n<li><strong>幂等组件处理</strong>，例如<code>redis</code>挂了，使用人工补偿的方式的话，<code>redis</code>作为最要组件宕机，正常服务应直接降级，等待修复；</li>\n</ul>\n<h2><span id=\"实现\">实现</span></h2>\n<p>代码：<a href=\"https://github.com/younglifestyle/idempotence\" target=\"_blank\" rel=\"noopener\">https://github.com/younglifestyle/idempotence</a></p>\n<h3><span id=\"手动补偿失败\">手动补偿失败</span></h3>\n<p>保存幂等号，可以直接存<code>Redis</code>，但是会有数据不一致的风险。这里在<a href=\"https://time.geekbang.org/column/intro/100039001\" target=\"_blank\" rel=\"noopener\">设计模式之美</a>中提到一句话，<code>做工程不是做理论。对于这种极少发生的异常，在工程中，我们能够做到，在出错时能及时发现问题、能够根据记录的信息人工修复就可以了。</code></p>\n<p>作为一种做工程上的取舍平衡，这个是值得思考的。这里可以记录下SQL的执行日志，在日志中再附加上幂等号。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> idempotence_v1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/go-redis/redis\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/google/uuid\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Idempotence <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// GenerateId 生成或拿取唯一识别ID</span></span><br><span class=\"line\">\tGenerateId() <span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tIdempotenceStorage</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> IdempotenceStorage <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// SaveIfAbsent 保存唯一ID</span></span><br><span class=\"line\">\tSaveIfAbsent(idempotenceId <span class=\"keyword\">string</span>) <span class=\"keyword\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Delete 删除幂等ID</span></span><br><span class=\"line\">\tDelete(idempotenceId <span class=\"keyword\">string</span>) (result <span class=\"keyword\">bool</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> RedisIdempotenceImpl <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tconn *redis.Client</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewRedisIdempotence 复用Redis链接，不在内部创建</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewRedisIdempotence</span><span class=\"params\">(conn *redis.Client)</span> <span class=\"title\">IdempotenceStorage</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;RedisIdempotenceImpl&#123;conn: conn&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(idem *RedisIdempotenceImpl)</span> <span class=\"title\">GenerateId</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> uuid.New().String()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// SaveIfAbsent 根据返回值判断幂等ID是否有存在</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(idem *RedisIdempotenceImpl)</span> <span class=\"title\">SaveIfAbsent</span><span class=\"params\">(idempotenceId <span class=\"keyword\">string</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// setnx : 不加ExpireTime是原子的，加ExpireTime原子操作要用LUA脚本才是原子操作</span></span><br><span class=\"line\">\t<span class=\"comment\">// 相当于执行了setnx后，再设置过期时间.</span></span><br><span class=\"line\">\t<span class=\"comment\">// 故Redis在设置key后崩溃，ExpireTime是加不上的，</span></span><br><span class=\"line\">\t<span class=\"comment\">// 不过后面的DEL操作肯定也报错了，加上打印，以及错误上报（Prometheus），让人工进行干预</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> idem.conn.SetNX(idempotenceId, <span class=\"number\">1</span>, time.Second*<span class=\"number\">3000</span>).Val()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Delete 失败的情况，应将失败SQL和幂等ID打印出来，以预期人工干预来进行补偿</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(idem *RedisIdempotenceImpl)</span> <span class=\"title\">Delete</span><span class=\"params\">(idempotenceId <span class=\"keyword\">string</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\terr := idem.conn.Del(idempotenceId).Err()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"mysql事务\">MySQL事务</span></h3>\n<p>将幂等号插入实际业务表中，或者新建一张幂等表，将幂等号设置为唯一键，通过MySQL事务关联，这里的代码会与业务代码耦合在一起，无法将之分开。代码量也会增加很多。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// $ docker run -p 6379:6379 --name my-redis -d redis:latest</span></span><br><span class=\"line\"><span class=\"comment\">// $ docker run -p 3306:3306 --name my-mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:latest</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/go-redis/redis\"</span></span><br><span class=\"line\">\tlog <span class=\"string\">\"github.com/sirupsen/logrus\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"golang.org/x/sync/singleflight\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"gorm.io/driver/mysql\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"gorm.io/gorm\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"gorm.io/gorm/schema\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"idempotence_v2/model\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"sync\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cacheSingleFlight = &amp;singleflight.Group&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getDbConn</span><span class=\"params\">()</span> <span class=\"params\">(db *gorm.DB, err error)</span></span> &#123;</span><br><span class=\"line\">\tdsn := <span class=\"string\">\"root:123456@tcp(127.0.0.1:3306)/test?charset=utf8mb4&amp;parseTime=True&amp;loc=Local\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tdb, err = gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;</span><br><span class=\"line\">\t\tNamingStrategy: schema.NamingStrategy&#123;SingularTable: <span class=\"literal\">true</span>&#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t_ = db.AutoMigrate(&amp;model.StudentMoney&#123;&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回返回值给调用者使用，保存redis失败无很大问题，再次请求再传一次即可</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">saveIdToRedis</span><span class=\"params\">(rdb *redis.Client, idempotenceId <span class=\"keyword\">string</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rdb.SetNX(idempotenceId, <span class=\"number\">1</span>, time.Second*<span class=\"number\">20</span>).Val()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getIdFromRedis</span><span class=\"params\">(rdb *redis.Client, idempotenceId <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rdb.Get(idempotenceId).Val()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 学生参与劳动，即可获得奖励，创建转账记录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">giveTipToStudent</span><span class=\"params\">(db *gorm.DB, rdb *redis.Client, studentMoney *model.StudentMoney)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 并发量大时，这里是会同时找不到ID，且从DB中也捞不出DB的</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> getIdFromRedis(rdb, studentMoney.IdempotenceId) == <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 缓存查不到就查数据库</span></span><br><span class=\"line\">\t\trr, _, _ := cacheSingleFlight.Do(studentMoney.IdempotenceId, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"params\">(r <span class=\"keyword\">interface</span>&#123;&#125;, e error)</span></span> &#123;</span><br><span class=\"line\">\t\t\tlog.Debug(<span class=\"string\">\"cache miss : \"</span>, studentMoney.IdempotenceId)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> stuMoneyExistInfo model.StudentMoney</span><br><span class=\"line\">\t\t\terr := db.Select(<span class=\"string\">\"idempotence_id\"</span>).First(&amp;stuMoneyExistInfo,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"idempotence_id = ?\"</span>, studentMoney.IdempotenceId).Error</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &amp;&amp; err != gorm.ErrRecordNotFound &#123;</span><br><span class=\"line\">\t\t\t\tlog.Errorf(<span class=\"string\">\"select idempotence_id From student_money WHERE idempotence_id = %s, error = %s\"</span>,</span><br><span class=\"line\">\t\t\t\t\tstudentMoney.IdempotenceId, err.Error())</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> stuMoneyExistInfo, <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tstuMoneyExistInfo := rr.(model.StudentMoney)</span><br><span class=\"line\">\t\t<span class=\"comment\">// id exist in db</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> stuMoneyExistInfo.IdempotenceId != <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Debug(<span class=\"string\">\"get id from db : \"</span>, stuMoneyExistInfo.IdempotenceId)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t_ = saveIdToRedis(rdb, studentMoney.IdempotenceId)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 缓存中存在幂等值，不执行</span></span><br><span class=\"line\">\t\tlog.Debug(<span class=\"string\">\"id exist\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := db.Transaction(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *gorm.DB)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t\tlog.Debug(<span class=\"string\">\"store id : \"</span>, studentMoney.IdempotenceId)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err := tx.Create(studentMoney).Error; err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 返回任何错误都会回滚事务</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 返回 nil 提交事务</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_ = saveIdToRedis(rdb, studentMoney.IdempotenceId)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlog.SetLevel(log.DebugLevel)</span><br><span class=\"line\"></span><br><span class=\"line\">\trdb := redis.NewClient(&amp;redis.Options&#123;</span><br><span class=\"line\">\t\tAddr: <span class=\"string\">\":6379\"</span>,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\tdbConn, err := getDbConn()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\twg := sync.WaitGroup&#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++ &#123;</span><br><span class=\"line\">\t\twg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//time.Sleep(time.Millisecond * 100)</span></span><br><span class=\"line\">\t\t\terr = giveTipToStudent(dbConn, rdb, &amp;model.StudentMoney&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//IdempotenceId: GenerateId(),</span></span><br><span class=\"line\">\t\t\t\tIdempotenceId: <span class=\"string\">\"b533516b-744c-41b6-b4d6-ba42bfc13fed\"</span>,</span><br><span class=\"line\">\t\t\t\tName:          <span class=\"string\">\"right\"</span>,</span><br><span class=\"line\">\t\t\t\tAge:           <span class=\"number\">18</span>,</span><br><span class=\"line\">\t\t\t\tMoney:         <span class=\"number\">100</span>,</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\twg.Done()</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\"></span><br><span class=\"line\">\ttime.Sleep(time.Second * <span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>ID的生成可以是内部产生，也可以是依赖外部服务，保持绝对唯一，例如使用美团<code>Leaf</code>。为了简单易用，且减少依赖，且根据服务请求量来评估，选前者会更易于维护一些。</p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"幂等","slug":"幂等","permalink":"chunlife.top/tags/幂等/"},{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"}]},{"title":"Go并发模型: pipeline中FAN模式(fanout，fanin)","date":"2021-09-30T09:00:14.000Z","path":"2021/09/30/Go并发模型-pipeline中FAN模式-fanout，fanin/","content":"<p>流水线模型在编程中是非常常见的，但扇入扇出模型可能就较少听闻了。</p>\n<p>以汽车组装为例，汽车生产线上有个阶段是<strong>给小汽车装4个轮子</strong>，可以把这个阶段任务交给4个人同时去做，这4个人把轮子都装完后，再把汽车移动到生产线下一个阶段。（这是流水线）</p>\n<p>这个过程中，就有任务的分发，和任务结果的收集。其中任务分发是FAN-OUT，任务收集是FAN-IN。</p>\n<ul>\n<li>**FAN-OUT模式：多个goroutine从同一个通道读取数据，直到该通道关闭。**OUT是一种张开的模式，所以又被称为扇出，可以用来分发任务。</li>\n<li>**FAN-IN模式：1个goroutine从多个通道读取数据，直到这些通道关闭。**IN是一种收敛的模式，所以又被称为扇入，用来收集处理的结果。</li>\n</ul>\n<p><img src=\"1460000017182419.png\" alt=\"fan-in和fan-out.png\"></p>\n<p>可以看到FAN模式，其作为一种并发模型，是无法保证执行顺序的，同样也无法保证返回的顺序。所以各个块部分运行的独立性是先决条件。</p>\n<p>FAN模型的优势在其他文章就有提到：</p>\n<ul>\n<li>FAN模式可以提高CPU利用率。</li>\n<li>FAN模式<strong>可以</strong>提升程序运行效率，降低程序运行时间。（用的好的情况下）</li>\n</ul>\n<p>这里面很好理解，FANOUT类似于一个读放大，普通的流水线模型，可能只有一个worker协程处理，FAN模型相当于增加消费端，而且读取的channel还类似于一个队列，增加其缓冲容量，也能接纳更多的请求。</p>\n<p>代码演示和详细的解释，我觉得其他文章已经讲的很好了，我这里直接贴链接了：</p>\n<p><a href=\"https://segmentfault.com/a/1190000017142506\" target=\"_blank\" rel=\"noopener\">Go并发模型：轻松入门流水线模型</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000017182416\" target=\"_blank\" rel=\"noopener\">Golang并发模型：轻松入门流水线FAN模式</a></p>\n<p><a href=\"https://www.kancloud.cn/mutouzhang/go/596844\" target=\"_blank\" rel=\"noopener\">扇入扇出</a></p>\n<hr>\n<p>怎么实现一个fanout呢？</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> fanout</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"context\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"errors\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"runtime\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"sync\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t<span class=\"comment\">// ErrFull chan full.</span></span><br><span class=\"line\">\tErrFull   = errors.New(<span class=\"string\">\"fanout: chan full\"</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> options <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tworker <span class=\"keyword\">int</span></span><br><span class=\"line\">\tbuffer <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Option fanout option</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Option <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(*options)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">Worker</span> <span class=\"title\">specifies</span> <span class=\"title\">the</span> <span class=\"title\">worker</span> <span class=\"title\">of</span> <span class=\"title\">fanout</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">Worker</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span> <span class=\"title\">Option</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> n &lt;= <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"fanout: worker should &gt; 0\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(o *options)</span></span> &#123;</span><br><span class=\"line\">\t\to.worker = n</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Buffer specifies the buffer of fanout</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Buffer</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span> <span class=\"title\">Option</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> n &lt;= <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"fanout: buffer should &gt; 0\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(o *options)</span></span> &#123;</span><br><span class=\"line\">\t\to.buffer = n</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> item <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tf   <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c context.Context)</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">ctx</span> <span class=\"title\">context</span>.<span class=\"title\">Context</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">Fanout</span> <span class=\"title\">async</span> <span class=\"title\">consume</span> <span class=\"title\">data</span> <span class=\"title\">from</span> <span class=\"title\">chan</span>.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">type</span> <span class=\"title\">Fanout</span> <span class=\"title\">struct</span></span> &#123;</span><br><span class=\"line\">\tname    <span class=\"keyword\">string</span></span><br><span class=\"line\">\tch      <span class=\"keyword\">chan</span> item</span><br><span class=\"line\">\toptions *options</span><br><span class=\"line\">\twaiter  sync.WaitGroup</span><br><span class=\"line\"></span><br><span class=\"line\">\tctx    context.Context</span><br><span class=\"line\">\tcancel <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">// 新建一个<span class=\"title\">fanout</span> 对象 名称为<span class=\"title\">cache</span> 名称主要用来上报监控和打日志使用 最好不要重复</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"params\">(可选参数)</span> <span class=\"title\">worker</span>数量为1 表示后台只有1个线程在工作</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"params\">(可选参数)</span> <span class=\"title\">buffer</span> 为1024 表示缓存<span class=\"title\">chan</span>长度为1024 如果<span class=\"title\">chan</span>满了 再调用<span class=\"title\">Do</span>方法就会报错 设定长度主要为了防止<span class=\"title\">OOM</span></span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">New</span> <span class=\"title\">new</span> <span class=\"title\">a</span> <span class=\"title\">fanout</span> <span class=\"title\">struct</span>.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">New</span><span class=\"params\">(name <span class=\"keyword\">string</span>, opts ...Option)</span> *<span class=\"title\">Fanout</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> name == <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\tname = <span class=\"string\">\"fanout\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\to := &amp;options&#123;</span><br><span class=\"line\">\t\tworker: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\tbuffer: <span class=\"number\">1024</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, op := <span class=\"keyword\">range</span> opts &#123;</span><br><span class=\"line\">\t\top(o)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc := &amp;Fanout&#123;</span><br><span class=\"line\">\t\tch:      <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> item, o.buffer),</span><br><span class=\"line\">\t\tname:    name,</span><br><span class=\"line\">\t\toptions: o,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc.ctx, c.cancel = context.WithCancel(context.Background())</span><br><span class=\"line\">\tc.waiter.Add(o.worker)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; o.worker; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> c.proc()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读channel，异步执行channel传递的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Fanout)</span> <span class=\"title\">proc</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> c.waiter.Done()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> t := &lt;-c.ch:</span><br><span class=\"line\">\t\t\twrapFunc(t.f)(t.ctx)</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-c.ctx.Done():</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 包装函数，加入recover，防止panic导致程序挂掉</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">wrapFunc</span><span class=\"params\">(f <span class=\"keyword\">func</span>(c context.Context)</span>) <span class=\"params\">(res <span class=\"keyword\">func</span>(context.Context)</span>)</span> &#123;</span><br><span class=\"line\">\tres = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> r := <span class=\"built_in\">recover</span>(); r != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tbuf := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">64</span>*<span class=\"number\">1024</span>)</span><br><span class=\"line\">\t\t\t\tbuf = buf[:runtime.Stack(buf, <span class=\"literal\">false</span>)]</span><br><span class=\"line\">\t\t\t\tlog.Error(<span class=\"string\">\"panic in fanout proc, err: %s, stack: %s\"</span>, r, buf)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t\tf(ctx)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 需要异步执行的方法</span></span><br><span class=\"line\"><span class=\"comment\">// Do save a callback func.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Fanout)</span> <span class=\"title\">Do</span><span class=\"params\">(ctx context.Context, f <span class=\"keyword\">func</span>(ctx context.Context)</span>) <span class=\"params\">(err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> f == <span class=\"literal\">nil</span> || c.ctx.Err() != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> c.ctx.Err()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> c.ch &lt;- item&#123;f: f, ctx: ctx&#125;:</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\terr = ErrFull</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 程序结束的时候关闭fanout 会等待后台线程完成后返回</span></span><br><span class=\"line\"><span class=\"comment\">// Close close fanout</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Fanout)</span> <span class=\"title\">Close</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := c.ctx.Err(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc.cancel()</span><br><span class=\"line\">\tc.waiter.Wait()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>FAN-IN，怎么从多个通道读取数据呢？</p>\n<p>常见的，可以使用<code>WaitGroup</code>来保证取完所有channel数据。</p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"fanout","slug":"fanout","permalink":"chunlife.top/tags/fanout/"},{"name":"fanin","slug":"fanin","permalink":"chunlife.top/tags/fanin/"}]},{"title":"Go里面竟然还有单飞？—(singleflight)","date":"2021-09-29T14:17:11.000Z","path":"2021/09/29/Go里面竟然还有单飞？—-singleflight/","content":"<p><a href=\"https://pkg.go.dev/golang.org/x/sync/singleflight\" target=\"_blank\" rel=\"noopener\">singleflight</a>，官方解释其为：<code>singleflight</code>提供了一个重复的函数调用抑制机制。</p>\n<p>通俗的解释其作用是，若有多个协程运行某函数时，只让一个协程去处理，然后批量返回。非常适合来做并发控制。常见用于<code>缓存穿透</code>的情况。</p>\n<p><code>缓存穿透</code>即为某个热门内容Key过期，或者突然暴热，请求均没有从cache中获取到数据，就会导致大量的同进程、跨进程的数据回源到存储层，可能会引起存储过载的情况。这个时候使用<code>singleflight</code>就能达到一种归并回源的效果了。</p>\n<h2><span id=\"源码解释\">源码解释</span></h2>\n<p>普通版本，无归并操作：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"errors\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"sync\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> errorNotExist = errors.New(<span class=\"string\">\"redis: key not found\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">\twg.Add(<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 开启10个协程</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">\t\t\tdata, err := getData(<span class=\"string\">\"2000\"</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tlog.Print(err)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tlog.Println(data)</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getData</span><span class=\"params\">(key <span class=\"keyword\">string</span>)</span> <span class=\"params\">(<span class=\"keyword\">string</span>, error)</span></span> &#123;</span><br><span class=\"line\">\tdata, err := getDataFromCache(key)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err == errorNotExist &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 穿透到 DB 捞取数据</span></span><br><span class=\"line\">\t\tdata, err = getDataFromDB(key)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Println(err)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 回填数据到cache, 此处为模拟请求数差不多时间到达，还来不及回填cache</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> data, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从cache中获取值，cache中无该值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getDataFromCache</span><span class=\"params\">(key <span class=\"keyword\">string</span>)</span> <span class=\"params\">(<span class=\"keyword\">string</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>, errorNotExist</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从数据库中获取值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getDataFromDB</span><span class=\"params\">(key <span class=\"keyword\">string</span>)</span> <span class=\"params\">(<span class=\"keyword\">string</span>, error)</span></span> &#123;</span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">\"get %s from database\"</span>, key)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"2000 in db\"</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>查看打印值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2021/09/29 23:45:27 get 2000 from database</span><br><span class=\"line\">2021/09/29 23:45:27 2000 in db</span><br><span class=\"line\">2021/09/29 23:45:27 get 2000 from database</span><br><span class=\"line\">2021/09/29 23:45:27 2000 in db</span><br><span class=\"line\">2021/09/29 23:45:27 get 2000 from database</span><br><span class=\"line\">2021/09/29 23:45:27 2000 in db</span><br><span class=\"line\">2021/09/29 23:45:27 get 2000 from database</span><br><span class=\"line\">2021/09/29 23:45:27 2000 in db</span><br><span class=\"line\">2021/09/29 23:45:27 get 2000 from database</span><br><span class=\"line\">2021/09/29 23:45:27 2000 in db</span><br><span class=\"line\">2021/09/29 23:45:27 get 2000 from database</span><br><span class=\"line\">2021/09/29 23:45:27 2000 in db</span><br><span class=\"line\">2021/09/29 23:45:27 get 2000 from database</span><br><span class=\"line\">2021/09/29 23:45:27 2000 in db</span><br><span class=\"line\">2021/09/29 23:45:27 get 2000 from database</span><br><span class=\"line\">2021/09/29 23:45:27 2000 in db</span><br><span class=\"line\">2021/09/29 23:45:27 get 2000 from database</span><br><span class=\"line\">2021/09/29 23:45:27 2000 in db</span><br><span class=\"line\">2021/09/29 23:45:27 get 2000 from database</span><br><span class=\"line\">2021/09/29 23:45:27 2000 in db</span><br></pre></td></tr></table></figure>\n<p>跟常见的cache-aside一个逻辑：1、先cache中拿取数据；2、取不到数据就从DB拿，再回填给cache；</p>\n<p>但当请求来的比较快，cache是来不及回填的，也就会出现上述打印的现象，请求都从DB拿的数据。这个时候再来看看<code>singleflight</code>的官方介绍：</p>\n<blockquote>\n<p><code>singleflight</code>提供了一个重复的函数调用抑制机制。</p>\n</blockquote>\n<p>引入<code>singleflight</code>修改源码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"golang.org/x/sync/singleflight\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> singleFlightTest singleflight.Group</span><br><span class=\"line\"></span><br><span class=\"line\">.......</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getDataBySingleFlight</span><span class=\"params\">(key <span class=\"keyword\">string</span>)</span> <span class=\"params\">(<span class=\"keyword\">string</span>, error)</span></span> &#123;</span><br><span class=\"line\">\tdata, err := getDataFromCache(key)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err == errorNotExist &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 从db中获取数据</span></span><br><span class=\"line\">\t\tv, err, _ := singleFlightTest.Do(key, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> getDataFromDB(key)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// set cache</span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Println(err)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tdata = v.(<span class=\"keyword\">string</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// set cache</span></span><br><span class=\"line\">        <span class=\"comment\">// 可以在sl的wrapFunc中回填cache，也可以在外面回填数据，前者在go-zero的实例代码中可见，后者出现在bilibili的代码中</span></span><br><span class=\"line\">        <span class=\"comment\">// 读取的数据DB不存在，应该放置一个TTL标志位</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> data, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果的打印如下，可以看到一个请求去捞取完数据后，其他请求也都拿到数据了。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">09</span>/<span class=\"number\">30</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">23</span> get <span class=\"number\">2000</span> from database</span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">09</span>/<span class=\"number\">30</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">23</span> <span class=\"number\">2000</span> in db</span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">09</span>/<span class=\"number\">30</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">23</span> <span class=\"number\">2000</span> in db</span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">09</span>/<span class=\"number\">30</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">23</span> <span class=\"number\">2000</span> in db</span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">09</span>/<span class=\"number\">30</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">23</span> <span class=\"number\">2000</span> in db</span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">09</span>/<span class=\"number\">30</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">23</span> <span class=\"number\">2000</span> in db</span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">09</span>/<span class=\"number\">30</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">23</span> <span class=\"number\">2000</span> in db</span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">09</span>/<span class=\"number\">30</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">23</span> <span class=\"number\">2000</span> in db</span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">09</span>/<span class=\"number\">30</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">23</span> <span class=\"number\">2000</span> in db</span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">09</span>/<span class=\"number\">30</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">23</span> <span class=\"number\">2000</span> in db</span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">09</span>/<span class=\"number\">30</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">23</span> <span class=\"number\">2000</span> in db</span><br></pre></td></tr></table></figure>\n<h2><span id=\"函数简略\">函数简略</span></h2>\n<p><img src=\"image-20210930001827917.png\" alt=\"包简略\"></p>\n<p>包比较简单，网上也有很多分析代码的博客，我只在这里看下Do函数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(g *Group)</span> <span class=\"title\">Do</span><span class=\"params\">(key <span class=\"keyword\">string</span>, fn <span class=\"keyword\">func</span>()</span> <span class=\"params\">(<span class=\"keyword\">interface</span>&#123;&#125;, error)</span>) <span class=\"params\">(v <span class=\"keyword\">interface</span>&#123;&#125;, err error, shared <span class=\"keyword\">bool</span>)</span></span> &#123;</span><br><span class=\"line\">\tg.mu.Lock()</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化进入此单飞集合的集合</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> g.m == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tg.m = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]*call)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 相同的处理，做下累加操作，同时卡死在这里等待第一次执行的请求执行完，返回其数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> c, ok := g.m[key]; ok &#123;</span><br><span class=\"line\">\t\tc.dups++</span><br><span class=\"line\">\t\tg.mu.Unlock()</span><br><span class=\"line\">\t\tc.wg.Wait()</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> c.val, c.err, <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 第一次过来的请求，做初始化处理</span></span><br><span class=\"line\">\tc := <span class=\"built_in\">new</span>(call)</span><br><span class=\"line\">\tc.wg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">\tg.m[key] = c</span><br><span class=\"line\">\tg.mu.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行请求</span></span><br><span class=\"line\">\tg.doCall(c, key, fn)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c.val, c.err, c.dups &gt; <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以通过分析源码看到，相同的<code>key</code>，只有第一次进入的请求，才会执行；后面进入的请求，都会被<code>waitgroup</code>给锁住，原地等待第一次执行的请求执行完成，然后统一返回请求拿到的数据以及err信息。</p>\n<h2><span id=\"提到的资料\">提到的资料</span></h2>\n<p><a href=\"https://go-zero.dev/cn/redis-cache.html\" target=\"_blank\" rel=\"noopener\">go-zero缓存设计之持久层缓存</a></p>\n<p><a href=\"https://pkg.go.dev/golang.org/x/sync/singleflight\" target=\"_blank\" rel=\"noopener\">https://pkg.go.dev/golang.org/x/sync/singleflight</a></p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"singleflight","slug":"singleflight","permalink":"chunlife.top/tags/singleflight/"},{"name":"cache","slug":"cache","permalink":"chunlife.top/tags/cache/"}]},{"title":"cache aside模型保持数据一致性","date":"2021-09-22T03:16:06.000Z","path":"2021/09/22/cache-aside模型保持数据一致性/","content":"<p><a href=\"https://ethanpark.blog.csdn.net/article/details/53179561\" target=\"_blank\" rel=\"noopener\">Cache Aside 模型</a>中，读缓存 Miss 的回填操作，和修改数据同步更新缓存，包括消息队列的异步补偿缓存，都无法满足 “Happens Before”，会存在相互覆盖的情况。</p>\n<p><img src=\"clip_image001.png\" alt=\"cache aside\"></p>\n<blockquote>\n<p>注：Happens Before既是明确的代码执行的先后关系</p>\n</blockquote>\n<p>DB数据被修改，缓存随即需要被修改，不过缓存一般采取直接删除的操作，不过这时就涉及到读写同时出现请求数据的问题。</p>\n<h2><span id=\"先删缓存再读db\">先删缓存，再读DB</span></h2>\n<p><img src=\"clip_image001-16322809336541.png\" alt=\"读写缓存\"></p>\n<p>读/写同时操作：</p>\n<ol>\n<li>读操作，读缓存，缓存 MISS</li>\n<li>读操作，读 DB，读取到数据</li>\n<li>写操作，更新 DB 数据</li>\n<li>写操作 SET/DELETE     Cache（可 Job 异步操作）</li>\n<li>读操作，SET操作数据回写缓存（可 Job 异步操作）</li>\n</ol>\n<p>这种交互下，由于4和5操作步骤都是设置缓存，导致写入的值互相覆盖；并且操作的顺序性不确定，从而导致 cache 存在脏缓存的情况。</p>\n<p><strong>改进：</strong></p>\n<p><img src=\"clip_image001-16322809336541.png\" alt=\"读写缓存\"></p>\n<p>读/写同时操作：</p>\n<ol>\n<li>读操作，读缓存，缓存     MISS</li>\n<li>读操作，读 DB，读取到数据</li>\n<li>写操作，更新 DB 数据</li>\n<li>写操作 SET Cache（可异步 job 操作，Redis 可以使用 <strong>SETEX</strong> 操作）</li>\n<li>读操作，ADD 操作数据回写缓存（可 Job异步操作，Redis 可以使用 <strong>SETNX</strong> 操作）</li>\n</ol>\n<p><strong>解决：读操作使用</strong> <strong>SETNX</strong> <strong>更新缓存，写操作才用 SETEX 写缓存。这样，即使读操作在缓存Miss至缓存设置中间时间发起，最终缓存一样被写操作覆盖，达成最终一致。</strong></p>\n<p><em>注：setnx，不存在时才写；setex，写数据，带过期时间。</em></p>\n<p>针对更新操作，service端直接使用“DEL”指令删除缓存，并重新写入，若service端失败，则是job进行补偿。</p>\n<p>直接使用set更新key，若binlog订阅延迟，则数据容易出现A ——&gt; B ——&gt; A的情况。可能有一个操作是读了之前的数据的，被延迟投递到Kafka了。</p>\n<p>对于缓存上，job的更新原则，采用&quot;<strong>best Effort</strong>&quot;，一定要投递完成此消息。</p>\n<h2><span id=\"先更新db再删除缓存\">先更新DB，再删除缓存</span></h2>\n<p><img src=\"clip_image001-16460416224681.png\" alt=\"redis-cache-04\"></p>\n<p>此类型操作就有可能读到老数据。已更新的数据，需要等到A删除缓存后，<em>再来的请求，才会把缓存更新了。</em> 也就是说这中间出现的读请求，有可能会请求到旧数据。<strong>但最终缓存会达成一致</strong>。</p>\n<h2><span id=\"延迟双删\">延迟双删</span></h2>\n<p><img src=\"clip_image001-16460416729192.png\" alt=\"延迟双删\"></p>\n<ol>\n<li>删除缓存</li>\n<li>更新数据库</li>\n<li>延时 N 毫秒</li>\n<li>删除缓存</li>\n</ol>\n<p>根据上述两种方式的实际情况来看，延迟双删就没啥必要了，其核心解决的就是最终一致性的问题。</p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"cache","slug":"cache","permalink":"chunlife.top/tags/cache/"}]},{"title":"使用docker-compose创建mongoDB副本集","date":"2021-09-16T07:00:31.000Z","path":"2021/09/16/使用docker-compose创建mongoDB副本集/","content":"<h2><span id=\"创建容器\">创建容器</span></h2>\n<p>使用docker-compose部署mongoDB副本集环境。</p>\n<p>docker-compose.yml文件：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  mongo0:</span></span><br><span class=\"line\"><span class=\"attr\">    hostname:</span> <span class=\"string\">mongo0</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">mongo0</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">mongo:5.0.2</span></span><br><span class=\"line\"><span class=\"attr\">    expose:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">27017</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">27017</span><span class=\"string\">:27017</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">    entrypoint:</span> <span class=\"string\">[</span> <span class=\"string\">\"/usr/bin/mongod\"</span><span class=\"string\">,</span> <span class=\"string\">\"--bind_ip_all\"</span><span class=\"string\">,</span> <span class=\"string\">\"--replSet\"</span><span class=\"string\">,</span> <span class=\"string\">\"rs0\"</span><span class=\"string\">]</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/volume-mongo-rs/db0:/data/db</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/volume-mongo-rs/db0-config:/data/configdb</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">  mongo1:</span></span><br><span class=\"line\"><span class=\"attr\">    hostname:</span> <span class=\"string\">mongo1</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">mongo1</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">mongo:5.0.2</span></span><br><span class=\"line\"><span class=\"attr\">    expose:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">27017</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">27018</span><span class=\"string\">:27017</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">    entrypoint:</span> <span class=\"string\">[</span> <span class=\"string\">\"/usr/bin/mongod\"</span><span class=\"string\">,</span> <span class=\"string\">\"--bind_ip_all\"</span><span class=\"string\">,</span> <span class=\"string\">\"--replSet\"</span><span class=\"string\">,</span> <span class=\"string\">\"rs0\"</span><span class=\"string\">]</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/volume-mongo-rs/db1:/data/db</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/volume-mongo-rs/db1-config:/data/configdb</span></span><br><span class=\"line\"><span class=\"attr\">    depends_on:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">mongo0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">  mongo2:</span></span><br><span class=\"line\">    <span class=\"comment\"># Host name = Container name</span></span><br><span class=\"line\"><span class=\"attr\">    hostname:</span> <span class=\"string\">mongo2</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">mongo2</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">mongo:5.0.2</span></span><br><span class=\"line\"><span class=\"attr\">    expose:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">27017</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">27019</span><span class=\"string\">:27017</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">    entrypoint:</span> <span class=\"string\">[</span> <span class=\"string\">\"/usr/bin/mongod\"</span><span class=\"string\">,</span> <span class=\"string\">\"--bind_ip_all\"</span><span class=\"string\">,</span> <span class=\"string\">\"--replSet\"</span><span class=\"string\">,</span> <span class=\"string\">\"rs0\"</span><span class=\"string\">]</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/volume-mongo-rs/db2:/data/db</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/data/volume-mongo-rs/db2-config:/data/configdb</span></span><br><span class=\"line\"><span class=\"attr\">    depends_on:</span></span><br><span class=\"line\"><span class=\"bullet\">       -</span> <span class=\"string\">mongo0</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"启动容器\">启动容器</span></h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker-compose -f docker-compose-te.yal up -d</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"配置副本集\">配置副本集</span></h2>\n<p>进入mongo0的容器内。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker <span class=\"built_in\">exec</span> -it mongo0 /bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入mongo shell</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mongo</span></span><br></pre></td></tr></table></figure>\n<p>输入配置副本集命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs.initiate(&#123;_id:&quot;rs0&quot;,members:[&#123;_id:0,host:&quot;mongo0:27017&quot;, &quot;priority&quot;: 2&#125;,&#123;_id:1,host:&quot;mongo1:27017&quot;&#125;,&#123;_id:2,host:&quot;mongo2:27017&quot;&#125;]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 也就是：</span><br><span class=\"line\">rs.initiate(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    _id : &apos;rs0&apos;,</span><br><span class=\"line\">    members: [</span><br><span class=\"line\">      &#123; _id : 0, host : &quot;mongo0:27017&quot;, &quot;priority&quot;: 2 &#125;,</span><br><span class=\"line\">      &#123; _id : 1, host : &quot;mongo1:27017&quot; &#125;,</span><br><span class=\"line\">      &#123; _id : 2, host : &quot;mongo2:27017&quot; &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><code>priority</code>是当选为主节点的优先级，这里因为想要启动的时候，固定mongo0，也就是端口为<code>27017</code>作为<code>primary</code>(主节点)。</p>\n<h2><span id=\"启用兼容性版本\">启用兼容性版本</span></h2>\n<p>若是之前mongo版本为4.x版本，大版本升级，则需要使用此命令，启用5.x版本的功能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.adminCommand(&#123;setFeatureCompatibilityVersion: &quot;5.0&quot;&#125;)</span><br></pre></td></tr></table></figure>\n<h2><span id=\"修改hosts\">修改Hosts</span></h2>\n<p><code>mongo0</code>、<code>mongo1</code>、<code>mongo2</code>是作为容器内的IP，容器外是识别不了的，配置文件中，我们已经将这些容器的端口暴露到宿主机上了，可以直接使用本机port去访问，那容器的IP也就对应着是<code>localhost</code>，故这里需要修改下hosts文件，做下对应。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1   mongo0</span><br><span class=\"line\">127.0.0.1   mongo1</span><br><span class=\"line\">127.0.0.1   mongo2</span><br></pre></td></tr></table></figure>\n<h2><span id=\"测试副本集\">测试副本集</span></h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"context\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"go.mongodb.org/mongo-driver/bson\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"go.mongodb.org/mongo-driver/bson/primitive\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"go.mongodb.org/mongo-driver/mongo\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"go.mongodb.org/mongo-driver/mongo/options\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dbName = <span class=\"string\">\"argos\"</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> collectionExamples = <span class=\"string\">\"examples\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getMongoClient</span><span class=\"params\">()</span> <span class=\"params\">(*mongo.Client, error)</span></span> &#123;</span><br><span class=\"line\">\turi := <span class=\"string\">\"mongodb://localhost:27017/argos?replicaSet=rs0\"</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> os.Getenv(<span class=\"string\">\"DATABASE_URL\"</span>) != <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\turi = os.Getenv(<span class=\"string\">\"DATABASE_URL\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> getMongoClientByURI(uri)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getMongoClientByURI</span><span class=\"params\">(uri <span class=\"keyword\">string</span>)</span> <span class=\"params\">(*mongo.Client, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> err error</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> client *mongo.Client</span><br><span class=\"line\">\topts := options.Client()</span><br><span class=\"line\">\topts.ApplyURI(uri)</span><br><span class=\"line\">\topts.SetMaxPoolSize(<span class=\"number\">5</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> client, err = mongo.Connect(context.Background(), opts); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> client, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tclient.Ping(context.Background(), <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> client, err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> err error</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> client *mongo.Client</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> collection *mongo.Collection</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ctx = context.Background()</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> id = primitive.NewObjectID()</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> doc = bson.M&#123;<span class=\"string\">\"_id\"</span>: id, <span class=\"string\">\"hometown\"</span>: <span class=\"string\">\"Atlanta\"</span>, <span class=\"string\">\"year\"</span>: <span class=\"keyword\">int32</span>(<span class=\"number\">1998</span>)&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> result *mongo.UpdateResult</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> session mongo.Session</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> update = bson.D&#123;&#123;Key: <span class=\"string\">\"$set\"</span>, Value: bson.D&#123;&#123;Key: <span class=\"string\">\"year\"</span>, Value: <span class=\"keyword\">int32</span>(<span class=\"number\">2000</span>)&#125;&#125;&#125;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> client, err = getMongoClient(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> client.Disconnect(ctx)</span><br><span class=\"line\">\tcollection = client.Database(dbName).Collection(collectionExamples)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> _, err = collection.InsertOne(ctx, doc); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> session, err = client.StartSession(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err = session.StartTransaction(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err = mongo.WithSession(ctx, session, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(sc mongo.SessionContext)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> result, err = collection.UpdateOne(sc, bson.M&#123;<span class=\"string\">\"_id\"</span>: id&#125;, update); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> result.MatchedCount != <span class=\"number\">1</span> || result.ModifiedCount != <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Fatal(<span class=\"string\">\"replace failed, expected 1 but got\"</span>, result.MatchedCount)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err = session.CommitTransaction(sc); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsession.EndSession(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> v bson.M</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err = collection.FindOne(ctx, bson.D&#123;&#123;Key: <span class=\"string\">\"_id\"</span>, Value: id&#125;&#125;).Decode(&amp;v); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> v[<span class=\"string\">\"year\"</span>] != <span class=\"keyword\">int32</span>(<span class=\"number\">2000</span>) &#123;</span><br><span class=\"line\">\t\tlog.Println(v)</span><br><span class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"expected 2000 but got\"</span>, v[<span class=\"string\">\"year\"</span>])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tres, _ := collection.DeleteOne(ctx, bson.M&#123;<span class=\"string\">\"_id\"</span>: id&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> res.DeletedCount != <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"delete failed, expected 1 but got\"</span>, res.DeletedCount)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"devops","slug":"devops","permalink":"chunlife.top/categories/devops/"}],"tags":[{"name":"mongoDB","slug":"mongoDB","permalink":"chunlife.top/tags/mongoDB/"},{"name":"docker","slug":"docker","permalink":"chunlife.top/tags/docker/"}]},{"title":"gRPC负载均衡代码解析(未完成)","date":"2021-08-31T08:49:02.000Z","path":"2021/08/31/gRPC负载均衡代码解析/","content":"<h2><span id=\"etcd-resolver-示例\">ETCD Resolver 示例</span></h2>\n<p>ETCD ：<a href=\"https://etcd.io/docs/v3.5/dev-guide/grpc_naming/\" target=\"_blank\" rel=\"noopener\">gRPC naming and discovery</a></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"go.etcd.io/etcd/v3/clientv3\"</span></span><br><span class=\"line\">\tresolver <span class=\"string\">\"go.etcd.io/etcd/client/v3/naming/resolver\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"google.golang.org/grpc\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">cli, cerr := clientv3.NewFromURL(<span class=\"string\">\"http://localhost:2379\"</span>)</span><br><span class=\"line\">etcdResolver, err := resolver.NewBuilder(cli);</span><br><span class=\"line\">conn, gerr := grpc.Dial(<span class=\"string\">\"etcd:///foo/bar/my-service\"</span>, grpc.WithResolvers(etcdResolver))</span><br></pre></td></tr></table></figure>\n<h2><span id=\"resolver调用链\">Resolver调用链</span></h2>\n<p><img src=\"clip_image001-16304023264911.png\" alt=\"resolver调用链\"></p>\n<h3><span id=\"dialcontext\">DialContext</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dial有两种模式，非阻塞和阻塞，非阻塞的context控制设置的步骤，阻塞的ctx则可以取消或关闭挂起的链接</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialContext</span><span class=\"params\">(ctx context.Context, target <span class=\"keyword\">string</span>, opts ...DialOption)</span> <span class=\"params\">(conn *ClientConn, err error)</span></span> &#123;</span><br><span class=\"line\">\tcc := &amp;ClientConn&#123;</span><br><span class=\"line\">\t\ttarget:            target,</span><br><span class=\"line\">\t\tcsMgr:             &amp;connectivityStateManager&#123;&#125;,</span><br><span class=\"line\">\t\tconns:             <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[*addrConn]<span class=\"keyword\">struct</span>&#123;&#125;),</span><br><span class=\"line\">\t\tdopts:             defaultDialOptions(),</span><br><span class=\"line\">\t\tblockingpicker:    newPickerWrapper(),</span><br><span class=\"line\">\t\tczData:            <span class=\"built_in\">new</span>(channelzData),</span><br><span class=\"line\">\t\tfirstResolveEvent: grpcsync.NewEvent(),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t......</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, opt := <span class=\"keyword\">range</span> opts &#123;</span><br><span class=\"line\">\t\topt.apply(&amp;cc.dopts)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t......</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Determine the resolver to use.</span></span><br><span class=\"line\">    <span class=\"comment\">// target为etcd:///foo/bar/my-service，Scheme取出来则为etcd</span></span><br><span class=\"line\">\tcc.parsedTarget = grpcutil.ParseTarget(cc.target, cc.dopts.copts.Dialer != <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\tchannelz.Infof(logger, cc.channelzID, <span class=\"string\">\"parsed scheme: %q\"</span>, cc.parsedTarget.Scheme)</span><br><span class=\"line\">    <span class=\"comment\">// 看后面代码解析</span></span><br><span class=\"line\">\tresolverBuilder := cc.getResolver(cc.parsedTarget.Scheme)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> resolverBuilder == <span class=\"literal\">nil</span> &#123;  <span class=\"comment\">// 使用默认解析器</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// If resolver builder is still nil, the parsed target's scheme is</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// not registered. Fallback to default resolver and set Endpoint to</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// the original target.</span></span><br><span class=\"line\">\t\tchannelz.Infof(logger, cc.channelzID, <span class=\"string\">\"scheme %q not registered, fallback to default scheme\"</span>, cc.parsedTarget.Scheme)</span><br><span class=\"line\">\t\tcc.parsedTarget = resolver.Target&#123;</span><br><span class=\"line\">\t\t\tScheme:   resolver.GetDefaultScheme(),</span><br><span class=\"line\">\t\t\tEndpoint: target,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tresolverBuilder = cc.getResolver(cc.parsedTarget.Scheme)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> resolverBuilder == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">\"could not get resolver for default scheme: %q\"</span>, cc.parsedTarget.Scheme)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t.......</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">// Build the resolver. </span></span><br><span class=\"line\">    <span class=\"comment\">// 函数中调用我们传入的resolver的build接口</span></span><br><span class=\"line\">\trWrapper, err := newCCResolverWrapper(cc, resolverBuilder)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">\"failed to build resolver: %v\"</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcc.mu.Lock()</span><br><span class=\"line\">\tcc.resolverWrapper = rWrapper</span><br><span class=\"line\">\tcc.mu.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">\t......</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cc, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"getresolver\">getResolver</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(cc *ClientConn)</span> <span class=\"title\">getResolver</span><span class=\"params\">(scheme <span class=\"keyword\">string</span>)</span> <span class=\"title\">resolver</span>.<span class=\"title\">Builder</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, rb := <span class=\"keyword\">range</span> cc.dopts.resolvers &#123;  <span class=\"comment\">// 从dial传进来的参数中查询是否有resolve处理接口</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> scheme == rb.Scheme() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> rb</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> resolver.Get(scheme)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>grpc.WithResolvers(etcdResolver)</code>，在etcd的代码中，就是直接传入<code>dial</code>函数中的，也就是在for循环中即会返回数据。</p>\n<p><code>resolver.Get(scheme)</code>，这里<code>scheme</code>是etcd，get是从全局变量<code>m</code>中获取解析接口，需要提前使用<code>Register</code>函数注册到这个map中。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// m is a map from scheme to resolver builder.</span></span><br><span class=\"line\">m = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]Builder)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TODO(bar) install dns resolver in init()&#123;&#125;.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Register registers the resolver builder to the resolver map. b.Scheme will be</span></span><br><span class=\"line\"><span class=\"comment\">// used as the scheme registered with this builder.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// <span class=\"doctag\">NOTE:</span> this function must only be called during initialization time (i.e. in</span></span><br><span class=\"line\"><span class=\"comment\">// an init() function), and is not thread-safe. If multiple Resolvers are</span></span><br><span class=\"line\"><span class=\"comment\">// registered with the same name, the one registered last will take effect.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Register</span><span class=\"params\">(b Builder)</span></span> &#123;</span><br><span class=\"line\">\tm[b.Scheme()] = b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Get returns the resolver builder registered with the given scheme.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// If no builder is register with the scheme, nil will be returned.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Get</span><span class=\"params\">(scheme <span class=\"keyword\">string</span>)</span> <span class=\"title\">Builder</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> b, ok := m[scheme]; ok &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> b</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"newccresolverwrapper\">newCCResolverWrapper</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newCCResolverWrapper</span><span class=\"params\">(cc *ClientConn, rb resolver.Builder)</span> <span class=\"params\">(*ccResolverWrapper, error)</span></span> &#123;</span><br><span class=\"line\">\tccr := &amp;ccResolverWrapper&#123;</span><br><span class=\"line\">\t\tcc:   cc,</span><br><span class=\"line\">\t\tdone: grpcsync.NewEvent(),  <span class=\"comment\">// 通知事件</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t......</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">var</span> err error</span><br><span class=\"line\">\t<span class=\"comment\">// We need to hold the lock here while we assign to the ccr.resolver field</span></span><br><span class=\"line\">\t<span class=\"comment\">// to guard against a data race caused by the following code path,</span></span><br><span class=\"line\">\t<span class=\"comment\">// rb.Build--&gt;ccr.ReportError--&gt;ccr.poll--&gt;ccr.resolveNow, would end up</span></span><br><span class=\"line\">\t<span class=\"comment\">// accessing ccr.resolver which is being assigned here.</span></span><br><span class=\"line\">\tccr.resolverMu.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> ccr.resolverMu.Unlock()</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">// 这里的 Build 也就是我们在自己的 resolver.go 中实现的 Build() 方法，传入的三个参数。在我们实现中，Build 中创建和启动了 Watcher</span></span><br><span class=\"line\">    <span class=\"comment\">// watch()立即执行服务发现逻辑，然后将发现的服务列表通过 resolver.ClientConn 回调接口(UpdateState)通知上层</span></span><br><span class=\"line\">\tccr.resolver, err = rb.Build(cc.parsedTarget, ccr, rbo)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ccr, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"balancer调用链\">Balancer调用链</span></h2>\n<p>resolver与balancer调用处：</p>\n<p><img src=\"image-20210901174603940.png\" alt=\"resolver数据传导至balancer\"></p>\n<h3><span id=\"clientconn-updateresolverstate\">ClientConn updateResolverState</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(cc *ClientConn)</span> <span class=\"title\">updateResolverState</span><span class=\"params\">(s resolver.State, err error)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> cc.firstResolveEvent.Fire()</span><br><span class=\"line\">\tcc.mu.Lock()</span><br><span class=\"line\">\t<span class=\"comment\">// 检查ClientConn是否已关闭。关闭ClientConn时，某些字段（例如balancerWrapper）被设置为nil，</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果没有此检查，可能会导致nil指针死机</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cc.conns == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tcc.mu.Unlock()</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// May need to apply the initial service config in case the resolver</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// doesn't support service configs, or doesn't provide a service config</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// with the new addresses.</span></span><br><span class=\"line\">\t\tcc.maybeApplyDefaultServiceConfig(<span class=\"literal\">nil</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> cc.balancerWrapper != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tcc.balancerWrapper.resolverError(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// No addresses are valid with err set; return early.</span></span><br><span class=\"line\">\t\tcc.mu.Unlock()</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> balancer.ErrBadResolverState</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ret error</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cc.dopts.disableServiceConfig || s.ServiceConfig == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tcc.maybeApplyDefaultServiceConfig(s.Addresses)</span><br><span class=\"line\">\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> do we need to apply a failing LB policy if there is no</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// default, per the error handling design?</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> sc, ok := s.ServiceConfig.Config.(*ServiceConfig); s.ServiceConfig.Err == <span class=\"literal\">nil</span> &amp;&amp; ok &#123;</span><br><span class=\"line\">\t\t\tconfigSelector := iresolver.GetConfigSelector(s)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> configSelector != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(s.ServiceConfig.Config.(*ServiceConfig).Methods) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tchannelz.Infof(logger, cc.channelzID, <span class=\"string\">\"method configs in service config will be ignored due to presence of config selector\"</span>)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tconfigSelector = &amp;defaultConfigSelector&#123;sc&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcc.applyServiceConfigAndBalancer(sc, configSelector, s.Addresses)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tret = balancer.ErrBadResolverState</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> cc.balancerWrapper == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> err error</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> s.ServiceConfig.Err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t\terr = status.Errorf(codes.Unavailable, <span class=\"string\">\"error parsing service config: %v\"</span>, s.ServiceConfig.Err)</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\terr = status.Errorf(codes.Unavailable, <span class=\"string\">\"illegal service config type: %T\"</span>, s.ServiceConfig.Config)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tcc.safeConfigSelector.UpdateConfigSelector(&amp;defaultConfigSelector&#123;cc.sc&#125;)</span><br><span class=\"line\">\t\t\t\tcc.blockingpicker.updatePicker(base.NewErrPicker(err))</span><br><span class=\"line\">\t\t\t\tcc.csMgr.updateState(connectivity.TransientFailure)</span><br><span class=\"line\">\t\t\t\tcc.mu.Unlock()</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> ret</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> balCfg serviceconfig.LoadBalancingConfig</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cc.dopts.balancerBuilder == <span class=\"literal\">nil</span> &amp;&amp; cc.sc != <span class=\"literal\">nil</span> &amp;&amp; cc.sc.lbConfig != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tbalCfg = cc.sc.lbConfig.cfg</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcbn := cc.curBalancerName</span><br><span class=\"line\">\tbw := cc.balancerWrapper</span><br><span class=\"line\">\tcc.mu.Unlock()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cbn != grpclbName &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Filter any grpclb addresses since we don't have the grpclb balancer.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(s.Addresses); &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> s.Addresses[i].Type == resolver.GRPCLB &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">copy</span>(s.Addresses[i:], s.Addresses[i+<span class=\"number\">1</span>:])</span><br><span class=\"line\">\t\t\t\ts.Addresses = s.Addresses[:<span class=\"built_in\">len</span>(s.Addresses)<span class=\"number\">-1</span>]</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ti++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tuccsErr := bw.updateClientConnState(&amp;balancer.ClientConnState&#123;ResolverState: s, BalancerConfig: balCfg&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ret == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tret = uccsErr <span class=\"comment\">// prefer ErrBadResolver state since any other error is</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// currently meaningless to the caller.</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(cc *ClientConn)</span> <span class=\"title\">applyServiceConfigAndBalancer</span><span class=\"params\">(sc *ServiceConfig, configSelector iresolver.ConfigSelector, addrs []resolver.Address)</span></span> &#123;</span><br><span class=\"line\">\t.......</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 是否将均衡构造器作为参数传入</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cc.dopts.balancerBuilder == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Only look at balancer types and switch balancer if balancer dial</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// option is not set.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> newBalancerName <span class=\"keyword\">string</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> cc.sc != <span class=\"literal\">nil</span> &amp;&amp; cc.sc.lbConfig != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tnewBalancerName = cc.sc.lbConfig.name</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> isGRPCLB <span class=\"keyword\">bool</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _, a := <span class=\"keyword\">range</span> addrs &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> a.Type == resolver.GRPCLB &#123;</span><br><span class=\"line\">\t\t\t\t\tisGRPCLB = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> isGRPCLB &#123;</span><br><span class=\"line\">\t\t\t\tnewBalancerName = grpclbName</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> cc.sc != <span class=\"literal\">nil</span> &amp;&amp; cc.sc.LB != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tnewBalancerName = *cc.sc.LB</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tnewBalancerName = PickFirstBalancerName</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 从balancer builder map中查出是否有构造器</span></span><br><span class=\"line\">\t\tcc.switchBalancer(newBalancerName)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> cc.balancerWrapper == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Balancer dial option was set, and this is the first time handling</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// resolved addresses. Build a balancer with dopts.balancerBuilder.</span></span><br><span class=\"line\">\t\tcc.curBalancerName = cc.dopts.balancerBuilder.Name()</span><br><span class=\"line\">\t\tcc.balancerWrapper = newCCBalancerWrapper(cc, cc.dopts.balancerBuilder, cc.balancerBuildOpts)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"参考\">参考</span></h2>\n<p><a href=\"https://pandaychen.github.io/2019/11/11/GRPC-RESOLVER-DEEP-ANALYSIS/\" target=\"_blank\" rel=\"noopener\">gRPC 源码分析之 Resolver 篇</a></p>\n<p><a href=\"https://pandaychen.github.io/2019/11/22/GRPC-BALANCER-DEEP-ANALYSIS/\" target=\"_blank\" rel=\"noopener\">gRPC 源码分析之 Balancer 篇</a></p>\n<p><a href=\"http://yangxikun.com/golang/2019/10/19/golang-grpc-client-side-lb.html\" target=\"_blank\" rel=\"noopener\">golang grpc 客户端负载均衡、重试、健康检查</a></p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"GRPC","slug":"GRPC","permalink":"chunlife.top/tags/GRPC/"}]},{"title":"ardanlabs gotraing，深入理解Go及相关编程理念","date":"2021-08-30T07:36:29.000Z","path":"2021/08/30/ardanlabs-gotraing，深入理解Go及相关编程理念/","content":"<p>无意中在V站发现了有人提到<code>ardanlabs</code>的课程，课程怎么样不清楚，贵是真的很贵(699刀了)，但其在GitHub上的文档我觉得写的很好。</p>\n<p>Ultimate Go：<a href=\"https://github.com/ardanlabs/gotraining/blob/master/topics/go/README.md\" target=\"_blank\" rel=\"noopener\">https://github.com/ardanlabs/gotraining/blob/master/topics/go/README.md</a></p>\n<p>另外，其还贴心的准备了学习笔记(<em>代码以及注释</em>)，以帮助学习者更好的理解课程的内容：<a href=\"https://github.com/ardanlabs/gotraining-studyguide\" target=\"_blank\" rel=\"noopener\">gotraining-studyguide</a></p>\n<p>这里我摘几段它的内容：</p>\n<p>在<code>gotraining</code>中，其就提到了<a href=\"https://github.com/ardanlabs/gotraining/tree/master/topics/go#data-oriented-design\" target=\"_blank\" rel=\"noopener\">面向数据的设计</a>，提到了数据与算法的关系。</p>\n<blockquote>\n<p>“Data dominates. If you’ve chosen the right data structures and organized things well, the algorithms will almost always be self-evident. Data structures, not algorithms, are central to programming.” - Rob Pike</p>\n<p>数据占主导地位。如果你选择了正确的数据结构，并且组织得很好，算法的选择将是自然而然的一件事。数据结构才是编程的核心，而不是算法。</p>\n</blockquote>\n<p>在<code>gotraining-studyguide</code>的代码中也有提到<a href=\"https://github.com/ardanlabs/gotraining-studyguide/blob/5521b4c7e0001f8b088f427358e8d60c6b673740/go/language/array.go#L62\" target=\"_blank\" rel=\"noopener\">面向数据的设计</a>很重要：</p>\n<blockquote>\n<p>// Data-oriented design matters.<br>\n// It is not enough to write the most efficient algorithm, how we access our data can have much<br>\n// more lasting effect on the performance than the algorithm itself.</p>\n<p>面向数据的设计很重要。</p>\n<p>编写最有效的算法是不够的，我们访问数据的方式可能比算法本身对性能产生更持久的影响。</p>\n</blockquote>\n<p>不管是对Go基础知识的讲解，以及对设计模式的一些讲述中，该教程都延伸了一些更深层次的知识进行延展，这个repo还是比较值得推荐的。</p>\n<p>后面我也会将我学习的思维导图一并分享出来，帮助大家佐证学习。</p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"资料","slug":"资料","permalink":"chunlife.top/tags/资料/"}]},{"title":"gRPC负载均衡","date":"2021-08-29T13:45:16.000Z","path":"2021/08/29/学习gRPC负载均衡/","content":"<p>服务内部访问中，负载被均匀地分发给所有的后端服务，在任何时刻，最忙和最不忙的节点永远消耗同样数量的CPU。负载均衡（Load Balancing）是微服务可用性比较重要的一个技术，其目标：</p>\n<ul>\n<li>\n<p>均衡的流量分发。</p>\n</li>\n<li>\n<p>可靠的识别异常节点。</p>\n</li>\n<li>\n<p>scale-out，增加同质节点扩容。</p>\n</li>\n<li>\n<p>减少错误，提高可用性。</p>\n</li>\n</ul>\n<p>一般我们选择后端通信协议为gRPC。</p>\n<h2><span id=\"为什么使用grpc\">为什么使用gRPC</span></h2>\n<p>gRPC是一个先进的RPC协议，它是基于HTTP/2实现的。HTTP/2是一个7层协议，运行在TCP协议之上。相比传统的HTTP/REST/JSON机制，gRPC有很多优点，如：</p>\n<ol>\n<li>它使用了二进制协议(HTTP/2)</li>\n<li>在一个连接(HTTP/2)上复用多个请求</li>\n<li>头部压缩(HTTP/2)</li>\n<li>强类型服务和消息定义(Protobuf)</li>\n<li>为多种语言实现了常用的客户端/服务器库</li>\n</ol>\n<p>此外，gRPC无缝集成了如服务发现，命名解析，负载均衡，追踪和监控等生态组件。</p>\n<h2><span id=\"负载均衡的分类介绍\">负载均衡的分类介绍</span></h2>\n<p><img src=\"image-20210829233327630.png\" alt=\"负载均衡\"></p>\n<blockquote>\n<p><a href=\"https://grpc.io/blog/grpc-load-balancing/\" target=\"_blank\" rel=\"noopener\">https://grpc.io/blog/grpc-load-balancing/</a></p>\n<p><a href=\"https://www.cnblogs.com/charlieroro/p/14312362.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/charlieroro/p/14312362.html</a></p>\n</blockquote>\n<p>关于gRPC内置方案的介绍：</p>\n<p><a href=\"https://github.com/grpc/grpc/blob/master/doc/load-balancing.md\" target=\"_blank\" rel=\"noopener\">https://github.com/grpc/grpc/blob/master/doc/load-balancing.md</a></p>\n<p>中文类的博客：</p>\n<p><a href=\"https://pandaychen.github.io/2019/07/11/GRPC-SERVICE-DISCOVERY/\" target=\"_blank\" rel=\"noopener\">https://pandaychen.github.io/2019/07/11/GRPC-SERVICE-DISCOVERY/</a></p>\n<hr>\n<h2><span id=\"grpc-内置的方案\">gRPC 内置的方案</span></h2>\n<p>gRPC 的内置方案如下图所示：</p>\n<p><img src=\"2107536928-58c636c2d6702_articlex\" alt=\"内置方案\"></p>\n<p>gRPC 在官网文档中提供了实现 LB 的思路，并在不同语言的 gRPC 代码 API 中已提供了命名解析和负载均衡接口供扩展。默认提供了 <a href=\"https://github.com/gRPC/gRPC-go/blob/v1.8.0/resolver/resolver.go\" target=\"_blank\" rel=\"noopener\">DNS-resolver 的实现</a>，接口相当规范，实现起来也不复杂，只需要实现服务注册（Registry）和服务监听 + 解析（Watcher+Resolver）的逻辑就行了，这里简单介绍其基本实现过程：</p>\n<ol>\n<li>构建注册中心，这里注册中心一般要求具备分布式一致性（满足 CAP 定理的 AP 或 CP）的高可用的组件集群，如 Zookeeper、Consul、Etcd 等</li>\n<li>构建 gRPC 服务端的注册逻辑，服务启动后定时向注册中心注册自身的关键信息（一般开启新的 groutine 来完成），至少包含 IP 和端口，其他可选信息，如自身的负载信息（CPU 和 Memory）、当前实时连接数等，这些辅助信息有助于帮助系统更好的执行 LB 算法</li>\n<li>gRPC 客户端向注册中心发出服务解析请求，注册中心将请求中关联的所有服务的信息返回给 gRPC 客户端，客户端与所有在线的服务建立起 HTTP2 长连接</li>\n<li>gRPC 客户端发起 RPC 调用，根据 LB 均衡器中实现的负载均衡策略（gRPC 中默认提供的算法是 RoundRobin），选择其中一 HTTP2 长连接进行通信，即 LB 策略决定哪个子通道 - 即哪个 gRPC 服务器将接收请求</li>\n</ol>\n<h2><span id=\"grpc-负载均衡的运行机制\">gRPC 负载均衡的运行机制</span></h2>\n<p>gRPC 提供了负载均衡实现的用户侧接口，我们可以非常方便的定制化业务的负载均衡策略，为了理解 gRPC 的负载均衡的实现机制，后续博客中我会分析下 <code>gRPC</code> 实现负载均衡的代码。</p>\n<p><img src=\"image-20210829233910805-1630251552094.png\" alt=\"grpc-lb-basic\"></p>\n<ol>\n<li>Resolver\n<ul>\n<li>解析器，用于从注册中心实时获取当前服务端的列表，同步发送给 Balancer</li>\n</ul>\n</li>\n<li>Balancer\n<ul>\n<li>平衡器，一是接收从 Resolver 发送的服务端列表，建立并维护（长）连接状态；二是每次当 Client 发起 Rpc 调用时，按照一定算法从连接池中选择一个连接进行 Rpc 调用</li>\n</ul>\n</li>\n<li>Register\n<ul>\n<li>注册，用于服务端初始化和在线时，将自己信息上报到注册中心，主要信息有 Ip，端口等</li>\n</ul>\n</li>\n</ol>\n<h2><span id=\"负载均衡的算法及实现\">负载均衡的算法及实现</span></h2>\n<p>在实践中，如何选取负载均衡策略是一个很有趣的话题，例如 Nginx 的 <code>upstream</code> 机制中就有很多经典的 LB 策略，如带权重的轮询 <a href=\"https://github.com/nginx/nginx/blob/master/src/http/ngx_http_upstream_round_robin.c\" target=\"_blank\" rel=\"noopener\">Weight-RoundRobin</a>，一般常用的负载均衡方法有如下几种：</p>\n<ol>\n<li>RoundRobin（轮询）</li>\n<li>Weight-RoundRobin（加权轮询）\n<ul>\n<li>不同的后端服务器可能机器的配置和当前系统的负载并不相同，因此它们的抗压能力也不相同。给配置高、负载低的机器配置更高的权重，而配置低、负载高的机器，给其分配较低的权重，降低其系统负载，加权轮询能很好地处理这一问题，并将请求顺序且按照权重分配到后端。</li>\n</ul>\n</li>\n<li>Random（随机）</li>\n<li>Weight-Random（加权随机）\n<ul>\n<li>通过系统的随机算法，根据后端服务器的列表随机选取其中的一台服务器进行访问</li>\n</ul>\n</li>\n<li>源地址哈希法\n<ul>\n<li>源地址哈希的思想是根据获取客户端的 IP 地址，通过哈希函数计算得到的一个数值，用该数值对服务器列表的大小进行取模运算，得到的结果便是客服端要访问服务器的序号。采用源地址哈希法进行负载均衡，同一 IP 地址的客户端，当后端服务器列表不变时，它每次都会映射到同一台后端服务器进行访问</li>\n</ul>\n</li>\n<li>最小连接数法\n<ul>\n<li>最小连接数算法比较灵活和智能，由于后端服务器的配置不尽相同，对于请求的处理有快有慢，它是根据后端服务器当前的连接情况，动态地选取其中当前积压连接数最少的一台服务器来处理当前的请求，尽可能地提高后端服务的利用效率，将负责合理地分流到每一台服务器</li>\n</ul>\n</li>\n<li>一致性哈希算法\n<ul>\n<li>常见的是 <code>Ketama</code> 算法，该算法是用来解决 <code>cache</code> 失效导致的缓存穿透的问题的，当然也可以适用于 gRPC 长连接的场景</li>\n</ul>\n</li>\n</ol>\n<h2><span id=\"负载均衡存在的问题\">负载均衡存在的问题</span></h2>\n<p>发现在 backend 之间的 load 差异比较大：</p>\n<ul>\n<li>\n<p><em>每个请求的处理成本不同。</em></p>\n</li>\n<li>\n<p><em>物理机环境的差异 :</em></p>\n<ul>\n<li>\n<p><em>服务器很难强同质性。</em></p>\n</li>\n<li>\n<p><em>存在共享资源争用（内存缓存、带宽、IO等）。</em></p>\n</li>\n</ul>\n</li>\n</ul>\n<p>所以负载均衡的算法都是为了有效的考虑：负载+可用性。</p>\n<p>这里我后期比较需要去了解的p2c算法，这个算法在kratos、go-zero以及Netflix中都有实现，且也是在基于gRPC这套接口实现。</p>\n<hr>\n<p>近期又学习到了有界负载均衡（consistent-hashing-with-bounded-loads），是谷歌推出的一种在一致性哈希算法的改良。</p>\n<p>p2c是随机选两个server，根据cpu/mem等其他参考指标打分，选择分数高的。有界哈希则是限制一个最大负载，选择节点的时候，达到负载的节点将被跳过，转移到其他节点上。</p>\n<p>当然，其在考量上，没有考虑到实际server的压力，仅通过请求负载来判断，没有p2c从server上的考量，但其终究只是一种一致性哈希算法的升级。</p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"GRPC","slug":"GRPC","permalink":"chunlife.top/tags/GRPC/"}]},{"title":"databus源码浅析","date":"2021-08-03T13:41:08.000Z","path":"2021/08/03/databus学习/","content":"<p>消息队列一直是一个神兵利器，我之前也写过用于简化kafka消费和生产的中间件，其完整版也尝试在一些项目中使用。效果也还不错，这里也是巧然了解到可以增加Kafka单一<em>partition</em>并发消费能力的方法（为了保证partition而使用单一线程进行消费），也找到了解决方法，这里是对代码的一些分析，完整的注释解析就不放了。</p>\n<a id=\"more\"></a>\n<p><img src=\"Databus%E5%AD%A6%E4%B9%A0.png\" alt=\"Databus学习\"></p>\n<p>分片和链表的两者结合，分片可提高并发能力的同时，按链表顺序逐个回收数据，又能保证对不同shard的统一partition顺序保证，这样的设计还是非常巧妙的。</p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"消息队列","slug":"消息队列","permalink":"chunlife.top/tags/消息队列/"},{"name":"databus","slug":"databus","permalink":"chunlife.top/tags/databus/"}]},{"title":"protobuf扩展插件编写","date":"2021-06-22T12:31:54.000Z","path":"2021/06/22/protobuf扩展插件编写/","content":"<p><strong>Protocol Buffers</strong>（简称：ProtoBuf）是一种<a href=\"https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97%E5%8C%96\" target=\"_blank\" rel=\"noopener\">序列化</a>数据结构的协议。对于透过管道(pipeline)或存储资料进行通信的程序开发上是很有用的。这个方法包含一个<a href=\"https://zh.wikipedia.org/wiki/%E6%8E%A5%E5%8F%A3%E6%8F%8F%E8%BF%B0%E8%AF%AD%E8%A8%80\" target=\"_blank\" rel=\"noopener\">接口描述语言</a>，描述一些数据结构，并提供程序工具根据这些描述产生代码，用于将这些数据结构产生或解析资料流。——<a href=\"https://zh.wikipedia.org/wiki/Protocol_Buffers\" target=\"_blank\" rel=\"noopener\">维基百科</a></p>\n<p><code>protoc</code>生成工具：<a href=\"https://github.com/protocolbuffers/protobuf/releases/tag/v3.17.3\" target=\"_blank\" rel=\"noopener\">here</a></p>\n<p>ProtoBuf支持很多语言，生成每种语言可使用的协议代码则是另一个类似于插件一样的工具，Go则类似于有<code>protoc-gen-go</code>。</p>\n<p>之前也对Go-Micro的gen-micro比较感兴趣，也正好在找寻一种方便生成代码的办法。</p>\n<h3><span id=\"插件的运行流程\">插件的运行流程</span></h3>\n<p>在执行<code>protoc</code>编译的时候，命令行是这样写的：<code>protoc --proto_path=. --go_out==paths=source_relative:. hello.proto</code>，<code>protoc</code>会去读取<code>hello.proto</code>，然后将其编译成.go的文件（要求PATH下有<code>protoc-gen-go</code>工具）。</p>\n<p>如果我们命令行这样写：<code>protoc --xxx_out=./ *.proto</code>，由于不认识xxx，于是<code>protoc</code>会在PATH路径下寻找一个叫做<code>protoc-gen-xxx</code>的可执行文件。而<code>protoc-gen-xxx</code>就是我们要实现的插件。</p>\n<p>插件的运行流程如图：</p>\n<ul>\n<li>我们只需要关注步骤3.1~3.5，其余步骤是谷歌protoc完成</li>\n<li>CodeGeneratorRequest和CodeGeneratorResponse对象定义在<a href=\"https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/compiler/plugin.proto\" target=\"_blank\" rel=\"noopener\">plugin.proto</a>里面</li>\n<li>FileDescriptor代表了一个proto文件，定义在<a href=\"https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/descriptor.proto\" target=\"_blank\" rel=\"noopener\">descriptor.proto</a>里面</li>\n</ul>\n<p><img src=\"14066340-8e7ca76cea40c261-1624365743729.png\" alt=\"protoc执行过程\"></p>\n<blockquote>\n<p>参考：<a href=\"https://www.jianshu.com/p/6f24de5f0f93\" target=\"_blank\" rel=\"noopener\">Protobuf第三方扩展开发指南</a></p>\n</blockquote>\n<h3><span id=\"error插件\">Error插件</span></h3>\n<p>在之前我有关于Error的文章中，就有所提及error有着常见的几种表现形式，特别是关于在GRPC中怎么处理error的实践。这种处理我觉得应该是Go-Micro中先使用的，然后由Kratos中继续演进，我是非常喜欢Kratos对error的进一步简化的，这其中就包括我所看中的Error protoc插件。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main()</span><br><span class=\"line\">   ——&gt; generateFile(gen, f)  </span><br><span class=\"line\">\t\t调用g.P(<span class=\"string\">\"// Code generated by protoc-gen-go-errors. DO NOT EDIT.\"</span>)</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(g *GeneratedFile)</span> <span class=\"title\">P</span><span class=\"params\">(v ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t打印数据类似于<span class=\"title\">printf</span>重定向到文件中</span></span><br><span class=\"line\"><span class=\"function\">\t\t \t——&gt; <span class=\"title\">generateFileContent</span><span class=\"params\">(gen, file, g)</span></span></span><br><span class=\"line\"><span class=\"function\"> \t\t\t\t——&gt; 仅从<span class=\"title\">protoc</span>传入文件解析中拿取枚举值</span></span><br><span class=\"line\"><span class=\"function\">\t\t\t\t\t——&gt; <span class=\"title\">genErrorsReason</span>,利用<span class=\"title\">Go</span>中的<span class=\"title\">template</span>填充代码参数，然后打印出来</span></span><br></pre></td></tr></table></figure>\n<p>此处还借用了google带的两个扩展参数：<code>google.protobuf.EnumOptions</code>和<code>google.protobuf.EnumValueOptions</code>。</p>\n<p><code>EnumOptions</code>前者是定义了一个可选字段——<code>default_code</code>；</p>\n<p><code>EnumValueOptions</code>则是扩展了error的注释；</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaultCode := proto.GetExtension(enum.Desc.Options(), errors.E_DefaultCode)</span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\">eCode := proto.GetExtension(v.Desc.Options(), errors.E_Code)</span><br></pre></td></tr></table></figure>\n<p>查看proto文件，如下，error.proto是需要的，且只能这么生成，需要和工具的字段对应上，否则，error_reason.proto将用不了default_code和code两个扩展功能。</p>\n<p>error.proto</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">\"proto3\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> errors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">option</span> go_package = <span class=\"string\">\"github.com/go-kratos/kratos/v2/errors;v1\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"google/protobuf/descriptor.proto\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">extend google.protobuf.EnumOptions &#123;</span><br><span class=\"line\">  <span class=\"built_in\">int32</span> default_code = <span class=\"number\">1108</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">extend google.protobuf.EnumValueOptions &#123;</span><br><span class=\"line\">  <span class=\"built_in\">int32</span> code = <span class=\"number\">1109</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>error_reason.proto</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = &quot;proto3&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">package errors;</span><br><span class=\"line\">import &quot;errors.proto&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">option go_package = &quot;github.com/go-kratos/kratos/examples/blog/api/v1;v1&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">enum ErrorReason &#123;</span><br><span class=\"line\">  option (errors.default_code) = 500;</span><br><span class=\"line\"></span><br><span class=\"line\">  USER_NOT_FOUND = 0 [(errors.code) = 404];</span><br><span class=\"line\">  CONTENT_MISSING = 1 [(errors.code) = 400];</span><br><span class=\"line\">  CONTENT2 = 3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>生成的代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">IsContentMissing</span><span class=\"params\">(err error)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\te := errors.FromError(err)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> e.Reason == ErrorReason_CONTENT_MISSING.String() &amp;&amp; e.Code == <span class=\"number\">400</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ErrorContentMissing</span><span class=\"params\">(format <span class=\"keyword\">string</span>, args ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> *<span class=\"title\">errors</span>.<span class=\"title\">Error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> errors.New(<span class=\"number\">400</span>, ErrorReason_CONTENT_MISSING.String(), fmt.Sprintf(format, args...))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">IsCONTENT2</span><span class=\"params\">(err error)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\te := errors.FromError(err)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> e.Reason == ErrorReason_CONTENT2.String() &amp;&amp; e.Code == <span class=\"number\">500</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ErrorCONTENT2</span><span class=\"params\">(format <span class=\"keyword\">string</span>, args ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> *<span class=\"title\">errors</span>.<span class=\"title\">Error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> errors.New(<span class=\"number\">500</span>, ErrorReason_CONTENT2.String(), fmt.Sprintf(format, args...))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到最终的结果是这样的不透明错误处理函数，也就是之前说的Opaque Error。别人引用的时候就可以直接调用这些处理函数了，很方便。</p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"protocol buffer","slug":"protocol-buffer","permalink":"chunlife.top/tags/protocol-buffer/"}]},{"title":"etcd终于解决冲突了","date":"2021-06-17T14:51:16.000Z","path":"2021/06/17/etcd终于解决冲突了/","content":"<p>如题，etcd终于解决了一个老大难的问题，就是依赖问题，它简直不要让人再多痛苦了。</p>\n<p>在新发布的etcd 3.5中，已经解决了对Go Module 的支持，并将之前大的 etcd 模块按功能进行了拆分，实现了 etcd 的模块化等，解决了各种 “go get fail”、依赖复杂、循环依赖、以及强制依赖过低的 <code>gRPC</code> 版本等问题，使用起来更简单了。</p>\n<p>当然其还有其他各项改进，这里我并不关心。。。</p>\n<p>如果你遇到过这样的问题：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> get <span class=\"keyword\">go</span>.etcd.io/etcd/</span><br><span class=\"line\"><span class=\"keyword\">go</span> get: github.com/coreos/bbolt@none updating to</span><br><span class=\"line\"> github.com/coreos/bbolt@v1<span class=\"number\">.3</span><span class=\"number\">.6</span>: parsing <span class=\"keyword\">go</span>.mod:</span><br><span class=\"line\"> module declares its path as: <span class=\"keyword\">go</span>.etcd.io/bbolt</span><br><span class=\"line\">         but was required as: github.com/coreos/bbolt</span><br><span class=\"line\"><span class=\"keyword\">go</span>.etcd.io/etcd imports</span><br><span class=\"line\"> github.com/coreos/etcd/etcdmain imports</span><br><span class=\"line\"> github.com/coreos/etcd/proxy/grpcproxy imports</span><br><span class=\"line\"> google.golang.org/grpc/naming: cannot find module providing <span class=\"keyword\">package</span> google.golang.org/grpc/naming</span><br></pre></td></tr></table></figure>\n<p>或者还需要在go.mod中加入：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">replace google.golang.org/grpc =&gt; google.golang.org/grpc v1<span class=\"number\">.26</span><span class=\"number\">.0</span></span><br></pre></td></tr></table></figure>\n<p>请直接出门使用<code>v3.5.0</code>这个千呼万唤始出来的版本。</p>\n<hr>\n<p>在之前的使用中，由于遇到了太多这样的问题，所以我参照了k8s的go.mod，其是这样使用的：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span>.etcd.io/etcd =&gt; <span class=\"keyword\">go</span>.etcd.io/etcd v0<span class=\"number\">.5</span><span class=\"number\">.0</span>-alpha<span class=\"number\">.5</span><span class=\"number\">.0</span><span class=\"number\">.20200910180754</span>-dd1b699fc489 <span class=\"comment\">// ae9734ed278b is the SHA for git tag v3.4.13</span></span><br></pre></td></tr></table></figure>\n<p>但这样的版本定义也只是一个权宜之计，在我看到etcd更新的时候，我再去看k8s，其也已经替换掉了之前的这个定义，使用v3.5.0版本了，不可以说是非常的清爽了。</p>\n<p>社区提出了模块化的解决方案，也就是将 etcd 整个大的模块，按角色与功能拆分成 client、server、raft、api、tests、etcdctl、etcdutl 相关的子模块，具体如下图。</p>\n<p><img src=\"image-20210617230730264-1623942452264.png\" alt=\"示例\"></p>\n<p><img src=\"image-20210617230756892.png\" alt=\"代码\"></p>\n<p>实际导入代码使用时，引入的包是这样的：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span>.etcd.io/etcd/api/v3 v3<span class=\"number\">.5</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"keyword\">go</span>.etcd.io/etcd/client/v3 v3<span class=\"number\">.5</span><span class=\"number\">.0</span></span><br></pre></td></tr></table></figure>\n<p>也就是说需要使用哪个模块，go get哪个具体模块就行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get go.etcd.io/etcd/etcdctl/v3</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"etcd","slug":"etcd","permalink":"chunlife.top/tags/etcd/"}]},{"title":"gRPC中错误的传递实践","date":"2021-05-31T14:02:58.000Z","path":"2021/05/31/gRPC中错误的传递实践/","content":"<h3><span id=\"引言\">引言</span></h3>\n<p>对于后端来说，可能都会从入门的HTTP，到后面的Server RPC阶段，在实践中GRPC确实好用，调用其他服务和调用一个似的，没什么区别，而且相对于HTTP来说，功能更强劲，扩展性更强。</p>\n<p>当我们使用gateway作为HTTP—GRPC的转换器后，前端既可以直接通过HTTP访问后端服务的GRPC接口，不需要多开发一个HTTP Server，而且引入GRPC后好处还不止这些。</p>\n<p>protocol buffer文件是作为GRPC的接口定义语言<code>Interface Definition Language (IDL)</code>，以及传输消息格式定义。那在实际工程中，我们应当充分发挥<code>pb</code>文件的作用，其本身即可拥有三种功能：① 定义接口以及消息的格式的文件；② 可以作为文档，其实时性很高；③ 生成实际代码；</p>\n<h3><span id=\"问题\">问题</span></h3>\n<p>当前后端通信采用RPC通信后，由于总有服务处于最顶层，gateway作为入口，一个错误从底层调用到顶层，结果就是错误不知道是那一层带入的了。这真是一个痛点，不只是在rpc服务中存在，HTTP服务中照样不可避免的有着这些问题。</p>\n<p>那这个时候就应该从工程性的角度去解决这个问题了。</p>\n<h3><span id=\"error的分类\">Error的分类</span></h3>\n<p><img src=\"Error%E5%AD%A6%E4%B9%A0.png\" alt=\"Error分类\"></p>\n<p>以上概念大多出自dave的博客：<a href=\"https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully\" target=\"_blank\" rel=\"noopener\">dont-just-check-errors-handle-them-gracefully</a></p>\n<p>dave不仅是pkg/errors包的开发者，也是Go小组的成员，所以在Go Error的发展进程中，都可以看到他对error处理的思想和预设的轨迹。</p>\n<h3><span id=\"grpc的error设计\">gRPC的Error设计</span></h3>\n<p><a href=\"https://github.com/go-kratos/kratos\" target=\"_blank\" rel=\"noopener\">kratos</a>和Go-Micro中有一种Error的设计，也就是将Error返回值也定义为pb文件，让其参与协议的传输。</p>\n<p>Server——&gt; <code>gRPC</code>——&gt;Server，类似于这样的传输。</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message Error &#123;</span><br><span class=\"line\">  int32 code = 1;</span><br><span class=\"line\">  string reason = 2;</span><br><span class=\"line\">  string message = 3;</span><br><span class=\"line\">  map&lt;string, string&gt; metadata = 4;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>code</code>对应了HTTP Code以及<code>gRPC</code>的错误码。<code>google.golang.org\\grpc\\codes\\codes.go</code>。</p>\n<p><img src=\"image-20210531225806823-1622473088644.png\" alt=\"gRPC对应HTTP\"></p>\n<p><code>reason</code>可以是自己server定义的error。</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum ErrorReason &#123;</span><br><span class=\"line\">  // Do not use this default value.</span><br><span class=\"line\">  ERROR_REASON_UNSPECIFIED = 0;</span><br><span class=\"line\">  // The request is calling a disabled service for a consumer.</span><br><span class=\"line\">  SERVICE_DISABLED = 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>message</code>则是具体错误，<code>metadata</code>则是error传递过程中可能会夹带的一些其他数据。</p>\n<p>通过这样的设计，就可以将错误锁在<code>pb</code>文件中，而且，每一层都有自己对错误翻译，这样错误有着连续性，顶层server可以直接对接前端，让前端报错。</p>\n<h3><span id=\"grpc-pb文件管理\">gRPC pb文件管理</span></h3>\n<p>pb文件最好使用一个大仓库包起来，这样前端后端查询的时候都可以直接从里面找到文件，需要什么服务就拉取什么，查询错误码也会非常方便。</p>\n<p>不过这里肯定会引发权限问题，这个就需要进行<code>gitlab</code>的扩展了。</p>\n<p><img src=\"image-20210601115412767.png\" alt=\"gitlab设置\"></p>\n<p>显然，其在具体的实施中会碰到一些问题，但实现之后管理pb文件将会比较方便。</p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"GRPC","slug":"GRPC","permalink":"chunlife.top/tags/GRPC/"},{"name":"Error Code","slug":"Error-Code","permalink":"chunlife.top/tags/Error-Code/"}]},{"title":"MySQL事务中的MVCC","date":"2021-04-30T09:39:30.000Z","path":"2021/04/30/MySQL事务中的MVCC/","content":"<p>之前对ETCD中实现的MVCC了解了一点，现阶段了解MySQL也看到了这一部分，还是比较有收获的，以前写代码虽然有注意，但是没有这么深入理解过，所以有些代码现在看来，依然是有瑕疵的。</p>\n<p>下面会讲到一致性，我这里查过了，MySQL中的一致性，和ETCD、ZK中的一致性不是同一个东西，这个<a href=\"https://www.zhihu.com/question/31346392\" target=\"_blank\" rel=\"noopener\">知乎回答</a>比较好，但没有说明两者的区别。当然这里是一个事务中的，一个各副本间进行线性读操作的，从实际上来看，貌似就有不同。</p>\n<p>众所周知的事务有着四个特性（ACID）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACID是衡量事务的四个特性：</span><br><span class=\"line\">原子性（Atomicity，或称不可分割性）</span><br><span class=\"line\">一致性（Consistency）</span><br><span class=\"line\">隔离性（Isolation）</span><br><span class=\"line\">持久性（Durability）</span><br></pre></td></tr></table></figure>\n<p>这里有一句总结，理解一致性就是：应用系统从一个正确的状态到另一个正确的状态。而ACID就是说事务能够通过AID来保证这个C的过程。C是目的，AID都是手段。</p>\n<hr>\n<p>更多关于一致性的就不作讨论了，这里来看看事务中，隔离，一致性，以及锁的相互联系。</p>\n<p><img src=\"MySQL%E9%94%81.png\" alt=\"MySQL锁\"></p>\n<p>以上是对<code>MySQL实战45讲 6\\7\\8节</code>中相关内容的总结。</p>\n<p>这里主要是关注表锁的区分（表锁，MDL），行锁在事务中，什么时候出现，怎样尽量减少死锁。</p>\n<p>另外，事务中，加锁的部分都涉及到了当前读，而且根据事务已提交，未提交，自身事务开启的时间，所能看到的数据都是不一样的。</p>\n<hr>\n<p>比较推荐去看下<code>MySQL实战45讲</code>，确实讲的不错。</p>\n","categories":[{"name":"DB","slug":"DB","permalink":"chunlife.top/categories/DB/"}],"tags":[{"name":"事务","slug":"事务","permalink":"chunlife.top/tags/事务/"},{"name":"MVCC","slug":"MVCC","permalink":"chunlife.top/tags/MVCC/"},{"name":"mysql","slug":"mysql","permalink":"chunlife.top/tags/mysql/"}]},{"title":"MySQL各类索引总结以及优化","date":"2021-04-27T06:48:50.000Z","path":"2021/04/27/MySQL简单索引总结汇/","content":"<p>MySQL中的索引，一般来说，我们使用的比较多的是b+tree，hash索引。</p>\n<p>且因为在MySQL中，存在不同的存储引擎，这两种索引存在的形式也有些不大一样。这里我们也只引入MyISAM和Innodb存储引擎。</p>\n<a id=\"more\"></a>\n<p>使用到的示例数据：<a href=\"http://downloads.mysql.com/docs/sakila-db.zip\" target=\"_blank\" rel=\"noopener\">sakila-db</a></p>\n<h1><span id=\"索引的好处\">索引的好处</span></h1>\n<p>索引的好处指：索引给数据库带来性能损耗<strong>小于</strong>带来的好处，索引即是有利的。</p>\n<ul>\n<li>索引大大减少了存储引擎需要扫描的<strong>数据量</strong>；</li>\n<li>索引可以帮助我们进行排序以避免使用临时表；</li>\n<li>索引可以把随机I/O变为顺序I/O；</li>\n</ul>\n<p>添加索引会提高查询速度，其实也就是将数据不管从逻辑还是物理上，将无序数据变为有序数据。</p>\n<p>不过索引也是会带来一定的损耗的：</p>\n<p>索引的引入会增加写操作的成本。不过<code>Innodb</code>引入了插入缓存解决了这个问题。</p>\n<p>同时，太多索引会增加查询优化器的选择时间。</p>\n<h1><span id=\"hash索引\">Hash索引</span></h1>\n<p>MyISAM和Innodb都不支持hash索引，不过Innodb有点不同的是，它不能说完全不支持，它的hash索引的创建由引擎自动优化创建，需要开启这个特性，人为无法干预创建。当我们试图创建时，mysql也不会报错，只不过会自动转化为B树索引。</p>\n<h2><span id=\"特点\">特点</span></h2>\n<p>Hash索引是基于Hash表实现的，只有查询条件精确匹配Hash索引中的所有列时，才能够使用到hash索引。（故只支持等值比较查询<code>=，in()， &lt;=&gt;</code>，而不包含排序或范围查询的需求）</p>\n<p>对于Hash索引中的所有列，存储引擎都会为每一行计算一个Hash码，Hash索引中存储的就是Hash码。（哈希索引包括哈希值，以及行的指针）。</p>\n<p><strong>限制：</strong></p>\n<ul>\n<li>因索引不保存数据，索引需要读取行来读取想要的数据，发生二次查找，但有缓存，速度很快，所以也就没啥影响。</li>\n<li>无法用于排序，哈希索引数据并不是按照索引列的值顺序存储的，所以也就无法用于排序。</li>\n<li>哈希索引也不支持部分索引列匹配查找，因为哈希索引始终是使用索引的全部列值内容来计算哈希值的。如：数据列（a,b）上建立哈希索引，如果只查询数据列a，则无法使用该索引；也不支持范围查找。</li>\n<li>Hash索引中Hash码的计算可能存在Hash冲突。维护成本比较高。</li>\n</ul>\n<p>​       <strong>因此</strong>在绝大多数需求为单条记录查询的时候，可以选择哈希索引，查询性能最快；其余大部分场景，建议选择BTree索引。</p>\n<h1><span id=\"b树索引\">B树索引</span></h1>\n<p>普通的B树和B+树中，最大区别就是，B 树可以在非叶结点中存储数据，但是 B+ 树的所有数据其实都存储在叶子节点中。</p>\n<p>参考文章：<a href=\"https://draveness.me/whys-the-design-mysql-b-plus-tree/\" target=\"_blank\" rel=\"noopener\">为什么 MySQL 使用 B+ 树</a>，数据加载这小节。</p>\n<p>因为B树的节点都存储数据，那也就是说我要查询数据的话，必须遍历这些节点来取数据，运气好立马就能拿到数据，运气不好就会按树遍历的方式，来回折腾，速率是不稳定的。那B+树呢，因为数据都在叶子节点中，也就是数据都在树的最底下的那一层，当我通过索引去遍历时，通过一个 B+ 树最左侧的叶子节点，通过在叶子节点间建立链表连接，我们可以像链表一样遍历整个树中的全部数据。（通过此<a href=\"https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html\" target=\"_blank\" rel=\"noopener\">网站</a>进行模拟）</p>\n<p><img src=\"mysql-innodb-b-plus-tree.png\" alt=\"mysql-innodb-b-plus-tree\"></p>\n<p>通过模拟网站，我们也能看到节点是有排序的。</p>\n<h2><span id=\"mysql中的索引\">MySQL中的索引</span></h2>\n<p>在MySQL中，索引是在存储引擎层实现的，所以并没有统一的索引标准，即不同存储引擎的索引的工作方式并不一样。而即使多个存储引擎支持同一种类型的索引，其底层的实现也可能不同。</p>\n<p>MyISAM和InnoDB引擎中，<a href=\"#B+Tree%E7%BB%93%E6%9E%84\">B树索引</a>不是相对等的，虽然其可以被称为同一类数据结构——平衡查找树。</p>\n<blockquote>\n<p>平衡查找树——每个叶子到根部的距离都是相同的，并且所有的键值都是按照键值的大小存放在同一层的叶子节点上的，各个叶子节点由指针来进行连接。</p>\n</blockquote>\n<p>MyISAM：</p>\n<p>叶子节点存储指向数据的物理地址。</p>\n<p>InnoDB：</p>\n<p>叶子节点指向数据的主键。</p>\n<blockquote>\n<p>树当中没有子结点的结点称为叶子结点</p>\n</blockquote>\n<p>主键即为聚集索引，<code>InnoDB</code>数据文件本身即为索引文件。树的叶子节点data域保存了完整的数据记录，而这个索引的<code>key</code>是数据表的主键。</p>\n<p>因为InnoDB作为主流，且在实际业务中好像也没什么机会使用到<code>MyISAM</code>引擎，所以接下来的索引各方面都从<code>InnoDB</code>出发。</p>\n<h2><span id=\"innodb索引\">InnoDB索引</span></h2>\n<p>每一个索引在InnoDB里面都对应一棵B+树。</p>\n<p>假设，我们有一个主键列为ID的表，表中有字段k，并且在k上有索引。</p>\n<p>这个表的建表语句是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create table T(</span><br><span class=\"line\">    id int primary key, </span><br><span class=\"line\">    k int not null, </span><br><span class=\"line\">    name varchar(16),</span><br><span class=\"line\">    index (k),</span><br><span class=\"line\">)engine=InnoDB;</span><br></pre></td></tr></table></figure>\n<p>表中R1~R5的(ID,k)值分别为(100,1)、(200,2)、(300,3)、(500,5)和(600,6)，两棵树的示例示意图如下。</p>\n<p><img src=\"dcda101051f28502bd5c4402b292e38d.png\" alt=\"模拟树\"></p>\n<p>从图中不难看出，根据叶子节点的内容，索引类型分为主键索引和非主键索引。</p>\n<p>主键索引的叶子节点存的是整行数据。在InnoDB里，主键索引也被称为聚簇索引（clustered index）。</p>\n<p>非主键索引的叶子节点内容是主键的值。在InnoDB里，非主键索引也被称为二级索引（secondary index）。</p>\n<p>根据上面的索引结构说明，我们来讨论一个问题：<strong>基于主键索引和普通索引的查询有什么区别？</strong></p>\n<ul>\n<li>如果语句是select * from T where ID=500，即主键查询方式，则只需要搜索ID这棵B+树；</li>\n<li>如果语句是select * from T where k=5，即普通索引查询方式，则需要先搜索k索引树，得到ID的值为500，再到ID索引树搜索一次。这个过程称为<strong>回表</strong>。</li>\n</ul>\n<h2><span id=\"索引的维护\">索引的维护</span></h2>\n<p>B+树为了维护索引有序性，在插入新值的时候需要做必要的维护。以上面这个图为例，如果插入新的行ID值为700，则只需要在R5的记录后面插入一个新记录。如果新插入的ID值为400，就相对麻烦了，需要逻辑上挪动后面的数据，空出位置。</p>\n<p><img src=\"image-20210426200555194.png\" alt=\"原始状态\"></p>\n<p><img src=\"image-20210426200727836.png\" alt=\"插入大于当前的ID\"></p>\n<p><img src=\"image-20210426200756171.png\" alt=\"插入小于当前节点的ID\"></p>\n<p>而更糟的情况是，如果R5所在的数据页已经满了，根据B+树的算法，这时候需要申请一个新的数据页，然后挪动部分数据过去。这个过程称为页分裂。在这种情况下，性能自然会受影响。</p>\n<p><img src=\"image-20210426200841507.png\" alt=\"分裂\"></p>\n<p>有分裂就有合并，当索引被删除时，空间不会被回收，当页利用率很低之后，就会开启合并，详细的我建议是利用我写的模拟网站进行模拟操作，另外是看<a href=\"https://zhuanlan.zhihu.com/p/98818611\" target=\"_blank\" rel=\"noopener\">InnoDB中的页合并与分裂</a>。</p>\n<p>基于上面的索引维护过程说明，我们来讨论为什么在一些建表规范里面见到过类似的描述，要求建表语句里一定要有自增主键：</p>\n<p>自增主键是指自增列上定义的主键，在建表语句中一般是这么定义的： NOT NULL PRIMARY KEY AUTO_INCREMENT。</p>\n<p>插入新记录的时候可以不指定ID的值，系统会获取当前ID最大值加1作为下一条记录的ID值。</p>\n<p>也就是说，自增主键的插入数据模式，正符合了我们前面提到的递增插入的场景。每次插入一条新记录，都是追加操作，都不涉及到挪动其他记录，会自然增长到页数据满。</p>\n<p>而有业务逻辑的字段做主键，则往往不容易保证有序插入，这样写数据成本相对较高。</p>\n<p>除了考虑性能外，我们还可以从存储空间的角度来看。假设你的表中确实有一个唯一字段，比如字符串类型的身份证号，那应该用身份证号做主键，还是用自增字段做主键呢？</p>\n<p>由于每个非主键索引的叶子节点上都是主键的值。如果用身份证号做主键，那么每个二级索引的叶子节点占用约20个字节，而如果用整型做主键，则只要4个字节，如果是长整型（bigint）则是8个字节。</p>\n<p><strong>显然，主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。</strong></p>\n<p>所以，从性能和存储空间方面考量，自增主键往往是更合理的选择。</p>\n<p>有没有什么场景适合用业务字段直接做主键的呢？还是有的。比如，有些业务的场景需求是这样的：</p>\n<ol>\n<li>只有一个索引；</li>\n<li>该索引必须是唯一索引。</li>\n</ol>\n<p>你一定看出来了，这就是典型的KV场景。</p>\n<p>由于没有其他索引，所以也就不用考虑其他索引的叶子节点大小的问题。</p>\n<p>这时候我们就要优先考虑上一段提到的“尽量使用主键查询”原则，直接将这个索引设置为主键，可以避免每次查询需要搜索两棵树。</p>\n<p>B树索引这小节部分，很大部分补充自<code>MySQL实战45讲/05讲深入浅出索引</code>。</p>\n<hr>\n<h1><span id=\"mysql添加索引操作\">MySQL添加索引操作</span></h1>\n<p><img src=\"1566884936165.png\" alt=\"添加索引\"></p>\n<h1><span id=\"使用索引的注意事项\">使用索引的注意事项</span></h1>\n<p><img src=\"1566875667532.png\" alt=\"使用索引的注意事项\"></p>\n<h2><span id=\"索引列上不能使用表达式或函数\">索引列上不能使用表达式或函数</span></h2>\n<p>例如<code>where id = 1</code>，<code>where to_int(id) = 1</code>，在<code>id</code>作为索引的这两条where子句，前者可以使用索引查询，而后者将无法使用索引。</p>\n<p>所以尽量在数据上动心思，不要在索引列上进行操作。</p>\n<p><img src=\"%E5%9B%BE%E5%83%8F3.png\" alt=\"\"></p>\n<h2><span id=\"前缀索引和索引列的选择性\">前缀索引和索引列的选择性</span></h2>\n<p>选择性怎么体现，例如，数据库中性别列，只有男女两个选择（一般情况下），那么其可选择性即是极差，数据没有变化性，索引了这一组数据，会从文件中捞出一大堆这样的数据（很好理解，男女都有很多记录），我们要的情况是，索引中数据后，只捞出极少数数据或直接命中数据。</p>\n<p>所以我们会追求索引列数据的多样性。但有一些列多样性很好，但宽度极大，不利于索引（很好理解，中国少字姓氏总比外国人一批条字的姓氏好认），同时，索引可是有大小限制的（见上图）。</p>\n<p>这里，就有了前缀索引来解决这个问题。</p>\n<p>对于列的值较长，比如BLOB、TEXT、VARCHAR，就必须建立前缀索引，即将值的前一部分作为索引。这样既可以节约空间，又可以提高查询效率。<strong>但无法使用前缀索引做 ORDER BY 和 GROUP BY，也无法使用前缀索引做覆盖扫描</strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 语法</span><br><span class=\"line\">ALTER TABLE table_name ADD KEY(column_name(prefix_length));</span><br><span class=\"line\"># 示例</span><br><span class=\"line\">ALTER TABLE city ADD KEY(cityname(7))</span><br></pre></td></tr></table></figure>\n<p><strong>那如何量化前缀索引的选择性？</strong></p>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/gomysql/p/3628926.html\" target=\"_blank\" rel=\"noopener\">MySQL前缀索引和索引选择性</a></p>\n</blockquote>\n<p>例如有这样一张表。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select count(*) as cnt, city from city_demo group by city order by cnt desc limit 10;               </span><br><span class=\"line\">+-----+--------------+</span><br><span class=\"line\">| cnt | city         |</span><br><span class=\"line\">+-----+--------------+</span><br><span class=\"line\">|   8 | Garden Grove |</span><br><span class=\"line\">|   7 | Escobar      |</span><br><span class=\"line\">|   7 | Emeishan     |</span><br><span class=\"line\">|   6 | Amroha       |</span><br><span class=\"line\">|   6 | Tegal        |</span><br><span class=\"line\">|   6 | Lancaster    |</span><br><span class=\"line\">|   6 | Jelets       |</span><br><span class=\"line\">|   6 | Ambattur     |</span><br><span class=\"line\">|   6 | Yingkou      |</span><br><span class=\"line\">|   6 | Monclova     |</span><br><span class=\"line\">+-----+--------------+</span><br><span class=\"line\">10 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>\n<p>可以先计算完整列的选择性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select count(distinct city) / count(*) from city_demo;</span><br><span class=\"line\">+---------------------------------+</span><br><span class=\"line\">| count(distinct city) / count(*) |</span><br><span class=\"line\">+---------------------------------+</span><br><span class=\"line\">|                          0.4283 |</span><br><span class=\"line\">+---------------------------------+</span><br><span class=\"line\">1 row in set (0.05 sec)</span><br></pre></td></tr></table></figure>\n<p>可以在一个查询中针对不同前缀长度的选择性进行计算，这对于大表非常有用，下面给出如何在同一个查询中计算不同前缀长度的选择性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select count(distinct left(city,3))/count(*) as sel3,</span><br><span class=\"line\">    -&gt; count(distinct left(city,4))/count(*) as sel4,</span><br><span class=\"line\">    -&gt; count(distinct left(city,5))/count(*) as sel5, </span><br><span class=\"line\">    -&gt; count(distinct left(city,6))/count(*) as sel6 </span><br><span class=\"line\">    -&gt; from city_demo;</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">| sel3   | sel4   | sel5   | sel6   |</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">| 0.3367 | 0.4075 | 0.4208 | 0.4267 |</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">1 row in set (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br></pre></td></tr></table></figure>\n<p>可以看见当索引前缀为6时的基数是0.4267，已经接近完整列选择性0.4283。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table city_demo add key (city(6));</span><br><span class=\"line\">Query OK, 0 rows affected (0.19 sec)</span><br><span class=\"line\">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>\n<h2><span id=\"联合索引\">联合索引</span></h2>\n<p>可以参考一下原则：</p>\n<ul>\n<li>经常会使用到的列优先</li>\n<li>选择性搞的列优先</li>\n<li>宽度小的列优先</li>\n</ul>\n<p>同时需要注意索引的注意项，例如索引字段不可施加函数，联合索引依然遵循，最左列不可使用函数，而且联合索引在使用时也不能缺失最左列。</p>\n<p>联合索引的B+树：</p>\n<p><img src=\"image-20210426204502697.png\" alt=\"联合索引存储方式\"></p>\n<p>也就是说，当我们要需要拿取name，age，id这三个字段时，会形成覆盖索引，不需要回表拿数据。</p>\n<h2><span id=\"覆盖索引\">覆盖索引</span></h2>\n<p>优点：</p>\n<ul>\n<li>可以优化缓存，减少磁盘IO操作；</li>\n<li>可以减少随机IO，变随机IO操作为顺序IO操作</li>\n<li>可以避免对InnoDB主键索引的二次查询</li>\n<li>可以避免MyISAM表进行系统调用</li>\n</ul>\n<p>虽然优点很明显，但限制同样很明显，并不是可以任意生效覆盖索引的。例如：</p>\n<ul>\n<li>存储引擎本身不支持覆盖索引；</li>\n<li>查询中使用（获取）了太多列；</li>\n<li>使用了双<code>%</code>号的<code>like</code>查询。</li>\n</ul>\n<blockquote>\n<p>百分号是属于mysql自身的操作，其操作无法在磁盘中进行，必须要将数据读取至内存中进行操作。</p>\n</blockquote>\n<p>以<code>sakila</code>中<code>film</code>表为例。</p>\n<p><img src=\"%E5%9B%BE1.png\" alt=\"film表\"></p>\n<p><strong>操作1：</strong></p>\n<p>获取language_id，可以直接通过索引就能得到数据，不需要拿到索引后去数据列拿取数据。</p>\n<p><img src=\"%E5%9B%BE2.png\" alt=\"图\"></p>\n<p><strong>操作2：</strong></p>\n<p>直接从索引拿不到数据，需要读取索引到内存中，再到数据中过滤数据。</p>\n<p><img src=\"%E5%9B%BE3.png\" alt=\"3\"></p>\n<p><strong>操作3：</strong></p>\n<p>Innodb 主键作为聚集索引，数据与索引是存储在一起的，即使使用的是二级索引查询，获取多列数据，但其包含的是主键，所以依然属于覆盖索引。</p>\n<p><img src=\"%E5%9B%BE4.png\" alt=\"4\"></p>\n<p>1、覆盖索引：如果查询条件使用的是普通索引（或是联合索引的最左原则字段），查询结果是联合索引的字段或是主键，不用回表操作，直接返回结果，减少IO磁盘读写读取正行数据</p>\n<p>2、最左前缀：联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符</p>\n<p>3、联合索引：根据创建联合索引的顺序，以最左原则进行where检索，比如（age，name）以age=1 或 age= 1 and name=‘张三’可以使用索引，单以name=‘张三’ 不会使用索引，考虑到存储空间的问题，还请根据业务需求，将查找频繁的数据进行靠左创建索引。</p>\n<p>4、索引下推：联合索引（name, age），name like '张%'and age &gt;10 检索，MySQL5.6版本之前，会对匹配的数据进行回表查询。5.6版本后，会先通过索引中覆盖的age数据过滤掉age&lt;10的数据，再进行回表查询，减少回表率，提升检索速度</p>\n<h1><span id=\"索引优化查询\">索引优化查询</span></h1>\n<h2><span id=\"使用索引扫描来优化排序\">使用索引扫描来优化排序</span></h2>\n<p>按照索引顺序扫描数据。</p>\n<p>需要的条件：</p>\n<ul>\n<li>索引的列顺序和Order By子句顺序完全一致；</li>\n<li>索引中所有列的方向（升序、降序）和Order By子句完全一致；</li>\n<li>Order By中的字段全部在关联表中的第一张表中。</li>\n</ul>\n<p>表结构：</p>\n<p><img src=\"%E5%9B%BE11.png\" alt=\"表结构\"></p>\n<p><code>rental_date</code>，<code>inventory_id</code>，<code>customer_id</code>，是联合唯一索引。</p>\n<p>INNODB-&gt;使用到了索引（主键）进行排序。success。</p>\n<p><img src=\"%E5%9B%BE12.png\" alt=\"1\"></p>\n<p>myisam使用了文件进行排序。</p>\n<p><img src=\"%E5%9B%BE13.png\" alt=\"12\"></p>\n<p>使用到了联合索引，获取完整的数据则需要回表查询数据。success。</p>\n<p><img src=\"%E5%9B%BE14.png\" alt=\"14\"></p>\n<p>使用到降序<code>desc</code>，则需要使用文件排序。</p>\n<p><img src=\"%E5%9B%BE15.png\" alt=\"123\"></p>\n<p>联合索引中最左边的列使用范围查找，则导致右边的索引失效。</p>\n<p><img src=\"%E5%9B%BE16.png\" alt=\"16\"></p>\n<h2><span id=\"模拟hash索引优化查询\">模拟Hash索引优化查询</span></h2>\n<p>Innodb是引擎自动管理，而我们可以手动进行创建。</p>\n<ul>\n<li>其只能处理键值的全值匹配查找；</li>\n<li>所使用的Hash算法决定索引键的大小。</li>\n</ul>\n<p>可以用于对数据很长的列，计算Hash反而会缩短其长度。添加Hash可以使用MySQL触发器。</p>\n<h2><span id=\"删除重复和冗余的索引\">删除重复和冗余的索引</span></h2>\n<h3><span id=\"使用工具\">使用工具</span></h3>\n<p><code>pt-duplicate-key-checker </code>，可以检查一些重复和冗余的索引。</p>\n<blockquote>\n<p>使用的话：<a href=\"http://www.fordba.com/percona-toolkit-pt-duplicate-key-checker.html\" target=\"_blank\" rel=\"noopener\">Percona-Toolkit系列之pt-duplicate-key-checker冗余索引/外键检测利器</a></p>\n</blockquote>\n<h3><span id=\"查找未使用过的索引\">查找未使用过的索引</span></h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select object_schema,object_name,index_name,b.`TABLE_ROWS`</span><br><span class=\"line\">FROM performance_schema.table_io_waits_summary_by_index_usage a</span><br><span class=\"line\">JOIN information_schema.tables b ON</span><br><span class=\"line\">    a.`OBJECT_SCHEMA`=b.`TABLE_SCHEMA` AND</span><br><span class=\"line\">    a.`OBJECT_NAME`=b.`TABLE_NAME`</span><br><span class=\"line\">WHERE index_name IS NOT NULL</span><br><span class=\"line\">AND count_star = 0</span><br><span class=\"line\">ORDER BY object_schema, object_name;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"更新索引统计信息以及减少索引碎片\">更新索引统计信息以及减少索引碎片</span></h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">analyze talbe table_name</span><br><span class=\"line\"></span><br><span class=\"line\">optimize table table_name  // 使用不当将锁表</span><br></pre></td></tr></table></figure>\n<p>经常更新数据的磁盘需要整理碎片，数据库也是这样，Optimize Table语句对MyISAM和InnoDB类型的表都有效。</p>\n<h1><span id=\"btree结构\">B+Tree结构</span></h1>\n<blockquote>\n<p><a href=\"https://www.jianshu.com/p/486a514b0ded\" target=\"_blank\" rel=\"noopener\">MYSQL-B+TREE索引原理</a></p>\n</blockquote>\n<p>非叶子节点不存储data，只存储索引key；只有叶子节点才存储data。<code>（叶子节点为树中没有子节点的节点）</code>（所以B树索引查找数据是一级一级深入的找）</p>\n<p>在B+Tree的每个叶子节点增加一个指向相邻叶子节点的指针，就形成了<strong>带有顺序访问指针的B+Tree</strong>。</p>\n<p><img src=\"3575048-b5309bfe660a8ce9.webp\" alt=\"img\"></p>\n<hr>\n<blockquote>\n<p>参考：[MySQL Index](<a href=\"https://github.com/Snailclimb/JavaGuide/blob/master/docs/database/MySQL\" target=\"_blank\" rel=\"noopener\">https://github.com/Snailclimb/JavaGuide/blob/master/docs/database/MySQL</a> <a href=\"http://Index.md\" target=\"_blank\" rel=\"noopener\">Index.md</a>)</p>\n</blockquote>\n","categories":[{"name":"DB","slug":"DB","permalink":"chunlife.top/categories/DB/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"chunlife.top/tags/mysql/"},{"name":"索引","slug":"索引","permalink":"chunlife.top/tags/索引/"},{"name":"优化","slug":"优化","permalink":"chunlife.top/tags/优化/"}]},{"title":"zookeeper中的一致性","date":"2021-04-25T12:43:52.000Z","path":"2021/04/25/zookeeper中的一致性/","content":"<p>前几天我看了Raft关于一致性读的操作，让我对于<code>Raft - 扩展阅读</code>这篇论文以及ETCD中读操作有了一些理解。</p>\n<p>在实际的使用的这类服务中，写操作可能是比读操作少的，当我们需要优化读写性能时，就需要做一些功夫了。</p>\n<p>和ETCD中很像的zookeeper，两者定位可以说都是非常相似的，在zk中，当zk节点越多，读性能相对越强，而在ETCD中，明显和这种情况不同，因为读写请求都需要leader进行响应，且还需要做一个Raft Log同步的操作，这也就会造成，节点多了，反而会导致性能下降。<code>zk</code>使用的<code>zap</code>协议，类似Raft一般，也是去维护日志，但却不影响<code>zk</code>的读取性能。为什么会造成这一现象呢？</p>\n<p>ETCD是读操作是一致性读，不允许从不同节点读数据出现不一致的情况，所以即使是读数据的请求，也会被转发到leader节点来处理，这是已知的。<code>zk</code>则舍弃了这一点，允许client从节点读取数据，也就是说，允许出现数据与leader不一致的情况出现，但这个允许又是不太一样的。</p>\n<h3><span id=\"一致性\">一致性</span></h3>\n<p><code>zk</code>的<a href=\"https://zookeeper.apache.org/doc/current/zookeeperProgrammers.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>中，有对一致性保证的介绍：</p>\n<p><img src=\"image-20210425213435861.png\" alt=\"Consistency Guarantees\"></p>\n<p>来自于<a href=\"http://www.crazyant.net/2120.html\" target=\"_blank\" rel=\"noopener\">翻译</a>。</p>\n<blockquote>\n<p>zookeeper一致性的保证：</p>\n<p>ZooKeeper是一种高性能，可扩展的服务，虽然读取速度比写入快，但是读取和写入操作都设计的极为快速，这样做的原因是在读取的情况下，ZooKeeper可能会提供较旧的数据，但这是为了ZooKeeper的一致性保证：</p>\n<ul>\n<li>顺序一致性：来自客户端的更新将按照发送的顺序被写入到zk</li>\n<li>原子性：更新操作要么成功要么失败，没有中间状态</li>\n<li>单系统快照：客户端将看到服务的相同视图，而不管它连接到的服务器。</li>\n<li>可靠性：一旦应用更新，数据将被持久化，直到数据被再次更新，对于该保证有两个推论：1、如果客户端得到了成功的返回码，说明写入成功，数据被持久化，如果出现了通信错误，超时等一些故障，客户端将不知道更新是否已应用。我们采取措施尽量减少失败，但唯一的保证是只有成功的返回码。 （这在Paxos中称为单调性条件。）2、如果客户端已经读取到了数据或者写入成功了数据，都不会因为zk的失败而导致回滚；</li>\n<li>及时性：在一段时间后，客户端将看到最新的系统更新，在此期间客户端将看到这种变更。</li>\n</ul>\n<p>有时开发人员错误地假定ZooKeeper实际上没有做出另一个保证：<strong>跨客户端的强一致性</strong></p>\n<p>ZooKeeper并不保证在每个实例中，两个不同的客户端将具有相同的ZooKeeper数据的视图。由于诸如网络延迟的因素，一个客户端可以在另一客户端被通知该改变之前执行更新，考虑两个客户端A和B的场景。如果客户端A将znode / a的值从0设置为1，则告诉客户端B读取/ a，则客户端B可以读取旧值0，这取决于它连接到的服务器。如果客户端A和客户端B读取相同的值很重要，则客户端B应该在执行读取之前从ZooKeeper API方法调用**sync()**方法。</p>\n<p>因此，ZooKeeper本身不保证所有服务器上同步发生变化，但ZooKeeper原语可用于构建更高级的函数，提供有用的客户端同步。</p>\n<p>zk的sync方法的解释：异步的实现当前进程与leader之间的指定path的数据同步；</p>\n</blockquote>\n<h3><span id=\"解释\">解释</span></h3>\n<p>那<code>zk</code>一致性保证的是：</p>\n<ul>\n<li>写请求是线性一致性的，读不是；</li>\n<li>任何给定的client操作的执行顺序是由client来决定的，其称之为FIFO Client Order；</li>\n</ul>\n<p>如果一个client表示，先执行这个写请求，然后再另一个写请求，接着再执行第三个写请求，在最终写请求的顺序中，我们会看到client的写请求的发生顺序是按照client所指定的顺序进行的。这是系统方面的一个问题，因为我们允许client发起写请求时，可以是异步的，在不等待任何写请求完成的情况下，一个client可以发送一堆写请求给ZooKeeper leader。</p>\n<p>为了加强读性能，读请求可以由某些replica来处理，client所看到的就是replica上日志中的内容。</p>\n<p>那读请求方面的FIFO client order的方式是：</p>\n<p>对于连续的读请求，我们所观察到的日志点应该是一直向前走的。接连发起的两个读请求，第二个读请求看到的状态至少得是和第一个读请求（t1）看到的状态是一样新的。</p>\n<p><img src=\"image-20210425215612052.png\" alt=\"读取日志\"></p>\n<p>另外，当我读到t1时，replica宕机了，当client切换到新的replica时，其依然需要保证FIFO client order（读请求必须在这个t1时间点或者是这个时间点之后执行，尽管它切换到了不同的replica上）。</p>\n<p>这里的工作方式是，这里的每个日志条目都被leader用<code>zxid</code>打上了标签，replica会将这个读过的日志条目的<code>zxid</code>发送给这个client，client会记住这是最新数据的<code>zxid</code>。</p>\n<p>FIFO client order会应用于单个client的所有请求，如果执行了一个client端的写请求，将这个写请求发送给leader，leader还没有来得及对它进行处理或者提交，然后，再将一个读请求发送给了一个replica，为了保证FIFO client order，对于这个读请求的处理可能会延后处理，这个读请求可能得等到直到这个client看到并执行完前一个写请求才行，这就是FIFO client order所带来的影响——读的顺序和写的顺序一致。</p>\n<p>比较简单理解就是，如果我将某个变量的值设为17，然后读取该变量的值，如果它的值并不是17，那么这就很奇怪了，那么这就表明，这系统完全没按照顺序来执行我的请求。当client发送一个读请求，client知道client发送给leader的上一个写请求所携带该数据的<code>zxid</code>之类的信息，这个replica必须等到它在leader中看到这个<code>zxid</code>才能执行该读请求。</p>\n<p>以上就是，文档中所说的，<code>zk</code>没有保证<strong>跨客户端的强一致性</strong>。当然，我们也可以通过**sync()**函数，来保证我们读到最新值。其他时候，我们的读操作都不是一致性的。</p>\n<h3><span id=\"理论\">理论</span></h3>\n<p>在理论计算机科学中，<strong>CAP定理</strong>（CAP theorem），又被称作<strong>布鲁尔定理</strong>（Brewer’s theorem），它指出对于一个分布式计算系统来说，不可能同时满足以下三点：</p>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E4%B8%80%E8%87%B4%E6%80%A7\" target=\"_blank\" rel=\"noopener\">一致性</a>（Consistence) （分布式环境中，一致性是指多个副本之间，在同一时刻能否有同样的值）</li>\n<li>可用性（<a href=\"https://zh.wikipedia.org/wiki/%E5%8F%AF%E7%94%A8%E6%80%A7\" target=\"_blank\" rel=\"noopener\">Availability</a>）（系统提供的服务必须一直处于可用的状态。即使集群中一部分节点故障。）</li>\n<li>分区容错性（<a href=\"https://zh.wikipedia.org/w/index.php?title=Partition_tolerance&amp;action=edit&amp;redlink=1\" target=\"_blank\" rel=\"noopener\">Network partitioning</a>）（以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择。）</li>\n</ul>\n<p>根据定理，分布式系统只能满足三项中的两项而不可能满足全部三项。理解CAP理论的最简单方式是想象两个节点分处分区两侧。允许至少一个节点更新状态会导致数据不一致，即丧失了C性质。如果为了保证数据一致性，将分区一侧的节点设置为不可用，那么又丧失了A性质。除非两个节点可以互相通信，才能既保证C又保证A，这又会导致丧失P性质。</p>\n<p>根据以上的<code>zk</code>的表现，我们可以了解一些<code>zk</code>分布式设计的倾向性。CAP定理，这是一个归纳总结出来的理论，这三者不可能被一个系统同时满足，不同的server有不同的倾向性，对于分布式系统，P（分区容错）是必须要满足的，系统在C、A之间进行取舍，例如，ETCD就是满足CP，不满足A(ETCD不能时刻保持响应，例如选举时)，同理，<code>zk</code>也是一个CP系统。</p>\n<p>而在实际的应用中，我们其实一般不怎么参考CAP理论去设计应用架构，因为我们有着很多分布式的基础组件，我们的服务不是分布式的，但我们用上了分布式的组件时，就可以借助它们从而实现分布式的特性。</p>\n<p>这里又要拉出一个理论了——<code>BASE</code>理论，它是三个词组的首字母缩写，即：</p>\n<ul>\n<li>基本可用（basically available），允许损失部分可用性，保证整体可用性；</li>\n</ul>\n<p>例如一个服务有问题，尝试失败后，进行熔断操作。</p>\n<ul>\n<li>\n<p>软状态（soft state），允许状态同步延迟（例如副本数据不一样），不会影响系统即可。</p>\n</li>\n<li>\n<p>最终一致性（eventually consistent），经过一段时间后，系统能够达到一致性。</p>\n</li>\n</ul>\n<p>在实际的设计中，有这两个需要注意一下的：</p>\n<ul>\n<li>架构进行简化，减少有状态的服务，尽量达到最终一致性。强一致性对服务来说设计比较复杂；</li>\n<li>服务异常能被自我修复；（人工修复，软件重启，异常发现等等操作。。。）</li>\n</ul>\n","categories":[{"name":"分布式服务","slug":"分布式服务","permalink":"chunlife.top/categories/分布式服务/"}],"tags":[{"name":"zookeeper","slug":"zookeeper","permalink":"chunlife.top/tags/zookeeper/"},{"name":"一致性","slug":"一致性","permalink":"chunlife.top/tags/一致性/"}]},{"title":"根据Git Commit生成Change log","date":"2021-04-19T02:02:24.000Z","path":"2021/04/19/根据Git-Commit生成Change-log/","content":"<h3><span id=\"始末\">始末</span></h3>\n<p>在看到曹大的一篇微信文章，是读书的一篇总结，其中就有写到关于Change log文档的问题，文章中有提到说国外很多开源项目，都是根据commit自动维护的，而国内还没有普及这种。</p>\n<p>我感觉这个倒是触及了我的知识盲区的，之前确实没了解过，借此我去研究了一下，亲身尝试下来，还是挺方便的。</p>\n<p>例如：<a href=\"https://github.com/SAP/openui5/releases\" target=\"_blank\" rel=\"noopener\">openui5</a>，可以非常方便的在网页中查看release note，<a href=\"https://openui5.hana.ondemand.com/1.91.0/#releasenotes.html\" target=\"_blank\" rel=\"noopener\">releasenotes</a>。</p>\n<h3><span id=\"git-命令\">Git 命令</span></h3>\n<p>既然国外都有很多在这样做了，那这方面的资料绝对不少，果不其然：</p>\n<p><a href=\"https://blogs.sap.com/2018/06/22/generating-release-notes-from-git-commit-messages-using-basic-shell-commands-gitgrep/\" target=\"_blank\" rel=\"noopener\">Generating release notes from git commit messages using basic shell commands (git/grep)</a></p>\n<p>根据特定的Label进行聚合，查询tag与tag之间的提及。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#[INTERNAL]用于内部项目的修改，比如自己的internal包git commit -m“[INTERNAL] my internal change” </span><br><span class=\"line\"></span><br><span class=\"line\">#[FIX]修补buggitcommit-m“[FIX] my fix change” </span><br><span class=\"line\"></span><br><span class=\"line\">#[FEATURE]新功能（feature）git commit -m“[FEATURE] my new feature” </span><br><span class=\"line\"></span><br><span class=\"line\">#[DOC]文档（documentation）git commit -m“[DOC] my documentation change”</span><br></pre></td></tr></table></figure>\n<p>使用命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:\"%s\" -i -E --grep=\"^(\\[INTERNAL\\]|\\[FEATURE\\]|\\[FIX\\]|\\[DOC\\])\"</span><br></pre></td></tr></table></figure>\n<p>仅导出特定的Label</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:\"%s\" -i -E --grep=\"^(\\[INTERNAL\\]|\\[FEATURE\\]|\\[FIX\\]|\\[DOC\\])*\\[FEATURE\\]\"</span><br></pre></td></tr></table></figure>\n<p>指定两个Label</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:&quot;%s&quot; -i -E --grep=&quot;^(\\[INTERNAL\\]|\\[FEATURE\\]|\\[FIX\\]|\\[DOC\\])*\\[FEATURE\\]|\\[FIX\\]&quot;</span><br></pre></td></tr></table></figure>\n<p>$(git describe --tags --abbrev=0)…HEAD</p>\n<p>$(git describe --tags --abbrev=0)：提取最近的一次tag</p>\n<p>HEAD：则是最新的Commit</p>\n<p>此段含义：最近的tag到最新的Commit的期间</p>\n<p>也可以直接指定，v0.0.01…v1.0.01</p>\n<hr>\n<p>正则的解释：</p>\n<p><code>grep</code>先获取到整体以Label开头的commit log，包含多个Label都可以（正则的<code>*</code>），例如<code>[INTERNAL][TEST]</code>，后一部分再把特定部分的Label捞出来。</p>\n<p>为什么要这么做呢？</p>\n<p>当我们获取：<code>--grep=&quot;^(\\[FEATURE\\])&quot;</code>时，我们获取到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FEATURE] Supports display of system and app information on Generic Tile</span><br><span class=\"line\">[FEATURE] sap.m.IconTabBar: Icons can now be added to IconTabFilters</span><br></pre></td></tr></table></figure>\n<p>像这种commit是获取不到的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[INTERNAL][FEATURE] sap.m.MultiComboBox: Keyboard Handling aligned</span><br></pre></td></tr></table></figure>\n<p><code>^(\\[INTERNAL\\]|\\[FEATURE\\]|\\[FIX\\]|\\[DOC\\])*</code>则会将如下信息也一并获取到，其并不是我们所想要的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Merge &quot;[INTERNAL] server: Update npm dependencies and enable CSP target level 3&quot;</span><br><span class=\"line\">Merge &quot;[FIX] core.routing.history: stablize the test by using timeout between actions&quot;</span><br></pre></td></tr></table></figure>\n<p>而使用<code>^(\\[INTERNAL\\]|\\[FEATURE\\]|\\[FIX\\]|\\[DOC\\])*\\[FEATURE\\]</code>，则可以先获取到以Label开头的commit，再把所有包含<code>[FEATURE]</code>的commit一并抓取到。</p>\n<h3><span id=\"commit-template\">Commit Template</span></h3>\n<p>通过Label聚合，那有时候在commit的时候并不知道这些Label，那可以借助commit模板来达成这个提醒的目的。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global commit.template /home/yu/git-commit-template.txt </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> git-commit-template.txt 内容</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">[INTERNAL]用于内部项目的修改，比如自己的internal包git commit -m“[INTERNAL] my internal change” </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">[FIX]修补buggitcommit-m“[FIX] my fix change” </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">[FEATURE]新功能（feature）git commit -m“[FEATURE] my new feature” </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">[DOC]文档（documentation）git commit -m“[DOC] my documentation change”</span></span><br></pre></td></tr></table></figure>\n<p>这个文件是要一直存在的，否则git会找不到。</p>\n<p>git commit时，如图中效果：</p>\n<p><img src=\"clip_image001.png\" alt=\"栗子\"></p>\n<h3><span id=\"其他\">其他</span></h3>\n<p>果不其然，<code>Github</code>有现成的工具，也更为强大的工具：</p>\n<p><a href=\"https://github.com/search?q=Changelog\" target=\"_blank\" rel=\"noopener\">https://github.com/search?q=Changelog</a></p>\n<p><a href=\"https://github.com/git-chglog/git-chglog\" target=\"_blank\" rel=\"noopener\">https://github.com/git-chglog/git-chglog</a></p>\n<p><a href=\"https://github.com/Songmu/ghch\" target=\"_blank\" rel=\"noopener\">https://github.com/Songmu/ghch</a></p>\n","categories":[{"name":"devops","slug":"devops","permalink":"chunlife.top/categories/devops/"}],"tags":[{"name":"git commit","slug":"git-commit","permalink":"chunlife.top/tags/git-commit/"},{"name":"change log","slug":"change-log","permalink":"chunlife.top/tags/change-log/"}]},{"title":"etcd中一致性读的一些理解","date":"2021-04-12T13:22:39.000Z","path":"2021/04/12/etcd中一致性读的一些理解/","content":"<p>etcd中有着和Mysql类似的多版本并发控制（MVCC），同样都是为了解决对高并发环境下数据冲突的问题。</p>\n<p>本来准备研究一下MVCC的，不过这里有一篇博客讲比较好，我就不献丑了。</p>\n<p><a href=\"https://blog.betacat.io/post/mvcc-implementation-in-etcd/\" target=\"_blank\" rel=\"noopener\">MVCC 在 etcd 中的实现</a></p>\n<h3><span id=\"压缩\">压缩</span></h3>\n<p>根据博文中所述，版本信息revision，以及keyindex，在默认不压缩的情况下，它会一直存在，那它什么时候被压缩呢？</p>\n<p>在链接，<a href=\"https://alexstocks.github.io/html/etcd.html%E4%B8%AD%EF%BC%8C%E6%9C%89%E4%BB%8B%E7%BB%8D%E5%88%B0%E5%90%AF%E5%8A%A8etcd%E7%9A%84%E5%8F%82%E6%95%B0%EF%BC%9Aauto-compaction-retention%EF%BC%9B\" target=\"_blank\" rel=\"noopener\">https://alexstocks.github.io/html/etcd.html中，有介绍到启动etcd的参数：auto-compaction-retention；</a></p>\n<blockquote>\n<p>etcd 底层使用的 coreos/bbolt 类似于 rocksdb 会定期做 compaction 以清除过期数据，上面的 auto-compaction-retention 指定的时间单位是小时，当然也可以借助工具 etcdctl 强行进行 compaction，使用方法详见参考文档<a href=\"https://github.com/gyuho/etcd/blob/d4289588ac/Documentation/op-guide/maintenance.md\" target=\"_blank\" rel=\"noopener\">9#History compaction#</a>一节；</p>\n</blockquote>\n<p><img src=\"clip_image001.png\" alt=\"compacted\"></p>\n<p><code>auto-compaction-retention</code>，但依然没说其默认值是多少。</p>\n<p>根据这个参数，在ETCD代码中对应：<code>go.etcd.io/etcd/server/config/config.go</code>；<code>go.etcd.io/etcd/server/embed/config.go</code>；</p>\n<p>根据注释：前者是从命令行或discovery获取的etcd的配置；后者是从配置文件中获取的配置；</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ServerConfig <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    .......</span><br><span class=\"line\">    </span><br><span class=\"line\">\tAutoCompactionRetention time.Duration</span><br><span class=\"line\">\tAutoCompactionMode <span class=\"keyword\">string</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    .......</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">AutoCompactionMode ： <span class=\"string\">'periodic'</span> or <span class=\"string\">'revision'</span>，有两种模式，前者为定时压缩模式（默认），后者则是指定版本号去压缩（命令行即使用的此方式）；</span><br></pre></td></tr></table></figure>\n<p>其默认是不压缩的，也就是版本将一直保存。</p>\n<p>而一旦被压缩，之前的版本想要查询，或者watch都是找不到的。</p>\n<h3><span id=\"线性一致性读\">线性一致性读</span></h3>\n<p>这里有一个场景，当client去读x参数时，请求已经到了服务器，正当服务器去返回数据时，服务器挂了，过了一会，服务端重启了，x被写入了2，客户端重试读时，应该读到的值为多少？</p>\n<p>此处应该为1。这是在MIT的一个课程上的讲解。（实际返回数据的多少还是得根据实际系统设计来）</p>\n<p><img src=\"clip_image001.jpg\" alt=\"读数据\"></p>\n<p>这里我无法在etcd中复现此现象，对实际的代码我其实是没啥头绪的，我简单的验证了一下，并发在A client发起大量的读key A请求，然后断网，程序会打印：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2021-04-12T15:22:36.710+0800&quot;,&quot;caller&quot;:&quot;clientv3/retry_interceptor.go:62&quot;,&quot;msg&quot;:&quot;retrying of unary invoker failed&quot;,&quot;target&quot;:&quot;endpoint://client-b7e5c3f7-28ef-4b78-b36e-899f9817c1b0/xxxx.xxxxx.com:2379&quot;,&quot;attempt&quot;:0,&quot;error&quot;:&quot;rpc error: code = Unavailable desc = transport is closing&quot;&#125;</span><br><span class=\"line\">&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2021-04-12T15:22:36.713+0800&quot;,&quot;caller&quot;:&quot;clientv3/retry_interceptor.go:62&quot;,&quot;msg&quot;:&quot;retrying of unary invoker failed&quot;,&quot;target&quot;:&quot;endpoint://client-b7e5c3f7-28ef-4b78-b36e-899f9817c1b0/xxxx.xxxxx.com:2379&quot;,&quot;attempt&quot;:0,&quot;error&quot;:&quot;rpc error: code = Unavailable desc = transport is closing&quot;&#125;</span><br></pre></td></tr></table></figure>\n<p>此错误的一些解释：</p>\n<p><img src=\"clip_image001-1618236328892.png\" alt=\"解释\"></p>\n<p>跟踪代码，发现其实请求并没有到达服务端，加入代码的一些打印并没有打印。</p>\n<p>所以我这里的test不能验证这个问题，按照我对MVCC的理解：<code>在查询一条记录的时候，不同时刻启动的事务会有不同的read-view</code>。显然在我想不出好的测试方法时，我应该时需要去查看下实际代码。</p>\n<p>不得已之下，只能搜索看看前人对etcd一致性读的分析，发现一篇讲解的比较详细的博客：<a href=\"https://zhengyinyong.com/post/etcd-linearizable-read-implementation/#%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AF%BB%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8F%91%E8%B5%B7%E8%BF%87%E7%A8%8B\" target=\"_blank\" rel=\"noopener\">etcd 中线性一致性读的具体实现</a>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *EtcdServer)</span> <span class=\"title\">Range</span><span class=\"params\">(ctx context.Context, r *pb.RangeRequest)</span> <span class=\"params\">(*pb.RangeResponse, error)</span></span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">\t<span class=\"comment\">// 如果需要线性一致性读，执行 linearizableReadNotify</span></span><br><span class=\"line\">\t<span class=\"comment\">// 此处将会一直阻塞直到 apply index &gt;= read index</span></span><br><span class=\"line\">    <span class=\"comment\">// Serializable默认为false</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !r.Serializable &#123;</span><br><span class=\"line\">\t\terr := s.linearizableReadNotify(ctx)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>linearizableReadLoop</code>中，我发现<code>reqID</code>是针对于每个请求都会生成新的，那也就是说，即使是重复请求，但也不会是将之前的数据给到你，根据线性一致性读的认知，<strong>当存储系统已将写操作提交成功，那此时读出的数据应是最新的数据（假设这期间没有新的写操作）</strong>，貌似很合理。</p>\n<p>因为这里的<code>reqID</code>是自动生成的，leader也会同步这个参数，但每次请求都会不一样的情况，即使有之前的请求，按照代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> rs = &lt;-s.r.readStateC:</span><br><span class=\"line\">\tdone = bytes.Equal(rs.RequestCtx, ctxToSend)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !done &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// a previous request might time out. now we should ignore the response of it and</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// continue waiting for the response of the current requests.</span></span><br></pre></td></tr></table></figure>\n<p>也会将其丢弃掉。</p>\n<h3><span id=\"readindex-算法理解\">ReadIndex 算法理解</span></h3>\n<blockquote>\n<p>要想实现线性一致性读，一个较为简单通用的策略就是：<strong>每次读操作的时候记录此时集群的 commited index，当状态机的 apply index 大于或等于 commited index 时才读取数据并返回</strong>。由于此时状态机已经把读请求发起时的已提交日志进行了 apply 动作，所以此时状态机的状态就可以反应读请求发起时的状态，符合线性一致性读的要求。这便是 <strong>ReadIndex 算法</strong>。</p>\n</blockquote>\n<p>首先，我们需要明白<code>apply index</code>和<code>commited index</code>这些名词的具体含义是什么？</p>\n<p>在Raft的论文中，是这么介绍的：</p>\n<p><img src=\"image-20210413091827189.png\" alt=\"raft_zh\"></p>\n<p>再通俗一点的解释是什么呢？</p>\n<p><code>commitindex</code>指的是已经被大多数节点保存的日志的位置；<code>lastapplyindex</code>是这些被应用到状态机（KV存储）的日志的位置。只有日志被大多数节点<code>commit</code>之后，<code>commitindex</code>才会被更新，之后才可以被<code>apply</code>。</p>\n<p>读的时候，记录下此刻的<code>Commit Index</code>作为<code>Read Index</code>，然后一直阻塞等到<code>apply index &gt;= read index</code>时，才允许去读取数据。</p>\n<p><img src=\"image-20210413092355954.png\" alt=\"更新流程\"></p>\n<p><code>AppendLogEntry</code>超过半数节点，则<strong>Leader</strong>进行提交（<code>commit</code>），并返回操作结果EX给<strong>client</strong>。</p>\n<p><strong>Leader</strong>再异步的将<code>commitindex</code>发送给其他<strong>Follower</strong>节点。</p>\n<p>即<code>当状态机的 apply index 大于或等于 commited index 时才读取数据并返回</code>，就是为了保证，当前集群中，此刻查询到的提交的操作记录，已被应用到集群中，稳定的落地，安全可靠。</p>\n","categories":[{"name":"分布式服务","slug":"分布式服务","permalink":"chunlife.top/categories/分布式服务/"}],"tags":[{"name":"raft","slug":"raft","permalink":"chunlife.top/tags/raft/"},{"name":"etcd","slug":"etcd","permalink":"chunlife.top/tags/etcd/"},{"name":"线性一致性读","slug":"线性一致性读","permalink":"chunlife.top/tags/线性一致性读/"}]},{"title":"RAFT常见问题与解答","date":"2021-04-09T08:03:20.000Z","path":"2021/04/09/RAFT常见问题与解答/","content":"<p><strong>假设在网络被划分的同时选出了一个新的领导者，但是旧的领导者在不同的划分中。老领导怎么知道停止提交新条目？</strong></p>\n<p>旧领导要么无法获得大多数成功响应（如果它在少数分区中），要么如果它可以与多数节点通信的话，则多数节点必然会与新领导的多数重叠，重叠中的服务器将告诉旧领导有一个更高的term任期。这将导致旧的领导者转变为追随者。</p>\n<hr>\n<p><strong>Raft为了实现简单，牺牲了哪些特性？</strong></p>\n<ul>\n<li>为了持久化，每个操作都必须写入磁盘；可能需要在每个磁盘写入操作中批处理许多操作；</li>\n<li>从leader到每个follower只能有一个有效的log     follower拒绝无序的AppendEntries，leader的nextIndex[]机制需要一次一个逐步发送log。为大量的AppendEntries提供管道持续发送机制更好。</li>\n<li>快照设计只适用于相对较小的状态，因为它将整个状态写入磁盘。如果状态是大的（例如，如果是一个大的数据库），你可能需要一种方法来只编写最近更改的状态的一部分。</li>\n<li>类似地，通过向复制副本发送完整的快照使其恢复到最新状态将非常缓慢，如果复制副本已经有旧的快照，则这是不必要的。</li>\n<li>服务器可能无法充分利用多核的优势，因为操作必须一次执行一个（按日志顺序）</li>\n</ul>\n<hr>\n<p><strong>客户端进行交互，section 8</strong></p>\n<p><img src=\"clip_image001.png\" alt=\"客户端进行交互\"></p>\n<p><strong>关于领导者需要提交一个空白的没有任何操作的条目（no-op条目）以便知道哪些条目被提交的一行，为什么要这么做？</strong></p>\n<p>问题情况如图8所示，如果S1在（b）之后成为leader，它无法知道它的最后一个日志条目（2）是否已提交。最后一个日志条目不会被提交的情况是，S1立即失败，并且S5是下一个领导者；在这种情况下，S5将强制所有对等方（包括S1）拥有与S5的日志相同的日志，而S5的日志不包括条目2。</p>\n<p><img src=\"clip_image001-1617955349394.png\" alt=\"图8\"></p>\n<p>但是假设S1在其任期（任期4）内提交了一个新条目。如果S5看到新条目，S5将从其日志中删除3并在其位置接受2。如果S5没有看到新的条目，当S1崩溃时，S5无法竞选成功下一任leader，因为它将无法通过选举限制。无论哪种方式，一旦S1在其任期内提交了一个新条目，它就可以正确地断定其日志中的每个前面的条目都已提交。（看Raft log中的内容，提交成功则代表大多数follower与leader的日志是一致的）</p>\n<p>第8节末尾的no op讨论的是一种优化，在这种优化中，领导者执行并回答只读命令（例如get（“k1”）），而不在日志中提交这些命令。例如，对于get（“k1”），领导者只需在其键/值表中查找“k1”，并将结果发送回客户机。如果leader刚刚选举成功，那么它的日志末尾可能有一个put（“k1”，“v99”）。领导者应该将“v99”发送回客户机，还是发送回领导者的键/值表中的值？首先，leader不知道v99日志条目是提交的（并且必须返回给客户机）还是未提交的（并且不能返回）。因此（如果是使用此优化），新的Raft leader首先尝试向日志提交no op；如果提交成功（即，leader没有崩溃），那么，leader拥有在此提交点之前的所有日志。（译者：日志均是提交状态的）</p>\n<hr>\n<p><strong>日志的复制</strong></p>\n<p>AppendEntries RPC：</p>\n<p>被领导者调用 用于日志条目的复制，同时也被当做心跳使用；</p>\n<p>实际上不仅是用来发送从Client发送给Leader的命令，也可以用来让follower进行日志的统一。</p>\n<p>prevLogIndex、prevLogTerm理解：</p>\n<p><img src=\"clip_image001-1617955565053.jpg\" alt=\"日志的复制\"></p>\n<hr>\n","categories":[{"name":"分布式服务","slug":"分布式服务","permalink":"chunlife.top/categories/分布式服务/"}],"tags":[{"name":"微服务","slug":"微服务","permalink":"chunlife.top/tags/微服务/"},{"name":"raft","slug":"raft","permalink":"chunlife.top/tags/raft/"}]},{"title":"轻量化日志服务Loki分享","date":"2021-04-08T02:23:01.000Z","path":"2021/04/08/轻量化日志服务Loki分享/","content":"<p>做了一个关于Loki的简单分享，也是因为在项目中有使用到它，现在使用大多还是单体，还没有说需要上到分布式的场景，此处既是对Loki基础理论的一次分享。</p>\n<a id=\"more\"></a>\n<hr>\n<p><img src=\"%E8%BD%BB%E9%87%8F%E5%8C%96%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1Loki%E5%88%86%E4%BA%AB.jpg\" alt=\"轻量化日志服务Loki分享\"></p>\n<p>准备分享的素材时，参考了：</p>\n<blockquote>\n<p><a href=\"https://developer.jdcloud.com/article/1363\" target=\"_blank\" rel=\"noopener\">还在用ELK？ 是时候了解一下轻量化日志服务Loki了</a></p>\n<p><a href=\"https://www.slideshare.net/pracucci/grafana-loki-like-prometheus-but-for-logs?from_action=save\" target=\"_blank\" rel=\"noopener\">https://www.slideshare.net/pracucci/grafana-loki-like-prometheus-but-for-logs?from_action=save</a></p>\n</blockquote>\n","categories":[{"name":"分布式服务","slug":"分布式服务","permalink":"chunlife.top/categories/分布式服务/"}],"tags":[{"name":"微服务","slug":"微服务","permalink":"chunlife.top/tags/微服务/"},{"name":"loki","slug":"loki","permalink":"chunlife.top/tags/loki/"}]},{"title":"raft扩展论文(中文)","date":"2021-03-17T06:54:09.000Z","path":"2021/03/17/raft扩展论文-中文/","content":"<center>raft-zh</center>\n<a id=\"more\"></a>\n<p>英文：<a href=\"https://pdos.csail.mit.edu/6.824/papers/raft-extended.pdf\" target=\"_blank\" rel=\"noopener\">https://pdos.csail.mit.edu/6.824/papers/raft-extended.pdf</a></p>\n<p>中文：<a href=\"https://github.com/maemual/raft-zh_cn/tree/a5f8cb247b1bf8675dad2f64485932fefd2519a2\" target=\"_blank\" rel=\"noopener\">https://github.com/maemual/raft-zh_cn/tree/a5f8cb247b1bf8675dad2f64485932fefd2519a2</a></p>\n\n\n\t<div class=\"row\">\n    <embed src=\"raft-zh_cn.pdf\" width=\"100%\" height=\"550\" type=\"application/pdf\">\n\t</div>\n\n\n","categories":[{"name":"分布式服务","slug":"分布式服务","permalink":"chunlife.top/categories/分布式服务/"}],"tags":[{"name":"论文","slug":"论文","permalink":"chunlife.top/tags/论文/"},{"name":"raft-zh_cn","slug":"raft-zh-cn","permalink":"chunlife.top/tags/raft-zh-cn/"},{"name":"raft-extended","slug":"raft-extended","permalink":"chunlife.top/tags/raft-extended/"}]},{"title":"raft设置结构体的建议(6.824)","date":"2021-03-17T03:02:52.000Z","path":"2021/03/17/raft设置结构体的建议-6-824/","content":"<h3><span id=\"raft-structure-advice\">Raft Structure Advice</span></h3>\n<p>A Raft instance has to deal with the arrival of external events<br>\n(Start() calls, AppendEntries and RequestVote RPCs, and RPC replies),<br>\nand it has to execute periodic tasks (elections and heart-beats).<br>\nThere are many ways to structure your Raft code to manage these<br>\nactivities; this document outlines a few ideas.<br>\nRaft实例必须处理外部事件的到达（Start()调用，AppendEntries和RequestVote RPC和RPC答复），<br>\n并且必须执行定期任务（选举和心跳）。<br>\n有很多方法可以构建Raft代码来管理这些活动。<br>\n本文档概述了一些想法。</p>\n<p>Each Raft instance has a bunch of state (the log, the current index,<br>\n&amp;c) which must be updated in response to events arising in concurrent<br>\ngoroutines. The Go documentation points out that the goroutines can<br>\nperform the updates directly using shared data structures and locks,<br>\nor by passing messages on channels. Experience suggests that for Raft<br>\nit is most straightforward to use shared data and locks.<br>\n每个Raft实例都有一堆状态（日志，当前索引和＆c），<br>\n必须根据并发goroutine中发生的事件对其进行更新。<br>\nGo文档指出，goroutine可以直接使用共享数据结构和锁或通过在channel上传递消息来执行更新。<br>\n经验表明，对于Raft而言，使用共享数据和锁是最直接的方法。</p>\n<p>A Raft instance has two time-driven activities: the leader must send<br>\nheart-beats, and others must start an election if too much time has<br>\npassed since hearing from the leader. It’s probably best to drive each<br>\nof these activities with a dedicated long-running goroutine, rather<br>\nthan combining multiple activities into a single goroutine.<br>\n一个Raft实例有两个定时的活动：<br>\n领导者必须发送心跳信号，而其他节点发起选举则要满足leader断掉心跳一段时间后才能开始选举。<br>\n最好使用长时间运行的专用goroutine来驱动所有这些活动，而不是将多个活动组合成一个goroutine。</p>\n<p>The management of the election timeout is a common source of<br>\nheadaches. Perhaps the simplest plan is to maintain a variable in the<br>\nRaft struct containing the last time at which the peer heard from the<br>\nleader, and to have the election timeout goroutine periodically check<br>\nto see whether the time since then is greater than the timeout period.<br>\nIt’s easiest to use time.Sleep() with a small constant argument to<br>\ndrive the periodic checks. Don’t use time.Ticker and time.Timer;<br>\nthey are tricky to use correctly.<br>\n选举超时的管理是令人头疼的常见原因。<br>\n简单的解决方法是在Raft结构中维护一个变量，<br>\n该变量包含Follower从Leader那里心跳的最后时间，<br>\n并让选举超时goroutine定期检查以查看此后的时间是否大于超时时间。<br>\n最简单的方法是使用time.Sleep()加一个随机常量(防止统一超时)来定期检查。<br>\n不要使用time.Ticker和time.Timer; 他们很难正确使用。</p>\n<p>You’ll want to have a separate long-running goroutine that sends<br>\ncommitted log entries in order on the applyCh. It must be separate,<br>\nsince sending on the applyCh can block; and it must be a single<br>\ngoroutine, since otherwise it may be hard to ensure that you send log<br>\nentries in log order. The code that advances commitIndex will need to<br>\nkick the apply goroutine; it’s probably easiest to use a condition<br>\nvariable (Go’s sync.Cond) for this.<br>\n你将需要一个单独的长期运行的goroutine，该例程在applyCh上按顺序发送已提交的日志条目。<br>\n它必须是分开的，因为在applyCh上发送可能会阻塞；<br>\n并且它必须是单个goroutine，因为否则可能很难确保您以日志顺序发送日志条目。<br>\n提升commitIndex的代码将需要启动apply goroutine；<br>\n为此，最容易使用条件变量（Go的sync.Cond）。</p>\n<p>Each RPC should probably be sent (and its reply processed) in its own<br>\ngoroutine, for two reasons: so that unreachable peers don’t delay the<br>\ncollection of a majority of replies, and so that the heartbeat and<br>\nelection timers can continue to tick at all times. It’s easiest to do<br>\nthe RPC reply processing in the same goroutine, rather than sending<br>\nreply information over a channel.<br>\n每个RPC应该可能在其自己的goroutine中发送（并处理其回复），原因有两个：<br>\n使得无法访问的Follower不会阻塞大多数回复的收集，并且使心跳和选举计时器可以继续计时。<br>\n在同一个goroutine中最简单地进行RPC回复处理，而不是通过通道发送回复信息。（避免复杂通信）</p>\n<p>Keep in mind that the network can delay RPCs and RPC replies, and when<br>\nyou send concurrent RPCs, the network can re-order requests and<br>\nreplies. Figure 2 is pretty good about pointing out places where RPC<br>\nhandlers have to be careful about this (e.g. an RPC handler should<br>\nignore RPCs with old terms). Figure 2 is not always explicit about RPC<br>\nreply processing. The leader has to be careful when processing<br>\nreplies; it must check that the term hasn’t changed since sending the<br>\nRPC, and must account for the possibility that replies from concurrent<br>\nRPCs to the same follower have changed the leader’s state (e.g.<br>\nnextIndex).<br>\n请记住，网络可能会延迟RPC和RPC答复，并且当你发送并发RPC时，网络可以对请求和答复进行重新排序。<br>\n图2很好地指出了RPC处理程序必须注意的地方（例如，RPC处理程序应忽略带有任期号的RPC）。<br>\n关于RPC回复处理，图2说的不是很明确。Leader在处理回复时必须小心；<br>\n它必须检查自发送RPC以来term没有改变，<br>\n并且必须考虑到并发RPC对同一Follower的回复改变了领导者的状态（例如nextIndex）的可能性。<br>\n（图2是论文中的Figure 2）</p>\n","categories":[{"name":"分布式服务","slug":"分布式服务","permalink":"chunlife.top/categories/分布式服务/"}],"tags":[{"name":"raft","slug":"raft","permalink":"chunlife.top/tags/raft/"},{"name":"struct","slug":"struct","permalink":"chunlife.top/tags/struct/"}]},{"title":"raft使用锁的建议(6.824)","date":"2021-03-16T02:04:43.000Z","path":"2021/03/16/raft使用锁的建议-6-824/","content":"<h3><span id=\"raft-locking-advice\">Raft Locking Advice</span></h3>\n<p>If you are wondering how to use locks in the 6.824 Raft labs, here are<br>\nsome rules and ways of thinking that might be helpful.</p>\n<p>Rule 1: Whenever you have data that more than one goroutine uses, and<br>\nat least one goroutine might modify the data, the goroutines should<br>\nuse locks to prevent simultaneous use of the data. The Go race<br>\ndetector is pretty good at detecting violations of this rule (though<br>\nit won’t help with any of the rules below).<br>\n规则1：只要你拥有不止一个goroutine使用的数据，并且至少一个goroutine可以修改数据，<br>\n则goroutine应该使用锁来防止同时使用数据。 Go Race检测器非常擅长检测违反此规则的情况<br>\n（尽管它对以下任何规则都无济于事）。</p>\n<p>Rule 2: Whenever code makes a sequence of modifications to shared<br>\ndata, and other goroutines might malfunction if they looked at the<br>\ndata midway through the sequence, you should use a lock around the<br>\nwhole sequence.<br>\n规则2：当代码对共享数据进行修改的序列，而正好其他goroutine如果在代码中途查看数据时，<br>\n则可能会出现歧义，应在整个代码周围（使用该数据的地方）使用锁。</p>\n<p>An example:</p>\n<p>rf.mu.Lock()<br>\nrf.currentTerm += 1<br>\nrf.state = Candidate<br>\nrf.mu.Unlock()</p>\n<p>It would be a mistake for another goroutine to see either of these<br>\nupdates alone (i.e. the old state with the new term, or the new term<br>\nwith the old state). So we need to hold the lock continuously over the<br>\nwhole sequence of updates. All other code that uses rf.currentTerm or<br>\nrf.state must also hold the lock, in order to ensure exclusive access<br>\nfor all uses.<br>\n对于另一个goroutine，单独查看这些变量更新（即具有新任期的旧状态或具有旧状态的新任期）将是一个错误。<br>\n因此，我们需要在整个更新代码块中连续保持锁。<br>\n使用rf.currentTerm或rf.state的所有其他代码也必须持有该锁，以确保对所有使用的独占访问。</p>\n<p>The code between Lock() and Unlock() is often called a “critical<br>\nsection.” The locking rules a programmer chooses (e.g. “a goroutine<br>\nmust hold <a href=\"http://rf.mu\" target=\"_blank\" rel=\"noopener\">rf.mu</a> when using rf.currentTerm or rf.state”) are often<br>\ncalled a “locking protocol”.<br>\nLock（）和Unlock（）之间的代码通常称为“关键部分”。<br>\n程序员选择的锁定规则（例如，“使用rf.currentTerm或rf.state时，<a href=\"http://xn--goroutinerf-4d2rn60obuxdsz4f.mu\" target=\"_blank\" rel=\"noopener\">goroutine必须使用rf.mu</a>”）<br>\n通常被称为“锁定协议”。</p>\n<p>Rule 3: Whenever code does a sequence of reads of shared data (or<br>\nreads and writes), and would malfunction if another goroutine modified<br>\nthe data midway through the sequence, you should use a lock around the<br>\nwhole sequence.<br>\n规则3：每当代码对共享数据进行读取（或读取和写入）序列时，<br>\n如果另一个goroutine在序列中途修改了数据，将会导致歧义，则应在整个代码周围使用锁</p>\n<p>An example that could occur in a Raft RPC handler:</p>\n<p>rf.mu.Lock()<br>\nif args.Term &gt; rf.currentTerm {<br>\nrf.currentTerm = args.Term<br>\n}<br>\nrf.mu.Unlock()</p>\n<p>This code needs to hold the lock continuously for the whole sequence.<br>\nRaft requires that currentTerm only increases, and never decreases.<br>\nAnother RPC handler could be executing in a separate goroutine; if it<br>\nwere allowed to modify rf.currentTerm between the if statement and the<br>\nupdate to rf.currentTerm, this code might end up decreasing<br>\nrf.currentTerm. Hence the lock must be held continuously over the<br>\nwhole sequence. In addition, every other use of currentTerm must hold<br>\nthe lock, to ensure that no other goroutine modifies currentTerm<br>\nduring our critical section.<br>\n此代码需要在整个代码段中连续保持锁。<br>\nRaft要求currentTerm仅增加，而从不减少。<br>\n另一个RPC处理程序可以在单独的goroutine中执行；<br>\n如果允许在if语句和对rf.currentTerm的更新之间修改rf.currentTerm（其他协程修改），<br>\n则此代码可能最终会减少rf.currentTerm。<br>\n因此，锁必须在整个序列中连续保持。<br>\n另外，currentTerm的所有其他使用都必须持有该锁，<br>\n以确保在我们的关键部分没有其他goroutine修改currentTerm。</p>\n<p>Real Raft code would need to use longer critical sections than these<br>\nexamples; for example, a Raft RPC handler should probably hold the<br>\nlock for the entire handler.<br>\n与这些示例相比，实际的Raft代码将会有更长的关键代码；<br>\n例如，一个Raft RPC处理程序可能应该持有整个处理程序的锁。</p>\n<p>Rule 4: It’s usually a bad idea to hold a lock while doing anything<br>\nthat might wait: reading a Go channel, sending on a channel, waiting<br>\nfor a timer, calling time.Sleep(), or sending an RPC (and waiting for the<br>\nreply). One reason is that you probably want other goroutines to make<br>\nprogress during the wait. Another reason is deadlock avoidance. Imagine<br>\ntwo peers sending each other RPCs while holding locks; both RPC<br>\nhandlers need the receiving peer’s lock; neither RPC handler can ever<br>\ncomplete because it needs the lock held by the waiting RPC call.<br>\n规则4：在做一些需要时间等待的事情时，持有锁通常是一个坏主意：<br>\n读取channel，发送channel，等待计时器，调用time.Sleep()或发送RPC（然后等待回复）。<br>\n原因之一是你可能希望其他goroutine在等待过程中进行下一步。<br>\n另一个原因是避免死锁。想象两个对象在持有锁的情况下互相发送RPC。<br>\n两个RPC处理程序会有需要等待对方的锁；<br>\n两个RPC处理程序都无法完成，因为它无法拿到已被持有的锁。</p>\n<p>Code that waits should first release locks. If that’s not convenient,<br>\nsometimes it’s useful to create a separate goroutine to do the wait.<br>\n等待的代码应首先释放锁。如果这样做不方便，有时创建一个单独的goroutine进行等待会很有用。</p>\n<p>Rule 5: Be careful about assumptions across a drop and re-acquire of a<br>\nlock. One place this can arise is when avoiding waiting with locks<br>\nheld. For example, this code to send vote RPCs is incorrect:<br>\n规则5：小心假设一个释放和重新获得一个锁<br>\n可能出现这种情况的一个地方是，避免在持有锁的情况下等待。<br>\n例如，以下发送投票RPC的代码不正确：</p>\n<p>rf.mu.Lock()<br>\nrf.currentTerm += 1<br>\nrf.state = Candidate<br>\nfor <each peer=\"\"> {<br>\ngo func() {<br>\nrf.mu.Lock()<br>\nargs.Term = rf.currentTerm<br>\nrf.mu.Unlock()<br>\nCall(“Raft.RequestVote”, &amp;args, …)<br>\n// handle the reply…<br>\n} ()<br>\n}<br>\nrf.mu.Unlock()</each></p>\n<p>The code sends each RPC in a separate goroutine. It’s incorrect<br>\nbecause args.Term may not be the same as the rf.currentTerm at which<br>\nthe surrounding code decided to become a Candidate. Lots of time may<br>\npass between when the surrounding code creates the goroutine and when<br>\nthe goroutine reads rf.currentTerm; for example, multiple terms may<br>\ncome and go, and the peer may no longer be a candidate. One way to fix<br>\nthis is for the created goroutine to use a copy of rf.currentTerm made<br>\nwhile the outer code holds the lock. Similarly, reply-handling code<br>\nafter the Call() must re-check all relevant assumptions after<br>\nre-acquiring the lock; for example, it should check that<br>\nrf.currentTerm hasn’t changed since the decision to become a<br>\ncandidate.<br>\n该代码在单独的goroutine中发送每个RPC。这是不正确的，<br>\n因为args.Term可能与之前代码中的决定成为候选者的rf.currentTerm不同。<br>\n从开始创建goroutine到goroutine读取rf.currentTerm，这中间可能要花费很多时间。<br>\n例如，中间将产生多个任期的变化，而当前对象可能不再是候选者。<br>\n解决此问题的一种方法是让创建的goroutine使用在外部代码持有锁的情况下创建的rf.currentTerm的副本。<br>\n同样，Call()之后的回复处理代码必须在重新获得锁定后重新检查所有相关的判断；<br>\n例如，它应该检查rf.currentTerm自从决定成为候选人以来没有改变。</p>\n<p>It can be difficult to interpret and apply these rules. Perhaps most<br>\npuzzling is the notion in Rules 2 and 3 of code sequences that<br>\nshouldn’t be interleaved with other goroutines’ reads or writes. How<br>\ncan one recognize such sequences? How should one decide where a<br>\nsequence ought to start and end?<br>\n可能难以解释和应用这些规则。也许最令人困惑的是规则2和规则3中不应与其他goroutine<br>\n同时读写同一个代码块的概念。一个人怎么能认出这样的代码块？<br>\n一个人应该如何确定一个代码块应该在哪里开始和结束？</p>\n<p>One approach is to start with code that has no locks, and think<br>\ncarefully about where one needs to add locks to attain correctness.<br>\nThis approach can be difficult since it requires reasoning about the<br>\ncorrectness of concurrent code.<br>\n一种方法是从没有锁的代码开始，然后仔细考虑需要在何处添加锁以获得正确性。<br>\n这种方法可能很困难，因为它需要对并发代码的正确性进行推理。</p>\n<p>A more pragmatic approach starts with the observation that if there<br>\nwere no concurrency (no simultaneously executing goroutines), you<br>\nwould not need locks at all. But you have concurrency forced on you<br>\nwhen the RPC system creates goroutines to execute RPC handlers, and<br>\nbecause you need to send RPCs in separate goroutines to avoid waiting.<br>\nYou can effectively eliminate this concurrency by identifying all<br>\nplaces where goroutines start (RPC handlers, background goroutines you<br>\ncreate in Make(), &amp;c), acquiring the lock at the very start of each<br>\ngoroutine, and only releasing the lock when that goroutine has<br>\ncompletely finished and returns. This locking protocol ensures that<br>\nnothing significant ever executes in parallel; the locks ensure that<br>\neach goroutine executes to completion before any other goroutine is<br>\nallowed to start. With no parallel execution, it’s hard to violate<br>\nRules 1, 2, 3, or 5. If each goroutine’s code is correct in isolation<br>\n(when executed alone, with no concurrent goroutines), it’s likely to<br>\nstill be correct when you use locks to suppress concurrency. So you<br>\ncan avoid explicit reasoning about correctness, or explicitly<br>\nidentifying critical sections.<br>\n一种更实用的方法开始于观察到，如果没有并发（没有同时执行goroutine），则根本不需要锁。<br>\n但是，当RPC系统创建goroutine来执行RPC处理程序时，由于您需要并发，<br>\n因此你需要在单独的goroutine中发送RPC，以避免等待。<br>\n你可以通过确定goroutine开始的所有位置（RPC处理程序，您在Make()和＆c中创建的后台goroutine），<br>\n在每个goroutine的最开始处获取该锁，并且仅在该goroutine完全完成并返回时才释放该锁，来有效地消除这种并发性。<br>\n该锁定协议可确保没有大量的事务可以并发执行。<br>\n这些锁确保每个goroutine在允许任何其他goroutine启动之前执行完毕。<br>\n在没有并发执行的情况下，很难违反规则1、2、3或5。<br>\n如果每个goroutine的代码是正确的（单独执行时，没有并发goroutines），<br>\n当你使用锁来抑制并发时，它可能仍然是正确的。<br>\n因此，你可以避免对正确性进行显式推理，或显式识别关键部分。（不懂啥意思）</p>\n<p>However, Rule 4 is likely to be a problem. So the next step is to find<br>\nplaces where the code waits, and to add lock releases and re-acquires<br>\n(and/or goroutine creation) as needed, being careful to re-establish<br>\nassumptions after each re-acquire. You may find this process easier to<br>\nget right than directly identifying sequences that must be locked for<br>\ncorrectness.<br>\n但是，规则4可能是个问题。因此，下一步是找到代码等待的位置，<br>\n并根据需要释放锁和重新获取（和/或创建协程），在每次重新获取之后都要小心地重新进行相应的判断。<br>\n可能会发现这个过程比直接识别必须锁定以确保正确性的代码块更容易正确。</p>\n<p>(As an aside, what this approach sacrifices is any opportunity for<br>\nbetter performance via parallel execution on multiple cores: your code<br>\nis likely to hold locks when it doesn’t need to, and may thus<br>\nunnecessarily prohibit parallel execution of goroutines. On the other<br>\nhand, there is not much opportunity for CPU parallelism within a<br>\nsingle Raft peer.)<br>\n（顺便说一句，这种方法所牺牲的是通过多核上的并行执行来获得更好性能的能力：<br>\n你的代码很可能在并不需要锁的时候持有锁，就有可能影响到goroutine的并发执行。<br>\n一方面，在单个Raft节点中实现CPU并行性的机会不多。）</p>\n","categories":[{"name":"分布式服务","slug":"分布式服务","permalink":"chunlife.top/categories/分布式服务/"}],"tags":[{"name":"raft","slug":"raft","permalink":"chunlife.top/tags/raft/"},{"name":"lock","slug":"lock","permalink":"chunlife.top/tags/lock/"}]},{"title":"Golang插件使用","date":"2021-03-15T06:10:50.000Z","path":"2021/03/15/Golang插件使用/","content":"<p>在现有的需求中，因业务需求还在扩充，使得前期搜集需求的过程中，很难完整的穷尽所有的处理逻辑。此时，需要一种技术，能够做到后期补充操作逻辑。在完成整体开发后，由其他开发人员进行扩展，由此，其他开发人员将无需更改应用程序的代码，更不至于重新编译整个应用程序。</p>\n<p>在Go语言中，已知的插件系统中，可有三种选项：<code>Hashicorp</code> <a href=\"https://github.com/hashicorp/go-plugin\" target=\"_blank\" rel=\"noopener\">go-plugin</a>，内置<code>plugins</code>软件包，以及Go Javascript解释器。</p>\n<h3><span id=\"hashicorp插件\">Hashicorp插件</span></h3>\n<p>地址：<a href=\"https://github.com/hashicorp/go-plugin\" target=\"_blank\" rel=\"noopener\">go-plugin</a>。</p>\n<p>此项目不同Go本身自带的plugin机制，<code>go-plugin</code>是基于RPC的Go插件系统。其项目发展比较长，已被大量使用于<code>Hashicorp</code>自家的各个项目中。（<a href=\"https://www.packer.io/\" target=\"_blank\" rel=\"noopener\">Packer</a>、 <a href=\"https://www.terraform.io/\" target=\"_blank\" rel=\"noopener\">Terraform</a>、<a href=\"https://www.nomadproject.io/\" target=\"_blank\" rel=\"noopener\">Nomad</a>、 <a href=\"https://www.vaultproject.io/\" target=\"_blank\" rel=\"noopener\">Vault</a>）<code>star</code>数量都算是比较高，用于生产可以说没有什么特别的问题。</p>\n<p>其必然可以使用可扩展性，但囿于其本身的原理，在实际的使用中，需要必备的几个二进制文件：主体程序的二进制文件、插件的二进制文件。</p>\n<p>看一个简单的例子来明白其原理：</p>\n<p>主机和插件之间通过一个<code>interface</code>接口来约定方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Hello <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    Greet() <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来，调用插件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// We're a host! Start by launching the plugin process.</span></span><br><span class=\"line\">client := plugin.NewClient(&amp;plugin.ClientConfig&#123;</span><br><span class=\"line\">    HandshakeConfig: handshakeConfig,</span><br><span class=\"line\">    Plugins:         pluginMap,</span><br><span class=\"line\">    Cmd:             exec.Command(<span class=\"string\">\"./plugin/hello\"</span>),</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><code>handshakeConfig</code>为一个结构体，作为host与plugin之间一个简单的通信确认。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handshakeConfig = plugin.HandshakeConfig&#123;</span><br><span class=\"line\">    ProtocolVersion:  <span class=\"number\">1</span>,</span><br><span class=\"line\">    MagicCookieKey:   <span class=\"string\">\"BASIC_PLUGIN\"</span>,</span><br><span class=\"line\">    MagicCookieValue: <span class=\"string\">\"hello\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该库还支持使用<code>gRPC</code>通信，其还可以使用其他语言来编写插件。由于是使用的网络通信，其本体还是单独的程序，所以编程上除开框架的复杂性，其可以正常使用语言所有特性。</p>\n<p><strong>该插件的缺点：</strong></p>\n<ul>\n<li>主程序与插件之间强耦合；（主程序定义接口，插件实现接口。）</li>\n<li>开发者需要了解简单的rpc以及接口知识；</li>\n<li>改动插件即需要重新编译；若主程序需要扩展插件逻辑也需要重新改动代码；</li>\n</ul>\n<h3><span id=\"go插件模块\">Go插件模块</span></h3>\n<p>Go本身是支持插件系统的，但在实际使用上来看，可用性不是很高。其具体原因还需要在具体的使用上来谈。</p>\n<p>虽然在宣传上，Go插件模块不仅背靠原生支持这块大旗，还具有低于go-plugin的复杂性(不需要借助rpc)。理论上，主程序与插件之间没有直接连接。</p>\n<p>但是，使用plugin时，plugin经常要和主程序同时（更确切的说是同一环境下）build才行。如果主程序有改动或者build的路径更换，plugin不同时更新的话，加载plugin时就会报某个package版本错误的问题，导致加载失败。在Go Modules解决方案还未完全普及前，此问题就一直是个问题，所以编译环境需要一直保持统一。</p>\n<p>在插件中，实现函数方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> greeting <span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(g greeting)</span> <span class=\"title\">Greet</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"Hello World!\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Greeter - 导出这个变量 函数一样可以导出</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Greeter greeting</span><br></pre></td></tr></table></figure>\n<p>在main函数中，为了方便访问，定义插件方法的接口，使用包方法<code>plugin.Open</code>来解析特定插件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Greeter interface &#123;</span><br><span class=\"line\">    Greet()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">plug, err := plugin.Open(&quot;plugin/implementation.so&quot;)</span><br><span class=\"line\">if err != nil &#123;</span><br><span class=\"line\">    log.Println(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，解析插件导出的符号，将其转换为接口类型，然后运行该<code>Greet()</code>方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">symGreeter, err := plug.Lookup(<span class=\"string\">\"Greeter\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Println(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> greeter Greeter</span><br><span class=\"line\">greeter, ok := symGreeter.(Greeter)</span><br><span class=\"line\"><span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">    log.Println(<span class=\"string\">\"unexpected type from module symbol\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">greeter.Greet()</span><br></pre></td></tr></table></figure>\n<p>此方法使用上比<code>go-plugin</code>简单，程序开销也小一些。</p>\n<p><strong>该插件的缺点：</strong></p>\n<ul>\n<li>必须先针对特定平台进行编译，才能在运行时加载插件；</li>\n<li>当前的实现仅支持类似Unix的平台，例如Linux和macOS；</li>\n<li>只能使用Go，虽然原生支持使得其变得方便了许多，但也没有了<code>go-plugin</code>支持多语言的特性；</li>\n</ul>\n<h3><span id=\"go-javascript\">Go JavaScript</span></h3>\n<p>在Go程序运行JavaScript，将JS文件作为Go程序的延申，使其作为主程序的插件来使用。需要使用到库<a href=\"https://github.com/robertkrimen/otto\" target=\"_blank\" rel=\"noopener\">otto</a>。</p>\n<p>最关键的是，插件无需进行编译，单纯的JS文件即可。</p>\n<p>简单的使用：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"github.com/robertkrimen/otto\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    vm := otto.New()</span><br><span class=\"line\">    vm.Run(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        console.log(\"Hello World!\");</span></span><br><span class=\"line\"><span class=\"string\">    `</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>借助此库，我们能运行时解释和运行纯JavaScript（到目前为止，仅限于ECMAScript 5）。</p>\n<blockquote>\n<p>The following are some limitations with otto:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; * &quot;use strict&quot; will parse, but does nothing.</span><br><span class=\"line\">&gt; * The regular expression engine (re2/regexp) is not fully compatible with the ECMA5 specification.</span><br><span class=\"line\">&gt; * Otto targets ES5. ES6 features (eg: Typed Arrays) are not supported.</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>但其强大之处在于，Otto可以使用外部Go函数扩展JS API，还可以双向交换数据。</strong></p>\n<h4><span id=\"func-value-export\">func (Value) Export</span></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self Value)</span> <span class=\"title\">Export</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">interface</span>&#123;&#125;, error)</span></span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/robertkrimen/otto#func-value-export\" target=\"_blank\" rel=\"noopener\">数据转换表</a>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">undefined   -&gt; nil (FIXME?: Should be Value&#123;&#125;)</span><br><span class=\"line\">null        -&gt; nil</span><br><span class=\"line\">boolean     -&gt; bool</span><br><span class=\"line\">number      -&gt; A number type (int, float32, uint64, ...)</span><br><span class=\"line\">string      -&gt; string</span><br><span class=\"line\">Array       -&gt; []interface&#123;&#125;</span><br><span class=\"line\">Object      -&gt; map[string]interface&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"js中运行go函数\">JS中运行GO函数</span></h4>\n<p>在实际使用中，我们可以将Go上实现的函数传递到JS中运行：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"log\"</span></span><br><span class=\"line\">    <span class=\"string\">\"github.com/robertkrimen/otto\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    vm := otto.New()</span><br><span class=\"line\"></span><br><span class=\"line\">    err := vm.Set(<span class=\"string\">\"log\"</span>, logJS)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    vm.Run(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        console.log(\"logging with JS!\");</span></span><br><span class=\"line\"><span class=\"string\">        log(\"logging with Golang!\");</span></span><br><span class=\"line\"><span class=\"string\">    `</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">logJS</span><span class=\"params\">(content <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    log.Println(content)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"数据交换\">数据交换</span></h4>\n<p>将Go程序中的数据注入JavaScript，或从JavaScript函数接收结果也非常简单：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"log\"</span></span><br><span class=\"line\">    <span class=\"string\">\"github.com/robertkrimen/otto\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    vm := otto.New()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// jsData contains the result of `date`</span></span><br><span class=\"line\">    jsDate, err := vm.Run(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    (function()&#123;</span></span><br><span class=\"line\"><span class=\"string\">        date = new Date();</span></span><br><span class=\"line\"><span class=\"string\">        return date;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;)();</span></span><br><span class=\"line\"><span class=\"string\">    `</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    log.Printf(<span class=\"string\">\"jsDate: %s\"</span>, jsDate)</span><br><span class=\"line\"></span><br><span class=\"line\">    dataMap := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;)</span><br><span class=\"line\">    dataMap[<span class=\"string\">\"foo\"</span>] = <span class=\"string\">\"bar\"</span></span><br><span class=\"line\">    dataMap[<span class=\"string\">\"one\"</span>] = <span class=\"string\">\"1\"</span></span><br><span class=\"line\">    dataMap[<span class=\"string\">\"two\"</span>] = <span class=\"string\">\"2\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    err = vm.Set(<span class=\"string\">\"dataMap\"</span>, dataMap)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    value, err := vm.Run(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    (function()&#123;</span></span><br><span class=\"line\"><span class=\"string\">        var keys = [];</span></span><br><span class=\"line\"><span class=\"string\">        for(k in dataMap) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            console.log(k + \": \" + dataMap[k]);</span></span><br><span class=\"line\"><span class=\"string\">            keys.push(k);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        return keys;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;)();</span></span><br><span class=\"line\"><span class=\"string\">    `</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    keys, err := value.Export()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    keyArray := keys.([]<span class=\"keyword\">string</span>)</span><br><span class=\"line\">    log.Printf(<span class=\"string\">\"keys: %s\"</span>, keyArray)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  2021/02/04 16:57:28 jsDate: Thu, 04 Feb 2021 16:57:28 CST</span></span><br><span class=\"line\"><span class=\"comment\">//  2021/02/04 16:57:28 foo: bar</span></span><br><span class=\"line\"><span class=\"comment\">//  2021/02/04 16:57:28 one: 1</span></span><br><span class=\"line\"><span class=\"comment\">//  2021/02/04 16:57:28 two: 2</span></span><br><span class=\"line\"><span class=\"comment\">//  2021/02/04 16:57:28 keys: [foo one two]</span></span><br></pre></td></tr></table></figure>\n<p><code>Run</code>函数返回两个参数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self Otto)</span> <span class=\"title\">Run</span><span class=\"params\">(src <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(Value, error)</span></span></span><br></pre></td></tr></table></figure>\n<p><code>Value</code>结构默认实现了<code>string()</code>方法，当我们只需要使用返回值的字符串形式，或者确定返回值为string时，可以直接使用。否则，需要<code>Export()</code>，它将尝试从JS的类型转换成Go类型。</p>\n<p><strong>该插件的缺点</strong></p>\n<ul>\n<li>调试JS代码困难</li>\n</ul>\n<p>由于代码写在JS中，Go执行JS代码，所以在调试时会相应的比较麻烦，可以借助<a href=\"https://www.fknsrs.biz/blog/using-debugger-statements-in-the-otto-javascript-interpreter.html\" target=\"_blank\" rel=\"noopener\">在OTTO JAVASCRIPT解释器中使用调试器语句</a>。当然可以现在其他IDE中写完代码后再移植过来会方便一点。</p>\n<ul>\n<li>Otto仅支持ES v5版本。</li>\n</ul>\n<blockquote>\n<p>之前学习过<a href=\"https://github.com/fagongzi/manba\" target=\"_blank\" rel=\"noopener\">Manba</a>的代码（微服务网关），在最近的版本中，已经使用otto作为插件引擎，可以参考借鉴一下。<a href=\"https://github.com/fagongzi/manba/blob/94a119ca357ac5372e26b55644c30f5bd38aa404/pkg/plugin/runtime.go\" target=\"_blank\" rel=\"noopener\">Here</a></p>\n</blockquote>\n<h3><span id=\"总结\">总结</span></h3>\n<p><code>go-plugin</code>和<code>otta</code>均在实际生产中有应用，可使用的场合较之Go内置插件更多。两者有着实质的区别，大体区别如下。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\">跨平台</th>\n<th style=\"text-align:center\">通信</th>\n<th style=\"text-align:center\">语言</th>\n<th style=\"text-align:center\">编译使用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Hashicorp插件</td>\n<td style=\"text-align:center\">多平台</td>\n<td style=\"text-align:center\">RPC</td>\n<td style=\"text-align:center\">Go，支持gRPC</td>\n<td style=\"text-align:center\">单独编译</td>\n</tr>\n<tr>\n<td>Go插件模块</td>\n<td style=\"text-align:center\">*nix平台</td>\n<td style=\"text-align:center\">内置</td>\n<td style=\"text-align:center\">Go</td>\n<td style=\"text-align:center\">单独编译<br>(需与主程序环境统一)</td>\n</tr>\n<tr>\n<td>Go JavaScript</td>\n<td style=\"text-align:center\">多平台</td>\n<td style=\"text-align:center\">第三方支持</td>\n<td style=\"text-align:center\">仅JS v5</td>\n<td style=\"text-align:center\">无需编译</td>\n</tr>\n</tbody>\n</table>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"plugin","slug":"plugin","permalink":"chunlife.top/tags/plugin/"}]},{"title":"Go Modules设置私有库，以及支持HTTP的私有库操作","date":"2020-12-10T03:55:20.000Z","path":"2020/12/10/Go-Modules设置私有库，以及支持HTTP的私有库操作/","content":"<h2><span id=\"常规设置\">常规设置</span></h2>\n<p>首先Go Mod最好设置Goproxy，这样可以解决很多包拉取的问题：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> env -w GOPROXY=<span class=\"string\">\"https://goproxy.cn,direct\"</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p><code>https://goproxy.io</code>也可以，上面是国内的。</p>\n<p>完成设置后，go 命令会从公共镜像 <a href=\"http://goproxy.io\" target=\"_blank\" rel=\"noopener\">goproxy.io</a> 上下载依赖包，并且会对下载的软件包和代码库进行安全校验，当你的代码库是公开的时候，这些功能都没什么问题。但是如果你的仓库是私有的怎么办呢？</p>\n<p>环境变量 GOPRIVATE 用来控制 go 命令把哪些仓库看做是私有的仓库，这样的话，就可以跳过 proxy server 和校验检查，这个变量的值支持用逗号分隔，可以填写多个值，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GOPRIVATE=*.corp.example.com,rsc.io/private</span><br></pre></td></tr></table></figure>\n<p>命令行设置：<code>go env -w GOPRIVATE=private.repo.com</code></p>\n<p>这样 go 命令会把所有包含这个后缀的软件包，包括 <a href=\"http://git.corp.example.com/xyzzy\" target=\"_blank\" rel=\"noopener\">git.corp.example.com/xyzzy</a> , <a href=\"http://rsc.io/private\" target=\"_blank\" rel=\"noopener\">rsc.io/private</a>, 和 <a href=\"http://rsc.io/private/quux\" target=\"_blank\" rel=\"noopener\">rsc.io/private/quux</a> 都以私有仓库来对待。</p>\n<p>若所有需要配置的私有仓库都存在于一个组织下，如 github 下的组织 org_name，则直接填写组织名即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GOPRIVATE=github.com/org_name</span><br></pre></td></tr></table></figure>\n<p>如果要更新不支持https协议的私有库，还需再做如下的配置。</p>\n<ol>\n<li><code>go get -insecure</code>，但是很麻烦，每个包都需要手动在go mod下导入（go mod自己是不支持HTTP的，这么做是合理的）；</li>\n<li><code>go env -w GOINSECURE=private.repo.com</code>，设置<code>GOINSECURE</code>参数，非常方便。仅在<code>go 1.14</code>后新加入。</li>\n</ol>\n<h2><span id=\"私有不合规的库\">私有不合规的库</span></h2>\n<p>上一节是针对的库是私有的情况，但其依然是有局限的地方的，其就要求：</p>\n<p>① 私有库是绑定有域名的；</p>\n<p>② 端口是 443 或 80 端口；</p>\n<p>怎么解决呢，这里我推荐文章：<a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/Q28LwtYfU7KH_Zy0VbHvOA\" target=\"_blank\" rel=\"noopener\">Go Module：私有不合规库怎么解决引用问题</a> 。以下方法均出自该文章，建议直接读原文最nice。</p>\n<p>这里借用了现成的版本控制系统（VCS），go get获取包时，会发送一个 HTTP 请求，URL为模块带上协议头和参数（ go-get=1 ），去探测目标服务器是否是代码托管服务器，服务器会依此返回一个数据类型，响应Go工具，符合其要求。</p>\n<p>简洁的直接将其摆出来，既是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用Git替换掉原始的Git地址</span></span><br><span class=\"line\">yu@xxx:~$ git config --global url.<span class=\"string\">\"http://vitogo.tpddns.cn:9000/\"</span>.insteadof <span class=\"string\">\"https://studygolang.com/\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将gitea.com设置为私有库，不经过校验，gitea也可以换成其它公有托管服务</span></span><br><span class=\"line\">yu@xxx:~$ go env -w GOPRIVATE=gitea.com</span><br><span class=\"line\"></span><br><span class=\"line\">yu@xxx:~$ curl https://gitea.com/zanghong/testgo?go-get=1</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!doctype html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">        &lt;head&gt;</span><br><span class=\"line\">                &lt;meta name=<span class=\"string\">\"go-import\"</span> content=<span class=\"string\">\"gitea.com/zanghong/testgo git https://gitea.com/zanghong/testgo.git\"</span>&gt;</span><br><span class=\"line\">                &lt;meta name=<span class=\"string\">\"go-source\"</span> content=<span class=\"string\">\"gitea.com/zanghong/testgo _ https://gitea.com/zanghong/testgo/src/branch/master&#123;/dir&#125; https://gitea.com/zanghong/testgo/src/branch/master&#123;/dir&#125;/&#123;file&#125;#L&#123;line&#125;\"</span>&gt;</span><br><span class=\"line\">        &lt;/head&gt;</span><br><span class=\"line\">        &lt;body&gt;</span><br><span class=\"line\">                go get gitea.com/zanghong/testgo</span><br><span class=\"line\">        &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">yu@xxx:~$ go get -v gitea.com/zanghong/<span class=\"built_in\">test</span></span><br><span class=\"line\">get <span class=\"string\">\"gitea.com/zanghong/test\"</span>: found meta tag get.metaImport&#123;Prefix:<span class=\"string\">\"gitea.com/zanghong/test\"</span>, VCS:<span class=\"string\">\"git\"</span>, RepoRoot:<span class=\"string\">\"https://gitea.com/zanghong/test.git\"</span>&#125; at //gitea.com/zanghong/<span class=\"built_in\">test</span>?go-get=1</span><br><span class=\"line\">gitea.com/zanghong/<span class=\"built_in\">test</span> (download)</span><br><span class=\"line\">gitea.com/zanghong/<span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"go mod","slug":"go-mod","permalink":"chunlife.top/tags/go-mod/"}]},{"title":"Go中的nil和interface","date":"2020-12-03T03:29:33.000Z","path":"2020/12/03/Go中的nil和interface/","content":"<p>在对Go-Micro库改造中，碰到了一个nil与interface比较的问题。现象是我返回的接口是nil，返回值是另一个接口接收，在函数外，与nil进行比较，其竟然不为nil。</p>\n<a id=\"more\"></a>\n<p>代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Err <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\terr <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *Err)</span> <span class=\"title\">Error</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> e.err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">returnErr</span><span class=\"params\">()</span> *<span class=\"title\">Err</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> err error</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = returnErr()</span><br><span class=\"line\">\tfmt.Println(err, err == <span class=\"literal\">nil</span>)  <span class=\"comment\">// false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>变体：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Foo</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> err *os.PathError = <span class=\"literal\">nil</span></span><br><span class=\"line\">\t<span class=\"comment\">// …</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\terr := Foo()</span><br><span class=\"line\">\tfmt.Println(err)        <span class=\"comment\">// &lt;nil&gt;</span></span><br><span class=\"line\">\tfmt.Println(err == <span class=\"literal\">nil</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上两种情况，都有一个共同的操作，就是将<strong>一个接口(值为nil)</strong>，赋值给<strong>另一个接口</strong>。</p>\n<p>出现此问题的原因，还是在于interface本身的结构中。（帮助大家了解： <a href=\"https://i6448038.github.io/2018/10/01/Golang-interface/\" target=\"_blank\" rel=\"noopener\">Go语言interface底层实现</a>    、 <a href=\"http://legendtkl.com/2017/07/01/golang-interface-implement/\" target=\"_blank\" rel=\"noopener\">Go Interface 源码剖析</a>）</p>\n<blockquote>\n<p>关于nil的讲解：<a href=\"https://speakerdeck.com/campoy/understanding-nil?slide=50\" target=\"_blank\" rel=\"noopener\">https://speakerdeck.com/campoy/understanding-nil?slide=50</a></p>\n</blockquote>\n<p>interface由两部分组成：(type, value)。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s fmt.Stringer   <span class=\"comment\">// Stringer (nil, nil)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// default s = nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(s == <span class=\"literal\">nil</span>)  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>两个成员为(nil, nil)，才等于nil。</p>\n<hr>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p *Person            <span class=\"comment\">// nil of type *Person</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> s fmt.Stringer = p   <span class=\"comment\">// Stringer (*Person, nil)</span></span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(s == <span class=\"literal\">nil</span>)    <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>interface的值为：(*Person, nil)，不等于nil。</p>\n<p>注意：在编程中，接口赋值给另一个接口，需要注意nil的情况，如果可以，就尽可能避免这种情况。</p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"nil compare interface","slug":"nil-compare-interface","permalink":"chunlife.top/tags/nil-compare-interface/"}]},{"title":"go-micro config包解读","date":"2020-12-01T03:09:02.000Z","path":"2020/12/01/go-micro-config包解读/","content":"<p>直接使用config包中函数，例如<code>Get/Load...</code>等函数，我们使用的是config包，默认变量<code>DefaultConfig</code>。</p>\n<p>初始化过程为：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config/config.<span class=\"keyword\">go</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewConfig</span><span class=\"params\">(opts ...Option)</span> <span class=\"params\">(Config, error)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newConfig(opts...)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newConfig</span><span class=\"params\">(opts ...Option)</span> <span class=\"params\">(Config, error)</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> c config</span><br><span class=\"line\"></span><br><span class=\"line\">            c.Init(opts...)</span><br><span class=\"line\">            <span class=\"keyword\">go</span> c.run()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> &amp;c, <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重要函数</span></span><br><span class=\"line\">c.Init(opts...)   </span><br><span class=\"line\"><span class=\"keyword\">go</span> c.run()</span><br></pre></td></tr></table></figure>\n<p>重要的函数：<code>Init</code>和<code>run</code>。不过这里主要讲解Init即可，run为监听配置改变函数。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *config)</span> <span class=\"title\">Init</span><span class=\"params\">(opts ...Option)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tc.opts = Options&#123;</span><br><span class=\"line\">\t\tReader: json.NewReader(),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc.exit = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, o := <span class=\"keyword\">range</span> opts &#123;</span><br><span class=\"line\">\t\to(&amp;c.opts)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// default loader uses the configured reader</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> c.opts.Loader == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tc.opts.Loader = memory.NewLoader(memory.WithReader(c.opts.Reader))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr := c.opts.Loader.Load(c.opts.Source...)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tc.snap, err = c.opts.Loader.Snapshot()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tc.vals, err = c.opts.Reader.Values(c.snap.ChangeSet)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// config/reader/json/values.go</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(j *jsonReader)</span> <span class=\"title\">Values</span><span class=\"params\">(ch *source.ChangeSet)</span> <span class=\"params\">(reader.Values, error)</span></span> &#123;</span><br><span class=\"line\">\t.......</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newValues(ch)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newValues</span><span class=\"params\">(ch *source.ChangeSet)</span> <span class=\"params\">(reader.Values, error)</span></span> &#123;</span><br><span class=\"line\">\tsj := simple.New()</span><br><span class=\"line\">\tdata, _ := reader.ReplaceEnvVars(ch.Data)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := sj.UnmarshalJSON(data); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tsj.SetPath(<span class=\"literal\">nil</span>, <span class=\"keyword\">string</span>(ch.Data))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;jsonValues&#123;ch, sj&#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看看<code>Init()</code>中最重要的事就是设置了Load，这里也就是详细讲一下Load的操作，一般load是由我们在后期进行调用的。</p>\n<ol>\n<li>\n<p>初始化并设置opts，创建exit用于监听退出信号，设置opts</p>\n</li>\n<li>\n<p>设置默认loader，c.opts.Loader默认是memory <code>memory.NewLoader()</code>[config/loader/memory/memory.go]，这是后续关键函数。</p>\n</li>\n<li>\n<p>调用c.opts.Loader.Load()，[config/loader/memory/memory.go]，<code>详细讲解下Load</code></p>\n<ol>\n<li>循环所有source，根据配置读取数据，更新m.sources，m.sets（<code>Format</code>为传入的编码），并watch()所有source</li>\n<li>调用<code>reload()</code>\n<ol>\n<li>合并所有sets，函数<code>m.opts.Reader.Merge(m.sets...)</code>进行合并。</li>\n<li>设置m.vals，m.snap</li>\n<li>调用m.update()，更新之前的数据。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source.ChangeSet</span><br><span class=\"line\"><span class=\"keyword\">type</span> ChangeSet <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tData      []<span class=\"keyword\">byte</span>  <span class=\"comment\">// 读取的数据</span></span><br><span class=\"line\">\tChecksum  <span class=\"keyword\">string</span></span><br><span class=\"line\">\tFormat    <span class=\"keyword\">string</span>  <span class=\"comment\">// WithEncoder设置的Encoder，然后讲Encoder.String()设置给它</span></span><br><span class=\"line\">\tSource    <span class=\"keyword\">string</span>  <span class=\"comment\">// 来自哪个数据源，`apollo\\file`等</span></span><br><span class=\"line\">\tTimestamp time.Time <span class=\"comment\">// 此次数据什么时候读取的时间戳</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Source is the source from which config is loaded</span></span><br><span class=\"line\"><span class=\"comment\">// 这是每一个读取源需要实现的接口，例如Apollo\\file等</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Source <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tRead() (*ChangeSet, error)</span><br><span class=\"line\">\tWrite(*ChangeSet) error</span><br><span class=\"line\">\tWatch() (Watcher, error)</span><br><span class=\"line\">\tString() <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// go-micro/config/source/options.go</span></span><br><span class=\"line\"><span class=\"comment\">// WithEncoder sets the source encoder</span></span><br><span class=\"line\"><span class=\"comment\">// 设置不同的数据源的编码格式，在Load函数调用时，传入第三方包进行编码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WithEncoder</span><span class=\"params\">(e encoder.Encoder)</span> <span class=\"title\">Option</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(o *Options)</span></span> &#123;</span><br><span class=\"line\">\t\to.Encoder = e</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *memory)</span> <span class=\"title\">Load</span><span class=\"params\">(sources ...source.Source)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> gerrors []<span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, source := <span class=\"keyword\">range</span> sources &#123;</span><br><span class=\"line\">\t\tset, err := source.Read()  <span class=\"comment\">// 调用的第三方包实现的read函数，读取数据</span></span><br><span class=\"line\">\t\t......</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tm.Lock()</span><br><span class=\"line\">\t\tm.sources = <span class=\"built_in\">append</span>(m.sources, source)</span><br><span class=\"line\">\t\tm.sets = <span class=\"built_in\">append</span>(m.sets, set)</span><br><span class=\"line\">\t\tidx := <span class=\"built_in\">len</span>(m.sets) - <span class=\"number\">1</span></span><br><span class=\"line\">\t\tm.Unlock()</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> m.watch(idx, source)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := m.reload(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tgerrors = <span class=\"built_in\">append</span>(gerrors, err.Error())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t.....</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// reload reads the sets and creates new values</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *memory)</span> <span class=\"title\">reload</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tm.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// merge sets，不管什么其他格式都将转换为json数据</span></span><br><span class=\"line\">\tset, err := m.opts.Reader.Merge(m.sets...)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tm.Unlock()</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// set values</span></span><br><span class=\"line\">\tm.vals, _ = m.opts.Reader.Values(set)</span><br><span class=\"line\">\tm.snap = &amp;loader.Snapshot&#123;</span><br><span class=\"line\">\t\tChangeSet: set,</span><br><span class=\"line\">\t\tVersion:   genVer(),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tm.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// update watchers</span></span><br><span class=\"line\">\tm.update()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// config/reader/options.go</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewOptions</span><span class=\"params\">(opts ...Option)</span> <span class=\"title\">Options</span></span> &#123;</span><br><span class=\"line\">\toptions := Options&#123;</span><br><span class=\"line\">\t\tEncoding: <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]encoder.Encoder&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"json\"</span>: json.NewEncoder(),</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"yaml\"</span>: yaml.NewEncoder(),</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"toml\"</span>: toml.NewEncoder(),</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"xml\"</span>:  xml.NewEncoder(),</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"hcl\"</span>:  hcl.NewEncoder(),</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"yml\"</span>:  yaml.NewEncoder(),</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 聚合各个source的数据 `config/reader/json/json.go`</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(j *jsonReader)</span> <span class=\"title\">Merge</span><span class=\"params\">(changes ...*source.ChangeSet)</span> <span class=\"params\">(*source.ChangeSet, error)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> merged <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span> _, m := <span class=\"keyword\">range</span> changes &#123;</span><br><span class=\"line\">      ......</span><br><span class=\"line\">      </span><br><span class=\"line\">      codec, ok := j.opts.Encoding[m.Format]</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> data <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err := codec.Decode(m.Data, &amp;data); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      ......</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   b, err := j.json.Encode(merged)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   cs := &amp;source.ChangeSet&#123;</span><br><span class=\"line\">      Timestamp: time.Now(),</span><br><span class=\"line\">      Data:      b,</span><br><span class=\"line\">      Source:    <span class=\"string\">\"json\"</span>,</span><br><span class=\"line\">      Format:    j.json.String(),</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   cs.Checksum = cs.Sum()</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> cs, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>source上的所有数据均转化为Json数据，故最终都会调用到config提供的读取json的方法。<code>config/reader/json/values.go</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> jsonValues <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ch *source.ChangeSet</span><br><span class=\"line\">    sj *simplejson.Json</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Methods:</span><br><span class=\"line\">    Get(path ...<span class=\"keyword\">string</span>) reader.Value</span><br><span class=\"line\">    Del(path ...<span class=\"keyword\">string</span>)</span><br><span class=\"line\">    Set(val <span class=\"keyword\">interface</span>&#123;&#125;, path ...<span class=\"keyword\">string</span>)</span><br><span class=\"line\">    Bytes() []<span class=\"keyword\">byte</span></span><br><span class=\"line\">    Map() <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">    Scan(v <span class=\"keyword\">interface</span>&#123;&#125;) error</span><br><span class=\"line\">    String() <span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> jsonValue <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    *simplejson.Json</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Methods:</span><br><span class=\"line\">    Bool(def <span class=\"keyword\">bool</span>) <span class=\"keyword\">bool</span></span><br><span class=\"line\">    Int(def <span class=\"keyword\">int</span>) <span class=\"keyword\">int</span></span><br><span class=\"line\">    String(def <span class=\"keyword\">string</span>) <span class=\"keyword\">string</span></span><br><span class=\"line\">    Float64(def <span class=\"keyword\">float64</span>) <span class=\"keyword\">float64</span></span><br><span class=\"line\">    Duration(def time.Duration) time.Duration</span><br><span class=\"line\">    StringSlice(def []<span class=\"keyword\">string</span>) []<span class=\"keyword\">string</span></span><br><span class=\"line\">    StringMap(def <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>) <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span></span><br><span class=\"line\">    Scan(v <span class=\"keyword\">interface</span>&#123;&#125;) error</span><br><span class=\"line\">    Bytes() []<span class=\"keyword\">byte</span></span><br></pre></td></tr></table></figure>\n<p>json的读取库采用的是：<a href=\"github.com/bitly/go-simplejson\">go-simplejson</a></p>\n<p>另外，在实际使用中，<code>Get</code>函数中其调用的是<code>j.sj.GetPath(path...)</code>。它可以读取到嵌套的<code>json</code>数据。没有数据的话，不会报错，只能检测结构体里面的参数是否为<code>nil</code>，但<code>Get</code>返回的是一个<code>reader.Value</code>的接口，不能根据判断其为nil来确定其有无数据（其结构体不为nil，是里面的<code>data</code>字段为<code>nil</code>）。</p>\n<p>可以查看value的方法，可以调用<code>Interface()</code>，获取data字段，判断是否有值。</p>\n<blockquote>\n<p><strong>注意</strong></p>\n</blockquote>\n<p>这里将引出一个问题，可以看到config目录中，有很多将<code>Get</code>的返回值对比<code>nil</code>的代码，其返回值是<code>reader.Value</code>，是一个接口。</p>\n<p>若是返回的是一个接口，此接口是nil，则intr只是内部value被赋值为<code>nil</code>了， 其本身不为<code>nil</code>的，想判断这种情况，必须是：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> v != reader.Value(<span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">\t......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><s>config包<code>config/default.go</code>中，出现了此错误。</s></p>\n<p><s>if c.vals == nil</s></p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go Micro","slug":"Go-Micro","permalink":"chunlife.top/tags/Go-Micro/"},{"name":"微服务","slug":"微服务","permalink":"chunlife.top/tags/微服务/"},{"name":"config","slug":"config","permalink":"chunlife.top/tags/config/"}]},{"title":"golang fmt.Fscanf()读取文件数据异常问题","date":"2020-11-17T12:45:45.000Z","path":"2020/11/17/golang-fmt-Fscanf-读取文件数据异常问题/","content":"<p>今天看到朋友代码时，发现一个小问题，<code>fmt.Fscanf()</code>读取数据老是不正常，总体，可以看出来是，多读了一个<code>0</code>。这个现象有点问题。</p>\n<a id=\"more\"></a>\n<p><code>Fscanf</code>的注释：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Fscanf scans text read from r, storing successive space-separated</span><br><span class=\"line\">// values into successive arguments as determined by the format. It</span><br><span class=\"line\">// returns the number of items successfully parsed.</span><br><span class=\"line\">// Newlines in the input must match newlines in the format.</span><br><span class=\"line\"></span><br><span class=\"line\">Fscanf扫描从r读取的文本，将连续的以空格分隔的值存储到由格式确定的连续的参数中。它返回成功解析的项目数。</span><br><span class=\"line\">输入中的换行符必须与format中的换行符匹配。</span><br></pre></td></tr></table></figure>\n<p>使用的代码是：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">read1</span><span class=\"params\">(filename <span class=\"keyword\">string</span>)</span> [][]<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tfile, err := os.Open(filename)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rows, cols <span class=\"keyword\">int</span></span><br><span class=\"line\">\tfmt.Fscanf(file, <span class=\"string\">\"%d %d\"</span>, &amp;rows, &amp;cols)</span><br><span class=\"line\"></span><br><span class=\"line\">\tmaze := <span class=\"built_in\">make</span>([][]<span class=\"keyword\">int</span>, rows)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> maze &#123;</span><br><span class=\"line\">\t\tmaze[i] = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, cols)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"keyword\">range</span> maze[i] &#123;</span><br><span class=\"line\">\t\t\tfmt.Fscanf(file, <span class=\"string\">\"%d\"</span>, &amp;maze[i][j])</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> maze</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">文件：</span><br><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">运行读出来的数据：</span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span> </span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> </span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span> </span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span> </span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> </span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>没有找到解释该现象的博客，<a href=\"https://segmentfault.com/q/1010000015629978\" target=\"_blank\" rel=\"noopener\">golang fmt.Fscanf()遇到换行返回值为0</a>，这里有看到同样是碰到这个问题的人。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scan,Fscan,Sscan treat newlines in the input as spaces.</span><br><span class=\"line\">fmt</span><br><span class=\"line\">这就是他工作的机制，了解了原理，要继续采用这个方式的话，可以先格式化一下，把换行替换成空格，在交给Fscanf</span><br></pre></td></tr></table></figure>\n<p>但我并不喜欢这种操作方式，虽然管用，可这样的话，就得将数据格式化一遍，然后才能读，感觉麻烦了些。</p>\n<p>遇到换行会读取多一个<code>0</code>，这很奇怪，但这里我很巧合的联想到了文件格式是否是造成此问题的原因，因为CRLF和LF，分别是两种换行符，属于不同的操作系统，一个是<code>\\r\\n</code>，一个是<code>\\n</code>，刚好会多出一个符号。</p>\n<p>果然，在更改文件格式后，结果正常，看来就是文件格式的问题了，需要将文件格式修改为<code>LF</code>，这里<code>Fscanf</code>默认换行符看来识别的是<code>\\n</code>，在其注释中的<code>输入中的换行符必须与format中的换行符匹配</code>，看来就是留下的一个引子，怎么修改识别这个换行符标志，我就没有深入研究了，如果有后续可以跟我留言，告诉我详情。</p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"fmt Fscanf","slug":"fmt-Fscanf","permalink":"chunlife.top/tags/fmt-Fscanf/"}]},{"title":"Go Micro性能测试","date":"2020-11-13T01:02:29.000Z","path":"2020/11/13/Go-Micro性能测试/","content":"<p>基于我对网上搜索过后的结果，大多数对Micro的测试都是基于V1版本的，当然V1版本的性能也确实拉跨，被吊打的不得了，那V2版本是否有相应的进步呢？这点没有在网上搜索到，那就只能自己动手改造一个了。</p>\n<a id=\"more\"></a>\n<p>看这篇博文中，<a href=\"https://colobu.com/2020/01/21/benchmark-2019-spring-of-popular-rpc-frameworks/\" target=\"_blank\" rel=\"noopener\">2020 新春流行的RPC框架性能大比拼</a>。Micro RPC性能可以说是垫底了，根据之前的仓库，进行更改后，<a href=\"https://github.com/younglifestyle/rpcx-benchmark\" target=\"_blank\" rel=\"noopener\">https://github.com/younglifestyle/rpcx-benchmark</a> ， 得到Micro V2版本的测试代码。</p>\n<p><img src=\"image-20201113101051999.png\" alt=\"image-20201113101051999\"></p>\n<p>与之对应的Go RPC原生RPC性能则是：</p>\n<p><img src=\"image-20201113101113139.png\" alt=\"image-20201113101113139\"></p>\n<p>可以看到，对比之下，性能不可谓不尴尬，性能可以说是很拉跨了。</p>\n<p>另外，看到这个仓库，<a href=\"https://github.com/fananchong/test_go-micro_qps#%E5%9B%9E%E6%98%BE%E6%B5%8B%E8%AF%95\" target=\"_blank\" rel=\"noopener\">Micro测试</a>。修改为Micro V2版本，<a href=\"https://github.com/younglifestyle/rpcx-benchmark%E3%80%82\" target=\"_blank\" rel=\"noopener\">https://github.com/younglifestyle/rpcx-benchmark。</a></p>\n<p>我的机器是<code>Intel(R) 2.00GHz</code>，24核心，36G内存，我只使用了在同一台机器运行Client/Server。</p>\n<p>20个客户端，CPU占用在2.2%。总体来看，这也难怪仓库给出的结论是QPS太低。</p>\n<p><img src=\"image-20201113095737703.png\" alt=\"image-20201113095737703\"></p>\n<p><img src=\"image-20201113100854270.png\" alt=\"image-20201113100854270\"></p>\n<p>在博主的一篇博客中提到测试网络库的一些思考：思考（五十九）：<a href=\"https://www.pianshen.com/article/3087548073/\" target=\"_blank\" rel=\"noopener\">如何正确的测试网络库</a>。</p>\n<blockquote>\n<ul>\n<li>不能一味的追求 qps ，要考虑到留 CPU 给业务逻辑去算</li>\n<li>因此在主流配置上，网络库能上 10w qps 且 CPU 占用较低，就合格了</li>\n<li><strong>云机上跑服务完全可行</strong></li>\n</ul>\n</blockquote>\n<p><strong>后续</strong></p>\n<p>在博主的博文<a href=\"https://codeleading.com/article/21301597392/\" target=\"_blank\" rel=\"noopener\">micro/go-micro 介绍与源代码分析（五）：回显测试分析网络性能</a>，有提到过对Micro性能提出的issue，不过官方似乎并没改进。（该博主对go micro的性能进行过优化）</p>\n<p>我提过issue，得到asim哥的回答是：</p>\n<blockquote>\n<p><a href=\"https://github.com/asim/nitro/issues/2075#issuecomment-725903901\" target=\"_blank\" rel=\"noopener\">https://github.com/asim/nitro/issues/2075#issuecomment-725903901</a></p>\n<p>V2 is unsupported. V3 is non-commercial. Performance is not my concern at this time.</p>\n</blockquote>\n<p>这里我还找到一个issue，asim回答别人提高性能的一个解答，至于实际效果怎么样，我有时间将会进行一波尝试。</p>\n<blockquote>\n<p><a href=\"https://github.com/asim/nitro/issues/129#issuecomment-256572499\" target=\"_blank\" rel=\"noopener\">https://github.com/asim/nitro/issues/129#issuecomment-256572499</a></p>\n<p>Each request does the following:</p>\n<ol>\n<li>Lookup service discovery for service</li>\n<li>Select node from service list</li>\n<li>Create new connection to node</li>\n<li>Make request</li>\n<li>Teardown connection</li>\n</ol>\n<p>If you want more performance you can use the caching selector <a href=\"https://godoc.org/github.com/micro/go-micro/selector/cache\" target=\"_blank\" rel=\"noopener\">https://godoc.org/github.com/micro/go-micro/selector/cache</a> and client side connection pooling <a href=\"https://godoc.org/github.com/micro/go-micro/client#PoolSize\" target=\"_blank\" rel=\"noopener\">https://godoc.org/github.com/micro/go-micro/client#PoolSize</a>.</p>\n<p>You can either do this in code or with flags like so:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; --selector=cache # enables in memory caching of discovered nodes</span><br><span class=\"line\">&gt; --client_pool_size=10 # enables the client side connection pool</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>If you want to discuss further please join the slack.</p>\n</blockquote>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go Micro","slug":"Go-Micro","permalink":"chunlife.top/tags/Go-Micro/"},{"name":"调试","slug":"调试","permalink":"chunlife.top/tags/调试/"},{"name":"performance","slug":"performance","permalink":"chunlife.top/tags/performance/"},{"name":"性能","slug":"性能","permalink":"chunlife.top/tags/性能/"}]},{"title":"Go Micro使用pprof查找问题","date":"2020-11-05T08:47:47.000Z","path":"2020/11/05/Go-Micro使用pprof查找问题/","content":"<p>pprof 是用于可视化和分析性能分析数据的工具。</p>\n<p>当服务出现异常CPU占用，或者内存出现爆炸式增长时，我们可以使用pprof来帮助我们进行分析。</p>\n<a id=\"more\"></a>\n<h2><span id=\"micro框架\">Micro框架</span></h2>\n<p><code>Golang</code>中，可以采用：</p>\n<p><code>runtime/pprof</code>：采集程序（非 Server）的运行数据进行分析</p>\n<p><code>net/http/pprof</code>：采集 HTTP Server 的运行时数据进行分析</p>\n<p>Go Micro中，<code>github.com\\asim\\go-micro\\debug\\profile</code>。两者均提供了开发人员使用。</p>\n<p>http提供接口：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mux.HandleFunc(&quot;/debug/pprof/&quot;, pprof.Index)</span><br><span class=\"line\">mux.HandleFunc(&quot;/debug/pprof/cmdline&quot;, pprof.Cmdline)</span><br><span class=\"line\">mux.HandleFunc(&quot;/debug/pprof/profile&quot;, pprof.Profile)</span><br><span class=\"line\">mux.HandleFunc(&quot;/debug/pprof/symbol&quot;, pprof.Symbol)</span><br><span class=\"line\">mux.HandleFunc(&quot;/debug/pprof/trace&quot;, pprof.Trace)</span><br></pre></td></tr></table></figure>\n<p>runtime/pprof保存文件至：</p>\n<p><code>/tmp/{cpu, mem}.pprof</code>。</p>\n<p>程序中，修改<code>DefaultAddress</code>，调用<code>NewProfile</code>既能完成部署工作，非常简单吧。</p>\n<p>以上是，对pprof单独启动一个server端口，若是如我一样，使用Gin框架，则可以直接使用<code>github.com/gin-contrib/pprof</code>，将接口集成进去。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">pprof.Register(app) <span class=\"comment\">// 性能</span></span><br></pre></td></tr></table></figure>\n<p>这样调试功能还是很有作用的，例如，我们在业务中的实现就是，在调试阶段，将pprof开启，后端管理界面的后端程序，可以直接获取指定服务的pprof，将其显示到大盘界面上，这样可以不用单独拉出来去访问这些接口，而是将这些给集成到一起。</p>\n<hr>\n<blockquote>\n<p>以下内容均来自：<a href=\"http://liumurong.org/2019/12/gin_pprof/\" target=\"_blank\" rel=\"noopener\">Gin框架中使用pprof</a></p>\n</blockquote>\n<p>在浏览器里访问<code>/debug/pprof</code>, 通过这个页面我们可以看到我们需要的所有数据：</p>\n<p><img src=\"gin_pprof2.png\" alt=\"“浏览器查看数据”\"></p>\n<h2><span id=\"使用go-tool-pprof采集数据\">使用go tool pprof采集数据</span></h2>\n<p>再新建一个终端窗口输入以下命令，获取当前协程的堆栈信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go tool pprof --seconds 20 http://localhost:3000/debug/pprof/goroutine</span><br><span class=\"line\"></span><br><span class=\"line\">或者采用如下写法</span><br><span class=\"line\"></span><br><span class=\"line\">go tool pprof http://localhost:3000/debug/pprof/goroutine?second=20</span><br></pre></td></tr></table></figure>\n<p>上述命令的意思是采集协程数据并持续20S。执行结果如下：</p>\n<p><img src=\"gin_pprof3.png\" alt=\"“采集数据”\"></p>\n<p>现在已经进入了命令行模式，在最后一行的<code>pprof</code>后输入<code>web</code>,会自动打开本地浏览器并访问相关页面，当然这只限于图形化界面系统，如MacOS，Ubuntu Desktop，Windows等。如果不是，比如说使用的云服务器就可能会是如下结果：</p>\n<p><img src=\"gin_pprof4.png\" alt=\"“非图形化系统异常”\"></p>\n<p>在这种情况，我们可以使用数据采集的结果文件创建新的web服务，以用来在客户端浏览。请注意采集数据时的<code>Saved profile</code>一行，这便是我们需要的数据文件。启动新的终端窗口，输入如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go tool pprof -http://0.0.0.0:3001 /home/ubuntu/pprof/pprof.rumgo.goroutine.001.pb.gz</span><br></pre></td></tr></table></figure>\n<p>直接在浏览器里访问<code>http://ip:3001</code>, 如果没有安装<code>graphviz</code>，会出现<code>Could not execute dot；may need to install graphviz</code>。安装graphviz的方式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install graphviz # for macos</span><br><span class=\"line\"></span><br><span class=\"line\">apt-get install graphviz # for ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\">yum install graphviz # for centos</span><br></pre></td></tr></table></figure>\n<p><strong>注：graphviz一定是安装在服务器上的哦</strong></p>\n<p>在浏览器中我们可以看到图形化的函数调用堆栈信息。右上角的<code>VIEW</code>栏有一些选项，可以点开查看，<code>Flame Graph</code>就是传说中的火焰图。</p>\n<p><img src=\"gin_pprof5.png\" alt=\"“图形页面-调用堆栈”\"></p>\n<p><img src=\"gin_pprof6.png\" alt=\"“图形页面-火焰图”\"></p>\n<h2><span id=\"go-tool-pprof命令行交互界面\">go tool pprof命令行交互界面</span></h2>\n<p><code>go tool pprof</code>只通过命令行也可以实现强大的功能，在上一节里我们遇到了一个命令，就是<code>web</code>，接下来再介绍几个常用的命令。</p>\n<h3><span id=\"top\">top</span></h3>\n<p><code>top</code>默认查看程序中占用cpu前10位的函数。</p>\n<p><code>top 3</code> 可以查看程序中占用CPU前三位的函数。</p>\n<p><img src=\"gin_pprof7.png\" alt=\"“top信息”\"></p>\n<p>最后一列为函数名称，其他各项内容意义如下：</p>\n<ul>\n<li>flat:当前函数占用CPU的耗时</li>\n<li>flat%:当前函数占用CPU的耗时百分比</li>\n<li>sum%:函数占用CPU的累积耗时百分比</li>\n<li>cum：当前函数+调用当前函数的占用CPU总耗时</li>\n<li>cum%: 当前函数+调用当前函数的占用CPU总耗时百分比</li>\n</ul>\n<h3><span id=\"list\">list</span></h3>\n<p>我们还可以使用<code>list 函数名</code>命令查看具体的函数分析，例如：</p>\n<p><img src=\"gin_pprof8.png\" alt=\"“list”\"></p>\n<h3><span id=\"pdf\">pdf</span></h3>\n<p><code>pdf</code>命令可以生成可视化的pdf文件。</p>\n<h3><span id=\"help\">help</span></h3>\n<p><code>help</code>命令可以提供所有pprof支持的命令说明。</p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go Micro","slug":"Go-Micro","permalink":"chunlife.top/tags/Go-Micro/"},{"name":"调试","slug":"调试","permalink":"chunlife.top/tags/调试/"},{"name":"pprof","slug":"pprof","permalink":"chunlife.top/tags/pprof/"}]},{"title":"块设备在Linux上读写直接使用IO","date":"2020-11-04T07:33:59.000Z","path":"2020/11/04/块设备在Linux上读写直接使用IO/","content":"<p>最近有接触到一些嵌入式设备，因为长期用Go，对C语言比较生疏，那也就直接使用CGO直接对数据进行读写。当我以为是很简单的一件事的时候，但我发现Linux下，直接对块设备通信，发生了一些问题。</p>\n<a id=\"more\"></a>\n<p>通过挂载的文件，和设备进行通信，但如果使用简单的<code>open</code>和<code>fopen</code>，并不能直接讲数据写到设备中，非常奇怪，先天然的就想到是不是缓存问题，当文件被close掉，数据则应该被落盘才对，怎么一点反应都没有呢？</p>\n<p>询问过后发现，open函数中，有一个flag参数<code>O_DIRECT</code>，可以绕过缓冲区高速缓存，直接进行IO操作。</p>\n<blockquote>\n<p>直接IO：Linux允许应用程序在执行磁盘IO时绕过缓冲区高速缓存，从用户空间直接将数据传递到文件或磁盘设备，称为直接IO（direct IO）或者裸IO（raw IO）。</p>\n</blockquote>\n<p>也就是这行图显示的：</p>\n<p><img src=\"526303-20160412103925566-895118780.png\" alt=\"NewImage\"></p>\n<blockquote>\n<p>上图中，左侧虚线方框中为可于任何时刻显式强制刷新各类缓冲区的调用。</p>\n<p>右侧所示为促使刷新自动化的调用：通过禁用stdio的缓冲，和在文件输出类的系统调用中启用同步，从而使每个write()调用立刻刷新到磁盘。</p>\n</blockquote>\n<p>但使用直接IO是有一些限制的：</p>\n<ul>\n<li>用于传递数据的缓冲区，其内存边界必须对齐为块大小的整数倍</li>\n<li>数据传输的开始点，即文件和设备的偏移量，必须是块大小的整数倍</li>\n<li>待传递数据的长度必须是块大小的整数倍。</li>\n</ul>\n<p>不遵守上述任一限制均将导致EINVAL错误。这些错误我也遇到了。</p>\n<p>如何遵守呢？按照其规定，定义一个字节对齐，且长度为块大小的整数倍的buffer。即使数据长度不足buffer长度，写入数据时，也需要是直接写入整个buffer。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BUFFRE_LENGTH 4096</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> g_buff[BUFFRE_LENGTH] __attribute__((aligned(BUFFRE_LENGTH)));</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>__attribute__可以设置函数属性（Function Attribute）、变量属性（Variable Attribute）和类型属性（Type Attribute）。</p>\n<p><strong>aligned (alignment)</strong>：该属性设定一个指定大小的对齐格式（以字节 为单位）</p>\n</blockquote>\n<p>参考链接：</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/AXW2013/article/details/70242228\" target=\"_blank\" rel=\"noopener\">O_DIRECT与O_SYNC区别</a></p>\n<p><a href=\"https://www.jianshu.com/p/dda61084f9b5\" target=\"_blank\" rel=\"noopener\">c语言中__attribute__的意义</a></p>\n</blockquote>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"读写文件","slug":"读写文件","permalink":"chunlife.top/tags/读写文件/"},{"name":"C语言","slug":"C语言","permalink":"chunlife.top/tags/C语言/"},{"name":"数据缓存","slug":"数据缓存","permalink":"chunlife.top/tags/数据缓存/"}]},{"title":"Go Micro框架(v2.9.1)的使用","date":"2020-10-20T03:34:41.000Z","path":"2020/10/20/Go-Micro框架的使用/","content":"<h2><span id=\"部署开发环境\">部署开发环境</span></h2>\n<ul>\n<li>Golang环境 <a href=\"https://golang.google.cn/\" target=\"_blank\" rel=\"noopener\">安装</a></li>\n<li>gRPC <a href=\"https://grpc.io/docs/quickstart/go.html\" target=\"_blank\" rel=\"noopener\">安装</a></li>\n<li>Micro</li>\n</ul>\n<p>Micro目前V3版本未稳定，使用V2版本进行学习和开发使用。</p>\n<blockquote>\n<p><s>Micro已经出了V3版本，不过最近asim发言称，V3是最后一个版本了，Micro也不属于Micro团队维护项目了，它将回归于个人项目。</s></p>\n<p><s>以前的go-micro版本：</s></p>\n<p><s><a href=\"https://github.com/microhq/go-micro\" target=\"_blank\" rel=\"noopener\">https://github.com/microhq/go-micro</a></s></p>\n<p><s><a href=\"https://github.com/microhq/go-plugins\" target=\"_blank\" rel=\"noopener\">https://github.com/microhq/go-plugins</a></s></p>\n<p><s><a href=\"https://github.com/microhq/protoc-gen-micro\" target=\"_blank\" rel=\"noopener\">https://github.com/microhq/protoc-gen-micro</a></s></p>\n<p>现在的消息，go-micro已经回到asim个人仓库，但其已经把开源项目的<a href=\"https://micro-services.slack.com/archives/C01C1UP8USX/p1622128782149200\" target=\"_blank\" rel=\"noopener\">issue都关闭了</a>（2021/5/27），只接受PR，且不会有maintainer的支持。因为他觉得Github上的人只是去抱怨，而不去解决问题。然后他就把解决问题的人给解决了，这波操作在大气层。说实话，我觉得他真的太能折腾了，这个框架实在不建议使用了，maintainer想法太多了，有点伤。</p>\n<p>有替代品吗？有的，而且就是国内的，工程性都做的比较好，推荐两个，<a href=\"https://github.com/go-kratos/kratos\" target=\"_blank\" rel=\"noopener\">go-kratos</a>，<a href=\"https://github.com/tal-tech/go-zero\" target=\"_blank\" rel=\"noopener\">go-zero</a>。<a href=\"https://github.com/tal-tech/go-zero\" target=\"_blank\" rel=\"noopener\">go-zero</a>听说是要进入CNCF基金会了。<a href=\"https://github.com/go-kratos/kratos\" target=\"_blank\" rel=\"noopener\">go-kratos</a>在腾讯的一些业务上有用到。</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 安装go-micro</span><br><span class=\"line\">go get github.com/micro/go-micro/v2</span><br><span class=\"line\"></span><br><span class=\"line\">## 安装micro</span><br><span class=\"line\">go get github.com/micro/micro/v2</span><br><span class=\"line\"></span><br><span class=\"line\">download protobuf for micro:</span><br><span class=\"line\">go get -u github.com/golang/protobuf/proto</span><br><span class=\"line\">go get -u github.com/golang/protobuf/protoc-gen-go</span><br><span class=\"line\">go get github.com/micro/micro/v2/cmd/protoc-gen-micro</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>常见开发组件如何一键安装，使用docker进行环境部署，见<a href=\"#%E7%BB%84%E4%BB%B6%E7%8E%AF%E5%A2%83\">组件环境</a>。</p>\n</blockquote>\n<p>查看Micro命令的Help，命令参数后跟上<code>--help</code>，例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">micro <span class=\"built_in\">new</span> --help</span><br></pre></td></tr></table></figure>\n<h2><span id=\"micro-handler介绍\">Micro Handler介绍</span></h2>\n<p>在micro的系统中，有许多资源类型，作为框架对服务的一种抽象归类，比如常用的有：api、fnc（函数）、srv、web。其中经常需要使用的是api、srv、web，<a href=\"https://github.com/micro-in-cn/questions/issues/15\" target=\"_blank\" rel=\"noopener\">关于web，api，srv这三种服务的疑问</a>，可以查看该Issue。</p>\n<p>例如，在实际使用中，我的理解是，简化分类，使用web，srv作为整体架构，web处理HTTP请求，srv提供特定的服务，例如，登录，验证，访问数据等操作。</p>\n<p>web框架代码生成：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">micro new --namespace=mu.micro.book --type=web --alias=order micro_learn/orders-web</span><br></pre></td></tr></table></figure>\n<p>service框架代码生成：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> micro new --namespace=mu.micro.book --type=service --alias=u12 user-test</span><br><span class=\"line\">Creating service mu.micro.book.service.u12 in user-test</span><br><span class=\"line\"></span><br><span class=\"line\">.</span><br><span class=\"line\">├── main.go</span><br><span class=\"line\">├── generate.go</span><br><span class=\"line\">├── plugin.go</span><br><span class=\"line\">├── handler</span><br><span class=\"line\">│   └── u12.go</span><br><span class=\"line\">├── subscriber</span><br><span class=\"line\">│   └── u12.go</span><br><span class=\"line\">├── proto</span><br><span class=\"line\">│   └── u12</span><br><span class=\"line\">│       └── u12.proto</span><br><span class=\"line\">├── Dockerfile</span><br><span class=\"line\">├── Makefile</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">├── .gitignore</span><br><span class=\"line\">└── go.mod</span><br></pre></td></tr></table></figure>\n<p>删除subscriber目录，这是用于专门放订阅异步消息组件的目录，我们暂时用不到。</p>\n<p>删除go mod文件，仅需要在项目最外层有统一的go mod。</p>\n<p>删除Dockerfile, <a href=\"http://xn--MakefileREADME-de7vp6iwvx748dgzme53huewa.md\" target=\"_blank\" rel=\"noopener\">Makefile打包编程文件与README.md</a>，可以选择性保留。</p>\n<hr>\n<blockquote>\n<p><a href=\"#Web%E5%92%8CSrv%E7%9A%84%E5%8C%BA%E5%88%AB\">Web和Srv的区别</a></p>\n</blockquote>\n<p>Micro Grpc代码生成：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc --proto_path=. --go_out=. --micro_out=. u12.proto</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里有个小细节，生成代码时，如果想生成micro目录下的user服务，那就在micro的同级目录下，运行命令。</p>\n<p>micro new --namespace=mu.micro.book --type=web --alias=order micro/user</p>\n<p>这样生成，proto文件路径才不会出现路径问题。</p>\n</blockquote>\n<h2><span id=\"micro代理启动\">Micro代理启动</span></h2>\n<h3><span id=\"启动api网关\">启动api网关</span></h3>\n<p><code>micro api</code> 即可启动api一个网关,默认的端口是8080<br>\n可以通过<code>--address=0.0.0.0:8080</code>flag或者设置环境<code>MICRO_API_ADDRESS=0.0.0.0:8080</code>来修改</p>\n<h3><span id=\"设置命名空间\">设置命名空间</span></h3>\n<p><code>micro --api_namespace=namespace api</code>或<code>MICRO_API_NAMESPACE=namespace micro api</code><br>\n注意启动api时设置的namespace必须与要访问的资源的namespace一致不然无法访问，Web管理控制台类似</p>\n<h3><span id=\"设置服务发现\">设置服务发现</span></h3>\n<p>Micro默认是使用Grpc Mdns的方式进行局域网的服务发现，使用<code>--registry</code>参数修改注册服务，consul、etcd等，<code>micro --registry=etcd list services</code>。<code>--registry_address</code>修改默认ETCD注册地址。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">micro --registry=etcd --api_namespace=mu.micro.book.web api --handler=web</span><br></pre></td></tr></table></figure>\n<h3><span id=\"rpc使用网关访问\">RPC使用网关访问</span></h3>\n<p><code>--enable_rpc</code>参数是<code>micro api</code>的参数，默认为false，这个得<strong>注意，注意，再注意</strong>，因为看到网上很多教程没有提到要开启，显然是Micro更新过快的锅。。。。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">micro_v2.exe --registry=etcd api --enable_rpc</span><br></pre></td></tr></table></figure>\n<p>接下来就是访问了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request POST 'http://localhost:8080/rpc' \\</span><br><span class=\"line\">--header 'Content-Type: application/json' \\</span><br><span class=\"line\">--data-raw '&#123;</span><br><span class=\"line\">    \"service\": \"micro.xxx.service.process_route\",</span><br><span class=\"line\">    \"method\": \"ProcessRoute.StoreProcessInfo\",</span><br><span class=\"line\">    \"request\": &#123;</span><br><span class=\"line\">        \"xxxx\": \"xxx\",</span><br><span class=\"line\">        \"xxx\": \"xxx\",</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;'</span><br></pre></td></tr></table></figure>\n<p><code>service</code>和<code>method</code>如何去确定，若没有经验的情况下，可以使用我的办法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">micro --registry=etcd api --enable_rpc</span><br><span class=\"line\"></span><br><span class=\"line\">./etcdctl get \"\" --prefix</span><br></pre></td></tr></table></figure>\n<p>随便找一个去看一下就好了。</p>\n<h3><span id=\"proto文件兼容其他tag\">PROTO文件兼容其他tag</span></h3>\n<p>使用工具：<a href=\"https://github.com/favadi/protoc-go-inject-tag\" target=\"_blank\" rel=\"noopener\">https://github.com/favadi/protoc-go-inject-tag</a> 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/favadi/protoc-go-inject-tag</span><br></pre></td></tr></table></figure>\n<p>Example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// file: test.proto</span><br><span class=\"line\">syntax = &quot;proto3&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">package pb;</span><br><span class=\"line\"></span><br><span class=\"line\">message IP &#123;</span><br><span class=\"line\">  // @inject_tag: valid:&quot;ip&quot;</span><br><span class=\"line\">  string Address = 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Generate with protoc command as normal.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc --go_out=. test.proto</span><br></pre></td></tr></table></figure>\n<p>Run <code>protoc-go-inject-tag</code> with generated file <code>test.pb.go</code>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc-go-inject-tag -input=./test.pb.go</span><br></pre></td></tr></table></figure>\n<p>The custom tags will be injected to <code>test.pb.go</code>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type IP struct &#123;</span><br><span class=\"line\">\t// @inject_tag: valid:&quot;ip&quot;</span><br><span class=\"line\">\tAddress string `protobuf:&quot;bytes,1,opt,name=Address,json=address&quot; json:&quot;Address,omitempty&quot; valid:&quot;ip&quot;`</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"使用apollo配置中心\">使用Apollo配置中心</span></h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\tapollo <span class=\"string\">\"github.com/xxxmicro/go-micro-apollo-plugin\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">\te := json.NewEncoder()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := config.Load(apollo.NewSource(</span><br><span class=\"line\">\t\tapollo.WithAddress(<span class=\"string\">\"172.16.9.229\"</span>+<span class=\"string\">\":8080\"</span>),</span><br><span class=\"line\">\t\tapollo.WithNamespace(<span class=\"string\">\"application\"</span>),</span><br><span class=\"line\">\t\tapollo.WithAppId(<span class=\"string\">\"12345\"</span>),</span><br><span class=\"line\">\t\tapollo.WithCluster(<span class=\"string\">\"dev\"</span>),</span><br><span class=\"line\">\t\tsource.WithEncoder(e),</span><br><span class=\"line\">\t)); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Error(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := config.Get(<span class=\"string\">\"etcd\"</span>).Scan(&amp;etcdConfig); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Error(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := config.Get(<span class=\"string\">\"mysql\"</span>).Scan(&amp;mysqlConfig); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Error(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := config.Get(<span class=\"string\">\"redis\"</span>).Scan(&amp;redisConfig); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Error(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := config.Get(<span class=\"string\">\"zap\"</span>).Scan(&amp;zapConfig); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Error(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := config.Get(<span class=\"string\">\"jwt\"</span>).Scan(&amp;jwtConfig); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Error(err)</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"opentrace设置\">OpenTrace设置</span></h2>\n<p>Trace ID 在入口函数设置后，后续均一样。Span ID则标识每一个服务实例。</p>\n<p>其他服务，可通过此操作，从context中拿到trace，拿到后，可以使用Log，将一些信息打印到trace上。</p>\n<p>Web端：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"comment\">// 分布式追踪链路</span></span><br><span class=\"line\">\tt, io, err := tracer.NewTracer(<span class=\"string\">\"mu.micro.book.web.api.user\"</span>, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err.Error())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> io.Close()</span><br><span class=\"line\">\topentracing.SetGlobalTracer(t)</span><br><span class=\"line\"></span><br><span class=\"line\">\t.......</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//设置采样率</span></span><br><span class=\"line\">\tgin2micro.SetSamplingFrequency(<span class=\"number\">50</span>)</span><br><span class=\"line\">\trouter := gin.Default()</span><br><span class=\"line\">\tr := router.Group(<span class=\"string\">\"/user\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//添加Tracer中间件</span></span><br><span class=\"line\">\tr.Use(gin2micro.TracerWrapper)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Login</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tctx, ok := gin2micro.ContextWithSpan(c)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ok == <span class=\"literal\">false</span> &#123;</span><br><span class=\"line\">\t\tlog.Error(<span class=\"string\">\"get context err\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsp := opentracing.SpanFromContext(ctx)</span><br><span class=\"line\">\t<span class=\"comment\">// Get request ID for context</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> sc, ok := sp.Context().(jaeger.SpanContext); ok &#123;</span><br><span class=\"line\">\t\tfmt.Println(sc.TraceID().String())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t......</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 调用后台服务</span></span><br><span class=\"line\">\trsp, err := userClient.QueryUserByName(ctx, &amp;us.Request&#123;</span><br><span class=\"line\">\t\tUserName: c.Request.Form.Get(<span class=\"string\">\"userName\"</span>),</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Service端：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/opentracing/opentracing-go\"</span></span><br><span class=\"line\">\ttarceLog <span class=\"string\">\"github.com/opentracing/opentracing-go/log\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *Service)</span> <span class=\"title\">QueryUserByName</span><span class=\"params\">(ctx context.Context, req *s.Request, rsp *s.Response)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    sp := opentracing.SpanFromContext(ctx)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> sc, ok := sp.Context().(jaeger.SpanContext); ok &#123;</span><br><span class=\"line\">        fmt.Println(sc.TraceID().String(), sc)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sp.LogFields(</span><br><span class=\"line\">        tarceLog.String(<span class=\"string\">\"event\"</span>, <span class=\"string\">\"soft error\"</span>),</span><br><span class=\"line\">        tarceLog.String(<span class=\"string\">\"type\"</span>, <span class=\"string\">\"cache timeout\"</span>),</span><br><span class=\"line\">        tarceLog.Int(<span class=\"string\">\"waited.millis\"</span>, <span class=\"number\">1500</span>))</span><br><span class=\"line\">\t</span><br><span class=\"line\">    .......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"web设置prometheus监控\">Web设置Prometheus监控</span></h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promMonitor := monitor.NewPrometheusMonitor(<span class=\"string\">\"user_web\"</span>, <span class=\"string\">\"user\"</span>)</span><br><span class=\"line\">r.Use(promMonitor.PromMiddleware())</span><br><span class=\"line\"></span><br><span class=\"line\">r.POST(<span class=\"string\">\"/login\"</span>, handler.Login)</span><br><span class=\"line\"></span><br><span class=\"line\">router.GET(<span class=\"string\">\"/metrics\"</span>, gin.WrapH(promhttp.Handler()))</span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<h2><span id=\"获取其他服务的信息\">获取其他服务的信息</span></h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">micReg registry.Registry</span><br><span class=\"line\"></span><br><span class=\"line\">services, err := micReg.GetService(appName)</span><br><span class=\"line\">log.Info(services[<span class=\"number\">0</span>].Version)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// level=info latest</span></span><br></pre></td></tr></table></figure>\n<p><code>etcd.go</code>中：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GetService(xxxxxxxxxxxxx)</span><br><span class=\"line\">.....</span><br><span class=\"line\">\trsp, err := e.client.Get(ctx, servicePath(name)+<span class=\"string\">\"/\"</span>, clientv3.WithPrefix(), clientv3.WithSerializable())</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">........</span><br></pre></td></tr></table></figure>\n<p><code>WithPrefix</code>，将会把传入的<code>name</code>作为前缀的key全部取下来，所以<code>GetService</code>才会返回的是一个数组。</p>\n<p>另外，<code>ListServices</code>则是把服务信息全部返回。</p>\n<p>Micro工具获取服务信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">micro.exe --registry=etcd --registry_address=\"192.xx.xx.xxx:2379\" get service \"xxxxxxxxxxxx\"</span><br></pre></td></tr></table></figure>\n<h2><span id=\"教程中的问题\">教程中的问题：</span></h2>\n<h3><span id=\"一-版本更迭web-handler无法使用\">一、版本更迭，web handler无法使用</span></h3>\n<p>造成问题，micro api，POST /user/login HTTP/1.1&quot; 500 0。问题是使用了最新的稳定版本micro。</p>\n<p><s>micro 2.9.3没有<code>web</code> handler，开发组尚未解决。<a href=\"https://github.com/micro/go-micro/issues/1945\" target=\"_blank\" rel=\"noopener\">issue</a>。</s>  不是没有了，看代码，其实是cmd中没有添加而已。</p>\n<p>现在的解决方法就是，虽然使用<code>--type=web</code>创建项目：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">micro new --namespace=mu.micro.book --type=web --alias=user micro/user-web</span><br></pre></td></tr></table></figure>\n<p>代码修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">默认</span><br><span class=\"line\">web.Name(&quot;mu.micro.book.web.user&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">改为</span><br><span class=\"line\">web.Name(&quot;mu.micro.book.web.api.user&quot;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，这里这个<code>api</code>是必须的，查看代码会发现api模式代理rpc、http、proxy、web等，默认创建的只有web，显然是V1版本时代的产物，这里可以修改生成代码器将其改掉。</p>\n</blockquote>\n<p>micro启动命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">micro --registry=etcd --api_namespace=mu.micro.book.web api --handler=web</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>解决方法参考☞<a href=\"https://github.com/micro/micro/issues/944#issuecomment-646472062\" target=\"_blank\" rel=\"noopener\">issue</a>。</p>\n</blockquote>\n<h3><span id=\"web-http代理\">Web HTTP代理</span></h3>\n<p><code>micro api --handler=web</code>。</p>\n<blockquote>\n<p>web handler是一个基于服务发现和web socket支持的http反向代理。</p>\n<ul>\n<li>Content-Type: Any</li>\n<li>Body: Any</li>\n<li>正向格式:HTTP反向代理，包括web sockets。</li>\n<li>Path: <code>/[service]</code></li>\n<li>解析器:路径用于解析服务名称。</li>\n<li>配置:Flag <code>—handler=web</code> 或 <code>MICRO_API_HANDLER=web</code></li>\n</ul>\n</blockquote>\n<p>上面这段需要怎么理解呢？</p>\n<p>例如Service Name为<code>micro.cloud.api.test</code>。</p>\n<p>启动micro进行代理：<code>micro_v2.exe --api_namespace=micro.cloud api --handler=web</code>.</p>\n<p>此时，凡是<code>/test</code>前缀的HTTP请求，均从此服务请求，同理，此服务其他不是<code>/test</code>前缀，通过Micro则访问不到。</p>\n<blockquote>\n<p>此时这个service，不能是下划线形式，例如，test_one。</p>\n</blockquote>\n<h3><span id=\"二-trace部分http2micro无法使用\">二、Trace部分HTTP2Micro无法使用</span></h3>\n<p>按照原生HTTP方式注入Trace，没有能够完整使用，使用Gin或者Echo第三方Web库，利用其插件形式进行使用，则可以正常使用Trace服务。</p>\n<h3><span id=\"三-设置prometheus监控\">三、设置Prometheus监控</span></h3>\n<p>需上文提到的方式，设置Gin框架的监控，按照网上操作，无法监视到接口访问。</p>\n<h2><span id=\"组件环境\">组件环境</span></h2>\n<p>ETCD:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p <span class=\"number\">2379</span>:<span class=\"number\">2379</span> -p <span class=\"number\">2380</span>:<span class=\"number\">2380</span> --name etcd gcr.io/etcd-development/etcd:v3<span class=\"number\">.4</span><span class=\"number\">.13</span></span><br></pre></td></tr></table></figure>\n<p>MySQL:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -itd --name mysql-test -p <span class=\"number\">3306</span>:<span class=\"number\">3306</span> -e MYSQL_ROOT_PASSWORD=<span class=\"number\">123456</span> mysql</span><br></pre></td></tr></table></figure>\n<p>Redis：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull redis:latest</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -itd --name redis -p 6379:6379 redis</span><br></pre></td></tr></table></figure>\n<p>Jaeger：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name jaeger -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 -p 5775:5775/udp -p 6831:6831/udp -p 6832:6832/udp -p 5778:5778 -p 16686:16686 -p 14268:14268 -p 9411:9411 jaegertracing/all-in-one:1.6</span><br></pre></td></tr></table></figure>\n<p>Promethes</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prometheus.yml</span><br><span class=\"line\">global:</span><br><span class=\"line\">  scrape_interval:     15s # By default, scrape targets every 15 seconds.</span><br><span class=\"line\"></span><br><span class=\"line\">  # Attach these labels to any time series or alerts when communicating with</span><br><span class=\"line\">  # external systems (federation, remote storage, Alertmanager).</span><br><span class=\"line\">  external_labels:</span><br><span class=\"line\">    monitor: &apos;codelab-monitor&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># A scrape configuration containing exactly one endpoint to scrape:</span><br><span class=\"line\"># Here it&apos;s Prometheus itself.</span><br><span class=\"line\">scrape_configs:</span><br><span class=\"line\">  # The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span><br><span class=\"line\">  - job_name: &apos;prometheus&apos;</span><br><span class=\"line\">    # Override the global default and scrape targets from this job every 5 seconds.</span><br><span class=\"line\">    scrape_interval: 5s</span><br><span class=\"line\">    static_configs:</span><br><span class=\"line\">      - targets: [&apos;10.2.43.4:8088&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">targets : 作为拉取数据的地址。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d -p 9090:9090 -v C:/tmp/prometheus.yml:/etc/prometheus/prometheus.yml --name prometheus prom/prometheus</span><br></pre></td></tr></table></figure>\n<p>Grafana</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 3000:3000 --name grafana grafana/grafana</span><br></pre></td></tr></table></figure>\n<h2><span id=\"web和srv的区别\">Web和Srv的区别</span></h2>\n<blockquote>\n<p><a href=\"https://github.com/micro-in-cn/questions/issues/45\" target=\"_blank\" rel=\"noopener\">web.NewService 和 micro.NewService有啥区别</a></p>\n<p>功能上：web打开的Http服务，micro打开的RPC/API服务<br>\n联系：为了让web服务能像RPC/API一样融合到Micro的微服务体系中，web.Micro做了以下事情：</p>\n<ol>\n<li>与RPC一样注册服务</li>\n<li>可以复用Service的配置，声明micro.client调用RPC</li>\n<li>client为http.client，非micro.client，故而无法直接使用web.client调用micro.service</li>\n<li>web的Transport并非micro.Transport，所以micro的RPC服务无法直接调用web.service，需要使用http.client调用。</li>\n</ol>\n<p>一句话总结：web面向http，可以向异构服务提供服务，rpc则是纯内部服务。</p>\n</blockquote>\n<h2><span id=\"学习资料\">学习资料</span></h2>\n<p><a href=\"https://github.com/micro-in-cn/tutorials\" target=\"_blank\" rel=\"noopener\">Micro 中国站教程系列</a></p>\n<p><a href=\"https://github.com/Allenxuxu/microservices\" target=\"_blank\" rel=\"noopener\">microservices</a></p>\n<p><a href=\"https://github.com/shumintao/sass-web-server\" target=\"_blank\" rel=\"noopener\">sass-web-server</a></p>\n<p><a href=\"https://juejin.cn/post/6844903780736057357\" target=\"_blank\" rel=\"noopener\">牌类游戏使用微服务重构笔记（二）: micro框架简介:micro toolkit</a></p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go Micro","slug":"Go-Micro","permalink":"chunlife.top/tags/Go-Micro/"},{"name":"微服务","slug":"微服务","permalink":"chunlife.top/tags/微服务/"},{"name":"OpenTrace","slug":"OpenTrace","permalink":"chunlife.top/tags/OpenTrace/"},{"name":"Prometheus","slug":"Prometheus","permalink":"chunlife.top/tags/Prometheus/"}]},{"title":"win10 Linux子系统使用docker","date":"2020-10-20T02:32:35.000Z","path":"2020/10/20/win10-Linux子系统使用docker/","content":"<p>在WSL中，想使用docker，之前是无法做到的，每次都只能是在Windows环境中使用，但今天突然发现，Windows竟然可以让子系统和docker共享一个docker使用了，Linux中使用，Docker Desktop中可以查看。</p>\n<a id=\"more\"></a>\n<p>这里有些前提：</p>\n<ul>\n<li>Windows 10, version 1903；</li>\n<li>启动WSL 2特性；<a href=\"https://docs.microsoft.com/en-us/windows/wsl/install-win10\" target=\"_blank\" rel=\"noopener\">Microsoft documentation</a>.</li>\n<li>下载<a href=\"https://docs.microsoft.com/windows/wsl/wsl2-kernel\" target=\"_blank\" rel=\"noopener\">Linux kernel update package</a>.</li>\n</ul>\n<p>其余的步骤，则可以参考：<a href=\"https://docs.docker.com/docker-for-windows/wsl/\" target=\"_blank\" rel=\"noopener\">网页</a>。</p>\n","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"docker","slug":"docker","permalink":"chunlife.top/tags/docker/"},{"name":"WSL","slug":"WSL","permalink":"chunlife.top/tags/WSL/"},{"name":"Linux子系统","slug":"Linux子系统","permalink":"chunlife.top/tags/Linux子系统/"}]},{"title":"golang实现的zip实用库","date":"2020-09-23T07:57:10.000Z","path":"2020/09/23/golang实现的zip实用库/","content":"<p>之前写过一篇关于解压缩的博文，<a href=\"https://chunlife.top/2019/03/20/zip%E8%A7%A3%E5%8E%8B-%E5%8E%8B%E7%BC%A9/\">压缩zip和解压缩unzip</a>，但显然其并不是很好用，这里发现之前的Go库管理工具<a href=\"https://github.com/gpmgo/gopm\" target=\"_blank\" rel=\"noopener\">gopm</a>中，实现的解压缩包，算是封装的很好用的zip包了。（这个库是无闻大佬写的，感谢！！！）</p>\n<a id=\"more\"></a>\n<p>这里是<a href=\"https://github.com/unknwon/cae/blob/master/README_ZH.md\" target=\"_blank\" rel=\"noopener\">地址</a>。</p>\n<blockquote>\n<p>包 <code>zip</code>(<a href=\"http://gowalker.org/github.com/unknwon/cae/zip\" target=\"_blank\" rel=\"noopener\">Go Walker</a>) 和 <code>tz</code>(<a href=\"http://gowalker.org/github.com/unknwon/cae/tz\" target=\"_blank\" rel=\"noopener\">Go Walker</a>) 都允许你轻易的读取或写入 ZIP/TAR.GZ 压缩档案和其内部文件。</p>\n<ul>\n<li>特性：\n<ul>\n<li>将任意位置的文件或目录加入档案，没有一对一的操作限制。</li>\n<li>只解压部分文件，而非一次性解压全部。</li>\n<li>将数据以流的形式直接写入 <code>io.Writer</code> 而不需经过文件系统的存储。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>实例代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//err := cae.Copy(\"1.txt_bak\", \"./ones/1.txt\")</span></span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Println(err)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tzipArchive, err := zip.Create(<span class=\"string\">\"one.zip\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// \"/one/test\"，在压缩包所处的位置</span></span><br><span class=\"line\">\terr = zipArchive.AddDir(<span class=\"string\">\"/one/test\"</span>, <span class=\"string\">\"E:\\\\Project\\\\testCae\\\\ones\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">// 把之前添加的文件或文件夹都进行落盘操作</span></span><br><span class=\"line\">\terr = zipArchive.Flush()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// close里头同样调用了Flush()</span></span><br><span class=\"line\">\terr = zipArchive.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建一个Zip的实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 打开一个ZIP包，选择打开的方式[os.O_RDWR|os.O_CREATE|os.O_TRUNC]，返回zip句柄</span><br><span class=\"line\">func OpenFile(name string, flag int, perm os.FileMode) (*ZipArchive, error) &#123;</span><br><span class=\"line\">   z := new(ZipArchive)</span><br><span class=\"line\">   err := z.Open(name, flag, perm)</span><br><span class=\"line\">   return z, err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 新建zip句柄</span><br><span class=\"line\">func Create(name string) (*ZipArchive, error) &#123;</span><br><span class=\"line\">   os.MkdirAll(path.Dir(name), os.ModePerm)</span><br><span class=\"line\">   return OpenFile(name, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0666)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 以只读的方式打开zip包</span><br><span class=\"line\">func Open(name string) (*ZipArchive, error) &#123;</span><br><span class=\"line\">   return OpenFile(name, os.O_RDONLY, 0)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>获得句柄后，进行zip相关操作。</p>\n<p>库中有一个中间函数<code>type HookFunc func(string, os.FileInfo) error</code>，传入的参数是filename，和，file的信息。用于在压缩或者解压每一个文件时，若需要做相应的处理，则传入这个自定义函数即可。</p>\n<p>详细到每个函数使用，可以直接查看<a href=\"https://github.com/unknwon/cae/blob/master/zip/zip_test.go\" target=\"_blank\" rel=\"noopener\">zip_test.go</a>。更为详细了解整个操作。</p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"zip","slug":"zip","permalink":"chunlife.top/tags/zip/"}]},{"title":"Github Pages 和 Coding Pages双绑定域名，方便国内外访问","date":"2020-09-18T07:41:16.000Z","path":"2020/09/18/Github-Pages-和-Coding-Pages双绑定域名，方便国内外访问/","content":"<p>不知道最近怎么了，GitHub Pages一点都访问不到，必须搭梯子，以前还觉得没必要挂在国内，现在不得不找个国内的平台也挂接一下页面才行了，由于我的域名是在阿里购买的，不过操控台应该是大差不差的，所以没啥区别：</p>\n<p>这里主要是域名解析相关的，至于coding和GitHub上的搭建静态页面应该是很多的，<a href=\"https://github.com/HarleyWang93/blog/issues/1\" target=\"_blank\" rel=\"noopener\">Hexo + GitHub (Coding) Pages 搭建博客</a>。</p>\n<a id=\"more\"></a>\n<p>主要的设置就是如图上所示：</p>\n<p><img src=\"image-20200918154704469.png\" alt=\"image-20200918154704469\"></p>\n<p>标红线的位置，是Coding验证网站所有人的解析记录，因为我是先添加的GitHub解析，coding检测到网站已被绑定，所以要求添加一条<code>txt</code>的解析记录。</p>\n<p>另外，如果coding报错：<code>urn:acme:error:unauthorized: Invalid response from http://xxxxx/</code>。</p>\n<p>则<a href=\"https://blog.csdn.net/qq_36759224/article/details/100890801\" target=\"_blank\" rel=\"noopener\">解决方法</a>如下：</p>\n<p>先去域名 DNS 把 GitHub 的解析暂停掉，然后再重新申请 SSL 证书，等待申请成功再恢复 GitHub 的解析。</p>\n<p><strong>Now</strong></p>\n<blockquote>\n<p>我设置的解析中，将GitHub的解析线路设置为<code>境外</code>，所以只要是大陆地区就无法访问，额，这是我脑阔有问题，我中间尝试了CF、Gitee、腾讯的存储服务，搞了一系列花里胡哨的操作，尴尬，算是静态页面各类操作都试过了，不过我的感受是，基本还是GitHub Pages最为方便且不要钱，架上CF加速（虽然大陆还是不怎么快），强行挽尊，我测试下来，现在单GitHub速度还可以，至于收录到百度或者国内的搜索引擎，我这边需求不大，主要是国内即使是Gitee，体验都不好，希望Gitee赚钱后把自动部署给免费了。</p>\n</blockquote>\n","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"搭建博客","slug":"搭建博客","permalink":"chunlife.top/tags/搭建博客/"},{"name":"github pages","slug":"github-pages","permalink":"chunlife.top/tags/github-pages/"},{"name":"coding Pages","slug":"coding-Pages","permalink":"chunlife.top/tags/coding-Pages/"}]},{"title":"优先级队列","date":"2020-09-18T02:51:34.000Z","path":"2020/09/18/优先级队列和时间轮/","content":"<p>对于优先级队列和时间轮的了解，是始于一个issue：<a href=\"https://github.com/hashicorp/golang-lru/pull/68\" target=\"_blank\" rel=\"noopener\">Add expirable LRU implementation</a>。</p>\n<a id=\"more\"></a>\n<p>针对一个需要周期判断是否过期的List时，开发组给出的意见是，使用优先级队列。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sync.Mutex</span><br><span class=\"line\">items     <span class=\"keyword\">map</span>[<span class=\"keyword\">interface</span>&#123;&#125;]*list.Element</span><br><span class=\"line\">evictList *list.List</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/hashicorp/golang-lru/pull/68#discussion_r443223151\" target=\"_blank\" rel=\"noopener\">https://github.com/hashicorp/golang-lru/pull/68#discussion_r443223151</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Rather than using a list where you have to keep scanning through, I think you&apos;d be better off using a priority queue. See https://github.com/hashicorp/vault/tree/master/sdk/queue and the Golang doc it links to. That way you simply add items to the queue where the sorting is by expiration time and only have to keep track of the first item in the queue in terms of expiration. This would also let you get rid of Close; a simple one-off timer would be the only goroutine you need to keep checking the first element.</span><br><span class=\"line\"></span><br><span class=\"line\">与其使用一个你必须不停遍历的List，我认为你最好使用一个优先级队列。查看https://github.com/hashicorp/vault/tree/master/sdk/queue及其链接到的Golang文档。这样你只需按到期时间的顺序添加到队列中，并且只需要监听队列中的第一项。`这也可以让你不用close`(不懂！！！); 开启一个goroutine，设置一个简单的计时器不断检查第一个item的到期时间。</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/hashicorp/vault/tree/master/sdk/queue\" target=\"_blank\" rel=\"noopener\">priority_queue</a>，优先级队列是借助的官方库实现的堆(<code>container/heap</code>)来实现的。</p>\n<blockquote>\n<p>关于这个包，可以参考：<a href=\"https://ieevee.com/tech/2018/01/29/go-heap.html\" target=\"_blank\" rel=\"noopener\">Golang: 详解container/heap</a>。</p>\n</blockquote>\n<p>为什么使用优先级队列，<code>issue</code>中其实说的很清楚，因为在维护一个任务队列时，需要选择一定的时间间隔去轮询整个列表，任务是否到期，这个轮询时间也是一个开销，可能发生在你轮询时，任务到期时间已经过去了，就造成了任务时间不准的现象。</p>\n<p>但优先级队列可以先按照时间先后，选出最接近当前时间的任务，再之后的操作中，我们只需要先关注这个任务的时间是否到期即可，这样就可以优化一下前面所提到的问题，提高执行效率。</p>\n<hr>\n<p>另外，在https://github.com/robfig/cron项目中，看到很多开发者对作者提议修改list为优先级队列，或者是，时间轮，作者的意见是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/robfig/cron/issues/236#issuecomment-570744625</span><br><span class=\"line\"></span><br><span class=\"line\">I don&apos;t believe that the extra complexity is necessary. It&apos;s hard to imagine a system with so many scheduled tasks that sorting them takes a measurable amount of time. Tasks can not be activated more often than once a second at the most, so I don&apos;t see any reason to optimize this case. Thanks for your interest</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>作者的意思是，基本上，不会出现巨大量的定时任务，而且任务一秒钟最多只能激活一次，没必要花费这个功夫把代码搞复杂。</p>\n</blockquote>\n<p>我倒是理解作者的意思，这在他看来并不是性能瓶颈，没有必要做这些修改或过度的优化操作；</p>\n<p>在我看的另一个博客中（<a href=\"http://xiaorui.cc/archives/6955\" target=\"_blank\" rel=\"noopener\">技术分享之golang构建分布式任务系统</a>），作者采用的是一种宽范围的定时器。</p>\n<blockquote>\n<p>高性能定时器的实现，这里没有再使用时间轮，而是采用类似rocketmq定时器的实现。根据不同时间间隔的定时器放到不同的队列里。由于定时器的需求在于任务超时控制及数据清理，所以定时器的精度可粗化。</p>\n<p><img src=\"shark_v1%E7%9A%84%E5%89%AF%E6%9C%AC-21-812020.jpeg\" alt=\"img\"></p>\n</blockquote>\n","categories":[{"name":"算法","slug":"算法","permalink":"chunlife.top/categories/算法/"}],"tags":[{"name":"priority queue - time wheel","slug":"priority-queue-time-wheel","permalink":"chunlife.top/tags/priority-queue-time-wheel/"}]},{"title":"多网卡，多IP，如何拿到真实IP地址（主IP）","date":"2020-08-12T08:30:36.000Z","path":"2020/08/12/多网卡，多IP，如何拿到真实IP地址（主IP）/","content":"<p>Go语言中，获取IP地址一般操作是：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取本机网卡IP</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getLocalIP</span><span class=\"params\">()</span> <span class=\"params\">(ipv4 <span class=\"keyword\">string</span>, err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\taddrs   []net.Addr</span><br><span class=\"line\">\t\taddr    net.Addr</span><br><span class=\"line\">\t\tipNet   *net.IPNet <span class=\"comment\">// IP地址</span></span><br><span class=\"line\">\t\tisIpNet <span class=\"keyword\">bool</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\">\t<span class=\"comment\">// 获取所有网卡</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> addrs, err = net.InterfaceAddrs(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 取第一个非lo的网卡IP</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, addr = <span class=\"keyword\">range</span> addrs &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这个网络地址是IP地址: ipv4, ipv6</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ipNet, isIpNet = addr.(*net.IPNet); isIpNet &amp;&amp; !ipNet.IP.IsLoopback() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 跳过IPV6</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ipNet.IP.To4() != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tipv4 = ipNet.IP.String() <span class=\"comment\">// 192.168.1.1</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = ERR_NO_LOCAL_IP_FOUND</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>这里会有一个问题，在多网卡（例如有虚拟网卡的情况下），有时会取到无法使用的IP地址，这样程序启动会报错。</p>\n<p><strong>这里出现的无法使用的IP地址是什么呢？</strong></p>\n<p>我这里指代为<code>链路本地地址</code>，<code>link-local unicast address</code>。</p>\n<blockquote>\n<p>维基百科：</p>\n<p><strong>链路本地地址（Link-local address），又称链接本地地址</strong>是<a href=\"https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C\" target=\"_blank\" rel=\"noopener\">计算机网络</a>中一类特殊的地址， 它仅供于在<a href=\"https://zh.wikipedia.org/wiki/%E7%BD%91%E6%AE%B5\" target=\"_blank\" rel=\"noopener\">网段</a>，或<a href=\"https://zh.wikipedia.org/wiki/%E5%B9%BF%E6%92%AD%E5%9F%9F\" target=\"_blank\" rel=\"noopener\">广播域</a>中的主机相互通信使用。这类主机通常不需要外部互联网服务，仅有主机间相互通讯的需求。</p>\n<p><a href=\"https://zh.wikipedia.org/wiki/IPv4\" target=\"_blank\" rel=\"noopener\">IPv4</a>链路本地地址定义在<strong>169.254.0.0/16</strong>地址块。 <a href=\"https://zh.wikipedia.org/wiki/IPv6\" target=\"_blank\" rel=\"noopener\">IPv6</a>定义在<strong>fe80::/10</strong>地址块。</p>\n</blockquote>\n<p>所以，虚拟网卡属于这一类。我们需要排除这一类IP地址，我们这里需要判断net flag，就像我们判断<code>IsLoopback</code>一样。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ipNet, isIpNet = addr.(*net.IPNet); isIpNet &amp;&amp; !ipNet.IP.IsLoopback() &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 改为</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ipNet, isIpNet = addr.(*net.IPNet); isIpNet &amp;&amp; !ipNet.IP.IsLoopback() &amp;&amp; !ipnet.IP.IsLinkLocalUnicast() &#123;</span><br></pre></td></tr></table></figure>\n<p>将属于链路本地地址的IP，全部拔除。</p>\n<hr>\n<p><strong>若是需要获取到机器现在使用的主IP地址，这需要怎么获得呢？</strong></p>\n<p>这里可以使用以下程序获取到当前机器的主IP，由于使用的是<code>UDP</code>协议，不会需要<code>握手</code>，所以不需要担心访问不到<code>8.8.8.8:8</code>（或者这样说，这里随便填一个IP地址都可以，反正不会去访问）。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn, err := net.Dial(<span class=\"string\">\"udp\"</span>, <span class=\"string\">\"8.8.8.8:8\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\">localAddr := conn.LocalAddr().(*net.UDPAddr)</span><br><span class=\"line\">fmt.Println(localAddr.String())</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"get ip","slug":"get-ip","permalink":"chunlife.top/tags/get-ip/"},{"name":"multiple network cards - multiple IP - Go","slug":"multiple-network-cards-multiple-IP-Go","permalink":"chunlife.top/tags/multiple-network-cards-multiple-IP-Go/"}]},{"title":"启动server，自动监听可用端口","date":"2020-08-03T03:38:20.000Z","path":"2020/08/03/启动server，自动监听可用端口/","content":"<p>当程序不指定server端口时，server需要自动监听一个可用端口进行启动，这样的需求能实现吗？</p>\n<p>答案肯定是可以的。</p>\n<a id=\"more\"></a>\n<p>传入的地址为：<code>:0</code>，即可自动寻找可用端口进行监听。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlistener, err := net.Listen(<span class=\"string\">\"tcp4\"</span>, <span class=\"string\">\"localhost:0\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Panic(<span class=\"string\">\"server start error :\"</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> listener.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(listener.Addr().String())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>假如，我想在<code>gin</code>框架上这样操作呢？这样也是可行的，只不过你会发现，我们无法打印出获取的端口号。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\trouter := gin.Default()</span><br><span class=\"line\">\thttp.ListenAndServe(<span class=\"string\">\"localhost:0\"</span>, router)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那我们可以自己创建Listen，不使用库。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">\tln, _ := net.Listen(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\"localhost:0\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t_, port, _ := net.SplitHostPort(ln.Addr().String())</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Listening on port\"</span>, port, ln.Addr().String())</span><br><span class=\"line\"></span><br><span class=\"line\">\thttp.Serve(ln, r)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"net listen","slug":"net-listen","permalink":"chunlife.top/tags/net-listen/"},{"name":"auto find port - Go","slug":"auto-find-port-Go","permalink":"chunlife.top/tags/auto-find-port-Go/"}]},{"title":"使用ETCD官方提供的API实现分布式锁","date":"2020-08-01T13:43:15.000Z","path":"2020/08/01/使用ETCD的分布式锁/","content":"<p>此文的目的是我在使用etcd分布式锁的一些记录。</p>\n<a id=\"more\"></a>\n<h2><span id=\"简单锁\">简单锁</span></h2>\n<p>此前了解到使用etcd分布式锁，是通过一个课程，这里是代码：<a href=\"https://github.com/owenliang/crontab/blob/master/worker/JobLock.go\" target=\"_blank\" rel=\"noopener\">JobLock.go</a>。</p>\n<p>大致流程是这样的（如何自己来创建一把锁的逻辑也就是这样了）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 尝试上锁</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(jobLock *JobLock)</span> <span class=\"title\">TryLock</span><span class=\"params\">()</span> <span class=\"params\">(err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 1, 创建租约(5秒)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 2, 自动续租</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 3, 处理续租应答的协程</span></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 自动续租的应答</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 4, 创建事务txn</span></span><br><span class=\"line\">\t<span class=\"comment\">// 锁路径</span></span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">// 5, 事务抢锁</span></span><br><span class=\"line\">\t<span class=\"comment\">// 提交事务</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 6, 成功返回, 失败释放租约</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 抢锁成功</span></span><br><span class=\"line\"></span><br><span class=\"line\">FAIL:</span><br><span class=\"line\">\t<span class=\"comment\">// 取消自动续租</span></span><br><span class=\"line\">\t<span class=\"comment\">//  释放租约</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"etcd-concurrency\">ETCD Concurrency</span></h2>\n<p>但我到现在才知道，原来etcd golang库里头已经把这部分给实现了，<a href=\"https://godoc.org/github.com/coreos/etcd/clientv3/concurrency\" target=\"_blank\" rel=\"noopener\">Concurrency</a> ，什么<code>TryLock</code> \\ <code>Lock</code>都给实现了。</p>\n<p>创建租约，自动续约的操作，则是函数<code>concurrency.NewSession</code>直接给封装好了。</p>\n<p>不过这里锁的还有点不同，课程中的锁，是将一个key当作一把锁，大家去抢这把锁。</p>\n<p>而库中实现的是将<code>key prefix</code>作为一把锁。</p>\n<p>所以，在调用lock时，租约session需要为每把锁都创建一个，否则会报错：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s1, err := concurrency.NewSession(cli, concurrency.WithTTL(<span class=\"number\">5</span>))</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Fatal(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> s1.Close()</span><br><span class=\"line\">m1 := concurrency.NewMutex(s1, <span class=\"string\">\"/my-lock/\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">s2, err := concurrency.NewSession(cli, concurrency.WithTTL(<span class=\"number\">5</span>))</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Fatal(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> s2.Close()</span><br><span class=\"line\">m1 := concurrency.NewMutex(s2, <span class=\"string\">\"/my-lock/\"</span>)</span><br></pre></td></tr></table></figure>\n<h3><span id=\"trylocklock\">TryLock\\Lock</span></h3>\n<p>可以看到这里有两个上锁方式：<code>TryLock</code> \\ <code>Lock</code>。</p>\n<p><code>TryLock</code>比<code>Lock</code>，多调用了一个<code>waitDeletes </code>函数，这个函数模拟了一种公平的先来后到的排队逻辑，等待所有当前比当前 key 的 revision 小的 key 被删除后，锁释放后才返回。</p>\n<p>另外此包还封装了一个<code>sync.Locker</code>的接口函数，提供我们使用：<code>clientv3\\concurrency</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> lockerMutex <span class=\"keyword\">struct</span>&#123; *Mutex &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lm *lockerMutex)</span> <span class=\"title\">Lock</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tclient := lm.s.Client()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := lm.Mutex.Lock(client.Ctx()); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lm *lockerMutex)</span> <span class=\"title\">Unlock</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tclient := lm.s.Client()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := lm.Mutex.Unlock(client.Ctx()); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewLocker creates a sync.Locker backed by an etcd mutex.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewLocker</span><span class=\"params\">(s *Session, pfx <span class=\"keyword\">string</span>)</span> <span class=\"title\">sync</span>.<span class=\"title\">Locker</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;lockerMutex&#123;NewMutex(s, pfx)&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<blockquote>\n<p>本文并未对源码，以及相关联知识进行延申的讲解，这里贴上我认为对ETCD分布式锁讲解的比较好的博客：<a href=\"https://pandaychen.github.io/2019/10/24/ETCD-DISTRIBUTED-LOCK/\" target=\"_blank\" rel=\"noopener\">Etcd 应用开发之分布式锁</a>。（博客中对<em>revision</em> 和 <em>CreateRevision</em> 似乎有些搅浑了，我后面查看代码时已改正）</p>\n</blockquote>\n<h2><span id=\"群体效应问题-2020年9月21日\">群体效应问题 2020年9月21日</span></h2>\n<p>在学习论文<code>ZooKeeper: Wait-free coordination for Internet-scale systems  </code>时，看到了<code>群体效应问题  </code>，简单理解就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果很多客户端等待锁，对这个锁的竞争就会很激烈，当锁释放时，仅仅有一个等待的客户端获得锁。</span><br></pre></td></tr></table></figure>\n<p>例如，在博客开头，我们实现的伪代码就是一种有<code>群体效应问题</code>的简单锁结构。而etcd中实现的锁则规避了这一问题。移除一个<code>锁</code>仅仅会唤起一个客户端抢锁，通过<code>先来先得</code>的概念，避免了群体效应。</p>\n<h3><span id=\"整体代码\">整体代码</span></h3>\n<p>这里结合着来看一下ETCD的代码：</p>\n<p><code>concurrency.NewSession</code>创建一个ETCD的租约，包含自动续租的操作；注意此处的<code>租约(lease)</code>每一次创建均不相同，所以即使是相同的程序，不同时间，每次使用的锁，也不是一样的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s, err := concurrency.NewSession(client, concurrency.WithTTL(<span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">m := concurrency.NewMutex(s, <span class=\"string\">\"/test/testTime\"</span>)</span><br><span class=\"line\">ctx, _ = context.WithCancel(context.TODO())</span><br><span class=\"line\">err = m.Lock(ctx)</span><br></pre></td></tr></table></figure>\n<p>大体明白了锁的操作，接下来深入源码来看看。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Mutex implements the sync Locker interface with etcd</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Mutex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\ts *Session</span><br><span class=\"line\"></span><br><span class=\"line\">\tpfx   <span class=\"keyword\">string</span>   <span class=\"comment\">// 锁的共同前缀 pfx，如 \"/service/lock/\"</span></span><br><span class=\"line\">\tmyKey <span class=\"keyword\">string</span>   <span class=\"comment\">// 当前持有锁的客户端的 leaseid 值（完整 Key 的组成为 pfx+\"/\"+leaseid）</span></span><br><span class=\"line\">\tmyRev <span class=\"keyword\">int64</span>    <span class=\"comment\">// revision，理解为当前持有锁的 Revision（修改数） 编号 或者是 CreateRevision</span></span><br><span class=\"line\">\thdr   *pb.ResponseHeader</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 例如：/test/lock + \"/\" </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewMutex</span><span class=\"params\">(s *Session, pfx <span class=\"keyword\">string</span>)</span> *<span class=\"title\">Mutex</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;Mutex&#123;s, pfx + <span class=\"string\">\"/\"</span>, <span class=\"string\">\"\"</span>, <span class=\"number\">-1</span>, <span class=\"literal\">nil</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lock locks the mutex with a cancelable context. If the context is canceled</span></span><br><span class=\"line\"><span class=\"comment\">// while trying to acquire the lock, the mutex tries to clean its stale lock entry.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Mutex)</span> <span class=\"title\">Lock</span><span class=\"params\">(ctx context.Context)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\ts := m.s</span><br><span class=\"line\">\tclient := m.s.Client()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 下面的 m.pfx 就是 prefix，是传进来的前缀，后面的 s.Lease() 会返回一个租约，是一个 int64 的整数，和 session 有关系</span></span><br><span class=\"line\">\t<span class=\"comment\">//mykex 先理解为是 / prefix/leaseid 这样的结构</span></span><br><span class=\"line\">\tm.myKey = fmt.Sprintf(<span class=\"string\">\"%s%x\"</span>, m.pfx, s.Lease())</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 这里定义一个 cmp 方法，比较上面 m.myKey 的 CreateRevision 是否为 0，等于 0 表示目前不存在该 key，需要执行 Put 操作，不等于 0 表示对应的 key 已经创建了，需要执行 Get 操作</span></span><br><span class=\"line\">\tcmp := v3.Compare(v3.CreateRevision(m.myKey), <span class=\"string\">\"=\"</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">// put self in lock waiters via myKey; oldest waiter holds lock</span></span><br><span class=\"line\">\tput := v3.OpPut(m.myKey, <span class=\"string\">\"\"</span>, v3.WithLease(s.Lease()))</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">// reuse key in case this session already holds the lock</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取key是否已设置成锁</span></span><br><span class=\"line\">\tget := v3.OpGet(m.myKey)</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">// fetch current holder to complete uncontended path with only one RPC</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取当前锁的真正持有者</span></span><br><span class=\"line\">\tgetOwner := v3.OpGet(m.pfx, v3.WithFirstCreate()...)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Txn 事务，判断 cmp 的条件是否成立，成立执行 Then，不成立执行 Else，最终执行 Commit()</span></span><br><span class=\"line\">\tresp, err := client.Txn(ctx).If(cmp).Then(put, getOwner).Else(get, getOwner).Commit()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// if true; (put, getOwner)</span></span><br><span class=\"line\">\tm.myRev = resp.Header.Revision</span><br><span class=\"line\">    <span class=\"comment\">// else if (get, getOwner)</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !resp.Succeeded &#123;</span><br><span class=\"line\">\t\tm.myRev = resp.Responses[<span class=\"number\">0</span>].GetResponseRange().Kvs[<span class=\"number\">0</span>].CreateRevision</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">// if no key on prefix / the minimum rev is key, already hold the lock</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取当前实际拿到锁的KEY</span></span><br><span class=\"line\">\townerKey := resp.Responses[<span class=\"number\">1</span>].GetResponseRange().Kvs</span><br><span class=\"line\">    <span class=\"comment\">// 比较如果当前没有人获得锁（第一次场景）</span></span><br><span class=\"line\">\t<span class=\"comment\">// 或者锁的 owner 的 CreateRevision 等于当前的 key 的 CreateRevision，则表示m.myKey即为拿到锁的key，不用新建，直接使用即可</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(ownerKey) == <span class=\"number\">0</span> || ownerKey[<span class=\"number\">0</span>].CreateRevision == m.myRev &#123;</span><br><span class=\"line\">\t\tm.hdr = resp.Header</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// wait for deletion revisions prior to myKey</span></span><br><span class=\"line\">\t<span class=\"comment\">// 走到这里代表没有获得锁，需要等待之前的锁被释放，即 CreateRevision 小于当前 CreateRevision 的 kv 被删除</span></span><br><span class=\"line\">    <span class=\"comment\">// 阻塞等待 Owner 释放锁</span></span><br><span class=\"line\">\thdr, werr := waitDeletes(ctx, client, m.pfx, m.myRev<span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"comment\">// release lock key if wait failed    </span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> werr != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tm.Unlock(client.Ctx())</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tm.hdr = hdr</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> werr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"withfirstcreate\">WithFirstCreate</span></h3>\n<p>此代码中<code>getOwner := v3.OpGet(m.pfx, v3.WithFirstCreate()...)</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// WithFirstCreate gets the key with the oldest creation revision in the request range.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WithFirstCreate</span><span class=\"params\">()</span> []<span class=\"title\">OpOption</span></span> &#123; <span class=\"keyword\">return</span> withTop(SortByCreateRevision, SortAscend) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// withTop gets the first key over the get's prefix given a sort order</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">withTop</span><span class=\"params\">(target SortTarget, order SortOrder)</span> []<span class=\"title\">OpOption</span></span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> []OpOption&#123;WithPrefix(), WithSort(target, order), WithLimit(<span class=\"number\">1</span>)&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// WithPrefix enables 'Get', 'Delete', or 'Watch' requests to operate</span></span><br><span class=\"line\"><span class=\"comment\">// on the keys with matching prefix. For example, 'Get(foo, WithPrefix())'</span></span><br><span class=\"line\"><span class=\"comment\">// can return 'foo1', 'foo2', and so on.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WithPrefix</span><span class=\"params\">()</span> <span class=\"title\">OpOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 返回所有满足 prefix 匹配的 key-value，和 etcdctl get key --prefix 功能一样</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(op *Op)</span></span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(op.key) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">         op.key, op.end = []<span class=\"keyword\">byte</span>&#123;<span class=\"number\">0</span>&#125;, []<span class=\"keyword\">byte</span>&#123;<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      op.end = getPrefix(op.key)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看到上面的代码，WithPrefix/WithSort，所以 getOwner 的具体执行效果是会把虽有以 lockkey 开头的 key-value 都拿到，且按照 CreateRevision <strong>升序</strong>排列，取第一个值，这个意思就很明白了，就是要拿到当前以 lockkey 为 prefix 的且 CreatereVision 最小的那个 key，就是目前已经拿到锁的 key;</p>\n<h3><span id=\"waitdeletes\">waitDeletes</span></h3>\n<p>再看看 waitDeletes 函数的行为, waitDeletes 模拟了一种公平的先来后到的排队逻辑，等待所有当前比当前 key 的 revision 小的 key 被删除后，锁释放后才返回。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">waitDeletes</span><span class=\"params\">(ctx context.Context, client *v3.Client, pfx <span class=\"keyword\">string</span>, maxCreateRev <span class=\"keyword\">int64</span>)</span> <span class=\"params\">(*pb.ResponseHeader, error)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 注意 WithLastCreate 和 WithMaxCreateRev 这两个特性</span></span><br><span class=\"line\">   getOpts := <span class=\"built_in\">append</span>(v3.WithLastCreate(), v3.WithMaxCreateRev(maxCreateRev))</span><br><span class=\"line\">   <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">      resp, err := client.Get(ctx, pfx, getOpts...)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(resp.Kvs) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> resp.Header, <span class=\"literal\">nil</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      lastKey := <span class=\"keyword\">string</span>(resp.Kvs[<span class=\"number\">0</span>].Key)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err = waitDelete(ctx, client, lastKey, resp.Header.Revision); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">waitDelete</span><span class=\"params\">(ctx context.Context, client *v3.Client, key <span class=\"keyword\">string</span>, rev <span class=\"keyword\">int64</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">   cctx, cancel := context.WithCancel(ctx)</span><br><span class=\"line\">   <span class=\"keyword\">defer</span> cancel()</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">var</span> wr v3.WatchResponse</span><br><span class=\"line\">   <span class=\"comment\">// wch 是个 channel，key 被删除后会往这个 chan 发数据</span></span><br><span class=\"line\">   wch := client.Watch(cctx, key, v3.WithRev(rev))</span><br><span class=\"line\">   <span class=\"keyword\">for</span> wr = <span class=\"keyword\">range</span> wch &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> _, ev := <span class=\"keyword\">range</span> wr.Events &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> ev.Type == mvccpb.DELETE &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err := wr.Err(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err := ctx.Err(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> fmt.Errorf(<span class=\"string\">\"lost watcher waiting for delete\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"etcd-分布式锁的步骤\">Etcd 分布式锁的步骤</span></h3>\n<p>分析完 concurrency 的主要代码，不难总结出用 Etcd 构造（公平式长期）分布式锁的一般流程如下：</p>\n<ol>\n<li>\n<p>假设锁的 name 为 /root/lockname，用来控制某个共享资源，concurrency 会自动将其转换为目录形式：/root/lockname/</p>\n</li>\n<li>\n<p>客户端 A 连接 Etcd，创建一个租约 Leaseid_A，并设置 TTL（以业务逻辑来定）, 以 /root/lockname 为前缀创建全局唯一的 key，该 key 的组织形式为 / root/lockname/{leaseid_A}；设置TXN<code>条件事务</code>：</p>\n<p><strong>判断条件</strong>：比较<code> /root/lockname/{leaseid_A}</code>的 CreateRevision 是否为 0：</p>\n<p><strong>等于 0 表示目前不存在该 key，Then(put, getOwner)</strong> ：客户端 A 将此 Key 绑定租约写入 Etcd，同时调用 TXN 事务查询写入的情况和具有相同前缀 / root/lockname / 的 CreateRevision的排序情况；后续直接返回此key相关信息；</p>\n<p><strong>不等于 0 表示对应的 key 已经创建了，Else(get, getOwner)</strong> ：以前缀 /root/lockname/ 读取 keyValue 列表（keyValue 中带有 key 对应的 CreateRevision），判断自己 key 的 CreateRevision是否为当前列表中最小的，如果是则认为获得锁；否则阻塞监听列表中前一个 CreateRevision比自己小的 key 的删除事件，一旦监听到删除事件或者因租约失效而删除的事件，则自己获得锁。</p>\n</li>\n<li>\n<p>执行业务逻辑，操作共享资源</p>\n</li>\n<li>\n<p>释放分布式锁，现网的程序逻辑需要实现在正常和异常条件下的释放锁的策略，如捕获 SIGTERM 后执行 Unlock，或者异常退出时，有完善的监控和及时删除 Etcd 中的 Key 的异步机制，避免出现 “死锁” 现象</p>\n</li>\n<li>\n<p>当客户端持有锁期间，其它客户端只能等待，为了避免等待期间租约失效，客户端需创建一个定时任务进行续约续期。如果持有锁期间客户端崩溃，心跳停止，Key 将因租约到期而被删除，从而锁释放，避免死锁</p>\n</li>\n</ol>\n","categories":[{"name":"分布式服务","slug":"分布式服务","permalink":"chunlife.top/categories/分布式服务/"}],"tags":[{"name":"etcd","slug":"etcd","permalink":"chunlife.top/tags/etcd/"},{"name":"distributed lock - 分布式锁","slug":"distributed-lock-分布式锁","permalink":"chunlife.top/tags/distributed-lock-分布式锁/"}]},{"title":"数据库操作不仅仅是CURD","date":"2020-07-09T07:37:01.000Z","path":"2020/07/09/数据库操作不仅仅是CURD/","content":"<p>在常见的数据库操作中，大多数业务都是<code>CURD</code>，公司业务，所属岗位都有可能造成这个问题，这些属于<code>OLTP</code>应用。</p>\n<p>而对应到现在，天级数据量数据库分析操作，替代大部分数据分析的代码，就是<code>OLAP</code>，直接使用<code>sql</code>语句进行逻辑操作。</p>\n<a id=\"more\"></a>\n<p>另外，因为操作都与公司业务是强相关的，需要关注公司业务是否还有发展空间，如果处于高速发展，或有潜力发展机会，这样是可以由浅入深的学习到更强的<code>SQL</code>技术的。即使是找工作，也不应该是朝着某项技术去找，而是应该去找已经发展好的，潜力大的，已经成型的，进去后去学他们的技术。对着技术找，很容易出现，进去后发现你想学的一般般的，没啥意思；要不就是，技术很复杂，很难搞。<code>——受前辈启发</code></p>\n<p>可以学习一下这本书，对<code>OLAP</code>有一定的概念：<a href=\"https://www.linuxidc.com/Linux/2017-03/141517.htm\" target=\"_blank\" rel=\"noopener\">SQL必知必会（第4版）清晰PDF文字版</a>。</p>\n","categories":[{"name":"DB","slug":"DB","permalink":"chunlife.top/categories/DB/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"chunlife.top/tags/mysql/"}]},{"title":"errgroup,对一组子任务goroutine的同步,错误取消功能","date":"2020-07-08T02:24:27.000Z","path":"2020/07/08/errgroup-对一组子任务goroutine的同步-错误取消功能/","content":"<p>在go中使用goroutine，协程中函数是无法对返回数据直接处理error的。官方库中，有着这么一个收纳子任务error的包：<a href=\"https://godoc.org/golang.org/x/sync/errgroup\" target=\"_blank\" rel=\"noopener\">errgroup</a>。</p>\n<p>errgroup 包为一组子任务的 goroutine 提供了 goroutine 同步，错误取消功能。</p>\n<a id=\"more\"></a>\n<h2><span id=\"使用\">使用</span></h2>\n<p>官方<code>test demo</code>中，<code>ExampleGroup_justErrors</code>和<code>ExampleGroup_parallel</code>可以看到，测试先并发一系列子任务，然后<code>wait</code>等待完成（阻塞的，同步）。</p>\n<p><code>TestZeroGroup</code>案例，则是测试多子任务，<code>errgroup</code>是否返回第一个遇到的错误。这里需要<strong>注意</strong>的是，即使有任务错误，其依然会执行完所有任务，但返回的只是第一个碰到的错误，即使有多个error。</p>\n<h2><span id=\"衍生\">衍生</span></h2>\n<p>**<a href=\"https://github.com/go-kratos/kratos\" target=\"_blank\" rel=\"noopener\"> kratos</a>**二次封装的<a href=\"https://github.com/go-kratos/kratos/blob/master/pkg/sync/errgroup/doc.go\" target=\"_blank\" rel=\"noopener\">errgroup</a>，提供带recover的errgroup，err中包含详细堆栈信息。</p>\n<p>errgroup 包含三种常用方式</p>\n<p>1、直接使用 此时不会因为一个任务失败导致所有任务被 cancel:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g := &amp;errgroup.Group&#123;&#125;</span><br><span class=\"line\">g.Go(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> 此时 ctx 为 context.Background()</span></span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>2、WithContext 使用 WithContext 时不会因为一个任务失败导致所有任务被 cancel:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g := errgroup.WithContext(ctx)</span><br><span class=\"line\">g.Go(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> 此时 ctx 为 errgroup.WithContext 传递的 ctx</span></span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>3、WithCancel 使用 WithCancel 时如果有一个人任务失败会导致所有<em><strong>未进行或进行中</strong></em>的任务被 cancel:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g := errgroup.WithCancel(ctx)</span><br><span class=\"line\">g.Go(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> 此时 ctx 是从 errgroup.WithContext 传递的 ctx 派生出的 ctx</span></span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>设置最大并行数 GOMAXPROCS 对以上三种使用方式均起效<br>\nNOTE: 由于 errgroup 实现问题,设定 GOMAXPROCS 的 errgroup 需要立即调用 Wait() 例如:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g := errgroup.WithCancel(ctx)</span><br><span class=\"line\">g.GOMAXPROCS(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// task1</span></span><br><span class=\"line\">g.Go(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"task1\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// task2</span></span><br><span class=\"line\">g.Go(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"task2\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// task3</span></span><br><span class=\"line\">g.Go(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"task3\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// <span class=\"doctag\">NOTE:</span> 此时设置的 GOMAXPROCS 为2, 添加了三个任务 task1, task2, task3 此时 task3 是不会运行的!</span></span><br><span class=\"line\"><span class=\"comment\">// 只有调用了 Wait task3 才有运行的机会</span></span><br><span class=\"line\">g.Wait() <span class=\"comment\">// task3 运行</span></span><br></pre></td></tr></table></figure>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"goroutine","slug":"goroutine","permalink":"chunlife.top/tags/goroutine/"},{"name":"errgroup","slug":"errgroup","permalink":"chunlife.top/tags/errgroup/"}]},{"title":"rabbitMq知识小结","date":"2020-06-28T12:56:15.000Z","path":"2020/06/28/rabbitMq知识小结/","content":"<p>对rabbitMq概念的一次小结：</p>\n<p>基础操作的代码：<a href=\"https://github.com/rabbitmq/rabbitmq-tutorials\" target=\"_blank\" rel=\"noopener\">RabbitMQ Tutorials</a>。</p>\n<a id=\"more\"></a>\n<p><img src=\"%E5%AD%A6%E4%B9%A0rabbitmq.png\" alt=\"学习rabbitmq\"></p>\n","categories":[{"name":"分布式服务","slug":"分布式服务","permalink":"chunlife.top/categories/分布式服务/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"rabbitMq","slug":"rabbitMq","permalink":"chunlife.top/tags/rabbitMq/"}]},{"title":"训练模型中的引入测试数据集","date":"2020-06-17T08:19:59.000Z","path":"2020/06/17/训练模型中的引入测试数据集/","content":"<p>使用一批训练数据集进行模型训练，需要将训练数据分为：一份训练数据以及一份测试数据。</p>\n<img src=\"image-20200617163328931.png\" alt=\"image-20200617163328931\" style=\"zoom: 67%;\">\n<p>这样做的目的，也是为了解决模型过拟合，欠拟合的问题。</p>\n<a id=\"more\"></a>\n<p><strong>欠拟合</strong></p>\n<p>算法所训练的模型不能完整表达数据关系：</p>\n<img src=\"image-20200617162537017.png\" alt=\"image-20200617162537017\" style=\"zoom: 33%;\">\n<p><strong>过拟合</strong></p>\n<p>算法所训练的模型过多的表达了数据见的噪音关系：</p>\n<img src=\"image-20200617162658081.png\" alt=\"image-20200617162658081\" style=\"zoom: 33%;\">\n<p>一个模型需要既不能欠拟合，也不能过拟合，这是一个平衡，模型需要好的<code>泛化能力</code>，而这也是加入测试数据集的作用。</p>\n<h2><span id=\"验证数据集和交叉验证\">验证数据集和交叉验证</span></h2>\n<p>即使划分了测试数据集，也有可能出现，模型针对测试数据出现过拟合的现象，这样，还是无法保证模型的泛化能力。</p>\n<p>故引入交叉验证。将训练数据分为K等分，如图所示。</p>\n<img src=\"image-20200617163713271.png\" alt=\"image-20200617163713271\" style=\"zoom: 50%;\">\n<p>通过计算K等分的组合数据得到的均值，来选择最佳的模型。</p>\n<p>交叉验证会带来一定的计算代价，尤其是当数据集很大的时候，导致计算过程会变得很慢。</p>\n<h2><span id=\"网格搜索调参\">网格搜索调参</span></h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   x_train, x_test, y_train, y_test = model_selection.train_test_split(np_data_array, np_array, test_size=<span class=\"number\">0.2</span>, random_state=<span class=\"number\">55</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    scaler = preprocessing.StandardScaler().fit(x_train)</span><br><span class=\"line\">    linear_svc = svm.LinearSVC(random_state=<span class=\"number\">0</span>, max_iter=<span class=\"number\">30000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    param_grid = [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">'C'</span>: [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> np.linspace(<span class=\"number\">0.1</span>, <span class=\"number\">1.0</span>, num=<span class=\"number\">10</span>)]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\">    search_cv = GridSearchCV(linear_svc, param_grid, n_jobs=<span class=\"number\">4</span>, verbose=<span class=\"number\">1</span>)</span><br><span class=\"line\">    search_cv.fit(scaler.transform(x_train), y_train)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># debug print  </span></span><br><span class=\"line\"><span class=\"comment\"># [Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.</span></span><br><span class=\"line\"><span class=\"comment\"># Fitting 5 folds for each of 10 candidates, totalling 50 fits</span></span><br><span class=\"line\"><span class=\"comment\"># [Parallel(n_jobs=4)]: Done  42 tasks      | elapsed:  7.0min</span></span><br><span class=\"line\"><span class=\"comment\"># [Parallel(n_jobs=4)]: Done  50 out of  50 | elapsed:  8.3min finished</span></span><br></pre></td></tr></table></figure>\n","categories":[{"name":"算法","slug":"算法","permalink":"chunlife.top/categories/算法/"}],"tags":[{"name":"训练","slug":"训练","permalink":"chunlife.top/tags/训练/"},{"name":"machine learning","slug":"machine-learning","permalink":"chunlife.top/tags/machine-learning/"}]},{"title":"Go协程调度以及协程运行的问题","date":"2020-06-16T02:40:03.000Z","path":"2020/06/16/Go协程调度以及协程运行的问题/","content":"<p>Go调度器，Goroutine是如何调度的，Go协程运行在用户态还是内核态？</p>\n<p>这篇文章大概是要解决这几个问题，整理起来有点麻烦，其实前面的问题，大神们已经讲了很多了，我主要是碰到其中最后一个问题，这算是一道面试题，很有意思的面试问题，估计很少有人会深入考虑这个问题，嗯，其中也包括了我。。。</p>\n<p>刚学习Goroutine时，就应该会看到一些文章说过，<code>goroutine</code>是非抢占式的，或者称之为协作式抢占调度，其运行在用户态。</p>\n<a id=\"more\"></a>\n<p><a href=\"https://zhuanlan.zhihu.com/p/60613088\" target=\"_blank\" rel=\"noopener\">如图</a>：</p>\n<p><code>M</code>指的是<code>Machine</code>，一个<code>M</code>直接关联了一个物理内核线程，是真正干活的。由操作系统管理。</p>\n<p><code>P</code>指的是”processor”，代表了<code>M</code>所需的上下文环境，也是处理用户级代码逻辑的处理器。它负责衔接M和G的调度上下文，将等待执行的G与M对接，G的<code>上下文</code>和<code>队列</code>都在P上，离开P，G不能独立运行。</p>\n<p><code>G</code>指的是<code>Goroutine</code>，其实本质上也是一种轻量级的线程。包括了调用栈，重要的调度信息，例如channel等。</p>\n<p>M代表OS线程。P代表Go代码执行时需要的资源。</p>\n<p><img src=\"image-20200616112325209.png\" alt=\"image-20200616112325209\"></p>\n<p>P的数量由环境变量中的<code>GOMAXPROCS</code>决定，通常来说它是和核心数对应。</p>\n<p>实际运行的M是有限的（<code>始终保持有GOMAXPROCS个工作线程在干活</code>）。</p>\n<p>G是可以不断生成的，只要用户调用<code>go</code>，就检查当前M中的P，是否有可用的结构体G。如果有，则直接从中取一个，否则，需要分配一个新的结构体G。如果分配了新的G，需要将它挂到runtime的相关队列中。</p>\n<p>要运行P时，调度器会试着寻找一个可用的M来绑定P，M少于<code>GOMAXPROCS</code>，将新建M。</p>\n<blockquote>\n<p>也就是说M一直不会被休眠，它一直在运行，即使被阻塞，只要有需要，也会创建一个新的M。这样有M就可以一直消费G（在系统资源无限的情况下）。</p>\n</blockquote>\n<hr>\n<p><strong>系统调用</strong></p>\n<p><strong>进入系统调用</strong></p>\n<p>某个G运行过程中，碰到某个系统调用阻塞，则M与P进行解绑（<code>不阻塞不解绑</code>），goroutine进入<code>Gsyscall</code>状态，让出CPU。</p>\n<p>每个P中都挂了一个可执行的G的队列，如果这个队列不为空，即如果P中还有G需要执行，则让P与某个M绑定后立刻去执行，否则将P挂到<code>idlep</code>队列中。</p>\n<p><strong>系统调用完成</strong></p>\n<p>调度器检查当前m的P和它状态，如果P不空且状态为<code>Psyscall</code>(<code>在非阻塞的系统调用P状态中只是被设置成Psyscall，不会将M与P进行解绑</code>)，则说明是从一个非阻塞的系统调用中返回的，这时是仍然有CPU可用的。继续执行G就好了。否则，M时从阻塞的系统调用中返回的，M与P已经完成解绑了，需要检查是否有idle的P，有则与当前M绑定。</p>\n<p>没有则挂到全局的就绪G队列中，然后停止当前m并调用schedule函数。</p>\n<blockquote>\n<p>参考：<a href=\"https://tiancaiamao.gitbooks.io/go-internals/content/zh/05.2.html\" target=\"_blank\" rel=\"noopener\">5.2 goroutine的生老病死</a></p>\n</blockquote>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"goroutine","slug":"goroutine","permalink":"chunlife.top/tags/goroutine/"}]},{"title":"部署配置中心之Apollo服务","date":"2020-06-09T09:30:29.000Z","path":"2020/06/09/部署配置中心之Apollo服务/","content":"<p>访问策略如图，<code>Apollo</code>整体由三个部件<code>Portal</code>、<code>apollo-configservice</code>和<code>apollo-adminservice</code>(占用端口8070, 8080, 8090)组成：</p>\n<a id=\"more\"></a>\n<p><img src=\"release-message-notification-design.png\" alt=\"release-message-notification-design\"></p>\n<h2><span id=\"1-各模块概要介绍\">1 各模块概要介绍</span></h2>\n<h3><span id=\"11-config-service\">1.1 Config Service</span></h3>\n<ul>\n<li>提供配置获取接口</li>\n<li>提供配置更新推送接口（基于Http long polling）\n<ul>\n<li>服务端使用<a href=\"http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/async/DeferredResult.html\" target=\"_blank\" rel=\"noopener\">Spring DeferredResult</a>实现异步化，从而大大增加长连接数量</li>\n<li>目前使用的tomcat embed默认配置是最多10000个连接（可以调整），使用了4C8G的虚拟机实测可以支撑10000个连接，所以满足需求（一个应用实例只会发起一个长连接）。</li>\n</ul>\n</li>\n<li>接口服务对象为Apollo客户端</li>\n</ul>\n<h3><span id=\"12-admin-service\">1.2 Admin Service</span></h3>\n<ul>\n<li>提供配置管理接口</li>\n<li>提供配置修改、发布等接口</li>\n<li>接口服务对象为Portal</li>\n</ul>\n<h3><span id=\"13-portal\">1.3 Portal</span></h3>\n<ul>\n<li>提供Web界面供用户管理配置</li>\n<li>通过Meta Server获取Admin Service服务列表（IP+Port），通过IP+Port访问服务</li>\n<li>在Portal侧做load balance、错误重试</li>\n</ul>\n<h3><span id=\"14-client\">1.4 Client</span></h3>\n<ul>\n<li>Apollo提供的客户端程序，为应用提供配置获取、实时更新等功能</li>\n<li>通过Meta Server获取Config Service服务列表（IP+Port），通过IP+Port访问服务</li>\n<li>在Client侧做load balance、错误重试</li>\n</ul>\n<h2><span id=\"2-准备部署\">2 准备部署</span></h2>\n<p><a href=\"https://github.com/ctripcorp/apollo/releases\" target=\"_blank\" rel=\"noopener\">点击下载</a>：<code>apollo-portal</code>、<code>apollo-configservice</code>和<code>apollo-adminservice</code>。</p>\n<p>准备SQL文件：<a href=\"https://github.com/ctripcorp/apollo/blob/master/scripts/sql/apolloportaldb.sql\" target=\"_blank\" rel=\"noopener\">apolloportaldb.sql</a>，<a href=\"https://github.com/ctripcorp/apollo/blob/master/scripts/sql/apolloconfigdb.sql\" target=\"_blank\" rel=\"noopener\">apolloconfigdb.sql</a>。</p>\n<blockquote>\n<p>若是由源码打包文件，则clone <a href=\"https://github.com/ctripcorp/apollo\" target=\"_blank\" rel=\"noopener\">apollo</a>，使用<code>scripts/build.sh</code>进行打包。</p>\n</blockquote>\n<h2><span id=\"21-部署\">2.1 部署</span></h2>\n<p>准备DEV、PRO俩环境，模拟开发和生产环境。</p>\n<p><code>apollo-configservice</code>和<code>apollo-adminservice</code>在两台机器上都进行部署。</p>\n<p><code>Portal</code>随便部署到哪一台都可以。</p>\n<h3><span id=\"211-configservice-adminservice部署\">2.1.1 <code>configservice</code>、<code>adminservice</code>部署</span></h3>\n<p>两者<code>config\\application-github.properties</code>相同。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># DataSource</span><br><span class=\"line\">spring.datasource.url = jdbc:mysql://localhost:3306/ApolloConfigDB?characterEncoding=utf8</span><br><span class=\"line\">spring.datasource.username = root</span><br><span class=\"line\">spring.datasource.password = 123</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#apollo.eureka.server.enabled=true</span><br><span class=\"line\">#apollo.eureka.client.enabled=true</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>此处不属于高可用部署，只是管理多环境，所以各个环境使用各自的MySQL即可。</p>\n</blockquote>\n<h3><span id=\"212portal\">2.1.2<code>Portal</code></span></h3>\n<p><strong>表设置</strong></p>\n<p><code>ApolloPortalDB.ServerConfig</code>中的<strong>apollo.portal.envs</strong>（例如设置为：dev,pro，逗号分割）。该参数用于指定现在已有的环境。</p>\n<p><code>config\\apollo-env.properties</code>修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dev.meta=http://xxx.xxx.xxx.229:8080</span><br><span class=\"line\">pro.meta=http://xxx.xxx.xxx.137:8080</span><br></pre></td></tr></table></figure>\n<p><code>config\\application-github.properties</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># DataSource</span><br><span class=\"line\">spring.datasource.url = jdbc:mysql://localhost:3306/ApolloPortalDB?characterEncoding=utf8&amp;useSSL=false</span><br><span class=\"line\">spring.datasource.username = root</span><br><span class=\"line\">spring.datasource.password = 123</span><br></pre></td></tr></table></figure>\n<hr>\n<p>至此，所有修改均已完成。</p>\n<p>运行<code>apollo-configservice</code>和<code>apollo-adminservice</code>的<code>scripts\\startup.sh</code>脚本。</p>\n<p><code>Portal</code>等待其他模块启动到位后，启动。</p>\n<p>完成未报错的情况下，访问<code>Portal</code>地址：xxxxxxx:8070，账号/密码：<code>apollo/admin</code>。</p>\n<blockquote>\n<p>启动时，若遇到<code>mkdir: cannot create directory ‘/opt/logs’: Permission denied</code>，则需要确认用户是否有权限，没有则修改<code>scripts/startup.sh</code>中的LOG_DIR。</p>\n</blockquote>\n<p>点击右上角“系统信息”：</p>\n<p><img src=\"image-20200609165938528.png\" alt=\"image-20200609165938528\"></p>\n<p>可以看到部署的环境节点信息：</p>\n<p><img src=\"image-20200609170119225.png\" alt=\"image-20200609170119225\"></p>\n<h2><span id=\"3-高可用部署集群使用\">3 高可用部署(集群使用)</span></h2>\n<p>假设我们将dev环境设置为高可用。</p>\n<h3><span id=\"31-配置文件修改\">3.1 配置文件修改</span></h3>\n<p>修改<code>Portal</code>配置文件<code>config\\apollo-env.properties</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dev.meta=http://xxx.xxx.xxx.229:8080,http://xxx.xxx.xxx.137:8080</span><br></pre></td></tr></table></figure>\n<p>修改<code>configservice</code>、<code>adminservice</code>配置文件<code>config\\application-github.properties</code>，数据库均指向同一数据库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># DataSource</span><br><span class=\"line\">spring.datasource.url = jdbc:mysql://xxx.xxx.xxx.229:3306/ApolloConfigDB?characterEncoding=utf8&amp;useSSL=false</span><br><span class=\"line\">spring.datasource.username = root</span><br><span class=\"line\">spring.datasource.password = 123</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#apollo.eureka.server.enabled=true</span><br><span class=\"line\">#apollo.eureka.client.enabled=true</span><br></pre></td></tr></table></figure>\n<h3><span id=\"32-数据库配置修改\">3.2 数据库配置修改</span></h3>\n<p><code>ApolloConfigDB.ServerConfig</code>数据库表修改参数<code>eureka.service.url</code>：</p>\n<p>如图所示的修改的意思是：dev环境下A、B两台机器，将config Server的信息全部填入（这里两台机器指向的MySQL是一台）。同样的，要是加了一个<code>Pro</code>生产环境，就在<code>Pro</code>环境的MySQL上把config Server的地址，填入<code>eureka.service.url</code>参数中。</p>\n<p><img src=\"image-20200609172253911.png\" alt=\"image-20200609172253911\"></p>\n<hr>\n<p>以上修改完成后，<code>Portal</code>就会自动分发请求了。</p>\n<blockquote>\n<p>更为细节部分请参阅官方手册，<a href=\"https://github.com/ctripcorp/apollo/wiki/%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97\" target=\"_blank\" rel=\"noopener\">分布式部署指南</a>。</p>\n</blockquote>\n<p>这里的配置指的是，一个环境下，有多个节点提供服务，那这里填入的就是当前环境的<code>eureka</code>配置。</p>\n<p>每个环境只填入自己环境的eureka服务地址，比如FAT的apollo-configservice是1.1.1.1:8080和2.2.2.2:8080，UAT的apollo-configservice是3.3.3.3:8080和4.4.4.4:8080，PRO的apollo-configservice是5.5.5.5:8080和6.6.6.6:8080，那么：</p>\n<ol>\n<li>在FAT环境的ApolloConfigDB.ServerConfig表中设置eureka.service.url为：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://1.1.1.1:8080/eureka/,http://2.2.2.2:8080/eureka/</span><br></pre></td></tr></table></figure>\n<ol>\n<li>在UAT环境的ApolloConfigDB.ServerConfig表中设置eureka.service.url为：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://3.3.3.3:8080/eureka/,http://4.4.4.4:8080/eureka/</span><br></pre></td></tr></table></figure>\n<ol>\n<li>在PRO环境的ApolloConfigDB.ServerConfig表中设置eureka.service.url为：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://5.5.5.5:8080/eureka/,http://6.6.6.6:8080/eureka/</span><br></pre></td></tr></table></figure>\n<h2><span id=\"4-go访问\">4 Go访问</span></h2>\n<p>使用第三方库<a href=\"github.com/zouyx/agollo\">agollo</a>。</p>\n<p>测试：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tagollo.InitCustomConfig(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"params\">(*config.AppConfig, error)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &amp;config.AppConfig&#123;</span><br><span class=\"line\">\t\t\tAppID:          <span class=\"string\">\"ldps\"</span>,</span><br><span class=\"line\">\t\t\tCluster:        <span class=\"string\">\"dev\"</span>,</span><br><span class=\"line\">\t\t\tIP:             <span class=\"string\">\"xxx.xx.xx.229:8080\"</span>,</span><br><span class=\"line\">\t\t\tNamespaceName:  <span class=\"string\">\"application\"</span>,  <span class=\"comment\">// 多个命名空间，逗号分隔：\"application,DEVxxx.common\"</span></span><br><span class=\"line\">\t\t\tIsBackupConfig: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t&#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tagollo.SetLogger(&amp;logrus.Logger&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\terr := agollo.Start()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取该应用的配置项</span></span><br><span class=\"line\">\tcache := agollo.GetConfigCache(<span class=\"string\">\"application\"</span>)</span><br><span class=\"line\">\tvalue, err := cache.Get(<span class=\"string\">\"test\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"keyword\">string</span>(value), err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"分布式服务","slug":"分布式服务","permalink":"chunlife.top/categories/分布式服务/"}],"tags":[{"name":"Apollo","slug":"Apollo","permalink":"chunlife.top/tags/Apollo/"},{"name":"配置中心","slug":"配置中心","permalink":"chunlife.top/tags/配置中心/"},{"name":"微服务组件","slug":"微服务组件","permalink":"chunlife.top/tags/微服务组件/"}]},{"title":"使用etcd搭建OTA服务","date":"2020-06-04T14:56:52.000Z","path":"2020/06/04/使用etcd搭建OTA服务/","content":"<p>快速的部署和更新底层设备需要一个类似于分发二进制文件的平台，根据这个需求，依托于etcd做了一个简略的OTA平台。</p>\n<p>ETCD又类似于消息发布和订阅的操作，通过key的目录，可以划分不同的空间，执行不同的任务，可以满足我们的需求。</p>\n<p>整体设计如下：</p>\n<a id=\"more\"></a>\n<p><img src=\"image-20200604225723949.png\" alt=\"架构图\"></p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"etcd","slug":"etcd","permalink":"chunlife.top/tags/etcd/"},{"name":"mongodb","slug":"mongodb","permalink":"chunlife.top/tags/mongodb/"}]},{"title":"Go context源码学习","date":"2020-05-22T12:38:38.000Z","path":"2020/05/22/Go-context源码学习/","content":"<p>context出现在各种组件之中，作为<code>上下文</code>传递数据、控制程序运行。在实际代码coding中，也是经常用到。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"> ctx, cancel := context.WithCancel(context.Background())</span><br><span class=\"line\"> <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"exit...\"</span>)</span><br><span class=\"line\">   <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"running...\"</span>)</span><br><span class=\"line\">    time.Sleep(<span class=\"number\">2</span> * time.Second)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\"> time.Sleep(<span class=\"number\">6</span> * time.Second)</span><br><span class=\"line\"> cancel()</span><br><span class=\"line\"> <span class=\"comment\">// 延时确认打印</span></span><br><span class=\"line\"> time.Sleep(<span class=\"number\">3</span> * time.Second)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>context拥有三个特性：终止时间、可以被取消的信号值，拥有跨函数的值。凡是<code>context</code>必然拥有这些基本功能函数（<code>未必会实现具体功能，后面会说到</code>）。</p>\n<h2><span id=\"本质\">本质</span></h2>\n<p><code>context</code>接口：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Context <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">     Deadline() (deadline time.Time, ok <span class=\"keyword\">bool</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 当 context 被取消或者到了 deadline，返回一个被关闭的 channel    </span></span><br><span class=\"line\">     Done() &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\">     Err() error</span><br><span class=\"line\">     Value(key <span class=\"keyword\">interface</span>&#123;&#125;) <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>canceler</code>接口：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> canceler <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tcancel(removeFromParent <span class=\"keyword\">bool</span>, err error)</span><br><span class=\"line\">\tDone() &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于duck typing，Go的接口是实现类似<code>继承</code>的方法。</p>\n<p><code>Context</code>接口，串联起了Cancel、Deadline、Timeout、Value，四种<code>ctx</code>，同时<code>canceler</code>接口又统一了Cancel、Deadline、Timeout三种cancel的行为。（Deadline、Timeout这俩其实是一种）</p>\n<p>继承关系：</p>\n<p><img src=\"59153629-c1a12d00-8a90-11e9-89a4-eaf3e34f190e.png\" alt=\"classes\"></p>\n<p>代码结构：</p>\n<p><img src=\"image-20200522212053448.png\" alt=\"image-20200522212053448\"></p>\n<p>具体实现：</p>\n<p><img src=\"image-20200522212209549.png\" alt=\"image-20200522212209549\"></p>\n<h2><span id=\"简单描述\">简单描述</span></h2>\n<p>TODO()和Background()本质没有区别。都是emptyCtx，没有任何意义，除非使用其他ctx进行转化（接口的妙用）。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> emptyCtx <span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*emptyCtx)</span> <span class=\"title\">Deadline</span><span class=\"params\">()</span> <span class=\"params\">(deadline time.Time, ok <span class=\"keyword\">bool</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*emptyCtx)</span> <span class=\"title\">Done</span><span class=\"params\">()</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">struct</span></span>&#123;&#125; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*emptyCtx)</span> <span class=\"title\">Err</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*emptyCtx)</span> <span class=\"title\">Value</span><span class=\"params\">(key <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">interface</span></span>&#123;&#125; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *emptyCtx)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> e &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> background:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"context.Background\"</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> todo:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"context.TODO\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"unknown empty Context\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tbackground = <span class=\"built_in\">new</span>(emptyCtx)</span><br><span class=\"line\">\ttodo       = <span class=\"built_in\">new</span>(emptyCtx)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>cancelCtx，其实现了<code>canceler</code>接口，还直接将<code>Context</code>接口作为其的字段，这样可被看作直接实现了<code>Context</code>接口。<code>WithCancel</code>直接传入一个<code>emptyCtx</code>给<code>Context</code>。</p>\n<p>cancelCtx覆写<code>Done</code>、<code>Err</code>、<code>Value</code>这三个方法，<code>Deadline</code>则依然是<code>emptyCtx</code>方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WithCancel</span><span class=\"params\">(parent Context)</span> <span class=\"params\">(ctx Context, cancel CancelFunc)</span></span> &#123;</span><br><span class=\"line\">\tc := newCancelCtx(parent)</span><br><span class=\"line\">\tpropagateCancel(parent, &amp;c)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;c, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; c.cancel(<span class=\"literal\">true</span>, Canceled) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// newCancelCtx returns an initialized cancelCtx.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newCancelCtx</span><span class=\"params\">(parent Context)</span> <span class=\"title\">cancelCtx</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cancelCtx&#123;Context: parent&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> cancelCtx <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tContext</span><br><span class=\"line\"></span><br><span class=\"line\">\tmu       sync.Mutex            <span class=\"comment\">// protects following fields</span></span><br><span class=\"line\">\tdone     <span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;         <span class=\"comment\">// created lazily, closed by first cancel call</span></span><br><span class=\"line\">\tchildren <span class=\"keyword\">map</span>[canceler]<span class=\"keyword\">struct</span>&#123;&#125; <span class=\"comment\">// set to nil by the first cancel call</span></span><br><span class=\"line\">\terr      error                 <span class=\"comment\">// set to non-nil by the first cancel call</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更详细的讲解，对于<code>cancel</code>的树状实现：<a href=\"https://www.cnblogs.com/qcrao-2018/p/11007503.html\" target=\"_blank\" rel=\"noopener\">深度解密Go语言之context</a></p>\n<h2><span id=\"一个小点\">一个小点</span></h2>\n<p>创建一个关闭了<code>channel</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// closedchan is a reusable closed channel.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> closedchan = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">close</span>(closedchan)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>c.done</code> 是“懒汉式”创建，只有调用了 Done() 方法的时候才会被创建。</p>\n<p>cancel的done在没有创建属于自己的channel时调用cancel，都会被这个值赋值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *cancelCtx)</span> <span class=\"title\">Done</span><span class=\"params\">()</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">struct</span></span>&#123;&#125; &#123;</span><br><span class=\"line\">\tc.mu.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> c.done == <span class=\"literal\">nil</span> &#123;  <span class=\"comment\">// 用时创建</span></span><br><span class=\"line\">\t\tc.done = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\td := c.done</span><br><span class=\"line\">\tc.mu.Unlock()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> d</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另外：<code>context value</code>不建议替代程序的输入和输出参数，不通过<code>ctx</code>带入带出，而是让让他们自己作为出参入参。否则，对于参数的<code>set</code>和<code>get</code>将极难理清。</p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"context","slug":"context","permalink":"chunlife.top/tags/context/"}]},{"title":"基于etcd3的访问序列化及分布式软事务内存","date":"2020-05-08T08:49:39.000Z","path":"2020/05/08/基于etcd3的访问序列化及分布式软事务内存/","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">文章作者:lday</span><br><span class=\"line\">原始链接:http://lday.me/2017/02/01/0003_seri-stm-etcd3/</span><br></pre></td></tr></table></figure>\n<p><em>本文翻译自<a href=\"https://coreos.com/blog/transactional-memory-with-etcd3.html\" target=\"_blank\" rel=\"noopener\">Serializability and Distributed Software Transactional Memory with etcd3</a></em></p>\n<p>新的etcd3 API引入了新的更加强大的原语，相比较于etcd2的限制，这些新的原语充分利用了系统的能力。作为评估etcd3性能的一部分，我们花费了很大力气来使用新的API开发分布式的并发算法。</p>\n<p>etcd3的访问序列化要优于etcd2的隔离模型。当应用更新若干个相关的key时，通常需要这些更新要么全部成功，要么全部失败，进而维持应用程序数据的一致性。在实际应用中，etcd3的事务操作和它的多修订版本数据存储给予了etcd一种用于表达原子性的方式，这种原子性基于对多次修订的序列化。在etcd2上，每一个key的更新是独立提交到数据存储上的；这样就无法做到整个提交的原子性。为了评判etcd3的原语是否正确以及性能情况，我们实现了通用的分布式同步控制“食谱”，并进行了基准测试。</p>\n<p>这篇文章关注于etcd3新的最小事务接口所提供的原子性。我们将涵盖etcd3的事务，并且演示通过事务来实现原子更新。接着，我们将通过概要介绍一个简单的客户端侧软事务实现来展示etcd的修订元数据如何自然的映射到软事务内存（STM）上。最后，我们将说明这种软事务内存实现是分布式共享锁的一种高性能替代。</p>\n<a id=\"more\"></a>\n<h1><span id=\"序列化访问序列化\">序列化（访问序列化）</span></h1>\n<p>像etcd这类分布式一致性系统时常要处理非常多的来自不同并发客户端的并发请求。尽管有众多并发的读和写，原子性依然能够保证在每一次数据修订时数据模型是一致的。有很多文献讨论过各种方式来实现，或者是说明如何在分布式系统中做到原子性。etcd3的API支持了很多典型的模式。</p>\n<p>对于整个key-value存储而言，序列化给整个过程构建了一个时间轴上的点。一组序列化后的读操作将无法观测到自首次读取之后的所有新的写操作（译者注：这里的意思是一组序列化后的对同一个key的读操作，首次读取其值value之后，后续的读都是读到首次读取时的value，后续有写操作更改了这个key的值，这组序列化的读，仍然是读到更改之前的value）；所有的读像是从同一个快照上获取的数据。序列化一组写将在一个时间点上要么发布一个完整的所有写操作的更新，要么一个更新都没有。部分更新将不会出现，从而不会破坏整个应用程序的状态。</p>\n<p>然我们通过一个示例来说明原子性对于避免错乱数据的重要性。下面的代码将从一个账户转移一定数量的资金到另外一个账户：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;encoding/binary&quot;</span><br><span class=\"line\">    &quot;github.com/coreos/etcd/clientv3&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func toUInt64(v []byte) uint64 &#123; x, _ := binary.Uvarint(v); return x &#125;</span><br><span class=\"line\">func fromUInt64(v uint64) []byte &#123;</span><br><span class=\"line\">    b := make([]byte, binary.MaxVarintLen64);</span><br><span class=\"line\">    return b[:binary.PutUvarint(b, v)]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func nosyncXfer(etcd *clientv3.Client, from, to string, amount uint64) (err error) &#123;</span><br><span class=\"line\">\tvar fromKV, toKV *clientv3.GetResponse</span><br><span class=\"line\">\tif fromKV, err = etcd.Get(context.TODO(), from); err != nil &#123;</span><br><span class=\"line\">\t\treturn err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif toKV, err = etcd.Get(context.TODO(), to); err != nil &#123;</span><br><span class=\"line\">\t\treturn err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfromV, toV := toUInt64(fromKV.Kvs[0].Value), toUInt64(toKV.Kvs[0].Value)</span><br><span class=\"line\">\tif fromV &lt; amount &#123;</span><br><span class=\"line\">\t\treturn fmt.Errorf(&quot;insufficient value&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif _, err = etcd.Put(context.TODO(), to, string(fromUInt64(toV+amount))); err != nil &#123;</span><br><span class=\"line\">\t\treturn err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t_, err = etcd.Put(context.TODO(), from, string(fromUInt64(fromV-amount)))</span><br><span class=\"line\">\treturn err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（译者注：原文示例代码有诸多小bug，无法编译执行，翻译稿根据实际接口对代码进行了调整，可正常执行）</p>\n<p>虽然整个示例代码非常的直观，但在并发访问时，给定一个不适当的导致冲突的访问顺序，并发的处理还是会破坏整个应用的状态。下图显示了一个导致冲突的时间顺序，两个并发的处理进程P1和P2分别基于公用etcd服务执行<code>nosyncXfer</code>。每一个方框表示了进程在收到一个消息后（用一个带箭头的线条表示）认为的当前etcd的键值数据状态。例如，进程P2在P1发起更新”a”和”b”之前，收到了”a”（粗体），进而导致P2多记录了不一致的a值（红色），并将其写回到etcd中</p>\n<p><img src=\"diagram1_0.png\" alt=\"diagram\"></p>\n<p>大多数系统在处理示例代码中所需的原子性时，要么是借助于分布式共享锁，要么是基于事务工具。最终的，一些机制都会强制要求以原子的方式访问这一组key，同时还保持容错并避免在竞争争用下的性能下降。对于etcd3而言，这个原子性机制就是事务。</p>\n<h1><span id=\"etcd3事务\">etcd3事务</span></h1>\n<p>etcd3向etcd API中引入了事务用于原子性的更新一组key。一个etcd3事务是一个元语操作，他由归属于事务块中的Get、Put和Delete操作构成，并在etcd存储上受到事务保护。基于事务元语，使得构建各种复杂的并发控制算法成为可能。例如，etcd事务能够清晰的支持客户端软件事务内存(STM)</p>\n<h2><span id=\"事务元语\">事务元语</span></h2>\n<p>一个etcd事务是一个编码在etcd协议中的元语。这个元语使得客户端能在单次数据修订中提交对多个key的操作，整个操作单元在etcd上是序列化的。除了批量操作外，事务性也被保持；一个事务基于etcd存储上的状态条件来控制哪些操作将被提交。</p>\n<p>一个etcd事务的结构如下所示：<br>\n<code>Txn().If(cond1, cond2, ...).Then(op1, op2, ...,).Else(op1’, op2’, …)</code></p>\n<p>一个事务由3个组成部分：条件块；成功块；失败块。首先是条件块，例如上面的<code>If(cond1, cond2, …)</code>,如果所有的条件（例如，cond1, cond2, …)都为真，那么整个事务被认为成功，如果其中任何一个条件为假，则事务被视为失败。成功块，例如上面的<code>Then(op1, op2, …)</code>，当事务被认为成功时，将在单次数据修订中应用其中的所有操作（例如，op1, op2, …)。失败块，例如上面的<code>Else(op1’, op2’, …)</code>，当事务被视为失败时，将在一次版本修订中应用其中的所有操作（例如，op1, op2, …)</p>\n<p>条件块是多个条件的连接组合。每一个条件针对一个key有一个比较目标（值，创建的修订版本，修改的修订版本或者版本）和一个比较操作（&lt;, =, &gt;）。<code>nosyncXfer</code>示例中的问题，是覆盖了一个已经被取代（修改过的）key，这个是可以避免的，可以通过如果key的修改的修订版本和之前获取的修订版本不一致，则整个更新失败来保证。</p>\n<p>下面是示例代码，通过事务来保证安全的更新：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func txnXfer(etcd *clientv3.Client, from, to string, amount uint64) error &#123;</span><br><span class=\"line\">\tfor &#123;</span><br><span class=\"line\">\t\tif ok, err := doTxnXfer(etcd, from, to, amount); err != nil &#123;</span><br><span class=\"line\">\t\t\treturn err</span><br><span class=\"line\">\t\t&#125; else if ok &#123;</span><br><span class=\"line\">\t\t\treturn nil</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func doTxnXfer(etcd *clientv3.Client, from, to string, amount uint64) (bool, error) &#123;</span><br><span class=\"line\">\tgetresp, err := etcd.Txn(context.TODO()).</span><br><span class=\"line\">\t\tThen(clientv3.OpGet(from), clientv3.OpGet(to)).</span><br><span class=\"line\">\t\tCommit()</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\treturn false, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfromKV := getresp.Responses[0].GetResponseRange().Kvs[0]</span><br><span class=\"line\">\ttoKV := getresp.Responses[1].GetResponseRange().Kvs[0]</span><br><span class=\"line\">\tfromV, toV := toUInt64(fromKV.Value), toUInt64(toKV.Value)</span><br><span class=\"line\">\tif fromV &lt; amount &#123;</span><br><span class=\"line\">\t\treturn false, fmt.Errorf(&quot;insufficient value&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttxn := etcd.Txn(context.TODO()).If(</span><br><span class=\"line\">\t\tclientv3.Compare(clientv3.ModRevision(from), &quot;=&quot;, fromKV.ModRevision),</span><br><span class=\"line\">\t\tclientv3.Compare(clientv3.ModRevision(to), &quot;=&quot;, toKV.ModRevision))</span><br><span class=\"line\">\ttxn = txn.Then(</span><br><span class=\"line\">\t\tclientv3.OpPut(from, string(fromUInt64(fromV-amount))),</span><br><span class=\"line\">\t\tclientv3.OpPut(to, string(fromUInt64(toV+amount))))</span><br><span class=\"line\">\tputresp, err := txn.Commit()</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\treturn false, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn putresp.Succeeded, nil</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码是基于原始版本的一点改进。所有的<code>Get</code>请求在一个事务中，在获取<code>from</code>和<code>to</code>时，期间的写操作不会对其产生影响。类似的，所有的<code>Put</code>请求也在一个事务中，进而确保<code>from</code>和<code>to</code>在最近被获取后，没有被修改过。下图是一个冲突过程的演示，原本会破坏数据一致性，但现在会接收一个事务，而另一个事务会失败并且重试</p>\n<p><img src=\"diagram2.png\" alt=\"diagram\"></p>\n<h2><span id=\"软件事务内存stm\">软件事务内存（STM）</span></h2>\n<p>通过事务重写的示例解决了数据一致性遭到破坏的问题，但是代码有很多不足之处。代码有些不够自然；在前头读取数据时的手动事务提交，跟踪修订版本，以及显示重试对一个样板模式而言，都显得太笨拙。理想情况下，安全的数据处理就像和普通的被隔离的内存数据处理一样直观。</p>\n<p>在由修改修订版本保护的事务中打包各种访问是对软件事务内存(STM)的硬编码。就像被修改修订版本保护的事务那样，STM系统会检测内存访问冲突，进而恢复，安全的回滚任何修改。在一个乐观的STM系统中，事务上下文会记录所有的读操作，并分别缓存读集和写集的所有写操作。在提交事务时，系统会校验任何读冲突（参见下面的示例）。一个无冲突的事务会将所有写操作集合写回内存。如果有冲突，则会重试，或者终止事务。</p>\n<p><img src=\"diagram3.png\" alt=\"diagram\"></p>\n<p>为了演示STM的重试过程，上面的图重新展示了通过STM解决P1和P2冲突的过程。像之前一样，P1在P2收到”a”和”b”之间更新了”a”和”b”。P1的更新增加了key的修改修订版本至<code>{a:2, b:2}</code>当P2尝试通过STM提交事务时，老的读获取的”a”的修订版本信息（1）与当前的修订版本信息（2）冲突，导致服务器拒绝本次提交。P2的事务接着重试，重新获取读信息，重新应用事务，并最终无冲突的提交事务。</p>\n<p>下面是通过etcd3的STM客户端重写的示例代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import conc &quot;github.com/coreos/etcd/clientv3/concurrency&quot;</span><br><span class=\"line\">func stmXfer(etcd *clientv3.Client, from, to string, amount uint64) error &#123;</span><br><span class=\"line\">\t_, err := conc.NewSTMRepeatable(context.TODO(),</span><br><span class=\"line\">\t\tetcd,</span><br><span class=\"line\">\t\tfunc(s conc.STM) (err error) &#123;</span><br><span class=\"line\">\t\t\tfromV := toUInt64([]byte(s.Get(from)))</span><br><span class=\"line\">\t\t\ttoV := toUInt64([]byte(s.Get(to)))</span><br><span class=\"line\">\t\t\tif fromV &lt; amount &#123;</span><br><span class=\"line\">\t\t\t\treturn fmt.Errorf(&quot;insufficient value&quot;)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ts.Put(to, string(fromUInt64(toV+amount)))</span><br><span class=\"line\">\t\t\ts.Put(from, string(fromUInt64(fromV-amount)))</span><br><span class=\"line\">\t\t\treturn nil</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\treturn err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn nil</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>利用STM的版本更加简单：将一个函数交给STM运行时，由这个函数来处理细节。这样错误处理更少；STM层会自动捕获etcd错误并终止事务。事务示例中的重试循环也不见了，因为STM系统会自动进行重试。作用域也更为简单；事务可以通过在事务函数中返回错误码或者通过取消事务内存上下文的方式终止（例如， context.TODO())。最终，各种繁琐记账行为将更少：比较修订版本数据和构建事务都由STM的客户端代码负责完成了。</p>\n<h1><span id=\"实现stm\">实现STM</span></h1>\n<p>etcd3的软件事务内存(STM)是基于v3 API的原语实现的。为了展示使用etcd3的STM协议的机制，我们将在70行的Go代码上概述一个简单的可重复读取的乐观STM算法。这个实现包括了一个STM的一些通用特性，例如事务读操作集、写操作集管理，数据访问，提交，重试和中断。</p>\n<p>STM系统有很多值得期待的特性。首先，事务必须是原子的；一次提交要么全部成功，要么全部不成功。第二，事务必须至少具备可重复的读隔离（完全序列化，所有读都是在同一个修订版本上，针对于我们的示例代码无关紧要）。第三，他必须能保持一致性；提交能够检测到数据的冲突，并能进行重试，解决冲突。</p>\n<h2><span id=\"事务循环\">事务循环</span></h2>\n<p>STM的处理过程由他的事务循环来控制：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func NewSTM(ctx context.Context, c *v3.Client, apply func(*STM) error) &lt;-chan error &#123;</span><br><span class=\"line\">    errc := make(chan error, 1)</span><br><span class=\"line\">    go func() &#123;</span><br><span class=\"line\">        defer func() &#123;</span><br><span class=\"line\">            if r := recover(); r != nil &#123;</span><br><span class=\"line\">                e, ok := r.(stmError)</span><br><span class=\"line\">                if !ok &#123; panic(r) &#125;</span><br><span class=\"line\">                errc &lt;- e.err</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;()</span><br><span class=\"line\">        var err error</span><br><span class=\"line\">        for &#123;</span><br><span class=\"line\">            s := &amp;STM&#123;c, ctx, make(map[string]*v3.GetResponse), make(map[string]string)&#125;</span><br><span class=\"line\">            if err = apply(s); err != nil &#123; break &#125;</span><br><span class=\"line\">            if s.commit() &#123; break &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    return errc</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>事务循环管理STM事务的整个生命周期。一个新的事务启动一个事务循环，并且这个调用将返回一个future用于通知循环的结束。循环创建新的簿记数据结构，运行用户提供的apply函数来访问一些key，之后提交事务。如果STM的运行时无法访问etcd（例如，网络故障）或者context被取消，它将使用Go的panic/recover来取消事务。如果有冲突，循环将重复执行，通过一个新的事务来重试。</p>\n<h2><span id=\"读操作集和写操作集\">读操作集和写操作集</span></h2>\n<p>下面的结构描述了整个STM事务的上下文(context):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type STM struct &#123;</span><br><span class=\"line\">   c *v3.Client</span><br><span class=\"line\">   ctx context.Context</span><br><span class=\"line\">   rset map[string]*v3.GetResponse</span><br><span class=\"line\">   wset map[string]string</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一个STM事务上下文追踪运行的事务的状态。他保留了一个客户端引用从而可通过事务中的<code>Get</code>和<code>Put</code>请求来获取数据。这些<code>Get</code>和<code>Put</code>请求来自于提交阶段冲突检测过程中的读操作集（rset）和写操作集（wset）。用户同样可取消这个事务，通过对上下文执行取消操作即可。</p>\n<h2><span id=\"get和put\">Get和Put</span></h2>\n<p>STM的<code>Get</code>和<code>Put</code>方法会检测和缓存etcd上key的访问：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type stmError struct &#123; err error&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (s *STM) Get(key string) string &#123;</span><br><span class=\"line\">    if wv, ok := s.wset[key]; ok &#123;</span><br><span class=\"line\">       return wv</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if rv, ok := s.rset[key]; ok &#123;</span><br><span class=\"line\">        return string(rv.Kvs[0].Value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    rk, err := s.c.Get(s.ctx, key, v3.WithSerializable())</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        panic(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    s.rset[key] = rk</span><br><span class=\"line\">    return string(rk.Kvs[0].Value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (s *STM) Put(key, val string) &#123; s.wset[key] = val &#125;</span><br></pre></td></tr></table></figure>\n<p><code>Get</code>和<code>Put</code>跟踪由事务管理的数据。对于<code>Put</code>方法，key的值存储在写操作集中，延迟实际的更新，直到事务提交的时候才执行。对于<code>Get</code>方法，key的值是基于他最新能观察到的值：如果在写操作集上被覆写，则值来自写操作集；如果已经缓存了，则来自读操作集，或者如果两者都没有，则强制来自etcd。所有来自etcd的强制读取都将更新读操作集，从而做到可重复读取的隔离，并且会在冲突解决阶段跟踪key的修订版本信息。</p>\n<h2><span id=\"提交\">提交</span></h2>\n<p>当apply函数完成后，所有修改将通过事务提交回etcd：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (s *STM) commit() bool &#123;</span><br><span class=\"line\">    cs := make([]v3.Cmp, 0, len(s.rset))</span><br><span class=\"line\">    for k, rk := range s.rset &#123;</span><br><span class=\"line\">        cs = append(cs, v3.Compare(v3.ModRevision(k), “=”, rk.Kvs[0].ModRevision))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    puts := make([]v3.Op, 0, len(s.wset))</span><br><span class=\"line\">    for k, v := range s.wset &#123;</span><br><span class=\"line\">        puts = append(puts, v3.OpPut(k, v))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    txnresp, err := s.c.Txn(s.ctx).If(cs…).Then(puts…).Commit()</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        panic(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return txnresp.Succeeded</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个提交事务是基于读操作集和写操作集来构建的。为了检测冲突，事务由所有读操作集的修改修订版本保护；如果有任何一个key被更新了，事务将会失败。如果没有检测到冲突，事务将把写操作集的数据写到etcd，并最终成功。</p>\n<h1><span id=\"基于etcd的stm性能\">基于etcd的STM性能</span></h1>\n<p>这一章评估基于etcd的STM的性能。如果STM符合预期的工作，其示例代码的请求吞吐量应该与key的数量成正比。相反，分布式锁的请求吞吐量是保持稳定的。接着，通过比较可重复读隔离策略与序列化隔离策略，我们深入的看一看STM隔离策略对吞吐量的影响</p>\n<p><img src=\"stm_0.png\" alt=\"Request throughput of key pair updates for different serialization policies\"></p>\n<p>上图显示了对示例代码建模的基准测试结果，使用了etcd3的基准测试工具”stm”命令。与预期相符，锁的吞吐量保持恒定，而STM的吞吐量随着key的增加而增加（译者注：我认为是因为随着key的数量增加，多个事务访问不同的key，之间的冲突变的更少，“并行化”可以变得更高，从而使得STM的吞吐量提高）。read-committed访问会破坏数据一致性，因为他不解决冲突，与read-committed访问相比序列化的STM仅仅增加了20%的额外开销。与锁相比，STM在大规模key时要快了15倍。令人惊讶的是，可重复的读隔离，尽管是较弱的隔离和可能需要较少的重试，但与串行化STM相比，性能却更差些。这也许是因为串行化隔离在实现上会在重试时预获取读操作集，而可重复的读隔离只在需要时才去获取key的值。</p>\n<p><img src=\"stm-retry.png\" alt=\"Read conflict retry rate for serialized and repeatable read STM policies\"></p>\n<p>如上图所示的重试几率证明了不同隔离级别的效果。在key较少时，冲突较多，此时可重复读隔离比串行化隔离重试更少，因为冲突策略允许更多的穿插写。随着key数量的增加，冲突的几率降低，可重复读隔离的优势则越来越少。最终，序列化的隔离策略将比可重复读隔离具有更少的重试次数，因为他有更快的重试逻辑，预读取读操作集，节省了获取数据的周期，缩短了冲突窗口。</p>\n<h1><span id=\"接下来干什么\">接下来干什么？</span></h1>\n<p>这篇文章演示了如何使用etcd3的事务来作为强制序列化的一种机制。另外，etcd3上新的多修订版本存储和事务操作对于构建更高阶抽象，例如软件事务内存，已经足够丰富了。同时，这些原语有很好的性能，即使使用了etcd3的格外功能，STM请求吞吐量随着规模的扩大快速超过锁的请求吞吐量。</p>\n<p>虽然etcd3还相对比较新，但etcd3的事务已经在实际应用中使用了。对于容器调度者， Kubernetes的新的etcd3后端已经从事务上受益。他通过在API对象之间构建一致性的关系模型，能够一次性的，原子地修补多个对象的属性。对于存储，Torus分布式存储系统从头开始构建，以便使用etcd3的事务来发起一致的块元素更新。我们很高兴看到社群将如何使用etcd3的事务。</p>\n<p>是否有兴趣尝试使用etcd3的事务？etcd的代码是开源的并托管在<a href=\"https://github.com/coreos/etcd\" target=\"_blank\" rel=\"noopener\">etcd的github项目主页</a>上。可以在<a href=\"https://github.com/coreos/etcd/blob/master/Documentation/docs.md\" target=\"_blank\" rel=\"noopener\">etcd3文档页</a>上找到更多关于etcd3的信息。在性能测试中用到的etcd3的STM客户端源代码也许能在v3客户端的<a href=\"https://github.com/coreos/etcd/tree/master/clientv3/concurrency\" target=\"_blank\" rel=\"noopener\">concurrency包</a>中找到</p>\n","categories":[{"name":"分布式服务","slug":"分布式服务","permalink":"chunlife.top/categories/分布式服务/"}],"tags":[{"name":"etcd","slug":"etcd","permalink":"chunlife.top/tags/etcd/"},{"name":"STM","slug":"STM","permalink":"chunlife.top/tags/STM/"},{"name":"软件事务内存","slug":"软件事务内存","permalink":"chunlife.top/tags/软件事务内存/"},{"name":"txn","slug":"txn","permalink":"chunlife.top/tags/txn/"}]},{"title":"使工作集中的图书馆噪音","date":"2020-04-27T07:34:03.000Z","path":"2020/04/27/使工作集中的图书馆噪音/","content":"<p>牛津大学图书馆的噪音，用于工作和居家环境很不错：</p>\n<a id=\"more\"></a>\n<p><a href=\"https://www.ox.ac.uk/soundsofthebodleian/#oldlib%E3%80%82\" target=\"_blank\" rel=\"noopener\">https://www.ox.ac.uk/soundsofthebodleian/#oldlib。</a></p>\n","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"学习","slug":"学习","permalink":"chunlife.top/tags/学习/"}]},{"title":"The Google File System中文版","date":"2020-04-18T08:42:14.000Z","path":"2020/04/18/The-Google-File-System中文版/","content":"<center>The Google File System</center>\n<blockquote>\n<h2><span id=\"gfs-mapreduce-bigtable关系\">GFS MapReduce BigTable关系</span></h2>\n<p>GFS（2003年发表）使用商用硬件集群存储海量数据。文件系统将数据在节点之间冗余复制。MapReduce（2004）是GFS架构的一个补充，因为它能够充分利用GFS集群中所有低价服务器提供的大量CPU。它与GFS一道形成了处理海量数据的核心力量，包括构建Google的搜索索引。不过这两个系统都缺乏实时随机存取数据的能力，意味着尚不足以处理Web服务。</p>\n<p>GFS的另一个缺陷就是，它适合存储少许非常非常大的文件，而不适合存储成千数万的小文件，例如社交平台上的图片，因为文件的无数据信息最终要存储在主节点的内存中，文件越多master的压力越大。</p>\n<p>这时候需要一个能够驱动交互应用的解决方案，且能够同时利用以上两种基础架构和依靠GFS 存储的数据冗余和数据可用性较强的特点。存储的数据应该拆分成特别小的条目，然后由系统将这些小记录聚合到非常大的文件中，并提供一些索引排序，让用户可以查找最少的磁盘就能够获取到数据。最终，它要能够及时存储爬虫的结果，并跟MapReduce协作生成搜索索引。于是考虑放弃关系型的特点，采用简单的API来进行增删改查操作，另加一个扫描函数，以在较大的键范围或全表上迭代扫描，最终形成一个管理结构化数据的分布式存储系统BigTable（2006）。</p>\n<p>值得一提的是CAP定理，当中指出，一个分布式系统只能同时实现一致性、可用性和分区容忍性（独立性）中的两个，不可能三者兼顾。放宽一致性的要求会提升系统的可用性。</p>\n<p>————————————————<br>\n版权声明：本文为CSDN博主「hennybatter」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>\n原文链接：<a href=\"https://blog.csdn.net/u012135300/article/details/51023145\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012135300/article/details/51023145</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<hr>\n\n\n\t<div class=\"row\">\n    <embed src=\"The Google File System中文版.pdf\" width=\"100%\" height=\"550\" type=\"application/pdf\">\n\t</div>\n\n\n\n","categories":[{"name":"分布式服务","slug":"分布式服务","permalink":"chunlife.top/categories/分布式服务/"}],"tags":[{"name":"论文","slug":"论文","permalink":"chunlife.top/tags/论文/"},{"name":"GFS","slug":"GFS","permalink":"chunlife.top/tags/GFS/"},{"name":"The Google File System","slug":"The-Google-File-System","permalink":"chunlife.top/tags/The-Google-File-System/"}]},{"title":"Bigtable：一个分布式的结构化数据存储系统","date":"2020-04-18T08:42:05.000Z","path":"2020/04/18/Bigtable：一个分布式的结构化数据存储系统/","content":"<center>Bigtable：一个分布式的结构化数据存储系统</center>\n<a id=\"more\"></a>\n\n\n\t<div class=\"row\">\n    <embed src=\"Bigtable：一个分布式的结构化数据存储系统.pdf\" width=\"100%\" height=\"550\" type=\"application/pdf\">\n\t</div>\n\n\n\n","categories":[{"name":"分布式服务","slug":"分布式服务","permalink":"chunlife.top/categories/分布式服务/"}],"tags":[{"name":"分布式","slug":"分布式","permalink":"chunlife.top/tags/分布式/"},{"name":"论文","slug":"论文","permalink":"chunlife.top/tags/论文/"},{"name":"Bigtable","slug":"Bigtable","permalink":"chunlife.top/tags/Bigtable/"},{"name":"结构化数据存储系统","slug":"结构化数据存储系统","permalink":"chunlife.top/tags/结构化数据存储系统/"}]},{"title":"Google MapReduce中文版","date":"2020-04-18T08:41:56.000Z","path":"2020/04/18/Google-MapReduce中文版/","content":"<center>Google MapReduce</center>\n<a id=\"more\"></a>\n\n\n\t<div class=\"row\">\n    <embed src=\"Google MapReduce中文版.pdf\" width=\"100%\" height=\"550\" type=\"application/pdf\">\n\t</div>\n\n\n\n","categories":[{"name":"分布式服务","slug":"分布式服务","permalink":"chunlife.top/categories/分布式服务/"}],"tags":[{"name":"MapReduce","slug":"MapReduce","permalink":"chunlife.top/tags/MapReduce/"},{"name":"论文","slug":"论文","permalink":"chunlife.top/tags/论文/"},{"name":"Google MapReduce","slug":"Google-MapReduce","permalink":"chunlife.top/tags/Google-MapReduce/"}]},{"title":"Axure RP 各类元件库","date":"2020-04-15T06:02:06.000Z","path":"2020/04/15/Axure-RP-各类元件库/","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这里提供微信和小程序、iOS、macOS、Android、Windows 等多平台的 Axure RP 元件库，你的原型任你自由飞跃。</span><br><span class=\"line\"></span><br><span class=\"line\">对于元件库的设计，我参考官方的设计规范文档，尽可能不放过任何一个像素的偏差，</span><br><span class=\"line\">无论长度、宽度、转角、颜色。希望你采用了此高保真元件，可以更好地和开发、测试</span><br><span class=\"line\">等团队成员深入沟通。</span><br><span class=\"line\"></span><br><span class=\"line\">如果你的团队有 UI 设计人员，只希望你出具低保真的原型时，请在 Axure RP 软件中，</span><br><span class=\"line\">打开菜单 “Project &gt; Page Style Editor”，做以下调整： </span><br><span class=\"line\">⇨ Sketchiness 为 20 左右</span><br><span class=\"line\">⇨ Color 为 Grayscale</span><br><span class=\"line\">⇨ Font 为 自己找个中文手写字体</span><br><span class=\"line\">以确保你的原型不会干扰到 UI 设计。</span><br><span class=\"line\">希望我的建议对你有用，感谢你自由使用开源元件库。</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2><span id=\"安装\">安装</span></h2>\n<p>请将下载的 Axure RP 元件库 .<a href=\"https://github.com/refscn/rplibs\" target=\"_blank\" rel=\"noopener\">rplib</a> 文件放到 Axure RP 元件库目录下，然后重新打开 Axure RP 9/8 软件，并在元件库列表中选择相应元件库即可使用。<br>\n元件库目录位置：</p>\n<ul>\n<li>Windows 系统：我的文档/Axure/Libraries</li>\n<li>macOS 系统：文稿/Axure/Libraries</li>\n</ul>\n<p>希望 <a href=\"http://Refs.cn\" target=\"_blank\" rel=\"noopener\">Refs.cn</a> 制作的元件库能给您带来帮助，如果感觉还不错，简单 ★Star 一下就很感激了。想了解和获取后续更新版本，可保持关注。</p>\n<blockquote>\n<p>如果您有一些好的建议或者实际需要，可 New issue 一下，或 <a href=\"mailto:%22%E5%8F%82%E8%80%83%E9%9B%86%22%3Ccontactus@refs.cn%3E\" target=\"_blank\" rel=\"noopener\">通过电子邮件</a>告诉我。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">“预见未来最好的方式就是创造它。”</span><br><span class=\"line\">            —— 亚伯拉罕·林肯</span><br></pre></td></tr></table></figure>\n<h2><span id=\"网页设计元件库\">网页设计元件库</span></h2>\n<h3><span id=\"移动网页\">☞ 移动网页</span></h3>\n<p>基于微信 WeUI 和小程序设计指南等创建，适用于包括微信在内的移动网页或 HTML5 轻应用的原型设计。<br>\n<img src=\"https://github.com/refscn/rpdemo/raw/master/assets/webm-wechat-preview.png\" alt=\"预览\"></p>\n<blockquote>\n<p><a href=\"http://www.refs.cn/rplibs/webm-wechat\" target=\"_blank\" rel=\"noopener\">查看完整大图</a></p>\n<ul>\n<li><a href=\"https://github.com/refscn/rplibs/raw/master/refs-webm-wechat.rplib\" title=\"下载微信移动网页设计元件库\" target=\"_blank\" rel=\"noopener\">下载 refs-webm-wechat.rplib</a>，包括常规、导航/模式、基础、列表、选择/输入、卡片、弹窗和扩展等分组元件，基于 iPhone 原型尺寸描述。</li>\n<li>微信 WeUI 更多信息，请参见 <a href=\"https://weui.io\" target=\"_blank\" rel=\"noopener\">微信 WeUI 官网</a> 。</li>\n<li>微信小程序设计更多信息，请参见 <a href=\"https://mp.weixin.qq.com/debug/wxadoc/design/\" target=\"_blank\" rel=\"noopener\">微信小程序设计指南</a> 。</li>\n</ul>\n</blockquote>\n<h3><span id=\"桌面网页\">☞ 桌面网页</span></h3>\n<p>包括通用官网，社交、电商和媒体等分类网站和控制台的设计元素。</p>\n<blockquote>\n<ul>\n<li><a href=\"http://library.ant.design/\" title=\"去下载 Ant Design 元件库\" target=\"_blank\" rel=\"noopener\">推荐下载 Ant Design Library</a> ，Ant Design 实现比较完整，同时与其技术框架匹配，推荐直接使用。</li>\n</ul>\n</blockquote>\n<h2><span id=\"设计平台元件库\">设计平台元件库</span></h2>\n<h3><span id=\"apple-design\">☞ Apple Design</span></h3>\n<p>基于 Apple iOS/macOS Human Interface Guidelines 创建，适用于 iPhone、iPad 和 macOS 桌面应用的原型设计（macOS 部分请关注后续更新）。</p>\n<p><img src=\"https://github.com/refscn/rpdemo/raw/master/assets/design-apple-preview.png\" alt=\"预览\"></p>\n<blockquote>\n<p><a href=\"http://www.refs.cn/rplibs/design-apple\" target=\"_blank\" rel=\"noopener\">查看完整大图</a></p>\n<ul>\n<li><a href=\"https://github.com/refscn/rplibs/raw/master/refs-design-apple.rplib\" title=\"下载 Apple Design 元件库\" target=\"_blank\" rel=\"noopener\">下载 refs-design-apple.rplib</a>，包括常规、导航/模式、基本、列表、列表左右件、选择/输入、弹窗和扩展等分组元件。</li>\n<li>iOS 平台更多信息，请参见 <a href=\"https://developer.apple.com/ios/human-interface-guidelines/\" target=\"_blank\" rel=\"noopener\">iOS 设计准则</a> 。</li>\n<li>macOS 平台更多信息，请参见 <a href=\"https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/OSXHIGuidelines/\" target=\"_blank\" rel=\"noopener\">macOS 设计准则</a> 。</li>\n</ul>\n</blockquote>\n<h3><span id=\"material-design\">☞ Material Design</span></h3>\n<p>基于 Google Material Design 准则创建，适用于 Android 手机、平板应用，以及跨平台桌面应用的原型设计。</p>\n<p><img src=\"https://github.com/refscn/rpdemo/raw/master/assets/design-material-preview.png\" alt=\"预览\"></p>\n<blockquote>\n<p><a href=\"http://www.refs.cn/rplibs/design-material\" target=\"_blank\" rel=\"noopener\">查看完整大图</a></p>\n<ul>\n<li><a href=\"https://github.com/refscn/rplibs/raw/master/refs-design-material.rplib\" title=\"下载 Material Design 元件库\" target=\"_blank\" rel=\"noopener\">下载 refs-design-material.rplib</a>，包括常规、模式、基本、输入、列表、富列表、卡片、弹窗和扩展等分组元件。</li>\n<li><a href=\"https://noto-website.storage.googleapis.com/pkgs/NotoSansCJKsc-hinted.zip\" title=\"下载 Noto 字体（需要翻墙）\" target=\"_blank\" rel=\"noopener\">下载 Noto Sans CJK SC 字体（可选安装）</a>，安装后原型页面有更好的显示效果。</li>\n<li>更多 Noto 字体，请参见 <a href=\"https://www.google.com/get/noto/\" target=\"_blank\" rel=\"noopener\">Google Noto Fonts 官网</a> 。</li>\n<li>更多信息，请参见 <a href=\"https://material.io\" target=\"_blank\" rel=\"noopener\">Material Design 官网</a> 。</li>\n</ul>\n</blockquote>\n<h3><span id=\"fluent-design\">☞ Fluent Design</span></h3>\n<p>基于 Microsoft Fluent Design System 创建，适用于 Windows 个人电脑、手机、Xbox One、HoloLens 等设备应用的原型设计。</p>\n<p><img src=\"https://github.com/refscn/rpdemo/raw/master/assets/design-fluent-preview.png\" alt=\"预览\"></p>\n<blockquote>\n<p><a href=\"http://www.refs.cn/rplibs/design-fluent\" target=\"_blank\" rel=\"noopener\">查看完整大图</a></p>\n<ul>\n<li><a href=\"https://github.com/refscn/rplibs/raw/master/refs-design-fluent.rplib\" title=\"下载 Fluent Design 元件库\" target=\"_blank\" rel=\"noopener\">下载 refs-design-fluent.rplib</a>，包括常规、基本输入、集合、对话框/弹窗、文本、滚动/状态/信息、菜单/工具条、导航、水平导航/枢轴、选择器、媒体和窗口外壳等分组元件。</li>\n<li>更多信息，请参见 <a href=\"https://www.microsoft.com/design/fluent/\" target=\"_blank\" rel=\"noopener\">Fluent Design 官网</a> 。</li>\n</ul>\n</blockquote>\n<h3><span id=\"手势图片\">☞ 手势图片</span></h3>\n<p>基于 Jeff Portaro 的 Touch Gestures Icons 创建，适用于所有移动平台触控、桌面触控，以及触控面板的操作手势表达。<br>\n<img src=\"https://github.com/refscn/rpdemo/raw/master/assets/touch-gestures-icons.jpg\" alt=\"预览\"></p>\n<blockquote>\n<p><a href=\"https://pixelbuddha.net/sites/default/files/freebie-slide/freebie-retina-slide-1414493963-1.jpg\" target=\"_blank\" rel=\"noopener\">预览全部手势</a></p>\n<ul>\n<li><a href=\"https://github.com/refscn/rplibs/raw/master/refs-image-gesture.rplib\" title=\"下载 手势图片元件库\" target=\"_blank\" rel=\"noopener\">下载 refs-image-gesture.rplib</a> ，包括单指、双指、三四五指、单手、双手和扩展手势等分类图片。</li>\n<li>更多信息，请参见 <a href=\"https://pixelbuddha.net/freebie/touch-gestures-icons\" target=\"_blank\" rel=\"noopener\">Touch Gestures Icons 网站</a> 。</li>\n</ul>\n</blockquote>\n<h2><span id=\"图表元件库\">图表元件库</span></h2>\n<h3><span id=\"模型和数据图表\">☞ 模型和数据图表</span></h3>\n<p><img src=\"https://github.com/refscn/rpdemo/raw/master/assets/chart-model-preview.png\" alt=\"预览\"></p>\n<blockquote>\n<p><a href=\"http://www.refs.cn/rplibs/chart-model\" target=\"_blank\" rel=\"noopener\">查看完整大图</a></p>\n<ul>\n<li><a href=\"https://github.com/refscn/rplibs/raw/master/refs-chart-model.rplib\" title=\"下载模型图表元件库\" target=\"_blank\" rel=\"noopener\">下载 refs-chart-model.rplib</a>，包括描述产品需求流程的 UML 状态图、活动图、序列图、用例图，以及商业等分组图表。</li>\n</ul>\n</blockquote>\n<p><img src=\"https://github.com/refscn/rpdemo/raw/master/assets/chart-data-preview.png\" alt=\"预览\"></p>\n<p><img src=\"https://github.com/refscn/rpdemo/raw/master/assets/chart-data-map-preview.png\" alt=\"预览\"></p>\n<blockquote>\n<p><a href=\"http://www.refs.cn/rplibs/chart-data\" target=\"_blank\" rel=\"noopener\">查看完整大图</a></p>\n<ul>\n<li><a href=\"https://github.com/refscn/rplibs/raw/master/refs-chart-data.rplib\" title=\"下载数据图表元件库\" target=\"_blank\" rel=\"noopener\">下载 refs-chart-data.rplib</a>，包括适合移动端的点图、线图、区域图、柱状图、饼图、雷达图、股票图、仪表盘及混合等各类数据图表。</li>\n</ul>\n</blockquote>\n<h2><span id=\"图标图片元件库\">图标/图片元件库</span></h2>\n<h3><span id=\"material-design-图标\">☞ Material Design 图标</span></h3>\n<p>基于 Material Design icons V1.0.2 图标创建。</p>\n<p><img src=\"https://github.com/google/material-design-icons/raw/1.0.2/sprites/css-sprite/sprite-action-grey600.png\" alt=\"图标预览\"></p>\n<blockquote>\n<p><a href=\"http://www.refs.cn/rplibs/icon-material-v1\" target=\"_blank\" rel=\"noopener\">查看完整大图</a></p>\n<ul>\n<li><a href=\"https://github.com/refscn/rplibs/raw/master/refs-icon-material-v1.rplib\" title=\"下载 Material Design 图标元件库\" target=\"_blank\" rel=\"noopener\">下载 refs-icon-material-v1.rplib</a> （官方图标 x24），包括 action, alert, av, communication, content, device, editor, file, hardware, image, maps, navigation, notification, social, toggle 等分组图标。</li>\n<li><a href=\"https://github.com/google/material-design-icons/tree/1.0.2\" target=\"_blank\" rel=\"noopener\">原始图标地址</a></li>\n<li>更多信息，请参见 <a href=\"https://material.io\" target=\"_blank\" rel=\"noopener\">Material Design 官网</a> 。</li>\n</ul>\n</blockquote>\n<h3><span id=\"品牌设计图标\">☞ 品牌设计图标</span></h3>\n<p>基于 Apple、IBM 等品牌图标创建。</p>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/refscn/rplibs/raw/master/refs-icon-brands.rplib\" title=\"下载品牌设计图标元件库\" target=\"_blank\" rel=\"noopener\">下载 refs-icon-brands.rplib</a> （官方图标 x28/x24），包括 Apple 系统导航和工具栏、切换栏、快捷操作，IBM Design 操作、格式、对象等分组图标。</li>\n<li><a href=\"https://developer.apple.com/ios/human-interface-guidelines/graphics/system-icons/\" target=\"_blank\" rel=\"noopener\">查看 Apple iOS 原始图标地址</a></li>\n<li><a href=\"https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/OSXHIGuidelines/SystemProvided.html\" target=\"_blank\" rel=\"noopener\">查看 Apple macOS 原始图标地址</a></li>\n<li><a href=\"https://www.ibm.com/design/language/resources/icon-library/\" target=\"_blank\" rel=\"noopener\">查看 IBM Design 原始图标地址</a></li>\n</ul>\n</blockquote>\n<h3><span id=\"icons8-图标图片\">☞ Icons8 图标/图片</span></h3>\n<p>基于 Icons8 图标创建。<br>\n<img src=\"https://raw.githubusercontent.com/refscn/rpdemo/master/assets/flat-color-icons.png\" alt=\"图标预览\"></p>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/refscn/rplibs/raw/master/refs-icon-s8flat.rplib\" title=\"下载 Icons8 Flat 彩色图标元件库\" target=\"_blank\" rel=\"noopener\">下载 refs-icon-s8flat.rplib</a> （彩色图标 x32），包括照片和视频、基本、商业、工业、移动、箭头、数据和新增等分组图标。</li>\n<li><a href=\"https://icons8.github.io/flat-color-icons/\" target=\"_blank\" rel=\"noopener\">原始图标地址</a></li>\n<li>更多信息，请参见 <a href=\"https://icons8.com\" target=\"_blank\" rel=\"noopener\">Icons8 官网</a>。</li>\n</ul>\n</blockquote>\n<h3><span id=\"图标平台图标图片\">☞ 图标平台图标/图片</span></h3>\n<p>基于 Easyicon、Smallicons、阿里妈妈 Iconfont 等图标创建。</p>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/refscn/rplibs/raw/master/refs-icon-alibaba.rplib\" title=\"下载 Iconfont 平台元件库\" target=\"_blank\" rel=\"noopener\">下载 refs-icon-alibaba.rplib</a> （官方图标 x24），包括 Alibaba 国际站、支付宝、支付宝记账等分组图标。</li>\n<li><a href=\"https://github.com/refscn/rplibs/raw/master/refs-icon-colorful.rplib\" title=\"下载 Iconfont 平台彩色图标元件库\" target=\"_blank\" rel=\"noopener\">下载 refs-icon-colorful.rplib</a> （彩色图标 x32），包括社交、社交（国外）、文档类型等分组图标。</li>\n<li><a href=\"https://github.com/refscn/rplibs/raw/master/refs-image-colorful.rplib\" title=\"下载 Iconfont 平台彩色图片元件库\" target=\"_blank\" rel=\"noopener\">下载 refs-image-colorful.rplib</a> （彩色图片 x128），包括封面、生活小图、生肖地支春节、天气、图表、交通、乐器、生活等分组图片。</li>\n<li>更多信息，请参见 <a href=\"http://www.easyicon.net\" target=\"_blank\" rel=\"noopener\">Easyicon 官网</a> 、<a href=\"http://smallicons.net\" target=\"_blank\" rel=\"noopener\">Smallicons 官网</a> 和 <a href=\"https://iconfont.cn\" target=\"_blank\" rel=\"noopener\">Iconfont 平台官网</a> 等。</li>\n</ul>\n</blockquote>\n<h3><span id=\"font-awesome-字体图标\">☞ Font Awesome 字体图标</span></h3>\n<p>基于 Font Awesome V4.7.0 图标字体创建，在使用前，需要在操作系统设计中先安装此字体 FontAwesome.otf。另外，如果不想在导出的原型中依赖字体库，造成不方便的情况，可以在原型设计时，拉入字体图标后，鼠标右键“Convert to Image”来将其转换为图片即可。</p>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/refscn/rplibs/raw/master/refs-icon-font-awesome-v4.rplib\" title=\"下载 Font Awesome 字体图标元件库\" target=\"_blank\" rel=\"noopener\">下载 refs-icon-font-awesome-v4.rplib</a> （官方图标 x24），包括 Web Application，Accessibility，Hand，Transportation，Gender，File Type，Spinner，Form Control，Payment，Chart，Currency，Text Editor，Directional，Video Player，Brand，Medical 等分类字体图标。</li>\n<li><a href=\"https://github.com/FortAwesome/Font-Awesome/blob/v4.7.0/fonts/FontAwesome.otf\" title=\"下载 Font Awesome 字体\" target=\"_blank\" rel=\"noopener\">下载 FontAwesome.otf 字体（必须安装）</a></li>\n<li>更多信息，请参见 <a href=\"http://fontawesome.io\" target=\"_blank\" rel=\"noopener\">Font Awesome 官网</a> 。</li>\n</ul>\n</blockquote>\n<p>免费可商用的字体，更多可以查看<a href=\"https://www.websiteplanet.com/blog/best-free-fonts/\" target=\"_blank\" rel=\"noopener\">网址</a>。（感谢Selena的补充）</p>\n<h3><span id=\"资源推荐\">资源推荐</span></h3>\n<p>另外，还有一些资源推荐给您。</p>\n<p><img src=\"https://github.com/refscn/rphh/raw/master/assets/hh-axure9.png\" alt=\"Axure RP 9 导出界面汉化预览\"></p>\n<blockquote>\n<ul>\n<li>Axure RP 导出原型界面汉化包：<a href=\"https://github.com/refscn/rphh\" target=\"_blank\" rel=\"noopener\">refscn/rphh</a> （更新至 9.0.0.3686 版本）</li>\n<li>提供知识索引的参考卡片：<a href=\"https://github.com/refscn/cards\" target=\"_blank\" rel=\"noopener\">refscn/cards</a></li>\n</ul>\n</blockquote>\n<p>更多参考资源，请访问 <a href=\"https://refscn.github.io\" target=\"_blank\" rel=\"noopener\">https://refscn.github.io</a> 。</p>\n<blockquote>\n<p>申明：<a href=\"http://Refs.cn\" target=\"_blank\" rel=\"noopener\">Refs.cn</a> 在这里开源的 Axure RP 元件库，秉承开放共享的思想，供大家免费使用，欢迎各站点转载和分享。严禁用于销售，违者必究。</p>\n</blockquote>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"https://thelighter.github.io/2020/02/11/android-2/\">Is there any future for mobile development?</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"Axure","slug":"Axure","permalink":"chunlife.top/tags/Axure/"},{"name":"微信和小程序","slug":"微信和小程序","permalink":"chunlife.top/tags/微信和小程序/"},{"name":"iOS","slug":"iOS","permalink":"chunlife.top/tags/iOS/"},{"name":"macOS","slug":"macOS","permalink":"chunlife.top/tags/macOS/"},{"name":"Android","slug":"Android","permalink":"chunlife.top/tags/Android/"},{"name":"Windows","slug":"Windows","permalink":"chunlife.top/tags/Windows/"}]},{"title":"json tag 中的inline属性","date":"2020-04-01T01:42:10.000Z","path":"2020/04/01/json-tag-中的inline属性/","content":"<p><code>inline</code>这个属性，应该是默认的，为什么这么说，这个属性用作嵌套结构体内，消除嵌套结构体的层级关系，将其转为一个层级。</p>\n<a id=\"more\"></a>\n<p>这里<code>TestField</code>加不加<code>inline</code>flag，字段都和第一层字段保持在同一级，但如果是注释中的写法，<code>inline</code>字段也不起作用。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> TestField <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tKey <span class=\"keyword\">string</span> <span class=\"string\">`json:\"key\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//type TopField struct &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\tT TestField `json:\",omitempty\"`</span></span><br><span class=\"line\"><span class=\"comment\">//\tTestA     string `json:\"test_a\"`</span></span><br><span class=\"line\"><span class=\"comment\">//\tTestB     string `json:\"test_b\"`</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> TopField <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tTestField <span class=\"string\">`json:\",omitempty,inline\"`</span></span><br><span class=\"line\">\tTestA     <span class=\"keyword\">string</span> <span class=\"string\">`json:\"test_a\"`</span></span><br><span class=\"line\">\tTestB     <span class=\"keyword\">string</span> <span class=\"string\">`json:\"test_b\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    one := TopField&#123;</span><br><span class=\"line\">        TestField: TestField&#123;</span><br><span class=\"line\">            Key: <span class=\"string\">\"12321\"</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        TestA: <span class=\"string\">\"a\"</span>,</span><br><span class=\"line\">        TestB: <span class=\"string\">\"b\"</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmarshal, _ := json.Marshal(one)</span><br><span class=\"line\">\tfmt.Println(<span class=\"keyword\">string</span>(marshal))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;\"key\":\"12321\",\"test_a\":\"a\",\"test_b\":\"b\"&#125;</span></span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"chunlife.top/2020/03/24/fsnotify在windows上出现两次event的问题/\">fsnotify在windows上出现两次event的问题</a></li><li><a href=\"https://kezunlin.me/post/77697d8d/\">python useful tools and code snippets</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"json","slug":"json","permalink":"chunlife.top/tags/json/"}]},{"title":"json 解析int到string类型中","date":"2020-04-01T01:30:36.000Z","path":"2020/04/01/json-解析int到string类型中/","content":"<p>结构体的数据是<code>{&quot;user_id&quot;: 344, &quot;user_name&quot;: &quot;shiki&quot;}</code>。</p>\n<p>下面给出的<code>user_id</code>是int，json使用string类型去接数据会报错。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Id       <span class=\"keyword\">string</span> <span class=\"string\">`json:\"user_id,int\"`</span></span><br><span class=\"line\">  Username <span class=\"keyword\">string</span> <span class=\"string\">`json:\"user_name\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// json: cannot unmarshal number into Go value of type string</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"jsonnumber\">json.Number</span></h2>\n<p>使用<code>json.Number</code>解决。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">        Id       json.Number <span class=\"string\">`json:\"user_id\"`</span></span><br><span class=\"line\">        Username <span class=\"keyword\">string</span>      <span class=\"string\">`json:\"user_name\"`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>marshal函数出来的数据依然会是int类型，而不是字符串。</li>\n</ul>\n<h2><span id=\"jsonrawmessage\">json.RawMessage</span></h2>\n<p>这个类型，表示json不会去往下解析数据了，其数据还是裸<code>json</code>数据。</p>\n<p><a href=\"https://golang.org/pkg/encoding/json/#RawMessage\" target=\"_blank\" rel=\"noopener\">官方解释</a>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.</span><br></pre></td></tr></table></figure>\n<p>这还不算，按照文档后一句，<code>can be used to delay JSON decoding or precompute a JSON encoding.</code>，能延迟处理json数据，或者是预处理json数据，这里是不是有很多好玩的了。</p>\n<p><strong>延迟处理</strong></p>\n<p>在json数据比较大，且具有相当的层级的时候，我可能只需要先解析出一部分数据（能供我使用的数据），其他数据等需要的时候再一并解析。</p>\n<p>当然，即使这里我不去解析那部分没有解析的json的数据，json库也是帮助我们预处理过了这部分数据的，也就是说其已经验证过这些数据是符合json规范的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input := <span class=\"string\">`&#123;\"user_id\": \"&#123;\"dsad\":\", \"user_name\": \"shiki\"&#125;`</span></span><br><span class=\"line\">user := User&#123;&#125;</span><br><span class=\"line\">err := json.Unmarshal([]<span class=\"keyword\">byte</span>(input), &amp;user)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// panic: invalid character 'd' after object key:value pair</span></span><br></pre></td></tr></table></figure>\n<p>如果在pprof上，看到json处理占用了很多性能开销，业务场景上又恰巧可以使用到合乎这个场景，那么不妨试试用这个方法来提升json性能。</p>\n<h2><span id=\"使用jsoniter\">使用</span></h2>\n<p>看到有人推荐这个，然后去搜了下使用方式，发现非常简单易用，也是为这种需求新增了一种方案了。</p>\n<blockquote>\n<p>此内容参考自： <a href=\"https://blog.jln.co/%E7%94%A8golang%E8%A7%A3%E6%9E%90json%E8%A3%A1%E7%9A%84%E6%95%B8%E5%AD%97%E6%AC%84%E4%BD%8D/\" target=\"_blank\" rel=\"noopener\">用golang解析json里的数字栏位</a></p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> extra <span class=\"string\">\"github.com/json-iterator/go/extra\"</span></span><br></pre></td></tr></table></figure>\n<p>函数加入：<code>extra.RegisterFuzzyDecoders()</code>。</p>\n<p><a href=\"https://play.golang.org/p/vKl1YcH6lt8\" target=\"_blank\" rel=\"noopener\">测试代码</a>。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\tjsoniter <span class=\"string\">\"github.com/json-iterator/go\"</span></span><br><span class=\"line\">\textra <span class=\"string\">\"github.com/json-iterator/go/extra\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Sample <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName <span class=\"keyword\">string</span></span><br><span class=\"line\">\tAge  <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sampleData = <span class=\"string\">`&#123;</span></span><br><span class=\"line\"><span class=\"string\">   \"name\":\"julian\",</span></span><br><span class=\"line\"><span class=\"string\">   \"age\": 45</span></span><br><span class=\"line\"><span class=\"string\">&#125;`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sampleData2 = <span class=\"string\">`&#123;</span></span><br><span class=\"line\"><span class=\"string\">   \"name\":\"julian\",</span></span><br><span class=\"line\"><span class=\"string\">   \"age\": \"45\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\textra.RegisterFuzzyDecoders()</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sample Sample</span><br><span class=\"line\">\terr := jsoniter.Unmarshal([]<span class=\"keyword\">byte</span>(sampleData), &amp;sample)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(sample)</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = jsoniter.Unmarshal([]<span class=\"keyword\">byte</span>(sampleData2), &amp;sample)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(sample)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/03/24/fsnotify在windows上出现两次event的问题/\">fsnotify在windows上出现两次event的问题</a></li><li><a href=\"https://kezunlin.me/post/77697d8d/\">python useful tools and code snippets</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"json","slug":"json","permalink":"chunlife.top/tags/json/"}]},{"title":"重新见面，请多指教","date":"2020-03-29T14:31:21.000Z","path":"2020/03/29/重新见面，请多指教/","content":"<p>从嵌入式转入互联网圈子快一年多了，感觉还是有些要死不活，当初网上探不到路的感觉却是消失了不少，发现不是技术栈有问题，还是自身出了问题，毕竟每个人都在前进，不管是有人引领还是盲人探路，其实都是沉下心来去安心做点什么。有些时候，我们不是对这个技术的浮躁，而是对我们沉不下来学这个技术浮躁。</p>\n<a id=\"more\"></a>\n<p>我不感谢吃苦，但我感谢能吃苦的自己 。</p>\n<h2><span id=\"一-绝活\">一、绝活</span></h2>\n<p><strong>技能树——卍解</strong>：</p>\n<p><img src=\"image-20200227212341802.png\" alt=\"image-20200227212341802\"></p>\n<h2><span id=\"二-当下所作的工作\">二、当下所作的工作</span></h2>\n<p>现在是在一家传统的存储厂工作，负责该公司工业云的后端开发工作，负责有后端中间件的开发，web后端开发，服务于服务器的特定客户端开发，主要使用的Go语言进行开发工作，这之间对Go的使用渐渐熟悉，对mysql，MongoDB，gin框架，并发，对分布式原理也逐渐了解，为了跟自己的知识加码，也开始写了博客，记录自己互联网的学习，并乐于分享。</p>\n<p>不过当下有种，什么都会，但什么都没有精通。时代前沿的东西还不太了解，比如现在招聘简述上张口就来的docker、k8s。</p>\n<p>在这家公司主要的收获是：</p>\n<ul>\n<li>能够得到一个供我转行的机会，前期的学习和压力是值得的；</li>\n<li>薪资待遇还是挺舒服的，不会抠抠搜搜的让我发出这SB公司的言论；</li>\n<li>完成了自己心态上的转变，能够坐下来靠理智学习技术，而不是靠状态。</li>\n</ul>\n<h2><span id=\"三-如果创业我能为团队做什么\">三、如果创业我能为团队做什么？</span></h2>\n<ol>\n<li>项目后端的搭建，对各类常见的后端技术基本熟悉，这类东西也很烂大街；</li>\n<li>分布式后端编程，将单机模块进行分布式改造，以及搭建分布式模块，mysql、MongoDB等；</li>\n<li>简单的前端搭建，当然基本属于原始界面；</li>\n<li>前后端架构图设计。</li>\n</ol>\n<h2><span id=\"四-当下的感受\">四、当下的感受</span></h2>\n<p>竞争力的不足，虽然敢说自己的代码能力还算可以，但技术没有深度，你会的，别人也会，不够精细化，<code>细节处出魔鬼</code>，感觉这点很重要，不能光追求技术的广而全，也要停下来，注意下自己技术的漏洞，千里之堤溃于蚁穴。</p>\n<p>现如今，积极去追求技术上的一些突破，可以查看开源的代码进行学习，总结和归纳，将其多用于平时的项目中。另外，去做一些当下可能看不到结果的事，比如学习一些理论性的知识，学其原理，理解相关知识的内核知识。</p>\n<p>在很长的时间里，感觉自己已经很疲惫了，没有了发展的动力，甘做一个躺尸族，已经认为自己是一个普通人，但自己似乎搞错了一点，普通人依然需要向前走，普通人改变不了世界，但还是要做的是，让自己随着世界奔走才行，忽视了这一点，往往都得接收到来自社会的礼物——一顿毒打。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/12/31/科学需要谨慎，知识需要校校验/\">科学需要谨慎，知识需要校验</a></li><li><a href=\"chunlife.top/2019/03/19/搜集赏/\">搜集赏</a></li><li><a href=\"chunlife.top/2018/12/14/第一期/\">第一期</a></li><li><a href=\"http://yoursite.com/2020/03/28/swing/Shell-Script%E6%9D%A5%E6%96%B0%E5%8D%9A%E5%AE%A2/\">Shell Script更新博客</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"chunlife.top/tags/随笔/"}]},{"title":"fsnotify在windows上出现两次event的问题","date":"2020-03-24T13:03:15.000Z","path":"2020/03/24/fsnotify在windows上出现两次event的问题/","content":"<p><code>fsnotify</code>在linux上对文件监听是正常的，对比在windows上，却会出现两次event，这个问题解决方法如下：</p>\n<a id=\"more\"></a>\n<h3><span id=\"对fsnotify进行一次封装\">对<code>fsnotify</code>进行一次封装：</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Copyright 2015 The Hugo Authors. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Licensed under the Apache License, Version 2.0 (the \"License\");</span></span><br><span class=\"line\"><span class=\"comment\">// you may not use this file except in compliance with the License.</span></span><br><span class=\"line\"><span class=\"comment\">// You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\">// http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\">// distributed under the License is distributed on an \"AS IS\" BASIS,</span></span><br><span class=\"line\"><span class=\"comment\">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\">// See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\">// limitations under the License.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> watcher</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/fsnotify/fsnotify\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Batcher batches file watch events in a given interval.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Batcher <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t*fsnotify.Watcher</span><br><span class=\"line\">\tinterval time.Duration</span><br><span class=\"line\">\tdone     <span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tEvents <span class=\"keyword\">chan</span> []fsnotify.Event <span class=\"comment\">// Events are returned on this channel</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// New creates and starts a Batcher with the given time interval.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">New</span><span class=\"params\">(interval time.Duration)</span> <span class=\"params\">(*Batcher, error)</span></span> &#123;</span><br><span class=\"line\">\twatcher, err := fsnotify.NewWatcher()</span><br><span class=\"line\"></span><br><span class=\"line\">\tbatcher := &amp;Batcher&#123;&#125;</span><br><span class=\"line\">\tbatcher.Watcher = watcher</span><br><span class=\"line\">\tbatcher.interval = interval</span><br><span class=\"line\">\tbatcher.done = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tbatcher.Events = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> []fsnotify.Event, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> batcher.run()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> batcher, err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(b *Batcher)</span> <span class=\"title\">run</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttick := time.Tick(b.interval)</span><br><span class=\"line\">\tevs := <span class=\"built_in\">make</span>([]fsnotify.Event, <span class=\"number\">0</span>)</span><br><span class=\"line\">OuterLoop:</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> ev := &lt;-b.Watcher.Events:</span><br><span class=\"line\">\t\t\tevs = <span class=\"built_in\">append</span>(evs, ev)</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-tick:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(evs) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tb.Events &lt;- evs</span><br><span class=\"line\">\t\t\tevs = <span class=\"built_in\">make</span>([]fsnotify.Event, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-b.done:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span> OuterLoop</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">close</span>(b.done)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Close stops the watching of the files.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(b *Batcher)</span> <span class=\"title\">Close</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tb.done &lt;- <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125;</span><br><span class=\"line\">\tb.Watcher.Close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"使用\">使用</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"comment\">//创建一个监控对象</span></span><br><span class=\"line\">\twatch, err := watcher.New(<span class=\"number\">1</span> * time.Second)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"new watch :\"</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> watch.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//添加要监控的对象，文件或文件夹</span></span><br><span class=\"line\">\terr = watch.Add(needDataFilename)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"watch add :\"</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t......</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//我们另启一个goroutine来处理监控对象的事件</span></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> evs := &lt;-watch.Events:</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 处理事件</span></span><br><span class=\"line\">\t\t\t\thandleEvents(watch, evs)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> err := &lt;-watch.Errors:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tfmt.Println(<span class=\"string\">\"程序运行中的错误 :\"</span>, err)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleEvents</span><span class=\"params\">(watcher *watcher.Batcher, evs []fsnotify.Event)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, ev := <span class=\"keyword\">range</span> evs &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ev.Name == needDataFilename &#123;</span><br><span class=\"line\">        \t</span><br><span class=\"line\">            .......</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"fsnotify","slug":"fsnotify","permalink":"chunlife.top/tags/fsnotify/"},{"name":"two event","slug":"two-event","permalink":"chunlife.top/tags/two-event/"}]},{"title":"go mod 支持 http 的方式","date":"2020-03-15T07:04:46.000Z","path":"2020/03/15/go-mod-支持-http-的方式/","content":"<p>go mod 不支持 http 吗？</p>\n<p>是的，不支持。但有方法可以迂回。</p>\n<a id=\"more\"></a>\n<p>前几天公司刚引入go mod了，现在用的很爽就是了，比以前可是爽多了。</p>\n<p>解决方法，来源自<a href=\"https://gocn.vip/topics/9803\" target=\"_blank\" rel=\"noopener\">Go问答 go mod 不支持 http 吗？</a></p>\n<p>有两种做法：</p>\n<ol>\n<li><a href=\"http://goproxy.io\" target=\"_blank\" rel=\"noopener\">goproxy.io</a> 作者之前提过一个 PR，你可以试试直接修改源码在本地编译一下支持：<a href=\"https://go-review.googlesource.com/c/go/+/135735/\" target=\"_blank\" rel=\"noopener\">https://go-review.googlesource.com/c/go/+/135735/</a></li>\n<li>手工添加 require 到 gomod 文件，然后通过<code>go get -insecure</code>先下载，gosum 会自动更新上去</li>\n</ol>\n<hr>\n<p>其中 go mod的学习，<a href=\"https://mp.weixin.qq.com/s/zo7zmEVXvxgr80n6H_49Mg\" target=\"_blank\" rel=\"noopener\">Go Modules 终极入门</a>。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/05/28/解析Content-Disposition，获取文件名/\">解析Content-Disposition，获取文件名</a></li><li><a href=\"chunlife.top/2018/12/05/文件上传-服务器端/\">文件上传服务器端</a></li><li><a href=\"www.chunlife.top/2019/05/28/解析Content-Disposition，获取文件名/\">解析Content-Disposition，获取文件名</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"go mod","slug":"go-mod","permalink":"chunlife.top/tags/go-mod/"},{"name":"http","slug":"http","permalink":"chunlife.top/tags/http/"}]},{"title":"6.824 Lab 1: MapReduce","date":"2020-03-01T16:31:05.000Z","path":"2020/03/02/6-824-Lab-1-MapReduce/","content":"<p>Lab1花了三天时间，一些小细节不注意，在一些细节处出了许多问题，一点点的debug还是给解了，虽然完成的很慢，但做出来的那一刻还是很开心的，终于pass all了。</p>\n<p>注意：这篇文章不是为了记录解题思路，还是得遵从老师的意思。当然如果你正在解题，没有人交流的话，你可以选择两个，第一，在B站的该课程视频评论下，找到slack链接，加入进去；第二，联系我，我也会尽量帮助你理解这道实验题。</p>\n<a id=\"more\"></a>\n<h2><span id=\"一-理解\">一、理解</span></h2>\n<p>第一堂课的大部分内容来自：<a href=\"https://pdos.csail.mit.edu/6.824/papers/mapreduce.pdf\" target=\"_blank\" rel=\"noopener\">MapReduce (2004)</a>。对于我来说，听课的困难已经有点大了，阅读原文我第一想到的是有没有，翻译。刚好，这是有的。<a href=\"https://chunlife.top/2020/04/18/Google-MapReduce%E4%B8%AD%E6%96%87%E7%89%88/\">Google MapReduce中文版</a>。我的很多知识点均来自于这篇博客，若是理解了这篇博客，这个实验也就不难理解了。</p>\n<p>论文是必须要认真读的，可以去很好的理解MapReduce。</p>\n<p>维基百科对MapReduce的定义：</p>\n<blockquote>\n<p><strong>MapReduce</strong>是<a href=\"https://zh.wikipedia.org/wiki/Google\" target=\"_blank\" rel=\"noopener\">Google</a>提出的一个<a href=\"https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84\" target=\"_blank\" rel=\"noopener\">软件架构</a>，用于大规模数据集（大于1<a href=\"https://zh.wikipedia.org/wiki/Terabyte\" target=\"_blank\" rel=\"noopener\">TB</a>）的<a href=\"https://zh.wikipedia.org/wiki/%E4%B8%A6%E8%A1%8C%E9%81%8B%E7%AE%97\" target=\"_blank\" rel=\"noopener\">并行运算</a>。概念“Map（映射）”和“Reduce（归纳）”，及他们的主要思想，都是从<a href=\"https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80\" target=\"_blank\" rel=\"noopener\">函数式编程语言</a>借来的，还有从<a href=\"https://zh.wikipedia.org/w/index.php?title=%E7%9F%A2%E9%87%8F%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80&amp;action=edit&amp;redlink=1\" target=\"_blank\" rel=\"noopener\">矢量编程语言</a>借来的特性。[<a href=\"https://zh.wikipedia.org/wiki/MapReduce#endnote_map\" target=\"_blank\" rel=\"noopener\">1]</a></p>\n<p>当前的软件实现是指定一个*Map（映射）<em>函数，用来把一组键值对映射成一组新的键值对，指定并发的</em>Reduce（归纳）*函数，用来保证所有映射的键值对中的每一个共享相同的键组。</p>\n</blockquote>\n<p>将其大意转换为表格，即为：</p>\n<table>\n<thead>\n<tr>\n<th>map</th>\n<th>(k1, v1)</th>\n<th>→ list(k2, v2)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>reduce</td>\n<td>(k2, list(v2))</td>\n<td>→ list(v2)</td>\n</tr>\n</tbody>\n</table>\n<p>表格难理解，则可以转化为图片，即：将一个输出通过map映射处理后，（按key，或一致性hash等操作）分配给不同的reduce，让reduce进行并发的归纳。</p>\n<p><img src=\"image-20200302004558904.png\" alt=\"将一个输出分配通过map映射给不同的reduce，让reduce进行并发的归纳\"></p>\n<h2><span id=\"二-更多例子\">二、更多例子</span></h2>\n<p>这里例举了一些有趣的程序，它们都可以很轻松的用MapReduce模型表达。</p>\n<p>**分布式Grep：**map函数在匹配到给定的pattern时输出一行。reduce函数只是将给定的中间数据复制到输出上。</p>\n<p>**URL访问频次统计：**map函数处理网页请求的日志，对每个URL输出〈URL, 1〉。reduce函数将相同URL的所有值相加并输出〈URL, 总次数〉对。</p>\n<p>**倒转Web链接图：**map函数在source页面中针对每个指向target的链接都输出一个〈target, source〉对。reduce函数将与某个给定的target相关联的所有source链接合并为一个列表，并输出〈target, list(source)〉对。</p>\n<p>**每个主机的关键词向量：**关键词向量是对出现在一个文档或一组文档中的最重要的单词的概要，其形式为〈单词, 频率〉对。map函数针对每个输入文档（其主机名可从文档URL中提取到）输出一个〈主机名, 关键词向量〉对。给定主机的所有文档的关键词向量都被传递给reduce函数。reduce函数将这些关键词向量相加，去掉其中频率最低的关键词，然后输出最终的〈主机名, 关键词向量〉对。</p>\n<p>**倒排索引：**map函数解析每个文档，并输出一系列〈单词, 文档ID〉对。reduce函数接受给定单词的所有中间对，将它们按文档ID排序，再输出〈单词, list(文档ID)〉对。所有输出对的集合组成了一个简单的倒排索引。用户可以很轻松的扩展这个过程来跟踪单词的位置。</p>\n<p>**分布式排序：**map函数从每条记录中提取出key，并输出〈key, 记录〉对。reduce函数不改变这些中间对，直接输出。</p>\n<h2><span id=\"三-具体执行\">三、具体执行</span></h2>\n<p>通过自动将输入数据切分为M块，map调用分布在多台机器上进行。输入划分可以在不同的机器上并行执行。reduce调用是通过一个划分函数（例如hash(key) mod R)将中间key空间划分为R块来分布运行。划分的块数R和划分函数都由用户指定。</p>\n<p><img src=\"16105654-dd109e49f8b24b009add7af8608da1bd.png\" alt=\"QQ截图20131116105114\"></p>\n<p>图1展示了我们的实现中MapReduce操作的整体流程。当用户程序调用MapReduce函数时，会发生下面一系列动作（图1中的标号与下面列表顺序相同）：</p>\n<ol>\n<li>1.用户程序首先调用的MapReduce库将输入文件分成M个数据片度，每个数据片段的大小一般从16MB到64MB(可以通过可选的参数来控制每个数据片段的大小)。然后用户程序在机群中创建大量的程序副本。</li>\n<li>这些程序副本中的有一个特殊的程序–master。副本中其它的程序都是worker程序，由master分配任务。有M个Map任务和R个Reduce任务将被分配，master将一个Map任务或Reduce任务分配给一个空闲的worker。</li>\n<li>被分配了map任务的worker程序读取相关的输入数据片段，从输入的数据片段中解析出key/value pair，然后把key/value pair传递给用户自定义的Map函数，由Map函数生成并输出的中间key/value pair，并缓存在内存中。</li>\n<li>缓存中的key/value pair通过分区函数分成R个区域，之后周期性的写入到本地磁盘上。缓存的key/value pair在本地磁盘上的存储位置将被回传给master，由master负责把这些存储位置再传送给Reduce worker。</li>\n<li>当Reduce worker程序接收到master程序发来的数据存储位置信息后，使用RPC从Map worker所在<br>\n主机的磁盘上读取这些缓存数据。当Reduce worker读取了所有的中间数据后，通过对key进行排序后使得具有相同key值的数据聚合在一起。由于许多不同的key值会映射到相同的Reduce任务上，因此必须进行排序。如果中间数据太大无法在内存中完成排序，那么就要在外部进行排序。</li>\n<li>Reduce worker程序遍历排序后的中间数据，对于每一个唯一的中间key值，Reduce worker程序将这个key值和它相关的中间value值的集合传递给用户自定义的Reduce函数。Reduce函数的输出被追加到所属分区的输出文件。</li>\n<li>当所有的Map和Reduce任务都完成之后，master唤醒用户程序。在这个时候，在用户程序里的对MapReduce调用才返回。</li>\n</ol>\n<p>成功完成后，MapReduce执行的输出都在R个输出文件中（每个reduce任务产生一个，文件名由用户指定）。通常用户不需要合并这R个输出文件——他们经常会把这些文件当作另一个MapReduce调用的输入，或是用于另一个可以处理分成多个文件输入的分布式应用。</p>\n<h2><span id=\"四-容错\">四、容错</span></h2>\n<p>错误在一个系统中，我们应假定其是普遍出现的，所以，系统应实现有一定的容错能力。</p>\n<h3><span id=\"worker故障\">worker故障</span></h3>\n<p>master周期性的ping每个worker。如果在一个约定的时间范围内没有收到worker返回的信息，master将把这个worker标记为失效。所有由这个失效的worker完成的Map任务被重设为初始的空闲状态，之后这些任务就可以被安排给其他的worker。同样的，worker失效时正在运行的Map或Reduce任务也将被重新置为空闲状态，等待重新调度。</p>\n<p>当worker故障时，由于已经完成的Map任务的输出存储在这台机器上，Map任务的输出已不可访问了，因此必须<strong>重新执行</strong>。而已经完成的Reduce任务的输出存储在全局文件系统上，因此不需要再次执行。</p>\n<p>当一个Map任务首先被worker A执行，之后由于worker A失效了又被调度到worker B执行，这个“重新执行”的动作会被通知给所有执行Reduce任务的worker。任何还没有从worker A读取数据的Reduce任务将从worker B读取数据。</p>\n<p>MapReduce可以处理大规模worker失效的情况。比如，在一个MapReduce操作执行期间，在正在运行的集群上进行网络维护引起80台机器在几分钟内不可访问了，MapReduce master只需要简单的再次执行那些不可访问的worker完成的工作，之后继续执行未完成的任务，直到最终完成这个MapReduce操作。</p>\n<h3><span id=\"master失败\">master失败</span></h3>\n<p>一个简单的解决办法是让master周期性的将上面描述的数据结构的写入磁盘，checkpoint。如果这个master任务失效了，可以从最后一个检查点（checkpoint）开始启动另一个master进程。</p>\n<h3><span id=\"存储位置\">存储位置</span></h3>\n<p>使用GFS，本地均有备份，直接利用本地磁盘（尽可能的让有本地记录的机器进行本地操作）。</p>\n<h3><span id=\"任务粒度\">任务粒度</span></h3>\n<p>把Map拆分成了M个片段、把Reduce拆分成R个片段执行。理想情况下，M和R应当比集群中worker的机器数量要多得多。</p>\n<p>R值通常是由用户指定的，因为每个Reduce任务最终都会生成一个独立的输出文件。实际使用时我们也倾向于选择合适的M值，以使得每一个独立任务都是处理大约16M到64M的输入数据，另外，我们把R值设置为我们想使用的worker机器数量的小的倍数。我们通常会用这样的比例来执行MapReduce：M=200000，R=5000，使用2000台worker机器。</p>\n<h3><span id=\"备用任务\">备用任务</span></h3>\n<p>影响一个MapReduce的总执行时间最通常的因素是“落伍者”：在运算过程中，如果有一台机器花了很长的时间才完成最后几个Map或Reduce任务，导致MapReduce操作总的执行时间超过预期。</p>\n<p>当一个MapReduce操作接近完成的时候，master调度备用（backup）任务进程来执行剩下的、处于处理中状态（in-progress）的任务。无论是最初的执行进程、还是备用（backup）任务进程完成了任务，我们都把这个任务标记成为已经完成。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/04/01/etcd分布式乐观锁/\">etcd分布式乐观锁</a></li><li><a href=\"www.chunlife.top/2019/04/01/etcd分布式乐观锁/\">etcd分布式乐观锁</a></li></ul></div>","categories":[{"name":"分布式服务","slug":"分布式服务","permalink":"chunlife.top/categories/分布式服务/"}],"tags":[{"name":"6.824","slug":"6-824","permalink":"chunlife.top/tags/6-824/"},{"name":"MapReduce","slug":"MapReduce","permalink":"chunlife.top/tags/MapReduce/"},{"name":"分布式","slug":"分布式","permalink":"chunlife.top/tags/分布式/"}]},{"title":"使用GO导出JIRA项目到excel","date":"2020-03-01T16:12:39.000Z","path":"2020/03/02/使用GO导出JIRA项目到excel/","content":"<p>这是个小工具，比如想输出一个表格，每个表格都是对应着公司的<code>JIRA</code>正在跑的项目，那就可以使用Go将其导出。</p>\n<p>如果单独去研究<code>JIRA</code>的库是没有特别的必要的，首先要找的是不是已经存在脚手架了，此处使用：<a href=\"github.com/andygrunwald/go-jira\">go-jira</a>。</p>\n<a id=\"more\"></a>\n<p>创建JIRA客户端访问句柄：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tp := jira.BasicAuthTransport&#123;</span><br><span class=\"line\">\tUsername: *user,</span><br><span class=\"line\">\tPassword: *pw,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">client, err := jira.NewClient(tp.Client(),</span><br><span class=\"line\">\t<span class=\"string\">\"http://jira.xxxxx.com\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"new jira client error ,\"</span>, err)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以获取到所有的project：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">req, _ := client.NewRequest(<span class=\"string\">\"GET\"</span>, <span class=\"string\">\"rest/api/2/project\"</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">projects := <span class=\"built_in\">new</span>([]jira.Project)</span><br><span class=\"line\">_, err = client.Do(req, projects)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据获取到的项目名，即可获取到项目下的所有issue：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MaxResults 控制着能返回的issue的数量</span></span><br><span class=\"line\">jql := fmt.Sprintf(<span class=\"string\">\"project = \\\"%s\\\"\"</span>, projectName)</span><br><span class=\"line\">options := &amp;jira.SearchOptions&#123;MaxResults:<span class=\"number\">1000</span>&#125;</span><br><span class=\"line\">issues, _, err := client.Issue.Search(jql, options)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"search %s project error %v\"</span>, projectName, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此就结束了，至于其他的特殊操作，这个库也是可以去操作的，比如库里没有，但jira上有的API，可以使用这个函数去获取数据，数据体可以通过浏览器进行查看后，写出来即可。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Client)</span> <span class=\"title\">NewRequest</span><span class=\"params\">(method <span class=\"keyword\">string</span>, urlStr <span class=\"keyword\">string</span>, body <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(*http.Request, error)</span></span></span><br></pre></td></tr></table></figure>\n<p>写excel的操作，同样非常简单，可以参考我的另一篇博客，进行站内搜索excel即可。</p>\n<blockquote>\n<p>截止到目前：2020-4-16，go-jira的最新的代码里头出了点问题，目前的体现是，设置jira.SearchOptions {MaxResults: 100}，但是依然只会返回默认50，根据我的测试，这是在commit-<code>436469b62d4d62037f380b38c918a13f4a5f0ab2</code>之后，这个bug就出现了，其他的暂未发现有什么问题，也和我用到的功能并不多有关。</p>\n</blockquote>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/12/19/go写xlsx文件/\">go写excel xlsx文件</a></li><li><a href=\"chunlife.top/2018/08/15/创建CSV，数据导入excel文件/\">创建CSV，数据导入excel文件</a></li><li><a href=\"https://e1sewhere.github.io/2019/05/11/office-使用遇到的问题/\">Office 使用遇到的问题</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"excel","slug":"excel","permalink":"chunlife.top/tags/excel/"},{"name":"Jira export","slug":"Jira-export","permalink":"chunlife.top/tags/Jira-export/"}]},{"title":"B站源码中的log-agent","date":"2020-02-18T09:11:44.000Z","path":"2020/02/18/B站源码中的log-agent/","content":"<p>抱着学习的心态学习一下别家<code>农场</code>的代码，不同厂商的代码习惯肯定是不同的，标准更为的不同，这些都是我们可以学习的目标，毕竟很多东西是可以用来借鉴的，当然，轮子这玩意，能用现在还在维护的，就使用还在维护的，我其实有点不理解为啥要重复造轮子这事。</p>\n<h2><span id=\"前言\">前言</span></h2>\n<p>根据现在在了解的东西，选了一个log-agent模块来看看，初看只看发现有点眼熟，后来看了下确实是<code>filebeat</code>，这里面很多东西是搬的<code>filebeat</code>那一套，当然，我说的就包括有设计框架，那到底B站是怎么魔改的呢，借此我要来学习了。</p>\n<a id=\"more\"></a>\n<h2><span id=\"学习\">学习</span></h2>\n<h3><span id=\"代码目录\">代码目录：</span></h3>\n<p><img src=\"image-20200218203251720.png\" alt=\"代码目录\"></p>\n<h3><span id=\"见解\">见解：</span></h3>\n<p><img src=\"image-20200218203401147.png\" alt=\"image-20200218203401147\"></p>\n<h3><span id=\"代码详情\">代码详情：</span></h3>\n<p>这里我只写到两个函数就终止：</p>\n<p><img src=\"image-20200218203543898.png\" alt=\"image-20200218203543898\"></p>\n<p>pipeline.InitPipelineMng：</p>\n<p><img src=\"image-20200218203619852.png\" alt=\"pipeline.InitPipelineMng\"></p>\n<p><img src=\"image-20200218203734821.png\" alt=\"pipeline.InitPipelineMng\"></p>\n<p>hostlogcollector.InitHostLogCollector：</p>\n<p><img src=\"image-20200218203848834.png\" alt=\"hostlogcollector.InitHostLogCollector\"></p>\n<p>其中context的应用，也是一个可以关注的点，这个玩意在gin，trace等各类上下文的操作中都有着很多应用。</p>\n<p><img src=\"image-20200218204034599.png\" alt=\"context\"></p>\n<h2><span id=\"疑惑\">疑惑</span></h2>\n<p>另外我在这份代码上头有个疑惑，我认为这个地方有点问题：</p>\n<p><img src=\"image-20200218204135654.png\" alt=\"image-20200218204135654\"></p>\n<h2><span id=\"最后\">最后</span></h2>\n<p>因为log-agent参考的是filebeat的代码，上面input很多参数信息都是需要参考下filebeat的，否则很多信息都是无法知晓其含义的。</p>\n<p>看图应该是看不清的，如果后面有人看到这的，可以自行去搜索看看，在elastic官网上解释的非常详尽。</p>\n<p><img src=\"image-20200218204433538.png\" alt=\"image-20200218204433538\"></p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/12/18/使用unsafe-pointer引发GC错误/\">使用unsafe pointer引发GC错误</a></li><li><a href=\"chunlife.top/2019/09/27/MongoDB多表查询/\">MongoDB多表查询</a></li><li><a href=\"chunlife.top/2019/06/07/MongoDB命令一览/\">MongoDB命令一览</a></li><li><a href=\"https://lailin.xyz/post/11996.html\">Go Web 小技巧（三）Gin 参数绑定</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"bilibili源码","slug":"bilibili源码","permalink":"chunlife.top/tags/bilibili源码/"},{"name":"bilibili code","slug":"bilibili-code","permalink":"chunlife.top/tags/bilibili-code/"}]},{"title":"Go gin单元测试","date":"2020-02-12T08:56:07.000Z","path":"2020/02/12/Go-gin单元测试/","content":"<p>这个好像没什么好讲，主要是gin框架下，httptest包要怎么写，这个是重点。直接上代码吧。</p>\n<a id=\"more\"></a>\n<p><code>main.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">   <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">   <span class=\"string\">\"github.com/gin-gonic/gin\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   router := SetupRouter()</span><br><span class=\"line\">   router.Run()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SetupRouter</span><span class=\"params\">()</span> *<span class=\"title\">gin</span>.<span class=\"title\">Engine</span></span> &#123;</span><br><span class=\"line\">   router := gin.Default()</span><br><span class=\"line\">   router.GET(<span class=\"string\">\"/\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">      c.JSON(http.StatusOK, gin.H&#123;</span><br><span class=\"line\">          <span class=\"string\">\"hello\"</span>: <span class=\"string\">\"world\"</span>,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">return</span> router</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>main_test.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">   <span class=\"string\">\"encoding/json\"</span></span><br><span class=\"line\">   <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">   <span class=\"string\">\"net/http/httptest\"</span></span><br><span class=\"line\">   <span class=\"string\">\"testing\"</span></span><br><span class=\"line\">   <span class=\"string\">\"github.com/gin-gonic/gin\"</span></span><br><span class=\"line\">   <span class=\"string\">\"github.com/stretchr/testify/assert\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">performRequest</span><span class=\"params\">(r http.Handler, method, path <span class=\"keyword\">string</span>)</span> *<span class=\"title\">httptest</span>.<span class=\"title\">ResponseRecorder</span></span> &#123;</span><br><span class=\"line\">   req, _ := http.NewRequest(method, path, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">   w := httptest.NewRecorder()</span><br><span class=\"line\">   r.ServeHTTP(w, req)</span><br><span class=\"line\">   <span class=\"keyword\">return</span> w</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestHelloWorld</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// Build our expected body</span></span><br><span class=\"line\">   body := gin.H&#123;</span><br><span class=\"line\">      <span class=\"string\">\"hello\"</span>: <span class=\"string\">\"world\"</span>,</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// Grab our router</span></span><br><span class=\"line\">   router := SetupRouter()</span><br><span class=\"line\">   <span class=\"comment\">// Perform a GET request with that handler.</span></span><br><span class=\"line\">   w := performRequest(router, <span class=\"string\">\"GET\"</span>, <span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">   <span class=\"comment\">// Assert we encoded correctly,</span></span><br><span class=\"line\">   <span class=\"comment\">// the request gives a 200</span></span><br><span class=\"line\">   assert.Equal(t, http.StatusOK, w.Code)</span><br><span class=\"line\">   <span class=\"comment\">// Convert the JSON response to a map</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> response <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span></span><br><span class=\"line\">   err := json.Unmarshal([]<span class=\"keyword\">byte</span>(w.Body.String()), &amp;response)</span><br><span class=\"line\">   <span class=\"comment\">// Grab the value &amp; whether or not it exists</span></span><br><span class=\"line\">   value, exists := response[<span class=\"string\">\"hello\"</span>]</span><br><span class=\"line\">   <span class=\"comment\">// Make some assertions on the correctness of the response.</span></span><br><span class=\"line\">   assert.Nil(t, err)</span><br><span class=\"line\">   assert.True(t, exists)</span><br><span class=\"line\">   assert.Equal(t, body[<span class=\"string\">\"hello\"</span>], value)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>代码：<a href=\"https://medium.com/@craigchilds94/testing-gin-json-responses-1f258ce3b0b1\" target=\"_blank\" rel=\"noopener\">Testing Gin — JSON Responses</a></p>\n</blockquote>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2018/09/14/json操作/\">json操作</a></li><li><a href=\"chunlife.top/2018/09/11/gin的学习框架/\">gin的学习框架</a></li><li><a href=\"https://lailin.xyz/post/11996.html\">Go Web 小技巧（三）Gin 参数绑定</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"gin","slug":"gin","permalink":"chunlife.top/tags/gin/"},{"name":"go test","slug":"go-test","permalink":"chunlife.top/tags/go-test/"},{"name":"httptest","slug":"httptest","permalink":"chunlife.top/tags/httptest/"}]},{"title":"根据SQL文件自动生成Markdown","date":"2020-02-08T21:29:10.000Z","path":"2020/02/09/根据SQL文件自动生成Markdown/","content":"<p>闲暇的时候写了个根据SQL文件自动转化成Markdown文件的工具，因为go程序编程成程序，使用非常方便。</p>\n<p>而且相对来说，这玩意写起来，关键其实是在正则表达式，这玩意也是让我猝不及防的。</p>\n<a id=\"more\"></a>\n<p>上地址：<a href=\"https://github.com/younglifestyle/autoBuildMDFromDb\" target=\"_blank\" rel=\"noopener\">autoBuildMDFromDb</a>.</p>\n<p>写Markdown图表是使用到了<a href=\"github.com/olekukonko/tablewriter\">tablewriter</a>。</p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `machine_info` (</span><br><span class=\"line\">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;自增id&apos;,</span><br><span class=\"line\">  `name` VARCHAR(40) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;机器的名字&apos;,</span><br><span class=\"line\">  `resume` VARCHAR(50) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;机器的简介&apos;,</span><br><span class=\"line\">  `type` VARCHAR(10) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;机器类型&apos;,</span><br><span class=\"line\">  `site` int(11) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;机位&apos;,</span><br><span class=\"line\">  `available` BOOLEAN NOT NULL COMMENT &apos;设备是否可用&apos;,</span><br><span class=\"line\">  `bind` VARCHAR(40) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;绑定的标识，比如AGENT ID&apos;,</span><br><span class=\"line\">  `ctime` int unsigned NOT NULL DEFAULT 0 COMMENT &apos;创建时间&apos;,</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;机器信息&apos;;</span><br></pre></td></tr></table></figure>\n<p>转化为Markdown格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## machine_info表(机器信息)</span><br><span class=\"line\"></span><br><span class=\"line\">| 字段名称  |  字段类型   |         字段含义         |</span><br><span class=\"line\">|-----------|-------------|--------------------------|</span><br><span class=\"line\">| id        | int(11)     | 自增id                   |</span><br><span class=\"line\">| name      | VARCHAR(40) | 机器的名字               |</span><br><span class=\"line\">| resume    | VARCHAR(50) | 机器的简介               |</span><br><span class=\"line\">| type      | VARCHAR(10) | 机器类型                 |</span><br><span class=\"line\">| site      | int(11)     | 机位                     |</span><br><span class=\"line\">| available | BOOLEAN     | 设备是否可用             |</span><br><span class=\"line\">| bind      | VARCHAR(40) | 绑定的标识，比如AGENT ID |</span><br><span class=\"line\">| ctime     | int         | 创建时间                 |</span><br></pre></td></tr></table></figure>\n<p>其展示为：</p>\n<p><strong>machine_info表(机器信息)</strong></p>\n<table>\n<thead>\n<tr>\n<th>字段名称</th>\n<th>字段类型</th>\n<th>字段含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>int(11)</td>\n<td>自增id</td>\n</tr>\n<tr>\n<td>name</td>\n<td>VARCHAR(40)</td>\n<td>机器的名字</td>\n</tr>\n<tr>\n<td>resume</td>\n<td>VARCHAR(50)</td>\n<td>机器的简介</td>\n</tr>\n<tr>\n<td>type</td>\n<td>VARCHAR(10)</td>\n<td>机器类型</td>\n</tr>\n<tr>\n<td>site</td>\n<td>int(11)</td>\n<td>机位</td>\n</tr>\n<tr>\n<td>available</td>\n<td>BOOLEAN</td>\n<td>设备是否可用</td>\n</tr>\n<tr>\n<td>bind</td>\n<td>VARCHAR(40)</td>\n<td>绑定的标识，比如AGENT ID</td>\n</tr>\n<tr>\n<td>ctime</td>\n<td>int</td>\n<td>创建时间</td>\n</tr>\n</tbody>\n</table>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/06/10/Markdown-For-Typora-中文版使用指南（转载）/\">Markdown For Typora 中文版使用指南（转载）</a></li><li><a href=\"www.chunlife.top/2019/06/10/Markdown-For-Typora-中文版使用指南（转载）/\">Markdown For Typora 中文版使用指南（转载）</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"markdown","slug":"markdown","permalink":"chunlife.top/tags/markdown/"},{"name":"convert","slug":"convert","permalink":"chunlife.top/tags/convert/"},{"name":"sql","slug":"sql","permalink":"chunlife.top/tags/sql/"}]},{"title":"搭建并行管道(学习)","date":"2020-02-08T16:34:34.000Z","path":"2020/02/09/搭建并行管道-学习/","content":"<p>学习<a href=\"https://www.imooc.com/learn/927\" target=\"_blank\" rel=\"noopener\">搭建并行处理管道，感受GO语言魅力</a>。</p>\n<p>学习的<a href=\"https://github.com/younglifestyle/course/tree/master/learn_pipe\" target=\"_blank\" rel=\"noopener\">代码</a>。</p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"pipe","slug":"pipe","permalink":"chunlife.top/tags/pipe/"},{"name":"goroutine - Go","slug":"goroutine-Go","permalink":"chunlife.top/tags/goroutine-Go/"}]},{"title":"令牌桶算法的学习","date":"2020-01-30T13:58:44.000Z","path":"2020/01/30/令牌桶算法的学习/","content":"<p>在一些需要大量访问的服务中，访问量过大，处理方式无非是，① 提升后台性能（包括提升硬件性能，优化代码或者分布式架构这些的）；② 限速，（在一顿时间内，限制访问者的成功率，例如某接口访问限制为1000次/s）。</p>\n<p>在实现限速功能的时候，其中一种常用的方法是使用 token bucket 算法来实现。</p>\n<p>我之前写过一篇比较简单的，<a href=\"https://chunlife.top/2018/09/02/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%99%90%E6%B5%81%E9%97%AE%E9%A2%98/\">服务器限流问题</a>。</p>\n<a id=\"more\"></a>\n<h2><span id=\"前言\">前言</span></h2>\n<p>简单的描述限流就是对并发请求进行限制或对一个时间窗内的请求进行限速来保护系统，当请求到达限制时将会被拒绝或降级。</p>\n<p>其实不管我们过去是否关注过限流，几乎都和限流打过交道，例如我们在开发中常用的各种资源池技术(线程池、数据库连接池、对象池)本质上都是限制总并发数，实际上就是通过计数器算法的限流。</p>\n<p>维基百科的描述：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- A token is added to the bucket every 1/r seconds. </span><br><span class=\"line\">- The bucket can hold at the most b tokens. If a token arrives when the bucket is full, it is discarded. </span><br><span class=\"line\">- When a packet (network layer PDU) of n bytes arrives, </span><br><span class=\"line\">  - if at least n tokens are in the bucket, n tokens are removed from the bucket, and the packet is sent to the network. </span><br><span class=\"line\">  - if fewer than n tokens are available, no tokens are removed from the bucket, and the packet is considered to be non-conformant.</span><br></pre></td></tr></table></figure>\n<ul>\n<li>每隔 1/r 秒向 bucket 中增加一个 token。</li>\n<li>这个 bucket 最多只能存放 b 个 token。如果放置 token 时 bucket 已经满了，丢弃这个 token。</li>\n<li>当一个包含 n 个字节的数据包进来的时候，\n<ul>\n<li>如果 bucket 中有 &gt;= n 个 token，将从 bucket 中移除 n 个 token，然后把这个数据包发送出去。</li>\n<li>如果可用的 token &lt; n，此时不会从 bucket 中移除任何的 token，但是这个数据包会被认为是被限制的数据包。</li>\n</ul>\n</li>\n</ul>\n<h2><span id=\"常见的实现方法\">常见的实现方法</span></h2>\n<p>一般有两种实现方法。</p>\n<p>一种是按照 token bucket 的说明，真的做放 token 的操作：</p>\n<ul>\n<li>后台有个线程每 1/n 秒将 bucket 中的 token 数量加一，直至达到 bucket 容量。</li>\n<li>主线程检查限速时，比较 bucket 中 token 的数量，如果少于需要的数量，表示当前被限制。 （比如，一个请求进来，检查 bucket 中的 token 数量是否 &gt; 1，如果 &gt; 1请求放行同时把 token 数量减 1， 如果 &lt; 1 说明当前请求已超出速率限制，请求被拒绝。）</li>\n</ul>\n<p>这种方法有一个很大的缺点，那就是因为每个 token bucket 都会有一个繁忙的后台线程在更新 token 数量，会 导致严重占用系统 CPU 出现严重的性能问题。假设我们的限速是限制为 1000/s，此时后台每隔 1ms 就会更新一次 token 数量，可以想像每个后台线程都会频繁占用 CPU，用这种方法实现的 rate limiting 处理不了几个请求就会出现 CPU 接近 100% 的情况。所以实践中一般用另一种方法来实现 token bucket。</p>\n<p>另一种是在取 token 时计算上次取跟这次取之间按照速率会产生多少个 token 加上上次剩余的 token （不能超过 bucket 容量限制），然后比较剩余 token 数是否满足需要。</p>\n<h3><span id=\"第一种算法实现\">第一种算法实现</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Bucket <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tmax   <span class=\"keyword\">int</span></span><br><span class=\"line\">\tch    <span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\">\ttimer *time.Ticker</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewBucket</span><span class=\"params\">(n <span class=\"keyword\">int</span>, sec time.Duration)</span> *<span class=\"title\">Bucket</span></span> &#123;</span><br><span class=\"line\">\tb := &amp;Bucket&#123;</span><br><span class=\"line\">\t\tmax:   n,</span><br><span class=\"line\">\t\tch:    <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;, n),</span><br><span class=\"line\">\t\ttimer: time.NewTicker(sec),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> b.ticker()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(b *Bucket)</span> <span class=\"title\">Get</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> &lt;-b.ch:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(b *Bucket)</span> <span class=\"title\">ticker</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.max; i++ &#123;</span><br><span class=\"line\">\t\tb.ch &lt;- <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-b.timer.C:</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">\"len: \"</span>, <span class=\"built_in\">len</span>(b.ch))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> i := <span class=\"built_in\">len</span>(b.ch); i &lt; b.max; i++ &#123;</span><br><span class=\"line\">\t\t\t\tb.ch &lt;- <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tbucket := NewBucket(<span class=\"number\">10</span>, <span class=\"number\">3</span>*time.Second)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(b *Bucket, id <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> b.Get() &#123;</span><br><span class=\"line\">\t\t\t\t\tfmt.Println(<span class=\"string\">\"ok: \"</span>, id)</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tfmt.Println(<span class=\"string\">\"no: \"</span>, id)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\ttime.Sleep(<span class=\"number\">2</span> * time.Second)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;(bucket, i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">select</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"第二种算法\">第二种算法</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 令牌桶限</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> TokenBucket <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tlastFillTime time.Time  <span class=\"comment\">// 上一次填充时间</span></span><br><span class=\"line\">\ttokenPerNano <span class=\"keyword\">float64</span>    <span class=\"comment\">// 每纳秒填充的令牌个数</span></span><br><span class=\"line\">\ttokenCount   <span class=\"keyword\">float64</span>    <span class=\"comment\">// 剩余令牌数量</span></span><br><span class=\"line\">\tcapacity     <span class=\"keyword\">float64</span>    <span class=\"comment\">// 桶容量</span></span><br><span class=\"line\">\tmutex        sync.Mutex <span class=\"comment\">// 线程安全</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建限制速率的令牌桶</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CreateBucketForRate</span><span class=\"params\">(rate <span class=\"keyword\">float64</span>)</span> *<span class=\"title\">TokenBucket</span></span> &#123;</span><br><span class=\"line\">\tr := TokenBucket&#123;&#125;</span><br><span class=\"line\">\tr.tokenPerNano = rate / <span class=\"number\">1e9</span></span><br><span class=\"line\">\tr.lastFillTime = time.Now()</span><br><span class=\"line\">\tr.tokenCount = rate</span><br><span class=\"line\">\tr.capacity = rate</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;r</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 阻塞版本</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(bucket *TokenBucket)</span> <span class=\"title\">getToken</span><span class=\"params\">(count <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tneedWait, waitTime := bucket.getTokenWithoutBlock(count)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> needWait &#123;</span><br><span class=\"line\">\t\ttime.Sleep(waitTime)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 非阻塞版本</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(bucket *TokenBucket)</span> <span class=\"title\">getTokenWithoutBlock</span><span class=\"params\">(count <span class=\"keyword\">int</span>)</span> <span class=\"params\">(needWait <span class=\"keyword\">bool</span>, waitTime time.Duration)</span></span> &#123;</span><br><span class=\"line\">\tbucket.mutex.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> bucket.mutex.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 填充令牌</span></span><br><span class=\"line\">\tbucket.tryFillBucket()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 令牌足够</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> bucket.tokenCount &gt;= <span class=\"keyword\">float64</span>(count) &#123;</span><br><span class=\"line\">\t\tbucket.tokenCount -= <span class=\"keyword\">float64</span>(count)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>, <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 需要等待的时间（浮点数不精确,取绝对值）</span></span><br><span class=\"line\">\twaitTime = time.Duration(math.Abs((<span class=\"keyword\">float64</span>(count) - bucket.tokenCount) / bucket.tokenPerNano))</span><br><span class=\"line\">\t<span class=\"comment\">// 更新令牌数量（先到先得）</span></span><br><span class=\"line\">\tbucket.tokenCount -= <span class=\"keyword\">float64</span>(count)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>, waitTime</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 补充令牌</span></span><br><span class=\"line\"><span class=\"comment\">// 取 token 时计算上次取跟这次取之间按照速率会产生多少个 token</span></span><br><span class=\"line\"><span class=\"comment\">// 加上上次剩余的 token （不能超过 bucket 容量限制），</span></span><br><span class=\"line\"><span class=\"comment\">// 然后比较剩余 token 数是否满足取的需要</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(bucket *TokenBucket)</span> <span class=\"title\">tryFillBucket</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnow := time.Now()</span><br><span class=\"line\">\tpassedTime := now.Sub(bucket.lastFillTime)</span><br><span class=\"line\"></span><br><span class=\"line\">\tbucket.tokenCount += <span class=\"keyword\">float64</span>(passedTime.Nanoseconds()) * bucket.tokenPerNano</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> bucket.tokenCount &gt; bucket.capacity &#123;</span><br><span class=\"line\">\t\tbucket.tokenCount = bucket.capacity</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbucket.lastFillTime = now</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此代码来自于：<a href=\"https://github.com/owenliang/bigpipe\" target=\"_blank\" rel=\"noopener\">bigpipe</a>。</p>\n<p>若是要修改成web服务器使用呢，则可以将其包装成一个中间服务(这里使用<code>gin</code>)：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(bucket *TokenBucket)</span> <span class=\"title\">Middleware</span><span class=\"params\">()</span> <span class=\"title\">gin</span>.<span class=\"title\">HandlerFunc</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tneedWait, _ := bucket.getTokenWithoutBlock(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> needWait &#123;</span><br><span class=\"line\">\t\t\terr := errors.New(<span class=\"string\">\"Too many requests\"</span>)</span><br><span class=\"line\">\t\t\tctx.AbortWithError(<span class=\"number\">429</span>, err)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tctx.Writer.Header().Set(<span class=\"string\">\"X-RateLimit-Remaining\"</span>, fmt.Sprintf(<span class=\"string\">\"%f\"</span>, bucket.tokenCount))</span><br><span class=\"line\">\t\t\tctx.Writer.Header().Set(<span class=\"string\">\"X-RateLimit-Limit\"</span>, fmt.Sprintf(<span class=\"string\">\"%f\"</span>, bucket.capacity))</span><br><span class=\"line\">\t\t\tctx.Next()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"特点\">特点</span></h2>\n<p>通过 token bucket 的介绍以及对具体实现的了解，可以发现 token bucket 有以下特点：</p>\n<ul>\n<li>当 bucket 满的时候，将不再放入 token，即 token 数不能超过 bucket 容量限制。</li>\n<li>因为可以一次性从 bucket 拿出大量的 token 所以 token bucket 允许突发的峰值， 即，限速不是绝对的，而是允许存在尖峰/波峰。</li>\n</ul>\n<h2><span id=\"参考附录\">参考附录</span></h2>\n<p><a href=\"https://www.jianshu.com/p/9aaf7ee776d2\" target=\"_blank\" rel=\"noopener\">令牌桶（Token Bucket）</a></p>\n<p><a href=\"https://mozillazg.com/2019/01/rate-limiting-intro-token-bucket.html\" target=\"_blank\" rel=\"noopener\">rate limiting 之 token bucket</a></p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"服务器","slug":"服务器","permalink":"chunlife.top/tags/服务器/"},{"name":"限流","slug":"限流","permalink":"chunlife.top/tags/限流/"},{"name":"bucket token","slug":"bucket-token","permalink":"chunlife.top/tags/bucket-token/"},{"name":"rate limit","slug":"rate-limit","permalink":"chunlife.top/tags/rate-limit/"},{"name":"令牌桶","slug":"令牌桶","permalink":"chunlife.top/tags/令牌桶/"}]},{"title":"通过代码学习熔断器","date":"2020-01-29T13:05:16.000Z","path":"2020/01/29/通过方法学习熔断器/","content":"<p>本文是学习熔断器后的一些总结，之前就对微服务相关的东西进行一些了解，其中熔断器肯定是需要了解的。</p>\n<p>为什么需要熔断器呢？</p>\n<p>分布式系统中经常会出现某个基础服务不可用造成整个系统不可用的情况, 这种现象被称为服务雪崩效应。为了应对服务雪崩，一种常见的做法是手动<code>服务降级</code>(将一些<strong>不重要</strong> 或 <strong>不紧急</strong>的服务或任务进行服务的 <strong>延迟使用</strong> 或 <strong>暂停使用</strong>)。而Hystrix（熔断器）的出现，给我们提供了另一种选择。</p>\n<a id=\"more\"></a>\n<h2><span id=\"前言\">前言</span></h2>\n<p>对熔断器更多详细的介绍，我就不一一介绍了，可以直接查看这篇文章，对熔断器的介绍非常详细。</p>\n<p><a href=\"https://segmentfault.com/a/1190000005988895\" target=\"_blank\" rel=\"noopener\">防雪崩利器：熔断器 Hystrix 的原理与使用</a>。</p>\n<p>直接引入熔断器模式具体详细定义：</p>\n<h2><span id=\"熔断器模式\">熔断器模式</span></h2>\n<p>熔断器模式定义了熔断器开关相互转换的逻辑：</p>\n<p><img src=\"image-20200129213638785.png\" alt=\"image-20200129213638785\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">         Closed </span><br><span class=\"line\">         /    \\</span><br><span class=\"line\"> Half-Open &lt;--&gt; Open</span><br><span class=\"line\"></span><br><span class=\"line\">初始状态是：Closed，指熔断器放行所有请求。</span><br><span class=\"line\">达到一定数量的错误计数，进入Open 状态，指熔断发生，下游出现错误，不能再放行请求。</span><br><span class=\"line\">经过一段Interval时间后，自动进入Half-Open状态，然后开始尝试对成功请求计数。</span><br><span class=\"line\">进入Half-Open后，根据成功/失败计数情况，会自动进入Closed或Open。</span><br></pre></td></tr></table></figure>\n<p>服务的健康状况 = 请求失败数 / 请求总数.</p>\n<p>熔断器开关由关闭到打开的状态转换是通过当前服务健康状况和设定阈值比较决定的.</p>\n<ol>\n<li>当熔断器开关关闭时, 请求被允许通过熔断器. 如果当前健康状况高于设定阈值, 开关继续保持关闭. 如果当前健康状况低于设定阈值, 开关则切换为打开状态.</li>\n<li>当熔断器开关打开时, 请求被禁止通过.</li>\n<li>当熔断器开关处于打开状态, 经过一段时间后, 熔断器会自动进入半开状态, 这时熔断器只允许一个请求通过. 当该请求调用成功时, 熔断器恢复到关闭状态. 若该请求失败, 熔断器继续保持打开状态, 接下来的请求被禁止通过.</li>\n</ol>\n<p>熔断器的开关能保证服务调用者在调用异常服务时, 快速返回结果, 避免大量的同步等待. 并且熔断器能在一段时间后继续侦测请求执行结果, 提供恢复服务调用的可能.</p>\n<h2><span id=\"代码学习\">代码学习</span></h2>\n<p>代码来自于<a href=\"https://github.com/owenliang/bigpipe\" target=\"_blank\" rel=\"noopener\">bigpipe</a>，circuit_breaker.go。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> client</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"bigpipe/config\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"bigpipe/util\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"math/rand\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"sync\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每秒一个桶, 记录该秒的请求成功、失败次数</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> StatsBucket <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tsuccess <span class=\"keyword\">int</span></span><br><span class=\"line\">\tfail    <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 健康统计, 维护最近N秒的滑动窗口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> HealthStats <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbuckets    []StatsBucket <span class=\"comment\">// 滑动窗口, 每个桶1秒</span></span><br><span class=\"line\">\tcurTime    <span class=\"keyword\">int64</span>         <span class=\"comment\">// 当前窗口末尾的秒级unix时间戳</span></span><br><span class=\"line\">\tminStats   <span class=\"keyword\">int</span>           <span class=\"comment\">// 少于该打点数量直接返回健康</span></span><br><span class=\"line\">\thealthRate <span class=\"keyword\">float64</span>       <span class=\"comment\">// 健康阀值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 熔断器状态</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> CircuitStatus <span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tCIRCUIT_NORMAL  CircuitStatus = <span class=\"number\">1</span> <span class=\"comment\">// 正常</span></span><br><span class=\"line\">\tCIRCUIT_BREAK                 = <span class=\"number\">2</span> <span class=\"comment\">// 熔断</span></span><br><span class=\"line\">\tCIRCUIT_RECOVER               = <span class=\"number\">3</span> <span class=\"comment\">// 恢复中</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 熔断器</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> CircuitBreaker <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tmutex         sync.Mutex</span><br><span class=\"line\">\thealthStats   *HealthStats  <span class=\"comment\">// 健康统计</span></span><br><span class=\"line\">\tstatus        CircuitStatus <span class=\"comment\">// 熔断状态</span></span><br><span class=\"line\">\tbreakTime     <span class=\"keyword\">int64</span>         <span class=\"comment\">// 熔断的时间点(秒)</span></span><br><span class=\"line\">\tbreakPeriod   <span class=\"keyword\">int</span>           <span class=\"comment\">// 熔断封锁时间</span></span><br><span class=\"line\">\trecoverPeriod <span class=\"keyword\">int</span>           <span class=\"comment\">// 熔断恢复时间</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建健康统计器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">createHealthStats</span><span class=\"params\">(info *config.CircuitBreakerInfo)</span> <span class=\"params\">(healthStats *HealthStats)</span></span> &#123;</span><br><span class=\"line\">\thealthStats = &amp;HealthStats&#123;</span><br><span class=\"line\">\t\tminStats:   info.MinStats,</span><br><span class=\"line\">\t\thealthRate: info.HealthRate,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\thealthStats.buckets = <span class=\"built_in\">make</span>([]StatsBucket, info.WinSize)</span><br><span class=\"line\">\thealthStats.resetBuckets(healthStats.buckets[:])</span><br><span class=\"line\"></span><br><span class=\"line\">\thealthStats.curTime = util.CurUnixSecond()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重置桶状态</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(healthStats *HealthStats)</span> <span class=\"title\">resetBuckets</span><span class=\"params\">(buckets []StatsBucket)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> idx, _ := <span class=\"keyword\">range</span> buckets &#123;</span><br><span class=\"line\">\t\tbuckets[idx].success = <span class=\"number\">0</span></span><br><span class=\"line\">\t\tbuckets[idx].fail = <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 窗口滑动</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(healthStats *HealthStats)</span> <span class=\"title\">shiftBuckets</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnow := util.CurUnixSecond()</span><br><span class=\"line\"></span><br><span class=\"line\">\ttimeDiff := <span class=\"keyword\">int</span>(now - healthStats.curTime)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> timeDiff &lt;= <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> timeDiff &gt;= <span class=\"built_in\">len</span>(healthStats.buckets) &#123;</span><br><span class=\"line\">\t\thealthStats.resetBuckets(healthStats.buckets[:])</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\thealthStats.buckets = <span class=\"built_in\">append</span>(healthStats.buckets[:<span class=\"number\">0</span>], healthStats.buckets[timeDiff:]...)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; timeDiff; i++ &#123;</span><br><span class=\"line\">\t\t\thealthStats.buckets = <span class=\"built_in\">append</span>(healthStats.buckets, StatsBucket&#123;&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\thealthStats.curTime = now</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 成功打点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(healthStats *HealthStats)</span> <span class=\"title\">success</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thealthStats.shiftBuckets()</span><br><span class=\"line\"></span><br><span class=\"line\">\thealthStats.buckets[<span class=\"built_in\">len</span>(healthStats.buckets)<span class=\"number\">-1</span>].success++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 失败打点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(healthStats *HealthStats)</span> <span class=\"title\">fail</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thealthStats.shiftBuckets()</span><br><span class=\"line\"></span><br><span class=\"line\">\thealthStats.buckets[<span class=\"built_in\">len</span>(healthStats.buckets)<span class=\"number\">-1</span>].fail++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断是否健康</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(healthStats *HealthStats)</span> <span class=\"title\">isHealthy</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">bool</span>, <span class=\"keyword\">float64</span>)</span></span> &#123;</span><br><span class=\"line\">\thealthStats.shiftBuckets()</span><br><span class=\"line\"></span><br><span class=\"line\">\tsuccess := <span class=\"number\">0</span></span><br><span class=\"line\">\tfail := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, bucket := <span class=\"keyword\">range</span> healthStats.buckets &#123;</span><br><span class=\"line\">\t\tsuccess += bucket.success</span><br><span class=\"line\">\t\tfail += bucket.fail</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttotal := success + fail</span><br><span class=\"line\">\t<span class=\"comment\">// 没有样本</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> total == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>, <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\trate := <span class=\"keyword\">float64</span>(success) / <span class=\"keyword\">float64</span>(total)</span><br><span class=\"line\">\t<span class=\"comment\">// 样本不足</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> total &lt; healthStats.minStats &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>, rate</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 样本充足</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rate &gt;= healthStats.healthRate, rate</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建熔断器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CreateCircuitBreaker</span><span class=\"params\">(info *config.CircuitBreakerInfo)</span> <span class=\"params\">(circuitBreaker *CircuitBreaker)</span></span> &#123;</span><br><span class=\"line\">\tcircuitBreaker = &amp;CircuitBreaker&#123;</span><br><span class=\"line\">\t\thealthStats:   createHealthStats(info),</span><br><span class=\"line\">\t\tstatus:        CIRCUIT_NORMAL,</span><br><span class=\"line\">\t\tbreakTime:     <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\tbreakPeriod:   info.BreakPeriod,</span><br><span class=\"line\">\t\trecoverPeriod: info.RecoverPeriod,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(circuitBreaker *CircuitBreaker)</span> <span class=\"title\">Success</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tcircuitBreaker.mutex.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> circuitBreaker.mutex.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">\tcircuitBreaker.healthStats.success()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(circuitBreaker *CircuitBreaker)</span> <span class=\"title\">Fail</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tcircuitBreaker.mutex.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> circuitBreaker.mutex.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">\tcircuitBreaker.healthStats.fail()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 熔断器判定</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(circuitBreaker *CircuitBreaker)</span> <span class=\"title\">IsBreak</span><span class=\"params\">()</span> <span class=\"params\">(isBreak <span class=\"keyword\">bool</span>, isHealthy <span class=\"keyword\">bool</span>, healthRate <span class=\"keyword\">float64</span>)</span></span> &#123;</span><br><span class=\"line\">\tcircuitBreaker.mutex.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> circuitBreaker.mutex.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">\tnow := util.CurUnixSecond()</span><br><span class=\"line\">\t<span class=\"comment\">// 得到已经熔断了多长时间</span></span><br><span class=\"line\">\tbreakLastTime := now - circuitBreaker.breakTime</span><br><span class=\"line\"></span><br><span class=\"line\">\tisHealthy, healthRate = circuitBreaker.healthStats.isHealthy()</span><br><span class=\"line\"></span><br><span class=\"line\">\tisBreak = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> circuitBreaker.status &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> CIRCUIT_NORMAL:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> !isHealthy &#123;</span><br><span class=\"line\">\t\t\tcircuitBreaker.status = CIRCUIT_BREAK</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 记录熔断的时刻</span></span><br><span class=\"line\">\t\t\tcircuitBreaker.breakTime = now</span><br><span class=\"line\">\t\t\tisBreak = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> CIRCUIT_BREAK:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> breakLastTime &lt; <span class=\"keyword\">int64</span>(circuitBreaker.breakPeriod) || !isHealthy &#123;</span><br><span class=\"line\">\t\t\tisBreak = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tcircuitBreaker.status = CIRCUIT_RECOVER</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> CIRCUIT_RECOVER: <span class=\"comment\">// 需要恢复访问</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> !isHealthy &#123;</span><br><span class=\"line\">\t\t\tcircuitBreaker.status = CIRCUIT_BREAK</span><br><span class=\"line\">\t\t\tcircuitBreaker.breakTime = now</span><br><span class=\"line\">\t\t\tisBreak = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 已经熔断了足够的时间： 已超过熔断封锁时间 和 熔断恢复时间</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> breakLastTime &gt;= <span class=\"keyword\">int64</span>(circuitBreaker.breakPeriod+circuitBreaker.recoverPeriod) &#123;</span><br><span class=\"line\">\t\t\t\tcircuitBreaker.status = CIRCUIT_NORMAL</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 不满足上述, 算出 已熔断足够时间 /（熔断封锁时间 和 熔断恢复时间）</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 算一个随机数，要是碰巧大于则置熔断标志（isBreak）为true, 否则为false</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// passRate会逐渐变大，请求通过几率也会逐渐变大</span></span><br><span class=\"line\">\t\t\t\tpassRate := <span class=\"keyword\">float64</span>(breakLastTime) / <span class=\"keyword\">float64</span>(circuitBreaker.breakPeriod+circuitBreaker.recoverPeriod)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> rand.Float64() &gt; passRate &#123;</span><br><span class=\"line\">\t\t\t\t\tisBreak = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>async_client.go</code>， 在调用接口时，对调用成功与否进行统计，当错误率大于我们初设的阀值时，其接口服务进入<code>熔断</code>的状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.....</span><br><span class=\"line\"></span><br><span class=\"line\">func (client *AsyncClient) notifyCircuitBreaker(success bool) &#123;</span><br><span class=\"line\">\tif client.circuitBreaker != nil &#123;</span><br><span class=\"line\">\t\tif success &#123;</span><br><span class=\"line\">\t\t\tclient.circuitBreaker.Success()</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tclient.circuitBreaker.Fail()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (client *AsyncClient) callWithRetry(message *proto.CallMessage) &#123;</span><br><span class=\"line\">\tsuccess := false</span><br><span class=\"line\">\tfor i := 0; i &lt; client.retries+1; i++ &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\treq, err := http.NewRequest(&quot;POST&quot;, message.Url, strings.NewReader(message.Data))</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t.....</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tif rErr != nil &#123;</span><br><span class=\"line\">\t\t\tclient.notifyCircuitBreaker(false)</span><br><span class=\"line\">\t\t\tlog.WARNING(&quot;HTTP调用失败（%d）（%dms）：（%v）（%v）&quot;, i, reqUsedTime, *message, err)</span><br><span class=\"line\">\t\t\tcontinue</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// 不读应答体</span><br><span class=\"line\">\t\tresponse.Body.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// 判断返回码是200即可</span><br><span class=\"line\">\t\tif response.StatusCode != 200 &#123;</span><br><span class=\"line\">\t\t\tclient.notifyCircuitBreaker(false)</span><br><span class=\"line\">\t\t\tlog.WARNING(&quot;HTTP调用失败（%d）（%dms）：(%v)，(%d)&quot;, i, reqUsedTime, *message, response.StatusCode)</span><br><span class=\"line\">\t\t\tcontinue</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsuccess = true</span><br><span class=\"line\">\t\tclient.notifyCircuitBreaker(true)</span><br><span class=\"line\">\t\tlog.INFO(&quot;HTTP调用成功（%d）（%dms）:（%v）&quot;, i, reqUsedTime, *message)</span><br><span class=\"line\">\t\tbreak</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t....</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (client *AsyncClient) Call(message *proto.CallMessage, termChan chan int) &#123;</span><br><span class=\"line\">\tstats.ClientStats_rpcTotal(&amp;message.Topic)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 熔断控制</span><br><span class=\"line\">\tif client.circuitBreaker != nil &#123;</span><br><span class=\"line\">\tCIRCUIT_LOOP:</span><br><span class=\"line\">\t\tfor &#123;</span><br><span class=\"line\">\t\t\tisBreak, isHealthy, healthRate := client.circuitBreaker.IsBreak()</span><br><span class=\"line\">\t\t\tif isBreak &#123; // 熔断则等待1秒再检查</span><br><span class=\"line\">\t\t\t\tselect &#123;</span><br><span class=\"line\">\t\t\t\tcase &lt;-termChan: // 来自调用方的关闭信号, 为了避免熔断影响退出时间, 一旦调用方关闭则暂停熔断控制, 快速消化剩余流量</span><br><span class=\"line\">\t\t\t\t\tlog.DEBUG(&quot;Client调用方通知关闭, 熔断逻辑失效.&quot;)</span><br><span class=\"line\">\t\t\t\t\tbreak CIRCUIT_LOOP</span><br><span class=\"line\">\t\t\t\tcase &lt;-time.After(1 * time.Second): // 正常情况下间隔1秒确认熔断状态</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 启动协程发送请求</span><br><span class=\"line\">\tgo client.callWithRetry(message)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<h2><span id=\"结语\">结语</span></h2>\n<p>也算是补上了这个点，算是看了一些资料，学习了，难得闲的下来。</p>\n<p>另外补一个索尼熔断器的Go代码，<a href=\"https://reading.developerlearning.cn/articles/sony-gobreaker/readme/%E3%80%82\" target=\"_blank\" rel=\"noopener\">https://reading.developerlearning.cn/articles/sony-gobreaker/readme/。</a></p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"Hystrix","slug":"Hystrix","permalink":"chunlife.top/tags/Hystrix/"},{"name":"熔断器","slug":"熔断器","permalink":"chunlife.top/tags/熔断器/"}]},{"title":"关于Go测试的方法以及建议","date":"2020-01-14T07:20:01.000Z","path":"2020/01/14/关于测试的方法以及建议/","content":"<p>单元测试在一定意义上能够保证代码的质量，用以衡量软件工程的质量，帮助我们规避重构的风险。</p>\n<p>每一个单元测试代表着一个业务逻辑，修改代码后，运行单元测试，就能帮助我们确定新代码会不会影响已有的业务逻辑，可以降低线上的风险和测试的问题。</p>\n<a id=\"more\"></a>\n<h2><span id=\"如何易于测试\">如何易于测试</span></h2>\n<p>测试就是控制变量，在我们隔离了待测试方法中一些依赖之后，当函数的入参确定时，就应该得到期望的返回值。</p>\n<p>为了减少每一个单元测试的复杂度，我们需要：</p>\n<ol>\n<li>\n<p>尽可能减少目标方法的依赖，让目标方法只依赖必要的模块。</p>\n</li>\n<li>\n<p>依赖的模块也应该非常容易地进行 Mock。</p>\n</li>\n</ol>\n<p>（mock测试就是在测试过程中，对于某些不容易构造或者不容易获取的对象，用一个虚拟的对象来创建以便测试的测试方法。）</p>\n<p><strong>单元测试的执行不应该依赖于任何的外部模块</strong>，无论是调用外部的 HTTP 请求还是数据库中的数据，我们都应该想尽办法模拟可能出现的情况，因为单元测试不是集成测试的，它的运行不应该依赖除项目代码外的其他任何系统。</p>\n<h3><span id=\"接口\">接口</span></h3>\n<p>在Go语言中，接口能够统一逻辑，且易于代码设计，同时能让我们更方便的对依赖进行Mock。</p>\n<p>若我们完全不使用接口，是写不出易于测试的代码的。</p>\n<p>参考<code>bilibili</code>代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Service vip service</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Service <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//New new service.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">New</span><span class=\"params\">(c *conf.Config)</span> <span class=\"params\">(s *Service)</span></span> &#123;</span><br><span class=\"line\">    s = &amp;Service&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BilibiliVipGrant bilibili associate vip grant [third -&gt; bilibili]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Service)</span> <span class=\"title\">BilibiliVipGrant</span><span class=\"params\">(c context.Context, a *model.ArgBilibiliVipGrant)</span> <span class=\"params\">(err error)</span></span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>test.go</code>文件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestServiceBilibiliVipGrant</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tConvey(<span class=\"string\">\" TestServiceBilibiliVipGrant \"</span>, t, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\terr := s.BilibiliVipGrant(c, &amp;model.ArgBilibiliVipGrant&#123;</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\tSo(err, ShouldBeNil)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其代码中，大量使用工厂设计模式对外提供服务。</p>\n<p>接口的经典范式：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Service <span class=\"keyword\">interface</span> &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> service <span class=\"keyword\">struct</span> &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewService</span><span class=\"params\">(...)</span> <span class=\"params\">(Service, error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;service&#123;...&#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你不知道应不应该使用接口对外提供服务，这时就应该无脑地使用上述模式对外暴露方法。</p>\n<ol>\n<li>使用大写的 Service 对外暴露方法</li>\n<li>使用小写的 service 实现接口中定义的方法</li>\n<li>通过 <code>NewService </code>函数初始化 Service 接口</li>\n</ol>\n<p>顺带给一下这个范式的例子。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> post</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Service <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    ListPosts() ([]*Post, error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> service <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    conn *grpc.ClientConn</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewService</span><span class=\"params\">(conn *grpc.ClientConn)</span> <span class=\"title\">Service</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;service&#123;</span><br><span class=\"line\">        conn: conn,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *service)</span> <span class=\"title\">ListPosts</span><span class=\"params\">()</span> <span class=\"params\">([]*Post, error)</span></span> &#123;</span><br><span class=\"line\">    posts, err := s.conn.ListPosts(...)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []*Post&#123;&#125;, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> posts, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *service)</span> <span class=\"title\">InsertPosts</span><span class=\"params\">()</span> <span class=\"params\">(error)</span></span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    conn, err = grpc.Dial(...）</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    svc := post.NewService(conn)</span><br><span class=\"line\">    posts, err := svc.ListPosts()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(posts)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"函数简单\">函数简单</span></h3>\n<p>功能上的简单、单一，函数容易理解并且命名能够自解释。</p>\n<h3><span id=\"组织方式\">组织方式</span></h3>\n<p>Golang 中的单元测试文件和代码都是与源代码放在同一个目录下按照 package 进行组织的，<code>server.go</code> 文件对应的测试代码应该放在同一目录下的 <code>server_test.go</code> 文件中。</p>\n<h2><span id=\"test\">Test</span></h2>\n<p>单元测试的最常见以及默认组织方式就是写在以 <code>_test.go</code> 结尾的文件中，所有的测试方法也都是以 Test 开头并且只接受一个 <code>testing.T</code> 类型的参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func TestAuthor(t *testing.T) &#123;</span><br><span class=\"line\">    author := blog.Author()</span><br><span class=\"line\">    assert.Equal(t, &quot;draveness&quot;, author)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我们要给函数名为 <code>Add</code> 的方法写单元测试，那么对应的测试方法一般会被写成 <code>TestAdd</code>，为了同时测试多个分支的内容，我们可以通过以下的方式组织 <code>Add</code> 函数相关的测试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func TestAdd(t *testing.T) &#123;</span><br><span class=\"line\">    assert.Equal(t, 5, Add(2, 3))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func TestAddWithNegativeNumber(t *testing.T) &#123;</span><br><span class=\"line\">    assert.Equal(t, -2, Add(-1, -1))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除了这种将一个函数相关的测试分散到多个 Test 方法之外，我们可以使用 for 循环来减少重复的测试代码，这在逻辑比较复杂的测试中会非常好用，能够减少大量的重复代码，不过也需要我们小心地进行设计：</p>\n<p>这种方式其实也能生成树形的测试结果，将 <code>Add</code> 相关的测试分成一组方便我们进行观察和理解，不过这种测试组织方法需要我们保证测试代码的通用性，当函数依赖的上下文较多时往往需要我们写很多的 <code>if/else</code> 条件判断语句影响我们对测试的快速理解。</p>\n<p>有一种实践原则是通常会在测试代码比较简单时使用第一种组织方式，而在依赖较多、函数功能较为复杂时使用第二种方式。</p>\n<h2><span id=\"suite\">Suite</span></h2>\n<p>第二种比较常见的方式是按照簇进行组织，其实就是对 Go 语言默认的测试方式进行简单的封装，我们可以使用 <a href=\"https://github.com/stretchr/testify\" target=\"_blank\" rel=\"noopener\">stretchr/testify</a> 中的 suite 包对测试进行组织：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import (</span><br><span class=\"line\">    &quot;testing&quot;</span><br><span class=\"line\">    &quot;github.com/stretchr/testify/suite&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type ExampleTestSuite struct &#123;</span><br><span class=\"line\">    suite.Suite</span><br><span class=\"line\">    VariableThatShouldStartAtFive int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (suite *ExampleTestSuite) SetupTest() &#123;</span><br><span class=\"line\">    suite.VariableThatShouldStartAtFive = 5</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (suite *ExampleTestSuite) TestExample() &#123;</span><br><span class=\"line\">    suite.Equal(suite.VariableThatShouldStartAtFive, 5)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func TestExampleTestSuite(t *testing.T) &#123;</span><br><span class=\"line\">    suite.Run(t, new(ExampleTestSuite))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以使用 suite 包，以结构体的方式对测试簇进行组织，suite 提供的 <code>SetupTest/SetupSuite</code> 和 <code>TearDownTest/TearDownSuite</code> 是执行测试前后以及执行测试簇前后的钩子方法，我们能在其中完成一些共享资源的初始化，减少测试中的初始化代码。</p>\n<h2><span id=\"mock-方法\">Mock 方法</span></h2>\n<ul>\n<li>项目中的单元测试应该是稳定的并且不依赖任何的外部项目，它只是对项目中函数和方法的测试，所以我们需要在单元测试中对所有的第三方的不稳定依赖进行 Mock，也就是模拟这些第三方服务的接口</li>\n<li>除此之外，为了简化一次单元测试的上下文，在同一个项目中我们也会对其他模块进行 Mock，模拟这些依赖模块的返回值。</li>\n</ul>\n<p>单元测试的核心就是隔离依赖并验证输入和输出的正确性，Go 语言作为一个静态语言提供了比较少的运行时特性，这也让我们在 Go 语言中 Mock 依赖变得非常困难。</p>\n<p>Mock 的主要作用就是保证待测试方法依赖的上下文固定，在这时无论我们对当前方法运行多少次单元测试，如果业务逻辑不改变，它都应该返回完全相同的结果，在具体介绍 Mock 的不同方法之前，我们首先要清楚一些常见的依赖，一个函数或者方法的常见依赖可以有以下几种：</p>\n<ol>\n<li>接口</li>\n<li>数据库</li>\n<li>HTTP 请求</li>\n<li><code>Redis</code>、缓存以及其他依赖</li>\n</ol>\n<h3><span id=\"接口\">接口</span></h3>\n<p>首先要介绍的其实就是 Go 语言中最常见也是最通用的 Mock 方法，也就是能够对接口进行 Mock 的 <a href=\"https://github.com/golang/mock\" target=\"_blank\" rel=\"noopener\">golang/mock</a> 框架，它能够根据接口生成 Mock 实现，假设我们有以下代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> blog</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Post <span class=\"keyword\">struct</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Blog <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tListPosts() []Post</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> jekyll <span class=\"keyword\">struct</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(b *jekyll)</span> <span class=\"title\">ListPosts</span><span class=\"params\">()</span> []<span class=\"title\">Post</span></span> &#123;</span><br><span class=\"line\"> \t<span class=\"keyword\">return</span> []Post&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> wordpress <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(b *wordpress)</span> <span class=\"title\">ListPosts</span><span class=\"params\">()</span> []<span class=\"title\">Post</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> []Post&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假设我们有个博客，那就需要一个 <code>ListsPosts</code> 方法用于返回全部的文章列表，在这时我们就需要定义一个 <code>Post</code> 接口，接口要求遵循 <code>Blog</code> 的结构体必须实现 <code>ListPosts</code> 方法。</p>\n<p>当我们定义好了 <code>Blog</code> 接口之后，上层 Service 就不再需要依赖某个具体的博客引擎实现了，只需要依赖 <code>Blog</code> 接口就可以完成对文章的批量获取功能：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Service <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tListPosts() ([]Post, error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> service <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    blog blog.Blog</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewService</span><span class=\"params\">(b blog.Blog)</span> *<span class=\"title\">Service</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;service&#123;</span><br><span class=\"line\">        blog: b,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *service)</span> <span class=\"title\">ListPosts</span><span class=\"params\">()</span> <span class=\"params\">([]Post, error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.blog.ListPosts(), <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我们想要对 <code>Service</code> 进行测试，我们就可以使用 <code>gomock </code>提供的 <code>mockgen</code> 工具命令生成 <code>MockBlog</code> 结构体，使用如下所示的命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mockgen -package=mblog -<span class=\"built_in\">source</span>=pkg/blog/blog.go &gt; <span class=\"built_in\">test</span>/mocks/blog/blog.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cat <span class=\"built_in\">test</span>/mocks/blog/blog.go</span></span><br><span class=\"line\">// Code generated by MockGen. DO NOT EDIT.</span><br><span class=\"line\">// Source: blog.go</span><br><span class=\"line\"></span><br><span class=\"line\">// Package mblog is a generated GoMock package.</span><br><span class=\"line\">...</span><br><span class=\"line\">// NewMockBlog creates a new mock instance</span><br><span class=\"line\">func NewMockBlog(ctrl *gomock.Controller) *MockBlog &#123;</span><br><span class=\"line\">\tmock := &amp;MockBlog&#123;ctrl: ctrl&#125;</span><br><span class=\"line\">\tmock.recorder = &amp;MockBlogMockRecorder&#123;mock&#125;</span><br><span class=\"line\">\treturn mock</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// EXPECT returns an object that allows the caller to indicate expected use</span><br><span class=\"line\">func (m *MockBlog) EXPECT() *MockBlogMockRecorder &#123;</span><br><span class=\"line\">\treturn m.recorder</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// ListPosts mocks base method</span><br><span class=\"line\">func (m *MockBlog) ListPosts() []Post &#123;</span><br><span class=\"line\">\tm.ctrl.T.Helper()</span><br><span class=\"line\">\tret := m.ctrl.Call(m, \"ListPosts\")</span><br><span class=\"line\">\tret0, _ := ret[0].([]Post)</span><br><span class=\"line\">\treturn ret0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// ListPosts indicates an expected call of ListPosts</span><br><span class=\"line\">func (mr *MockBlogMockRecorder) ListPosts() *gomock.Call &#123;</span><br><span class=\"line\">\tmr.mock.ctrl.T.Helper()</span><br><span class=\"line\">\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"ListPosts\", reflect.TypeOf((*MockBlog)(nil).ListPosts))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段 <code>mockgen </code>生成的代码非常长的，所以我们只展示了其中的一部分，它的功能就是帮助我们验证任意接口的输入参数并且模拟接口的返回值。</p>\n<p>而在生成 Mock 实现的过程中，这里有一些可以分享的经验：</p>\n<ul>\n<li>在 <code>test/mocks</code> 目录中放置所有的 Mock 实现，子目录与接口所在文件的二级目录相同，在这里源文件的位置在 <code>pkg/blog/blog.go</code>，它的二级目录就是 <code>blog/</code>，所以对应的 Mock 实现会被生成到 <code>test/mocks/blog/</code> 目录中</li>\n<li>指定 package 为 <code>mxxx</code>，默认的 <code>mock_xxx</code> 看起来非常冗余，上述 blog 包对应的 Mock 包也就是 <code>mblog</code></li>\n<li><code>mockgen </code>命令放置到 Makefile 中的 mock 下统一管理，减少祖传命令的出现</li>\n</ul>\n<p>Mock 这块还是需要将来在实际工作中再慢慢补全。</p>\n<h3><span id=\"sql\">SQL</span></h3>\n<p>在遇到数据库的依赖时，我们一般都会使用<code>sqlmock </code>模拟数据库的连接，当我们使用 <code>sqlmock </code>时会写出如下所示的单元测试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (s *suiteServerTester) TestRemovePost() &#123;</span><br><span class=\"line\">\tentry := pb.Post&#123;</span><br><span class=\"line\">\t\tId: 1,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\trows := sqlmock.NewRows([]string&#123;&quot;id&quot;, &quot;author&quot;&#125;).AddRow(1, &quot;draveness&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">\ts.Mock.ExpectQuery(`SELECT (.+) FROM &quot;posts&quot;`).WillReturnRows(rows)</span><br><span class=\"line\">\ts.Mock.ExpectExec(`DELETE FROM &quot;posts&quot;`).</span><br><span class=\"line\">\t\tWithArgs(1).</span><br><span class=\"line\">\t\tWillReturnResult(sqlmock.NewResult(1, 1))</span><br><span class=\"line\"></span><br><span class=\"line\">\tresponse, err := s.server.RemovePost(context.Background(), &amp;entry)</span><br><span class=\"line\"></span><br><span class=\"line\">\ts.NoError(err)</span><br><span class=\"line\">\ts.EqualValues(response, &amp;entry)</span><br><span class=\"line\">\ts.NoError(s.Mock.ExpectationsWereMet())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最常用的几个方法就是 <code>ExpectQuery</code> 和 <code>ExpectExec</code>，前者主要用于模拟 SQL 的查询语句，后者用于模拟 SQL 的增删，从上面的实例中我们可以看到这个这两种方法的使用方式，建议先阅读相关的文档再尝试使用。</p>\n<h3><span id=\"http\">HTTP</span></h3>\n<p><code>httpmock </code>就是一个用于 Mock 所有 HTTP 依赖的包，它使用模式匹配的方式匹配 HTTP 请求的 URL，在匹配到特定的请求时就会返回预先设置好的响应。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestFetchArticles</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\thttpmock.Activate()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> httpmock.DeactivateAndReset()</span><br><span class=\"line\"></span><br><span class=\"line\">\thttpmock.RegisterResponder(<span class=\"string\">\"GET\"</span>, <span class=\"string\">\"https://api.mybiz.com/articles\"</span>,</span><br><span class=\"line\">\t\thttpmock.NewStringResponder(<span class=\"number\">200</span>, <span class=\"string\">`[&#123;\"id\": 1, \"name\": \"My Great Article\"&#125;]`</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\thttpmock.RegisterResponder(<span class=\"string\">\"GET\"</span>, <span class=\"string\">`=~^https://api\\.mybiz\\.com/articles/id/\\d+\\z`</span>,</span><br><span class=\"line\">\t\thttpmock.NewStringResponder(<span class=\"number\">200</span>, <span class=\"string\">`&#123;\"id\": 1, \"name\": \"My Great Article\"&#125;`</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果遇到 HTTP 请求的依赖时，就可以使用上述 <code>httpmock </code>包模拟依赖的 HTTP 请求。</p>\n<h3><span id=\"断言\">断言</span></h3>\n<p>简单介绍一下辅助单元测试<a href=\"https://github.com/stretchr/testify\" target=\"_blank\" rel=\"noopener\">stretchr/testify</a>的 <code>assert </code>包，它提供了非常多的断言方法帮助我们快速对期望的返回值进行测试，减少我们的工作量：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestSomething</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">  assert.Equal(t, <span class=\"number\">123</span>, <span class=\"number\">123</span>, <span class=\"string\">\"they should be equal\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  assert.NotEqual(t, <span class=\"number\">123</span>, <span class=\"number\">456</span>, <span class=\"string\">\"they should not be equal\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  assert.Nil(t, object)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> assert.NotNil(t, object) &#123;</span><br><span class=\"line\">    assert.Equal(t, <span class=\"string\">\"Something\"</span>, object.Value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<blockquote>\n<p>原文链接：<a href=\"http://wjp2013.github.io/go/go-unit-test/\" target=\"_blank\" rel=\"noopener\">Go 的测试</a></p>\n</blockquote>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"https://hfsyun.gitlab.io/2019/12/06/yuque/ouxg5r/\">Gitlab CI+yuque自动部署hexo</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"test","slug":"test","permalink":"chunlife.top/tags/test/"}]},{"title":"MySQL执行计划explain详解","date":"2020-01-12T12:13:04.000Z","path":"2020/01/12/MySQL执行计划explain详解/","content":"<p>转载至：<a href=\"https://mp.weixin.qq.com/s/OYvCOSOMK2VmzDrAXbj2xQ\" target=\"_blank\" rel=\"noopener\">Mysql执行计划explain图解</a></p>\n<a id=\"more\"></a>\n<p><img src=\"tuxiang.png\" alt=\"img\"></p>\n","categories":[{"name":"DB","slug":"DB","permalink":"chunlife.top/categories/DB/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"chunlife.top/tags/mysql/"},{"name":"explain","slug":"explain","permalink":"chunlife.top/tags/explain/"}]},{"title":"科学需要谨慎，知识需要校验","date":"2019-12-31T07:48:26.000Z","path":"2019/12/31/科学需要谨慎，知识需要校校验/","content":"<p>文中有感于卓老板聊科技，以及科学思维课上所提到的科学指导性知识，常年听知识，有时间可将其收纳起来，做成思维导图形式的东西，方便自己，同时也分享出来。</p>\n<p>希望在田野，科学在人间。</p>\n<h2><span id=\"为什么夜间电价减半\">为什么夜间电价减半？</span></h2>\n<a id=\"more\"></a>\n<p><img src=\"image-20191231155455473.png\" alt=\"为什么夜间电价减半？\"></p>\n<h2><span id=\"太空垃圾会不会越来越多\">太空垃圾会不会越来越多？</span></h2>\n<p><img src=\"image-20191231155545677.png\" alt=\"太空垃圾会不会越来越多？\"></p>\n<h2><span id=\"硬盘装满电影会变重吗\">硬盘装满电影会变重吗？</span></h2>\n<p><img src=\"image-20191231155623635.png\" alt=\"硬盘装满电影会变重吗？\"></p>\n<h2><span id=\"手机屏幕越来越大的真相\">手机屏幕越来越大的真相</span></h2>\n<p><img src=\"image-20191231155657935.png\" alt=\"手机屏幕越来越大的真相\"></p>\n<h2><span id=\"人可以训练出蒙眼识物的能力\">人可以训练出蒙眼识物的能力？</span></h2>\n<p><img src=\"image-20191231155749076.png\" alt=\"人可以训练出蒙眼识物的能力？\"></p>\n<h2><span id=\"地球一小时熄灯活动有什么意义\">地球一小时熄灯活动有什么意义？</span></h2>\n<p><img src=\"image-20191231155824092.png\" alt=\"地球一小时熄灯活动有什么意义？\"></p>\n<h2><span id=\"二维码破损了还能扫出来是怎么回事\">二维码破损了还能扫出来是怎么回事？</span></h2>\n<p><img src=\"1578235670477.png\" alt=\"1578235670477\"></p>\n<h2><span id=\"为什么现在cpu的核心越来越多8核10核\">为什么现在CPU的核心越来越多，8核/10核？</span></h2>\n<p><img src=\"1578235743397.png\" alt=\"为什么现在CPU的核心越来越多，8核/10核？\"></p>\n<h2><span id=\"为什么没有动物比蓝鲸的体型大\">为什么没有动物比蓝鲸的体型大？</span></h2>\n<p><img src=\"1578235791441.png\" alt=\"1578235791441\"></p>\n<h2><span id=\"如何感受1亿\">如何感受1亿？</span></h2>\n<p><img src=\"1578235840202.png\" alt=\"如何感受1亿？\"></p>\n<h2><span id=\"10亿个晶体管怎么放进指甲盖大小的芯片里\">10亿个晶体管怎么放进指甲盖大小的芯片里？</span></h2>\n<p><img src=\"image-20200109195117618.png\" alt=\"10亿个晶体管怎么放进指甲盖大小的芯片里？\"></p>\n<h2><span id=\"一次花费300万的治疗癌症新方法是真的吗\">一次花费300万的治疗癌症新方法是真的吗？</span></h2>\n<p><img src=\"image-20200109195202035.png\" alt=\"一次花费300万的治疗癌症新方法是真的吗？\"></p>\n<h2><span id=\"发电全都用太阳能可行吗\">发电全都用太阳能，可行吗？</span></h2>\n<p><img src=\"image-20200109195241909.png\" alt=\"发电全都用太阳能，可行吗？\"></p>\n<h2><span id=\"别再数量级上犯错误\">别再数量级上犯错误</span></h2>\n<p><img src=\"image-20200109195317040.png\" alt=\"别再数量级上犯错误\"></p>\n<h2><span id=\"坟墓什么时候占据整个地球\">坟墓什么时候占据整个地球？</span></h2>\n<p><img src=\"image-20200109195353807.png\" alt=\"坟墓什么时候占据整个地球？\"></p>\n<h2><span id=\"多少个药物分子才能治疗疾病\">多少个药物分子才能治疗疾病？</span></h2>\n<p><img src=\"image-20200115150139198.png\" alt=\"多少个药物分子才能治疗疾病？\"></p>\n<h2><span id=\"普洱茶致癌\">普洱茶致癌</span></h2>\n<p><img src=\"image-20200115150227408.png\" alt=\"普洱茶致癌\"></p>\n<h2><span id=\"hiv病毒疫苗快制成了\">HIV病毒疫苗快制成了？</span></h2>\n<p><img src=\"image-20200115150257819.png\" alt=\"HIV病毒疫苗快制成了？\"></p>\n<h2><span id=\"空姐为什么总让我们打开遮光板\">空姐为什么总让我们打开遮光板？</span></h2>\n<p><img src=\"image-20200115150344436.png\" alt=\"空姐为什么总让我们打开遮光板？\"></p>\n<h2><span id=\"鸡蛋还能预防流感\">鸡蛋还能预防流感？</span></h2>\n<p><img src=\"image-20200115150417585.png\" alt=\"鸡蛋还能预防流感？\"></p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/03/29/重新见面，请多指教/\">重新见面，请多指教</a></li><li><a href=\"chunlife.top/2019/03/19/搜集赏/\">搜集赏</a></li><li><a href=\"chunlife.top/2018/12/14/第一期/\">第一期</a></li><li><a href=\"http://yoursite.com/2020/03/28/swing/Shell-Script%E6%9D%A5%E6%96%B0%E5%8D%9A%E5%AE%A2/\">Shell Script更新博客</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"chunlife.top/tags/随笔/"}]},{"title":"bufio-缓存IO，读取一行的数据","date":"2019-12-31T02:33:42.000Z","path":"2019/12/31/bufio-缓存IO，读取一行的数据/","content":"<p>bufio 包实现了缓存IO。它包装了 io.Reader 和 io.Writer 对象，创建了另外的Reader和Writer对象，它们也实现了 io.Reader 和 io.Writer 接口，不过它们是有缓存的。</p>\n<p><code>ReadLine</code>可以读取单独的行，一般读文件的时候，我就使用它，但由于缓存的问题，造成使用上出了些问题。</p>\n<a id=\"more\"></a>\n<p>bufio默认缓存大小为<code>4096</code>个字节，但由于我读取的文件某行大于这个数，导致<code>ReadLine</code>竟没有读完整，这让我感觉很奇怪，后来想到很可能是缓存大小的问题，使用<code>NewReaderSize</code>函数重设缓存后，程序表现正常。</p>\n<p>经了解，<code>ReadLine</code>尝试返回单独的行，不包括行尾的换行符(&quot;\\r\\n&quot;或者&quot;\\n&quot;)。</p>\n<p>如果一行大于缓存，<code>isPrefix</code>会被设置为 <code>true</code>，返回已经读到的数据（缓存填满），剩下的数据等待再次调用函数去读取。下次重复这个操作，直到读完整行数据，<code>isPrefix</code>将会被设置为 <code>false</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(b *Reader)</span> <span class=\"title\">ReadLine</span><span class=\"params\">()</span> <span class=\"params\">(line []<span class=\"keyword\">byte</span>, isPrefix <span class=\"keyword\">bool</span>, err error)</span></span></span><br></pre></td></tr></table></figure>\n<p>这样的操作，我感觉不符合我预期想要的结果，我不管你的缓存大小，我只想要一行，一行就是一行而已。所以可以这样做。</p>\n<p>这样做，就不会由于缓存大小问题而只返回缓存部分了，而是一行有多长，就给你返回多长数据。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ReadBytes 读到什么标志为终止</span></span><br><span class=\"line\">line, err := reader.ReadBytes(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 去掉末尾 \\r和\\n</span></span><br><span class=\"line\">line = bytes.TrimRight(line, <span class=\"string\">\"\\r\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">a1, err := br.ReadString(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">strings.TrimRight(a1, <span class=\"string\">\"\\r\\n\"</span>)</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"https://www.lengyuewusheng.com/redis%E6%8C%81%E4%B9%85%E5%8C%96%E7%AD%96%E7%95%A5.html\">redis持久化策略</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"bufio","slug":"bufio","permalink":"chunlife.top/tags/bufio/"},{"name":"ReadLine - ReadBytes","slug":"ReadLine-ReadBytes","permalink":"chunlife.top/tags/ReadLine-ReadBytes/"},{"name":"缓存","slug":"缓存","permalink":"chunlife.top/tags/缓存/"}]},{"title":"go写excel xlsx文件","date":"2019-12-19T09:44:19.000Z","path":"2019/12/19/go写xlsx文件/","content":"<p>go操作excel表，需要使用到库，<a href=\"https://github.com/tealeg/xlsx\" target=\"_blank\" rel=\"noopener\">xlsx</a>。</p>\n<p>操作应该来说比较简单。</p>\n<a id=\"more\"></a>\n<p>创建一个新文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file := xlsx.NewFile()</span><br><span class=\"line\">sheet, err := file.AddSheet(&quot;Sheet1&quot;)</span><br><span class=\"line\">if err != nil &#123;</span><br><span class=\"line\">\tlog.Error(err.Error())</span><br><span class=\"line\">\treturn</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\">err = file.Save(path.Join(fileResDir, &quot;logAnalysis.xlsx&quot;))</span><br><span class=\"line\">if err != nil &#123;</span><br><span class=\"line\">\tlog.Println(err.Error())</span><br><span class=\"line\">\treturn</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建一行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rowRange = sheet.AddRow()</span><br></pre></td></tr></table></figure>\n<p>一行中的一个格子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cell1 := rowRange.AddCell()</span><br><span class=\"line\">cell1.Value = &quot;范围&quot;  // 添加数据</span><br></pre></td></tr></table></figure>\n<p>一个格子（cell）样式设置，字体，颜色，边框，位置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blueBkGStyle = xlsx.NewStyle()</span><br><span class=\"line\"></span><br><span class=\"line\">font := *xlsx.NewFont(11, &quot;SimSun&quot;)</span><br><span class=\"line\">//font.Bold = true</span><br><span class=\"line\">//font.Italic = true</span><br><span class=\"line\">//font.Underline = true</span><br><span class=\"line\">blueBkGStyle.Font = font</span><br><span class=\"line\">blueBkGStyle.ApplyFont = true</span><br><span class=\"line\"></span><br><span class=\"line\">fill := *xlsx.NewFill(&quot;solid&quot;, &quot;6495ED&quot;, &quot;FF000000&quot;)</span><br><span class=\"line\">blueBkGStyle.Fill = fill</span><br><span class=\"line\">blueBkGStyle.ApplyFill = true</span><br><span class=\"line\"></span><br><span class=\"line\">//border := *xlsx.NewBorder(&quot;thin&quot;, &quot;thin&quot;, &quot;thin&quot;, &quot;thin&quot;)</span><br><span class=\"line\">//blueBkGStyle.Border = border</span><br><span class=\"line\">blueBkGStyle.ApplyBorder = false</span><br><span class=\"line\">\t</span><br><span class=\"line\">centerHalign := xlsx.Alignment&#123;Horizontal: &quot;center&quot;&#125;</span><br><span class=\"line\">blueBkGStyle.Alignment = centerHalign</span><br><span class=\"line\">blueBkGStyle.ApplyAlignment = true</span><br><span class=\"line\"></span><br><span class=\"line\">cell1.SetStyle(blueBkGStyle)</span><br></pre></td></tr></table></figure>\n<p>设置列的宽度：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Sheet)</span> <span class=\"title\">SetColWidth</span><span class=\"params\">(min <span class=\"keyword\">int</span>, max <span class=\"keyword\">int</span>, width <span class=\"keyword\">float64</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">// 将第3列到第5列宽度设置为44</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">sheet</span>.<span class=\"title\">SetColWidth</span><span class=\"params\">(3, 5, 44)</span></span></span><br></pre></td></tr></table></figure>\n<p>更多的操作，进入到该库中，在各个test文件或issue中查找。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/03/02/使用GO导出JIRA项目到excel/\">使用GO导出JIRA项目到excel</a></li><li><a href=\"chunlife.top/2018/08/15/创建CSV，数据导入excel文件/\">创建CSV，数据导入excel文件</a></li><li><a href=\"https://e1sewhere.github.io/2019/05/11/office-使用遇到的问题/\">Office 使用遇到的问题</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"excel","slug":"excel","permalink":"chunlife.top/tags/excel/"},{"name":"xlsx","slug":"xlsx","permalink":"chunlife.top/tags/xlsx/"}]},{"title":"使用unsafe pointer引发GC错误","date":"2019-12-18T03:09:11.000Z","path":"2019/12/18/使用unsafe-pointer引发GC错误/","content":"<p><a href=\"%5Bhttps://chunlife.top/2019/03/19/stringSlice%E8%BD%AC%E6%8D%A2%E2%80%94%E2%80%94%E6%97%A0%E9%9C%80%E5%86%85%E5%AD%98copy/%5D(https://chunlife.top/2019/03/19/stringSlice%E8%BD%AC%E6%8D%A2%E2%80%94%E2%80%94%E6%97%A0%E9%9C%80%E5%86%85%E5%AD%98copy/)\">stringSlice转换——无需内存copy</a>，这是之前写过的一篇文章，可以将结构体，byte，string以指针这种形式达到转换的作用，效率非常高效，可以说是<code>黑魔法</code>。</p>\n<p>而问题也就是出现在这里了。在使用过程中，我出现了<code>sweep increased allocation count</code>错误。</p>\n<a id=\"more\"></a>\n<p>这个问题是什么，其为什么会出现呢？是使用<code>pointer</code>的问题吗？</p>\n<h2><span id=\"首先我需要找到这个问题是什么产生的\">首先，我需要找到这个问题是什么产生的？</span></h2>\n<p>由于我从C语言带过来的习惯，所以，对于指针的运用也和C的操作类似。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> tyEMMCLOGData <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbDataValidity <span class=\"keyword\">byte</span>    <span class=\"comment\">//数据有效性：  0 数据无效  1有效  2传输完成</span></span><br><span class=\"line\">\ttLogs         [<span class=\"number\">80</span>]Log <span class=\"comment\">//写的log内容</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BytesToTyEMMCLOGData</span><span class=\"params\">(b []<span class=\"keyword\">byte</span>)</span> *<span class=\"title\">tyEMMCLOGData</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (*tyEMMCLOGData)(unsafe.Pointer(</span><br><span class=\"line\">\t\t(*reflect.SliceHeader)(unsafe.Pointer(&amp;b)).Data))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从其他地方接收的<code>byte</code>数据，通过函数<code>BytesToTyEMMCLOGData</code>转换成<code>struct</code>，由于C的习惯，即使其传回来一个<code>byte</code>，一样可以使用这样的方式去转换，只要访问结构体时，<strong>不超过实际一个字节的数据即可</strong>。</p>\n<p>于是便出现了这样的问题。</p>\n<p><img src=\"image-20191218120123591.png\" alt=\"打印\"></p>\n<h2><span id=\"为什么会出现\">为什么会出现？</span></h2>\n<p>问题的出现，可以查到是<code>GC</code>的打印，查过一些资料后，其实没有得到什么答案，不过根据我的看法猜测：</p>\n<p>通过上述的操作，我们已经在内存中引用了一段无效的内存，也就是为我们的程序构造了一个访问非法内存地址的入口。</p>\n<p>然后在<code>GC</code>回收我们以指针的方式构造的结构体的时（实际这个结构退只有一字节），我们的指针操作对<code>GC</code>来说是未知的，所以<code>GC</code>会去回收整个结构体的大小，但是由于这个结构体实际除了一个字节是合法字节，其他字节都是非法的，操作非法内存，系统发出<code>SIGSEGV </code>信号，程序崩溃。</p>\n<p>附在最后：</p>\n<blockquote>\n<p>看到GC中对pointer的处理：<a href=\"https://purewhite.io/2019/04/01/golang-gc-consider-unsafe/\" target=\"_blank\" rel=\"noopener\">https://purewhite.io/2019/04/01/golang-gc-consider-unsafe/</a></p>\n<p>原文：<a href=\"https://groups.google.com/forum/#!msg/golang-nuts/yNis7bQG_rY/yaJFoSx1hgIJ\" target=\"_blank\" rel=\"noopener\">https://groups.google.com/forum/#!msg/golang-nuts/yNis7bQG_rY/yaJFoSx1hgIJ</a></p>\n</blockquote>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/02/18/B站源码中的log-agent/\">B站源码中的log-agent</a></li><li><a href=\"chunlife.top/2019/09/27/MongoDB多表查询/\">MongoDB多表查询</a></li><li><a href=\"chunlife.top/2019/06/07/MongoDB命令一览/\">MongoDB命令一览</a></li><li><a href=\"https://lailin.xyz/post/11996.html\">Go Web 小技巧（三）Gin 参数绑定</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"unsafe","slug":"unsafe","permalink":"chunlife.top/tags/unsafe/"},{"name":"指针 - Go","slug":"指针-Go","permalink":"chunlife.top/tags/指针-Go/"}]},{"title":"12306抢票,极限并发带来的思考?","date":"2019-12-08T14:20:59.000Z","path":"2019/12/08/12306抢票-极限并发带来的思考/","content":"<blockquote>\n<p>转载自：<a href=\"https://github.com/GuoZhaoran/spikeSystem\" target=\"_blank\" rel=\"noopener\">https://github.com/GuoZhaoran/spikeSystem</a></p>\n</blockquote>\n<h3><span id=\"12306抢票极限并发带来的思考\">12306抢票,极限并发带来的思考?</span></h3>\n<p>每到节假日期间,一二线城市返乡、外出游玩的人们几乎都面临着一个问题：抢火车票!虽然现在大多数情况下都能订到票,但是放票瞬间即无W票的场景，相信大家都深有体会。尤其是春节期间，大家不仅使用12306，还会考虑“智行”和其他的抢票软件,全国上下几亿人在这段时间都在抢票。“12306服务”承受着这个世界上任何秒杀系统都无法超越的QPS,上百万的并发再正常不过了！笔者专门研究了一下“12306”的服务端架构,学习到了其系统设计上很多亮点，在这里和大家分享一下并模拟一个例子：如何在100万人同时抢1万张火车票时，系统提供正常、稳定的服务。</p>\n<a id=\"more\"></a>\n<h3><span id=\"1-大型高并发系统架构\">1. 大型高并发系统架构</span></h3>\n<p>高并发的系统架构都会采用分布式集群部署，服务上层有着层层负载均衡，并提供各种容灾手段(双火机房、节点容错、服务器灾备等)保证系统的高可用,流量也会根据不同的负载能力和配置策略均衡到不同的服务器上。下边是一个简单的示意图:</p>\n<p><img src=\"16d4f6384336b828\" alt=\"\"></p>\n<h4><span id=\"11-负载均衡简介\">1.1 负载均衡简介</span></h4>\n<p>上图中描述了用户请求到服务器经历了三层的负载均衡，下边分别简单介绍一下这三种负载均衡：</p>\n<ul>\n<li>OSPF(开放式最短链路优先)是一个内部网关协议(Interior Gateway Protocol,简称IGP)。OSPF通过路由器之间通告网络接口的状态来建立链路状态数据库，生成最短路径树，OSPF会自动计算路由接口上的Cost值，但也可以通过手工指定该接口的Cost值，手工指定的优先于自动计算的值。OSPF计算的Cost，同样是和接口带宽成反比，带宽越高，Cost值越小。到达目标相同Cost值的路径，可以执行负载均衡，最多6条链路同时执行负载均衡。</li>\n<li>LVS (Linux VirtualServer)，它是一种集群(Cluster)技术，采用IP负载均衡技术和基于内容请求分发技术。调度器具有很好的吞吐率，将请求均衡地转移到不同的服务器上执行，且调度器自动屏蔽掉服务器的故障，从而将一组服务器构成一个高性能的、高可用的虚拟服务器。</li>\n<li>Nginx想必大家都很熟悉了,是一款非常高性能的http代理/反向代理服务器,服务开发中也经常使用它来做负载均衡。Nginx实现负载均衡的方式主要有三种:轮询、加权轮询、ip hash轮询，下面我们就针对Nginx的加权轮询做专门的配置和测试</li>\n</ul>\n<h4><span id=\"12-nginx加权轮询的演示\">1.2 Nginx加权轮询的演示</span></h4>\n<p>Nginx实现负载均衡通过upstream模块实现，其中加权轮询的配置是可以给相关的服务加上一个权重值，配置的时候可能根据服务器的性能、负载能力设置相应的负载。下面是一个加权轮询负载的配置，我将在本地的监听3001-3004端口,分别配置1，2，3，4的权重:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#配置负载均衡</span><br><span class=\"line\">    upstream load_rule &#123;</span><br><span class=\"line\">       server 127.0.0.1:3001 weight=1;</span><br><span class=\"line\">       server 127.0.0.1:3002 weight=2;</span><br><span class=\"line\">       server 127.0.0.1:3003 weight=3;</span><br><span class=\"line\">       server 127.0.0.1:3004 weight=4;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  load_balance.com www.load_balance.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">       proxy_pass http://load_rule;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我在本地/etc/hosts目录下配置了 www.load_balance.com 的虚拟域名地址，接下来使用Go语言开启四个http端口监听服务，下面是监听在3001端口的Go程序,其他几个只需要修改端口即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;net/http&quot;</span><br><span class=\"line\">\t&quot;os&quot;</span><br><span class=\"line\">\t&quot;strings&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\thttp.HandleFunc(&quot;/buy/ticket&quot;, handleReq)</span><br><span class=\"line\">\thttp.ListenAndServe(&quot;:3001&quot;, nil)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//处理请求函数,根据请求将响应结果信息写入日志</span><br><span class=\"line\">func handleReq(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class=\"line\">\tfailedMsg :=  &quot;handle in port:&quot;</span><br><span class=\"line\">\twriteLog(failedMsg, &quot;./stat.log&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//写入日志</span><br><span class=\"line\">func writeLog(msg string, logPath string) &#123;</span><br><span class=\"line\">\tfd, _ := os.OpenFile(logPath, os.O_RDWR|os.O_CREATE|os.O_APPEND, 0644)</span><br><span class=\"line\">\tdefer fd.Close()</span><br><span class=\"line\">\tcontent := strings.Join([]string&#123;msg, &quot;\\r\\n&quot;&#125;, &quot;3001&quot;)</span><br><span class=\"line\">\tbuf := []byte(content)</span><br><span class=\"line\">\tfd.Write(buf)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我将请求的端口日志信息写到了./stat.log文件当中，然后使用ab压测工具做压测:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ab -n 1000 -c 100 http://www.load_balance.com/buy/ticket</span><br></pre></td></tr></table></figure>\n<p>统计日志中的结果，3001-3004端口分别得到了100、200、300、400的请求量，这和我在nginx中配置的权重占比很好的吻合在了一起，并且负载后的流量非常的均匀、随机。具体的实现大家可以参考nginx的upsteam模块实现源码，这里推荐一篇文章：<a href=\"https://www.kancloud.cn/digest/understandingnginx/202607\" target=\"_blank\" rel=\"noopener\">Nginx 中 upstream 机制的负载均衡</a></p>\n<h3><span id=\"2秒杀抢购系统选型\">2.秒杀抢购系统选型</span></h3>\n<p>回到我们最初提到的问题中来：火车票秒杀系统如何在高并发情况下提供正常、稳定的服务呢？</p>\n<p>从上面的介绍我们知道用户秒杀流量通过层层的负载均衡，均匀到了不同的服务器上，即使如此，集群中的单机所承受的QPS也是非常高的。如何将单机性能优化到极致呢？要解决这个问题，我们就要想明白一件事：<br>\n通常订票系统要处理生成订单、减扣库存、用户支付这三个基本的阶段，我们系统要做的事情是要保证火车票订单<strong>不超卖、不少卖</strong>，每张售卖的车票都必须支付才有效，还要保证系统承受极高的并发。这三个阶段的先后顺序改怎么分配才更加合理呢?我们来分析一下：</p>\n<h4><span id=\"21-下单减库存\">2.1 下单减库存</span></h4>\n<p>当用户并发请求到达服务端时，首先创建订单，然后扣除库存，等待用户支付。这种顺序是我们一般人首先会想到的解决方案，这种情况下也能保证订单不会超卖，因为创建订单之后就会减库存，这是一个原子操作。但是这样也会产生一些问题，第一就是在极限并发情况下，任何一个内存操作的细节都至关影响性能，尤其像创建订单这种逻辑，一般都需要存储到磁盘数据库的，对数据库的压力是可想而知的；第二是如果用户存在恶意下单的情况，只下单不支付这样库存就会变少，会少卖很多订单，虽然服务端可以限制IP和用户的购买订单数量，这也不算是一个好方法。</p>\n<p><img src=\"16d515459549d332\" alt=\"\"></p>\n<h4><span id=\"22-支付减库存\">2.2 支付减库存</span></h4>\n<p>如果等待用户支付了订单在减库存，第一感觉就是不会少卖。但是这是并发架构的大忌，因为在极限并发情况下，用户可能会创建很多订单，当库存减为零的时候很多用户发现抢到的订单支付不了了，这也就是所谓的“超卖”。也不能避免并发操作数据库磁盘IO</p>\n<p><img src=\"16d51709c032a4c4\" alt=\"\"></p>\n<h4><span id=\"23-预扣库存\">2.3 预扣库存</span></h4>\n<p>从上边两种方案的考虑，我们可以得出结论：只要创建订单，就要频繁操作数据库IO。那么有没有一种不需要直接操作数据库IO的方案呢，这就是预扣库存。先扣除了库存，保证不超卖，然后异步生成用户订单，这样响应给用户的速度就会快很多；那么怎么保证不少卖呢？用户拿到了订单，不支付怎么办？我们都知道现在订单都有有效期，比如说用户五分钟内不支付，订单就失效了，订单一旦失效，就会加入新的库存，这也是现在很多网上零售企业保证商品不少卖采用的方案。订单的生成是异步的,一般都会放到MQ、kafka这样的即时消费队列中处理,订单量比较少的情况下，生成订单非常快，用户几乎不用排队。</p>\n<p><img src=\"16d518acfa35d0b4\" alt=\"\"></p>\n<h3><span id=\"3-扣库存的艺术\">3. 扣库存的艺术</span></h3>\n<p>从上面的分析可知，显然预扣库存的方案最合理。我们进一步分析扣库存的细节，这里还有很大的优化空间，库存存在哪里？怎样保证高并发下，正确的扣库存，还能快速的响应用户请求？</p>\n<p>在单机低并发情况下，我们实现扣库存通常是这样的:</p>\n<p><img src=\"16d51adcedc44893\" alt=\"\"></p>\n<p>为了保证扣库存和生成订单的原子性，需要采用事务处理，然后取库存判断、减库存，最后提交事务，整个流程有很多IO，对数据库的操作又是阻塞的。这种方式根本不适合高并发的秒杀系统。</p>\n<p>接下来我们对单机扣库存的方案做优化：<strong>本地扣库存</strong>。我们把一定的库存量分配到本地机器，直接在内存中减库存，然后按照之前的逻辑异步创建订单。改进过之后的单机系统是这样的:</p>\n<p><img src=\"16d51c3cdf3e817e\" alt=\"\"></p>\n<p>这样就避免了对数据库频繁的IO操作，只在内存中做运算，极大的提高了单机抗并发的能力。但是百万的用户请求量单机是无论如何也抗不住的，虽然nginx处理网络请求使用epoll模型，c10k的问题在业界早已得到了解决。但是linux系统下，一切资源皆文件，网络请求也是这样，大量的文件描述符会使操作系统瞬间失去响应。上面我们提到了nginx的加权均衡策略，我们不妨假设将100W的用户请求量平均均衡到100台服务器上，这样单机所承受的并发量就小了很多。然后我们每台机器本地库存100张火车票，100台服务器上的总库存还是1万，这样保证了库存订单不超卖,下面是我们描述的集群架构:</p>\n<p><img src=\"16d51dc0f011ff25\" alt=\"\"></p>\n<p>问题接踵而至，在高并发情况下，现在我们还无法保证系统的高可用，假如这100台服务器上有两三台机器因为扛不住并发的流量或者其他的原因宕机了。那么这些服务器上的订单就卖不出去了，这就造成了订单的少卖。要解决这个问题，我们需要对总订单量做统一的管理，这就是接下来的容错方案。服务器不仅要在本地减库存，另外要<strong>远程统一减库存</strong>。有了远程统一减库存的操作，我们就可以根据机器负载情况，为每台机器分配一些多余的“buffer库存”用来防止机器中有机器宕机的情况。我们结合下面架构图具体分析一下:</p>\n<p><img src=\"16d51f0e2182123c\" alt=\"\"></p>\n<p>我们采用Redis存储统一库存，因为Redis的性能非常高，号称单机QPS能抗10W的并发。在本地减库存以后，如果本地有订单，我们再去请求redis远程减库存，本地减库存和远程减库存都成功了，才返回给用户抢票成功的提示,这样也能有效的保证订单不会超卖。当机器中有机器宕机时，因为每个机器上有预留的buffer余票，所以宕机机器上的余票依然能够在其他机器上得到弥补，保证了不少卖。buffer余票设置多少合适呢，理论上buffer设置的越多，系统容忍宕机的机器数量就越多，但是buffer设置的太大也会对redis造成一定的影响。虽然redis内存数据库抗并发能力非常高，请求依然会走一次网络IO,其实抢票过程中对redis的请求次数是本地库存和buffer库存的总量，因为当本地库存不足时，系统直接返回用户“已售罄”的信息提示，就不会再走统一扣库存的逻辑，这在一定程度上也避免了巨大的网络请求量把redis压跨，所以buffer值设置多少，需要架构师对系统的负载能力做认真的考量。</p>\n<h3><span id=\"4-代码演示\">4. 代码演示</span></h3>\n<p>Go语言原生为并发设计，我采用go语言给大家演示一下单机抢票的具体流程。</p>\n<h4><span id=\"41-初始化工作\">4.1 初始化工作</span></h4>\n<p>go包中的init函数先于main函数执行，在这个阶段主要做一些准备性工作。我们系统需要做的准备工作有：初始化本地库存、初始化远程redis存储统一库存的hash键值、初始化redis连接池；另外还需要初始化一个大小为1的int类型chan,目的是实现分布式锁的功能，也可以直接使用读写锁或者使用redis等其他的方式避免资源竞争,但使用channel更加高效，这就是go语言的哲学：<strong>不要通过共享内存来通信，而要通过通信来共享内存</strong>。redis库使用的是redigo，下面是代码实现:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">//localSpike包结构体定义</span><br><span class=\"line\">package localSpike</span><br><span class=\"line\"></span><br><span class=\"line\">type LocalSpike struct &#123;</span><br><span class=\"line\">\tLocalInStock     int64</span><br><span class=\"line\">\tLocalSalesVolume int64</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">//remoteSpike对hash结构的定义和redis连接池</span><br><span class=\"line\">package remoteSpike</span><br><span class=\"line\">//远程订单存储健值</span><br><span class=\"line\">type RemoteSpikeKeys struct &#123;</span><br><span class=\"line\">\tSpikeOrderHashKey string\t//redis中秒杀订单hash结构key</span><br><span class=\"line\">\tTotalInventoryKey string\t//hash结构中总订单库存key</span><br><span class=\"line\">\tQuantityOfOrderKey string\t//hash结构中已有订单数量key</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//初始化redis连接池</span><br><span class=\"line\">func NewPool() *redis.Pool &#123;</span><br><span class=\"line\">\treturn &amp;redis.Pool&#123;</span><br><span class=\"line\">\t\tMaxIdle:   10000,</span><br><span class=\"line\">\t\tMaxActive: 12000, // max number of connections</span><br><span class=\"line\">\t\tDial: func() (redis.Conn, error) &#123;</span><br><span class=\"line\">\t\t\tc, err := redis.Dial(&quot;tcp&quot;, &quot;:6379&quot;)</span><br><span class=\"line\">\t\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\t\tpanic(err.Error())</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\treturn c, err</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">func init() &#123;</span><br><span class=\"line\">\tlocalSpike = localSpike2.LocalSpike&#123;</span><br><span class=\"line\">\t\tLocalInStock:     150,</span><br><span class=\"line\">\t\tLocalSalesVolume: 0,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tremoteSpike = remoteSpike2.RemoteSpikeKeys&#123;</span><br><span class=\"line\">\t\tSpikeOrderHashKey:  &quot;ticket_hash_key&quot;,</span><br><span class=\"line\">\t\tTotalInventoryKey:  &quot;ticket_total_nums&quot;,</span><br><span class=\"line\">\t\tQuantityOfOrderKey: &quot;ticket_sold_nums&quot;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tredisPool = remoteSpike2.NewPool()</span><br><span class=\"line\">\tdone = make(chan int, 1)</span><br><span class=\"line\">\tdone &lt;- 1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"42-本地扣库存和统一扣库存\">4.2 本地扣库存和统一扣库存</span></h4>\n<p>本地扣库存逻辑非常简单，用户请求过来，添加销量，然后对比销量是否大于本地库存，返回bool值:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package localSpike</span><br><span class=\"line\">//本地扣库存,返回bool值</span><br><span class=\"line\">func (spike *LocalSpike) LocalDeductionStock() bool&#123;</span><br><span class=\"line\">\tspike.LocalSalesVolume = spike.LocalSalesVolume + 1</span><br><span class=\"line\">\treturn spike.LocalSalesVolume &lt; spike.LocalInStock</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意这里对共享数据LocalSalesVolume的操作是要使用锁来实现了，但是因为本地扣库存和统一扣库存是一个原子性操作，所以在最上层使用channel来实现，这块后边会讲。统一扣库存操作redis，因为redis是单线程的，而我们要实现从中取数据，写数据并计算一些列步骤，我们要配合lua脚本打包命令，保证操作的原子性:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package remoteSpike</span><br><span class=\"line\">......</span><br><span class=\"line\">const LuaScript = `</span><br><span class=\"line\">        local ticket_key = KEYS[1]</span><br><span class=\"line\">        local ticket_total_key = ARGV[1]</span><br><span class=\"line\">        local ticket_sold_key = ARGV[2]</span><br><span class=\"line\">        local ticket_total_nums = tonumber(redis.call(&apos;HGET&apos;, ticket_key, ticket_total_key))</span><br><span class=\"line\">        local ticket_sold_nums = tonumber(redis.call(&apos;HGET&apos;, ticket_key, ticket_sold_key))</span><br><span class=\"line\">\t\t-- 查看是否还有余票,增加订单数量,返回结果值</span><br><span class=\"line\">        if(ticket_sold_nums &gt; ticket_total_nums) then</span><br><span class=\"line\">            return redis.call(&apos;HINCRBY&apos;, ticket_key, ticket_sold_key, 1)</span><br><span class=\"line\">        end</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">`</span><br><span class=\"line\">//远端统一扣库存</span><br><span class=\"line\">func (RemoteSpikeKeys *RemoteSpikeKeys) RemoteDeductionStock(conn redis.Conn) bool &#123;</span><br><span class=\"line\">\tlua := redis.NewScript(1, LuaScript)</span><br><span class=\"line\">\tresult, err := redis.Int(lua.Do(conn, RemoteSpikeKeys.SpikeOrderHashKey, RemoteSpikeKeys.TotalInventoryKey, RemoteSpikeKeys.QuantityOfOrderKey))</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\treturn false</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn result != 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们使用hash结构存储统一库存和总销量的信息,请求过来，判断总销量是否大于库存，然后返回相关的bool值。在启动服务之前，我们需要初始化redis的初始库存信息:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hmset ticket_hash_key &quot;ticket_total_nums&quot; 10000 &quot;ticket_sold_nums&quot; 0</span><br></pre></td></tr></table></figure>\n<h4><span id=\"43-响应用户信息\">4.3 响应用户信息</span></h4>\n<p>我们开启一个http服务，监听在一个端口上:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">...</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\thttp.HandleFunc(&quot;/buy/ticket&quot;, handleReq)</span><br><span class=\"line\">\thttp.ListenAndServe(&quot;:3005&quot;, nil)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面我们做完了所有的初始化工作，加下来handleReq的逻辑非常清晰，判断是否抢票成功，返回给用户信息就可以了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">//处理请求函数,根据请求将响应结果信息写入日志</span><br><span class=\"line\">func handleReq(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class=\"line\">\tredisConn := redisPool.Get()</span><br><span class=\"line\">\tLogMsg := &quot;&quot;</span><br><span class=\"line\">\t&lt;-done</span><br><span class=\"line\">\t//全局读写锁</span><br><span class=\"line\">\tif localSpike.LocalDeductionStock() &amp;&amp; remoteSpike.RemoteDeductionStock(redisConn) &#123;</span><br><span class=\"line\">\t\tutil.RespJson(w, 1,  &quot;抢票成功&quot;, nil)</span><br><span class=\"line\">\t\tLogMsg = LogMsg + &quot;result:1,localSales:&quot; + strconv.FormatInt(localSpike.LocalSalesVolume, 10)</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tutil.RespJson(w, -1, &quot;已售罄&quot;, nil)</span><br><span class=\"line\">\t\tLogMsg = LogMsg + &quot;result:0,localSales:&quot; + strconv.FormatInt(localSpike.LocalSalesVolume, 10)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdone &lt;- 1</span><br><span class=\"line\"></span><br><span class=\"line\">\t//将抢票状态写入到log中</span><br><span class=\"line\">\twriteLog(LogMsg, &quot;./stat.log&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func writeLog(msg string, logPath string) &#123;</span><br><span class=\"line\">\tfd, _ := os.OpenFile(logPath, os.O_RDWR|os.O_CREATE|os.O_APPEND, 0644)</span><br><span class=\"line\">\tdefer fd.Close()</span><br><span class=\"line\">\tcontent := strings.Join([]string&#123;msg, &quot;\\r\\n&quot;&#125;, &quot;&quot;)</span><br><span class=\"line\">\tbuf := []byte(content)</span><br><span class=\"line\">\tfd.Write(buf)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>前边提到我们扣库存时要考虑静态条件，我们这里是使用channel避免并发的读写，保证了请求的高效顺序执行。我们将接口的返回信息写入到了./stat.log文件方便做压测统计。</p>\n<h4><span id=\"44-单机服务压测\">4.4 单机服务压测</span></h4>\n<p>开启服务，我们使用ab压测工具进行测试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ab -n 10000 -c 100 http://127.0.0.1:3005/buy/ticket</span><br></pre></td></tr></table></figure>\n<p>下面是我本地低配mac的压测信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is ApacheBench, Version 2.3 &lt;$Revision: 1826891 $&gt;</span><br><span class=\"line\">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class=\"line\">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class=\"line\"></span><br><span class=\"line\">Benchmarking 127.0.0.1 (be patient)</span><br><span class=\"line\">Completed 1000 requests</span><br><span class=\"line\">Completed 2000 requests</span><br><span class=\"line\">Completed 3000 requests</span><br><span class=\"line\">Completed 4000 requests</span><br><span class=\"line\">Completed 5000 requests</span><br><span class=\"line\">Completed 6000 requests</span><br><span class=\"line\">Completed 7000 requests</span><br><span class=\"line\">Completed 8000 requests</span><br><span class=\"line\">Completed 9000 requests</span><br><span class=\"line\">Completed 10000 requests</span><br><span class=\"line\">Finished 10000 requests</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Server Software:</span><br><span class=\"line\">Server Hostname:        127.0.0.1</span><br><span class=\"line\">Server Port:            3005</span><br><span class=\"line\"></span><br><span class=\"line\">Document Path:          /buy/ticket</span><br><span class=\"line\">Document Length:        29 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">Concurrency Level:      100</span><br><span class=\"line\">Time taken for tests:   2.339 seconds</span><br><span class=\"line\">Complete requests:      10000</span><br><span class=\"line\">Failed requests:        0</span><br><span class=\"line\">Total transferred:      1370000 bytes</span><br><span class=\"line\">HTML transferred:       290000 bytes</span><br><span class=\"line\">Requests per second:    4275.96 [#/sec] (mean)</span><br><span class=\"line\">Time per request:       23.387 [ms] (mean)</span><br><span class=\"line\">Time per request:       0.234 [ms] (mean, across all concurrent requests)</span><br><span class=\"line\">Transfer rate:          572.08 [Kbytes/sec] received</span><br><span class=\"line\"></span><br><span class=\"line\">Connection Times (ms)</span><br><span class=\"line\">              min  mean[+/-sd] median   max</span><br><span class=\"line\">Connect:        0    8  14.7      6     223</span><br><span class=\"line\">Processing:     2   15  17.6     11     232</span><br><span class=\"line\">Waiting:        1   11  13.5      8     225</span><br><span class=\"line\">Total:          7   23  22.8     18     239</span><br><span class=\"line\"></span><br><span class=\"line\">Percentage of the requests served within a certain time (ms)</span><br><span class=\"line\">  50%     18</span><br><span class=\"line\">  66%     24</span><br><span class=\"line\">  75%     26</span><br><span class=\"line\">  80%     28</span><br><span class=\"line\">  90%     33</span><br><span class=\"line\">  95%     39</span><br><span class=\"line\">  98%     45</span><br><span class=\"line\">  99%     54</span><br><span class=\"line\"> 100%    239 (longest request)</span><br></pre></td></tr></table></figure>\n<p>根据指标显示，我单机每秒就能处理4000+的请求，正常服务器都是多核配置，处理1W+的请求根本没有问题。而且查看日志发现整个服务过程中，请求都很正常，流量均匀，redis也很正常：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//stat.log</span><br><span class=\"line\">...</span><br><span class=\"line\">result:1,localSales:145</span><br><span class=\"line\">result:1,localSales:146</span><br><span class=\"line\">result:1,localSales:147</span><br><span class=\"line\">result:1,localSales:148</span><br><span class=\"line\">result:1,localSales:149</span><br><span class=\"line\">result:1,localSales:150</span><br><span class=\"line\">result:0,localSales:151</span><br><span class=\"line\">result:0,localSales:152</span><br><span class=\"line\">result:0,localSales:153</span><br><span class=\"line\">result:0,localSales:154</span><br><span class=\"line\">result:0,localSales:156</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3><span id=\"5总结回顾\">5.总结回顾</span></h3>\n<p>总体来说，秒杀系统是非常复杂的。我们这里只是简单介绍模拟了一下单机如何优化到高性能，集群如何避免单点故障，保证订单不超卖、不少卖的一些策略，完整的订单系统还有订单进度的查看，每台服务器上都有一个任务，定时的从总库存同步余票和库存信息展示给用户,还有用户在订单有效期内不支付，释放订单，补充到库存等等。</p>\n<p>我们实现了高并发抢票的核心逻辑，可以说系统设计的非常的巧妙，巧妙的避开了对DB数据库IO的操作，对Redis网络IO的高并发请求，几乎所有的计算都是在内存中完成的，而且有效的保证了不超卖、不少卖，还能够容忍部分机器的宕机。我觉得其中有两点特别值得学习总结：</p>\n<ul>\n<li>负载均衡，分而治之。通过负载均衡，将不同的流量划分到不同的机器上，每台机器处理好自己的请求，将自己的性能发挥到极致，这样系统的整体也就能承受极高的并发了，就像工作的的一个团队，每个人都将自己的价值发挥到了极致，团队成长自然是很大的。</li>\n<li>合理的使用并发和异步。自epoll网络架构模型解决了c10k问题以来，异步越来被服务端开发人员所接受，能够用异步来做的工作，就用异步来做，在功能拆解上能达到意想不到的效果，这点在nginx、node.js、redis上都能体现，他们处理网络请求使用的epoll模型，用实践告诉了我们单线程依然可以发挥强大的威力。服务器已经进入了多核时代，go语言这种天生为并发而生的语言，完美的发挥了服务器多核优势，很多可以并发处理的任务都可以使用并发来解决，比如go处理http请求时每个请求都会在一个goroutine中执行，总之:怎样合理的压榨CPU,让其发挥出应有的价值，是我们一直需要探索学习的方向。</li>\n</ul>\n","categories":[{"name":"分布式服务","slug":"分布式服务","permalink":"chunlife.top/categories/分布式服务/"}],"tags":[{"name":"高并发","slug":"高并发","permalink":"chunlife.top/tags/高并发/"}]},{"title":"查看linux当前shell","date":"2019-12-05T08:20:10.000Z","path":"2019/12/05/查看linux当前shell/","content":"<p>1.查看当前正在使用的shell</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $SHELL</span><br></pre></td></tr></table></figure>\n<p>2.查看系统中安装了哪些shell</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/shells</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"https://www.lengyuewusheng.com/linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%BF%9B%E8%A1%8Curl%E8%A7%A3%E7%A0%81.html\">Linux命令行环境下进行URL解码</a></li></ul></div>","categories":[{"name":"系统","slug":"系统","permalink":"chunlife.top/categories/系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"chunlife.top/tags/linux/"},{"name":"shell","slug":"shell","permalink":"chunlife.top/tags/shell/"},{"name":"查看shell类型","slug":"查看shell类型","permalink":"chunlife.top/tags/查看shell类型/"}]},{"title":"Linux nohup","date":"2019-12-05T08:18:47.000Z","path":"2019/12/05/Linux-nohup和/","content":"<blockquote>\n<p>nohup 和 &amp;</p>\n</blockquote>\n<p><code>&amp;</code>的意思是在后台运行， 什么意思呢？  意思是说， 当你在执行 ./a.out &amp; 的时候， 即使你用ctrl C,  那么a.out照样运行（因为对SIGINT信号免疫）。 但是要注意， 如果你直接关掉shell后， 那么， a.out进程同样消失。 可见， <code>&amp;</code>的后台并不硬（因为对SIGHUP信号不免疫）。</p>\n <a id=\"more\"></a>\n<p>nohup的意思是忽略SIGHUP信号， 所以当运行nohup ./a.out的时候， 关闭shell, 那么a.out进程还是存在的（对SIGHUP信号免疫）。 但是， 要注意， 如果你直接在shell中用Ctrl C, 那么, a.out进程也是会消失的（因为对SIGINT信号不免疫）</p>\n<p>所以， &amp;和nohup没有半毛钱的关系， 要让进程真正不受shell中Ctrl C和shell关闭的影响， 那该怎么办呢？ 那就用nohua ./a.out &amp;吧， 两全其美。</p>\n<p>如果你懂守护进程， 那么nohup ./a.out &amp;颇有点让a.out成为守护进程的感觉。</p>\n<blockquote>\n<p>转载自：<a href=\"https://www.cnblogs.com/testzcy/p/9852463.html\" target=\"_blank\" rel=\"noopener\">nohup 和 &amp;</a></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2&gt;&amp;1 和 &amp;&gt;  的解释</span><br><span class=\"line\"></span><br><span class=\"line\">Linux的IO输入输出有三类</span><br><span class=\"line\"></span><br><span class=\"line\">Standard Input     代码 0</span><br><span class=\"line\">Standard Output    代码 1</span><br><span class=\"line\">Standard Error     代码 2</span><br><span class=\"line\"></span><br><span class=\"line\">ls thereisno 1&gt; out.txt  标准输出重定向  也可以不加1写成 ls thereisno &gt; out.txt</span><br><span class=\"line\"></span><br><span class=\"line\">ls thereisno 2&gt; out.txt  标准错误重定向</span><br><span class=\"line\"></span><br><span class=\"line\">ls thereisno &gt; out.txt  2&gt;&amp;1  把错误定向到标准输出，然后统一重定向</span><br><span class=\"line\"></span><br><span class=\"line\">ls thereisno &amp;&gt; out.txt  所有IO重定向(&amp;&gt;中的&amp;可以代表任意，0，1，2，3……)</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"系统","slug":"系统","permalink":"chunlife.top/categories/系统/"}],"tags":[{"name":"后台运行","slug":"后台运行","permalink":"chunlife.top/tags/后台运行/"},{"name":"nohub","slug":"nohub","permalink":"chunlife.top/tags/nohub/"}]},{"title":"linux解压文件的命令","date":"2019-11-11T03:23:26.000Z","path":"2019/11/11/linux解压文件的命令/","content":"<p>不同的压缩包，就需要不同<code>tar</code>解压参数。当然这都是以前的蛮荒时代，是时候觉醒了。</p>\n<p><strong>从1.15版本开始tar就可以自动识别压缩的格式,故不需人为区分压缩格式就能正确解压</strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf filename.tar.gz</span><br><span class=\"line\">tar -xvf filename.tar.bz2</span><br><span class=\"line\">tar -xvf filename.tar.xz</span><br><span class=\"line\">tar -xvf filename.tar.Z</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<blockquote>\n<p>以下引用：</p>\n<p><a href=\"https://www.cnblogs.com/songanwei/p/9367319.html\" target=\"_blank\" rel=\"noopener\">Linux下的tar压缩解压缩命令详解</a></p>\n</blockquote>\n<h2><span id=\"压缩\">压缩</span></h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -cvf jpg.tar *.jpg //将目录里所有jpg文件打包成tar.jpg </span><br><span class=\"line\"></span><br><span class=\"line\">tar -czf jpg.tar.gz *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -cjf jpg.tar.bz2 *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2</span><br><span class=\"line\"></span><br><span class=\"line\">tar -cZf jpg.tar.Z *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z</span><br><span class=\"line\"></span><br><span class=\"line\">rar a jpg.rar *.jpg //rar格式的压缩，需要先下载rar for linux</span><br><span class=\"line\"></span><br><span class=\"line\">zip jpg.zip *.jpg //zip格式的压缩，需要先下载zip for linux</span><br></pre></td></tr></table></figure>\n<h2><span id=\"解压\">解压</span></h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*.tar 用 tar -xvf 解压</span><br><span class=\"line\"></span><br><span class=\"line\">*.gz 用 gzip -d或者gunzip 解压</span><br><span class=\"line\"></span><br><span class=\"line\">*.tar.gz和*.tgz 用 tar -xzf 解压</span><br><span class=\"line\"></span><br><span class=\"line\">*.bz2 用 bzip2 -d或者用bunzip2 解压</span><br><span class=\"line\"></span><br><span class=\"line\">*.tar.bz2用tar -xjf 解压</span><br><span class=\"line\"></span><br><span class=\"line\">*.Z 用 uncompress 解压</span><br><span class=\"line\"></span><br><span class=\"line\">*.tar.Z 用tar -xZf 解压</span><br><span class=\"line\"></span><br><span class=\"line\">*.rar 用 unrar e解压</span><br><span class=\"line\"></span><br><span class=\"line\">*.zip 用 unzip 解压</span><br></pre></td></tr></table></figure><div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/11/05/linux-windows-go打开应用/\">linux-windows-go打开系统各类应用</a></li><li><a href=\"chunlife.top/2017/10/29/Linux搭建小型服务器——文件共享以及邮件服务器/\">Linux搭建小型服务器——文件共享以及邮件服务器</a></li><li><a href=\"chunlife.top/2016/11/17/磁盘组RAID 5/\">磁盘组RAID 5</a></li><li><a href=\"https://lyonger.cn/article/websocket的几种测试方式/\">websocket的几种测试方式</a></li></ul></div>","categories":[{"name":"系统","slug":"系统","permalink":"chunlife.top/categories/系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"chunlife.top/tags/linux/"},{"name":"tar","slug":"tar","permalink":"chunlife.top/tags/tar/"},{"name":"解压","slug":"解压","permalink":"chunlife.top/tags/解压/"}]},{"title":"windows自动化桌面软件，Go自动化点击操作","date":"2019-11-06T02:06:49.000Z","path":"2019/11/06/windows自动化桌面软件，Go自动化点击操作/","content":"<p>Go的自动化操作其实有点四肢不全的感觉，主要的方面可能就是封装的太少，资料不够多，可参考的东西比较少，这方面铁定有人做过，毕竟自动化的库都出了好几版了，但还是不能和<code>Python</code>这样的老油条掰一掰手腕。</p>\n<p>出于某种需要，花时间去了解了一下，看着不明所以，做起来之后还是比较好理解的（花时间理解是真要花时间），Go里头也是调用的windows API，获取到软件中元素的句柄进行操作。所以很多地方和其他语言都是相通的（理论上都是调用的windows api，代码可能都一样）。</p>\n<a id=\"more\"></a>\n<h2><span id=\"使用到的库\">使用到的库</span></h2>\n<p>Go实现自动化需要借助<a href=\"https://github.com/go-vgo/robotgo\" target=\"_blank\" rel=\"noopener\">robotgo</a>和<a href=\"https://github.com/lxn/win\" target=\"_blank\" rel=\"noopener\">win</a>。借助windows API，获取软件上按键或其他元素的handle，触发各项操作。</p>\n<p>大致流程：</p>\n<p><img src=\"image-20191105202555852.png\" alt=\"软件执行流程\"></p>\n<p><code>robotgo.GetHWND()</code>：可以获取到此时<code>Active</code>窗口的句柄。</p>\n<p><code>win.EnumChildWindows</code>：从父窗口中获取子元素，意思是从一个桌面软件中，枚举出它的内部button，文本框这样的子元素；其有三个参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HWND hWndParent, //父窗口句柄</span><br><span class=\"line\">WNDENUMPROC lpEnumFunc, //回调函数</span><br><span class=\"line\">LPARAM lParam //自定义参数</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>lParam</code>参数不需要管，这个参数主要是使用者传入回调函数中使用的数据。</p>\n</blockquote>\n<p><code>win.SendMessage</code>：向窗口中的元素发送操作指令，例如点击和填充内容操作。</p>\n<h2><span id=\"帮助工具spy\">帮助工具—Spy++</span></h2>\n<p>使用方法参考：<a href=\"https://www.cnblogs.com/happykoukou/p/6755444.html\" target=\"_blank\" rel=\"noopener\">Spy++使用方法</a></p>\n<p>该软件的作用是能够侦查到窗口的元素，以及接收到的各类信息。</p>\n<p>例如，我在实际使用操作自动化过程中，操作菜单艰难无比，无法找到打开菜单的方式，通过<code>Spy++</code>，获取到正常点击菜单元素的<code>message</code>，以及元素对应的<code>wParam</code>参数，于是写出了代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">win.PostMessage(Ghwnd, win.WM_COMMAND, <span class=\"number\">0x0000E110</span>, <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>显然，这个工具类似于bus hound、wireShake一样的存在。</p>\n<h2><span id=\"代码\">代码</span></h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"errors\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/go-vgo/robotgo\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/lxn/win\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os/exec\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"syscall\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"unsafe\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\terr := openAmlogicBurningTool()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"open tool error : \"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 延时等待软件启动</span></span><br><span class=\"line\">\ttime.Sleep(time.Second)</span><br><span class=\"line\"></span><br><span class=\"line\">\tprocessName := <span class=\"string\">\"USB_Burning_Tool.exe\"</span></span><br><span class=\"line\">\tfpid, err := findProcess(processName)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"find process error : \"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tactiveWin := robotgo.GetActive()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> robotgo.SetActive(activeWin)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := robotgo.ActivePID(fpid); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"active pid error : \"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\thwnd := robotgo.GetHWND()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !win.EnumChildWindows(hwnd,</span><br><span class=\"line\">\t\tcallback(EnumMainTVWindowCn), <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">\"start.. \"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\twin.SendMessage(startButton, win.WM_LBUTTONDOWN, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\twin.SendMessage(startButton, win.WM_LBUTTONUP, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 关闭这个窗口</span></span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Println(robotgo.Kill(fpid))</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">windowText</span><span class=\"params\">(hchildWnd win.HWND)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\ttextLength := win.SendMessage(hchildWnd, win.WM_GETTEXTLENGTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tbuf := <span class=\"built_in\">make</span>([]<span class=\"keyword\">uint16</span>, textLength+<span class=\"number\">1</span>)</span><br><span class=\"line\">\twin.SendMessage(hchildWnd, win.WM_GETTEXT, <span class=\"keyword\">uintptr</span>(textLength+<span class=\"number\">1</span>), <span class=\"keyword\">uintptr</span>(unsafe.Pointer(&amp;buf[<span class=\"number\">0</span>])))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> syscall.UTF16ToString(buf)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> startButton win.HWND</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">EnumMainTVWindowCn</span><span class=\"params\">(hWnd win.HWND, lParam <span class=\"keyword\">uintptr</span>)</span> <span class=\"title\">uintptr</span></span> &#123;</span><br><span class=\"line\">\tret := windowText(hWnd)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ret == <span class=\"string\">\"开始\"</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(ret)</span><br><span class=\"line\">\t\tstartButton = hWnd</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">callback</span><span class=\"params\">(fn <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">uintptr</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> syscall.NewCallback(fn)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">openAmlogicBurningTool</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> exec.Command(<span class=\"string\">\"cmd\"</span>, <span class=\"string\">\"/C\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"start\"</span>,<span class=\"string\">`D:\\Amlogic\\USB_Burning_Tool\\USB_Burning_Tool.exe`</span>).Start()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">findProcess</span><span class=\"params\">(name <span class=\"keyword\">string</span>)</span> <span class=\"params\">(<span class=\"keyword\">int32</span>, error)</span></span> &#123;</span><br><span class=\"line\">\tprocesses, err := robotgo.Process()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, process := <span class=\"keyword\">range</span> processes &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> process.Name == name &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> process.Pid, <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>, errors.New(<span class=\"string\">\"process not found\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/11/05/linux-windows-go打开应用/\">linux-windows-go打开系统各类应用</a></li><li><a href=\"https://jarrychen.xyz/archives/31a1adce.html\">Golang学习路线图</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"windows","slug":"windows","permalink":"chunlife.top/tags/windows/"},{"name":"自动化点击","slug":"自动化点击","permalink":"chunlife.top/tags/自动化点击/"},{"name":"windows api","slug":"windows-api","permalink":"chunlife.top/tags/windows-api/"},{"name":"shell - Go","slug":"shell-Go","permalink":"chunlife.top/tags/shell-Go/"}]},{"title":"linux-windows-go打开系统各类应用","date":"2019-11-05T02:59:18.000Z","path":"2019/11/05/linux-windows-go打开应用/","content":"<p>日常做了个任务，需要在Go语言中打开windows上的软件，由于网上查询到的并不都是正确的，这里将代码记录下来。</p>\n<p>打开应用的命令。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"windows\"</span>: <span class=\"string\">\"start\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"darwin\"</span>:  <span class=\"string\">\"open\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"linux\"</span>:   <span class=\"string\">\"xdg-open\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3><span id=\"windows\">windows</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exec.Command(<span class=\"string\">\"cmd\"</span>, <span class=\"string\">\"/C\"</span>, <span class=\"string\">\"start\"</span>, <span class=\"string\">\"xxxxxxxxxxxxxxx\"</span>)</span><br></pre></td></tr></table></figure>\n<h3><span id=\"linuxopenbsd\">linux/openbsd</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exec.Command(<span class=\"string\">\"xdg-open\"</span>, <span class=\"string\">\"xxxxxxxxxxxxxxx\"</span>)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://chunlife.top/2019/03/22/go%E6%89%A7%E8%A1%8Cshell%E5%91%BD%E4%BB%A4/\">go执行shell命令</a></p>\n<h3><span id=\"darwin\">darwin</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exec.Command(<span class=\"string\">\"open\"</span>, <span class=\"string\">\"xxxxxxxxxxxxxxx\"</span>)</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/11/11/linux解压文件的命令/\">linux解压文件的命令</a></li><li><a href=\"chunlife.top/2019/11/06/windows自动化桌面软件，Go自动化点击操作/\">windows自动化桌面软件，Go自动化点击操作</a></li><li><a href=\"chunlife.top/2017/10/29/Linux搭建小型服务器——文件共享以及邮件服务器/\">Linux搭建小型服务器——文件共享以及邮件服务器</a></li><li><a href=\"https://lyonger.cn/article/websocket的几种测试方式/\">websocket的几种测试方式</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"Linux","slug":"Linux","permalink":"chunlife.top/tags/Linux/"},{"name":"cmd","slug":"cmd","permalink":"chunlife.top/tags/cmd/"},{"name":"windows","slug":"windows","permalink":"chunlife.top/tags/windows/"}]},{"title":"MySQL存储JSON——Gorm——go编程","date":"2019-10-28T11:34:33.000Z","path":"2019/10/28/MySQL存储JSON——Gorm———go编程/","content":"<p><code>MySQL</code>到现如今已经是原生支持<code>Json</code>类型（5.7.8版本之后），毕竟JSON存储一直都是NoSql玩的溜，触不及防，MySQL里头也能支持了，且能对JSON数据进行相对的操作。</p>\n<p>NoSql中，对JSON数据天生友好，都算是不固定（弱结构）的数据存储。而MySQL中，字段都是先天所定（强结构），后续更改会相对别扭一些（相对于NoSql型数据库）。</p>\n<a id=\"more\"></a>\n<h2><span id=\"gorm\">Gorm</span></h2>\n<p>Go语言中，我们一般使用Gorm和原生SQL对数据库进行操作，虽然中大型项目中，大多前辈以及一些DBA都会推荐使用原生SQL，这样的好处是防止中间层出现<code>意外</code>的错误，以及排查问题方便性。特别的，如果遇到性能问题，使用<code>orm</code>会造成排查问题的一些复杂性。</p>\n<p>当然，我要是为了开发的便利和速度，一般都会选择<code>Gorm</code>。</p>\n<p>由于Gorm原生并不支持JSON数据结构，需要添加一些方法才能正常操作JSON字段。</p>\n<h2><span id=\"json字段的支持\">JSON字段的支持</span></h2>\n<p>Json字段的创建和普通字段创建没有什么区别：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `users` (</span><br><span class=\"line\">  `info` json NOT NULL,</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>更详细的代码请直接参考我的<a href=\"https://github.com/younglifestyle/goexamples/tree/master/mysql/json%E5%AD%98%E5%82%A8\" target=\"_blank\" rel=\"noopener\">GitHub代码</a>。</p>\n</blockquote>\n<p>在<code>Gorm</code>需要加入两个函数：<code>Value</code>、<code>Scan</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Demo <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  id <span class=\"keyword\">string</span> </span><br><span class=\"line\">  obj  DemoObj  <span class=\"string\">`sql:\"TYPE:json\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> DemoObj <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   c1 <span class=\"keyword\">string</span></span><br><span class=\"line\">   c2 <span class=\"keyword\">int</span></span><br><span class=\"line\">   c3 <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c DemoObj)</span> <span class=\"title\">Value</span><span class=\"params\">()</span> <span class=\"params\">(driver.Value, error)</span></span> &#123;</span><br><span class=\"line\">  b, err := json.Marshal(c)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>(b), err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *DemoObj)</span> <span class=\"title\">Scan</span><span class=\"params\">(input <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> json.Unmarshal(input.([]<span class=\"keyword\">byte</span>), c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以下是对数组的支持。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/****************使gorm支持[]string结构*******************/</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Strings []<span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c Strings)</span> <span class=\"title\">Value</span><span class=\"params\">()</span> <span class=\"params\">(driver.Value, error)</span></span> &#123;</span><br><span class=\"line\">\tb, err := json.Marshal(c)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">string</span>(b), err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Strings)</span> <span class=\"title\">Scan</span><span class=\"params\">(input <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> json.Unmarshal(input.([]<span class=\"keyword\">byte</span>), c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/****************使gorm支持[]string结构*******************/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/****************使gorm支持[]int64结构*******************/</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Int64s []<span class=\"keyword\">int64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c Int64s)</span> <span class=\"title\">Value</span><span class=\"params\">()</span> <span class=\"params\">(driver.Value, error)</span></span> &#123;</span><br><span class=\"line\">\tb, err := json.Marshal(c)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">string</span>(b), err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Int64s)</span> <span class=\"title\">Scan</span><span class=\"params\">(input <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> json.Unmarshal(input.([]<span class=\"keyword\">byte</span>), c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/****************使gorm支持[]int64结构*******************/</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"json字段的操作\">JSON字段的操作</span></h2>\n<p>在上面我的GitHub代码中，有对json字段查找的操作，但其实JSON字段还有很多其他操作，已经有前人总结了这些操作，在此我就直接引用了，给出链接。</p>\n<p><a href=\"https://www.cnblogs.com/muscleape/p/10064031.html\" target=\"_blank\" rel=\"noopener\">MySQL JSON 类型数据操作</a></p>\n<h2><span id=\"json字段的索引\">JSON字段的索引</span></h2>\n<p>那知道了如何操作JSON字段，这里我有个疑问，JSON字段能否加入索引呢？来试试。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; ALTER TABLE users ADD INDEX (info);</span><br><span class=\"line\">ERROR 3152 (42000): JSON column &apos;info&apos; cannot be used in key specification.</span><br></pre></td></tr></table></figure>\n<p>显然是有问题的，对于索引 JSON 类型列问题，MySQL 文档有如下阐述 [<a href=\"https://dev.mysql.com/doc/refman/5.7/en/json.html\" target=\"_blank\" rel=\"noopener\">doc</a> ]：</p>\n<blockquote>\n<p>JSON columns, like columns of other binary types, are not indexed directly; instead, you can create an index on a generated column that extracts a scalar value from the JSON column. See <a href=\"https://dev.mysql.com/doc/refman/5.7/en/create-table-secondary-indexes.html#json-column-indirect-index\" target=\"_blank\" rel=\"noopener\">Indexing a Generated Column to Provide a JSON Column Index</a>, for a detailed example.</p>\n</blockquote>\n<p>就是说，不能直接在 JSON 列上创建索引；替代方式是，先创建提取 JSON 纯量的生成列（generated column），然后在这个生成列上创建索引。</p>\n<p>生成列也被称为虚拟列，其详细作用参考：（看一眼博客里头举的例子，非常好理解虚拟列的用处）</p>\n<blockquote>\n<p><a href=\"https://www.techug.com/post/mysql-5-7-generated-virtual-columns.html\" target=\"_blank\" rel=\"noopener\">Mysql 5.7 的‘虚拟列’是做什么？</a>。</p>\n<p>虚拟列不存储在数据行中，但<strong>虚拟列的元数据信息会存在于相关系统表中</strong>，对虚拟列的添加或者删除只会涉及这些<strong>系统表</strong>，不会导致数据表的重建，所以效率很高</p>\n<p>需要注意，不能建立虚拟列和真实列的联合索引。</p>\n</blockquote>\n<p>具体MySQL中创建JSON虚拟列的操作，参考：<a href=\"http://mysql.taobao.org/monthly/2017/12/09/\" target=\"_blank\" rel=\"noopener\">MySQL · 最佳实践 · 如何索引JSON字段</a>。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"chunlife.top/2019/05/17/mysql集群部署/\">mysql集群部署</a></li><li><a href=\"http://hexo.yuanjh.cn/hexo/a27a49e6/\">mysql常用操作速查[博]</a></li></ul></div>","categories":[{"name":"DB","slug":"DB","permalink":"chunlife.top/categories/DB/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"chunlife.top/tags/mysql/"},{"name":"Gorm","slug":"Gorm","permalink":"chunlife.top/tags/Gorm/"},{"name":"json","slug":"json","permalink":"chunlife.top/tags/json/"},{"name":"存储","slug":"存储","permalink":"chunlife.top/tags/存储/"}]},{"title":"短链接算法解析","date":"2019-10-22T05:56:55.000Z","path":"2019/10/22/短连接算法解析/","content":"<p>观察到短链接这个东西，主要是在微博和微信上，例如微信我订阅了一个<code>每日推送</code>，短小的篇幅里，夹杂的就是短链接，若是原链接，则篇幅很大，一点也不简洁。</p>\n<a id=\"more\"></a>\n<p>短链接网上的各类博客讨论的不止一点半点了，我这里并不是太想重复前辈们写的东西，我这里想的是直接上算法展示，具体的短链接服务，留待我以后完成后，写一篇总结，挂上GitHub地址就好了，这样感（tou）觉（lan）不（hen）错（bang）。</p>\n<blockquote>\n<p>我参考的博客：</p>\n<p><a href=\"http://www.okyes.me/2016/10/04/short-link.html\" target=\"_blank\" rel=\"noopener\">短链接 设计</a></p>\n<p><a href=\"https://pathbox.github.io/2018/02/22/short-url-build-system/\" target=\"_blank\" rel=\"noopener\">短网址、发号器 系统构建分析</a></p>\n<p><a href=\"https://hufangyun.com/2017/short-url/\" target=\"_blank\" rel=\"noopener\">短网址(short URL)系统的原理及其实现</a></p>\n</blockquote>\n<h2><span id=\"原理\">原理</span></h2>\n<p>获得短链接：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">long url =&gt; server =&gt; short url</span><br></pre></td></tr></table></figure>\n<p>访问短链接：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">short url =&gt; short server (重定向)=&gt; long url</span><br></pre></td></tr></table></figure>\n<p>short server 服务提供重定向到 长网址的功能，还可以在short server 服务上进行点击访问统计，用户地域分析等等统计功能。 像Google、新浪等短网址服务提供商大都集成了类似的统计后台功能（有的可能需要付费） 。</p>\n<p>百度短网址生成<a href=\"https://dwz.cn/\" target=\"_blank\" rel=\"noopener\">网站</a>。</p>\n<p>谷歌原本也有，不过已经关停了。</p>\n<h2><span id=\"算法\">算法</span></h2>\n<p>大体上来说，短网址上熟知的算法有两种，Hash算法和自增序列ID算法。</p>\n<h3><span id=\"hash算法\">Hash算法</span></h3>\n<blockquote>\n<p>将长网址md5生成32位签名串（原始数据加上盐，这样不容易暴露算法），分为4段，每段8个字节；</p>\n<p>对这四段循环处理，取8个字节，将他看成16进制串与0x3fffffff(30位1)与操作，即超过30位的忽略处<br>\n理；</p>\n<p>这30位分成6段，每5位的数字作为字母表的索引取得特定字符，依次进行获得6位字符串；</p>\n<p>总的md5串可以获得4个6位串；取里面的任意一个就可作为这个长url的短url地址；</p>\n</blockquote>\n<p>字母表既由数字和大小写字母组成（一般顺序会被打乱）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 短链字符: a-z 0-9 A-Z</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Codes = []<span class=\"keyword\">byte</span>&#123;<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'g'</span>, <span class=\"string\">'h'</span>,</span><br><span class=\"line\">\t<span class=\"string\">'i'</span>, <span class=\"string\">'j'</span>, <span class=\"string\">'k'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'m'</span>, <span class=\"string\">'n'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'p'</span>, <span class=\"string\">'q'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'s'</span>, <span class=\"string\">'t'</span>,</span><br><span class=\"line\">\t<span class=\"string\">'u'</span>, <span class=\"string\">'v'</span>, <span class=\"string\">'w'</span>, <span class=\"string\">'x'</span>, <span class=\"string\">'y'</span>, <span class=\"string\">'z'</span>, <span class=\"string\">'0'</span>, <span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'4'</span>, <span class=\"string\">'5'</span>,</span><br><span class=\"line\">\t<span class=\"string\">'6'</span>, <span class=\"string\">'7'</span>, <span class=\"string\">'8'</span>, <span class=\"string\">'9'</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'D'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'F'</span>, <span class=\"string\">'G'</span>, <span class=\"string\">'H'</span>,</span><br><span class=\"line\">\t<span class=\"string\">'I'</span>, <span class=\"string\">'J'</span>, <span class=\"string\">'K'</span>, <span class=\"string\">'L'</span>, <span class=\"string\">'M'</span>, <span class=\"string\">'N'</span>, <span class=\"string\">'O'</span>, <span class=\"string\">'P'</span>, <span class=\"string\">'Q'</span>, <span class=\"string\">'R'</span>, <span class=\"string\">'S'</span>, <span class=\"string\">'T'</span>,</span><br><span class=\"line\">\t<span class=\"string\">'U'</span>, <span class=\"string\">'V'</span>, <span class=\"string\">'W'</span>, <span class=\"string\">'X'</span>, <span class=\"string\">'Y'</span>, <span class=\"string\">'Z'</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>生成短链的代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先every8Chars是md5中的一组子串, 8个字符</span></span><br><span class=\"line\"><span class=\"comment\">// 所有的数据支取后面30bits</span></span><br><span class=\"line\">base := every8Chars &amp; <span class=\"number\">0x3FFFFFFF</span></span><br><span class=\"line\"><span class=\"comment\">// 数组保存6个字符</span></span><br><span class=\"line\">result := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"comment\">// 下面生成6个字符</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"number\">6</span>; j++ &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 0x0000003D = 61, 所以0x0000003D &amp; out保证生成的数载0~61, 所以其实就是Codes的所有下标</span></span><br><span class=\"line\">\tidx := <span class=\"number\">0x0000003D</span> &amp; base</span><br><span class=\"line\">\t<span class=\"comment\">// 获取这个idx下标的字符</span></span><br><span class=\"line\">\tresult[j] = ALPHABET[<span class=\"keyword\">int</span>(idx)]</span><br><span class=\"line\">\t<span class=\"comment\">// 继续处理后面的bits</span></span><br><span class=\"line\">\tbase = base &gt;&gt; <span class=\"number\">5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>完整代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 短链字符: a-z 0-9 A-Z</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Codes = []<span class=\"keyword\">byte</span>&#123;<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'g'</span>, <span class=\"string\">'h'</span>,</span><br><span class=\"line\">\t<span class=\"string\">'i'</span>, <span class=\"string\">'j'</span>, <span class=\"string\">'k'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'m'</span>, <span class=\"string\">'n'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'p'</span>, <span class=\"string\">'q'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'s'</span>, <span class=\"string\">'t'</span>,</span><br><span class=\"line\">\t<span class=\"string\">'u'</span>, <span class=\"string\">'v'</span>, <span class=\"string\">'w'</span>, <span class=\"string\">'x'</span>, <span class=\"string\">'y'</span>, <span class=\"string\">'z'</span>, <span class=\"string\">'0'</span>, <span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'4'</span>, <span class=\"string\">'5'</span>,</span><br><span class=\"line\">\t<span class=\"string\">'6'</span>, <span class=\"string\">'7'</span>, <span class=\"string\">'8'</span>, <span class=\"string\">'9'</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'D'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'F'</span>, <span class=\"string\">'G'</span>, <span class=\"string\">'H'</span>,</span><br><span class=\"line\">\t<span class=\"string\">'I'</span>, <span class=\"string\">'J'</span>, <span class=\"string\">'K'</span>, <span class=\"string\">'L'</span>, <span class=\"string\">'M'</span>, <span class=\"string\">'N'</span>, <span class=\"string\">'O'</span>, <span class=\"string\">'P'</span>, <span class=\"string\">'Q'</span>, <span class=\"string\">'R'</span>, <span class=\"string\">'S'</span>, <span class=\"string\">'T'</span>,</span><br><span class=\"line\">\t<span class=\"string\">'U'</span>, <span class=\"string\">'V'</span>, <span class=\"string\">'W'</span>, <span class=\"string\">'X'</span>, <span class=\"string\">'Y'</span>, <span class=\"string\">'Z'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GenerateShortLink</span><span class=\"params\">(longURL <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 生成4个短链串</span></span><br><span class=\"line\">\tloopNum := <span class=\"number\">4</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> urls []<span class=\"keyword\">string</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> i <span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// long url转md5</span></span><br><span class=\"line\">\tmd5URL := md5.New()</span><br><span class=\"line\">\t<span class=\"comment\">// 此处的\"salt\": 自定义字符串,防止算法泄漏</span></span><br><span class=\"line\">\t_, err := io.WriteString(md5URL, <span class=\"string\">\"salt\"</span>+longURL)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmd5Byte := md5URL.Sum(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">\tmd5Str := fmt.Sprintf(<span class=\"string\">\"%x\"</span>, md5Byte)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i = <span class=\"number\">0</span>; i &lt; loopNum; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 每8个字符是一个组</span></span><br><span class=\"line\">\t\teach8BitsStr := md5Str[i*<span class=\"number\">8</span> : i*<span class=\"number\">8</span>+<span class=\"number\">8</span>]</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将一组串转成16进制数字</span></span><br><span class=\"line\">\t\tval, err := strconv.ParseInt(fmt.Sprintf(<span class=\"string\">\"%s\"</span>, each8BitsStr), <span class=\"number\">16</span>, <span class=\"number\">64</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获得一个新的短链</span></span><br><span class=\"line\">\t\turls = <span class=\"built_in\">append</span>(urls, genShortURL(val, i))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 下面从上面的4个短链中随机一个作为当前的短链</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(urls) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tr := rand.New(rand.NewSource(time.Now().UnixNano()))</span><br><span class=\"line\">\tidx := r.Intn(<span class=\"built_in\">len</span>(urls))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> urls[idx]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 32位的md5串中, 每8个字符作为一组, 计算得到一个6个字符的短链</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">genShortURL</span><span class=\"params\">(every8Chars <span class=\"keyword\">int64</span>, idx <span class=\"keyword\">int</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 首先every8Chars是md5中的一组子串, 8个字符</span></span><br><span class=\"line\">\t<span class=\"comment\">// 所有的数据支取后面30bits</span></span><br><span class=\"line\">\tbase := every8Chars &amp; <span class=\"number\">0x3FFFFFFF</span></span><br><span class=\"line\">\t<span class=\"comment\">// 数组保存6个字符</span></span><br><span class=\"line\">\tresult := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 下面生成6个字符</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"number\">6</span>; j++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 0x0000003D = 61, 所以0x0000003D &amp; out保证生成的数载0~61, 所以其实就是Codes的所有下标</span></span><br><span class=\"line\">\t\tidx := <span class=\"number\">0x0000003D</span> &amp; base</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取这个idx下标的字符</span></span><br><span class=\"line\">\t\tresult[j] = Codes[<span class=\"keyword\">int</span>(idx)]</span><br><span class=\"line\">\t\t<span class=\"comment\">// 继续处理后面的bits</span></span><br><span class=\"line\">\t\tbase = base &gt;&gt; <span class=\"number\">5</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">\"%s\"</span>, result)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"自增序列id算法\">自增序列ID算法</span></h3>\n<p>短址的长度一般设为 6 位，而每一位是由 <code>[a - z, A - Z, 0 - 9]</code> 总共 62 个字母组成的，所以 6 位的话，总共会有 62^6 ~= 568亿种组合。</p>\n<p>ID作为重要组成单元，其不可重复性非常重要，在单机系统中，我们可以借助MySQL自增索引来获取ID，分布式环境中则可以借助Redis这类分布式K/V系统做发号器，来获取这个ID。</p>\n<p>简单的生成短链接代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"math\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"math/rand\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strconv\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">random</span><span class=\"params\">(min, max <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\trand.Seed(time.Now().Unix())</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rand.Intn(max-min) + min</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ALPHABET = strings.Split(<span class=\"string\">\"adefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"</span>, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 填充短链接的长度</span></span><br><span class=\"line\">    <span class=\"comment\">// int64(random(1, 99))*int64(math.Pow(10, 9)) + ID </span></span><br><span class=\"line\">\trandNo := <span class=\"keyword\">int64</span>(random(<span class=\"number\">1</span>, <span class=\"number\">99</span>))*<span class=\"keyword\">int64</span>(math.Pow(<span class=\"number\">10</span>, <span class=\"number\">9</span>)) + <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ts := strconv.Itoa(<span class=\"keyword\">int</span>(randNo))</span><br><span class=\"line\">\tfmt.Println(s)</span><br><span class=\"line\">\tfmt.Println(GetShortUrl(randNo))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetShortUrl</span><span class=\"params\">(id <span class=\"keyword\">int64</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tindexAry := Encode62(id)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> GetString62(indexAry)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转换成62进制</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Encode62</span><span class=\"params\">(id <span class=\"keyword\">int64</span>)</span> []<span class=\"title\">int64</span></span> &#123;</span><br><span class=\"line\">\tindexAry := []<span class=\"keyword\">int64</span>&#123;&#125;</span><br><span class=\"line\">\tbase := <span class=\"keyword\">int64</span>(<span class=\"built_in\">len</span>(ALPHABET))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> id &gt; <span class=\"number\">0</span> &#123; <span class=\"comment\">// i &lt; 0 时,说明已经除尽了,已经到最高位,数字位已经没有了</span></span><br><span class=\"line\">\t\tremainder := id % base</span><br><span class=\"line\">\t\tindexAry = <span class=\"built_in\">append</span>(indexAry, remainder)</span><br><span class=\"line\">\t\tid = id / base</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> indexAry</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  输出字符串, 长度不一定为6</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetString62</span><span class=\"params\">(indexAry []<span class=\"keyword\">int64</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tresult := <span class=\"string\">\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> val := <span class=\"keyword\">range</span> indexAry &#123;</span><br><span class=\"line\">\t\tresult = result + ALPHABET[val]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> reverseString(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 反转字符串</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">reverseString</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\trunes := []<span class=\"keyword\">rune</span>(s)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> from, to := <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(runes)<span class=\"number\">-1</span>; from &lt; to; from, to = from+<span class=\"number\">1</span>, to<span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\trunes[from], runes[to] = runes[to], runes[from]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">string</span>(runes)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"hash","slug":"hash","permalink":"chunlife.top/tags/hash/"},{"name":"short url","slug":"short-url","permalink":"chunlife.top/tags/short-url/"},{"name":"自增序列ID","slug":"自增序列ID","permalink":"chunlife.top/tags/自增序列ID/"}]},{"title":"一次Go基础知识讲解（内部分享）","date":"2019-10-21T01:33:57.000Z","path":"2019/10/21/一次Go基础知识讲解（内部分享）/","content":"<p>上个星期做了次分享，囿于自身水平和时间限制，没有选择对复杂的东西进行分享，选取的是对Go的基础进行的分享，主要针对于各类数据结构的底层构造，数据结构进行分享，另外还附加了对并发的一些分享，很遗憾，这部分并没有分享到。</p>\n<a id=\"more\"></a>\n<p>因为自己的讲课风格，习惯于PPT简约，所以大多数讲解都是靠代码，或者记录在笔记中，PPT反而会显得<code>性冷淡</code>风。</p>\n<p>课程上准备的<a href=\"https://github.com/younglifestyle/goexamples/tree/master/%E8%AF%BE%E5%A0%82%E5%86%85%E5%AE%B9\" target=\"_blank\" rel=\"noopener\">代码内容</a>。</p>\n<p><img src=\"Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%BB%A5%E5%8F%8A%E5%B9%B6%E5%8F%91%E7%89%B9%E6%80%A7%E8%A7%A3%E6%9E%90_blog.jpg\" alt=\"分享的PPT\"></p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/04/02/Go按行读写文件/\">Go按行读写文件</a></li><li><a href=\"www.chunlife.top/2019/04/02/Go按行读写文件/\">Go按行读写文件</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"基础","slug":"基础","permalink":"chunlife.top/tags/基础/"},{"name":"知识分享","slug":"知识分享","permalink":"chunlife.top/tags/知识分享/"}]},{"title":"计算机大小端","date":"2019-10-14T06:48:25.000Z","path":"2019/10/14/计算机大小端/","content":"<p>因为涉及到一些大小端的知识，就直接记录一下。</p>\n<p>通讯上，大小端的问题倒是很常见的问题了，数据从一个平台到另一个平台，都是需要考虑这个问题的，数据存储不一样，接受到的数据也是反的，和语言没啥关系，和平台（ARM、X86、Power PC等）有关系。</p>\n<a id=\"more\"></a>\n<h2><span id=\"定义\">定义</span></h2>\n<ul>\n<li>Little-Endian：就是低位字节排放在内存的低地址端，高位字节排放在内存的高地址端。</li>\n<li>Big-Endian：就是高位字节排放在内存的低地址端，低位字节排放在内存的高地址端。</li>\n</ul>\n<p>数据：<code>0x12345678</code>存储。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>地址</strong></th>\n<th style=\"text-align:center\"><strong>0x001</strong></th>\n<th style=\"text-align:center\"><strong>0x002</strong></th>\n<th style=\"text-align:center\"><strong>0x003</strong></th>\n<th style=\"text-align:center\"><strong>0x004</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>大端模式</strong></td>\n<td style=\"text-align:center\"><strong>0x12</strong></td>\n<td style=\"text-align:center\"><strong>0x34</strong></td>\n<td style=\"text-align:center\"><strong>0x56</strong></td>\n<td style=\"text-align:center\"><strong>0x78</strong></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>地址</strong></th>\n<th style=\"text-align:center\"><strong>0x001</strong></th>\n<th style=\"text-align:center\"><strong>0x002</strong></th>\n<th style=\"text-align:center\"><strong>0x003</strong></th>\n<th style=\"text-align:center\"><strong>0x004</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>小端模式</strong></td>\n<td style=\"text-align:center\"><strong>0x78</strong></td>\n<td style=\"text-align:center\"><strong>0x56</strong></td>\n<td style=\"text-align:center\"><strong>0x34</strong></td>\n<td style=\"text-align:center\"><strong>0x12</strong></td>\n</tr>\n</tbody>\n</table>\n<h2><span id=\"区分\">区分</span></h2>\n<p>C语言：</p>\n<p>指针</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;   </span><br><span class=\"line\"><span class=\"keyword\">char</span> *p=(<span class=\"keyword\">char</span> *)&amp;i;   </span><br><span class=\"line\"><span class=\"keyword\">if</span>(*p == <span class=\"number\">1</span>)     </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"小端模式\"</span>); </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"comment\">// (*p == 0)</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"大端模式\"</span>);</span><br></pre></td></tr></table></figure>\n<p>联合体union：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//return 1 : little-endian</span></span><br><span class=\"line\"><span class=\"comment\">//       0 : big-endian</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">checkEndian</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> b; </span><br><span class=\"line\">    &#125; c;</span><br><span class=\"line\">  </span><br><span class=\"line\">    c.a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (c.b == <span class=\"number\">1</span>); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>Go</code>语言中，因为和C类似，同样可以使用指针的判断方式，来做这个判断操作。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//true = big endian, false = little endian</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getEndian</span><span class=\"params\">()</span> <span class=\"params\">(ret <span class=\"keyword\">bool</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> i <span class=\"keyword\">int</span> = <span class=\"number\">0x1</span></span><br><span class=\"line\">\tbs := (*[<span class=\"number\">4</span>]<span class=\"keyword\">byte</span>)(unsafe.Pointer(&amp;i))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> bs[<span class=\"number\">0</span>] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"转换大小端\">转换大小端</span></h2>\n<p>Go语言：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BytesReverse</span><span class=\"params\">(data []<span class=\"keyword\">byte</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, j := <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(data)<span class=\"number\">-1</span>; i &lt; j; i, j = i+<span class=\"number\">1</span>, j<span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\tdata[i], data[j] = data[j], data[i]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>颠倒数组，将字节序给逆转过来。可用于结构体数据发送时进行转换，先转成byte数组，然后转换字节序。</p>\n<blockquote>\n<p>这里分享个经验，因为平台不一样，64位平台，int类型所占字节是不同的，这个类型是可以自动变化的（根据平台位数），64位是8字节，若不注意这个点，会造成通信平台字节错位。</p>\n</blockquote>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2018/09/22/KSDK USB 例程分析/\">KSDK USB 例程分析</a></li><li><a href=\"chunlife.top/2016/06/07/strcat函数引起的血案/\">strcat函数引起的血案</a></li><li><a href=\"chunlife.top/2016/06/01/串口终端没有打印字符/\">串口终端没有打印字符</a></li><li><a href=\"https://thelighter.github.io/2020/02/22/joke-3/\">c语言如何实现</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"转换","slug":"转换","permalink":"chunlife.top/tags/转换/"},{"name":"判断大端、小端","slug":"判断大端、小端","permalink":"chunlife.top/tags/判断大端、小端/"},{"name":"C语言 - Go","slug":"C语言-Go","permalink":"chunlife.top/tags/C语言-Go/"}]},{"title":"MongoDB多表查询","date":"2019-09-27T03:23:05.000Z","path":"2019/09/27/MongoDB多表查询/","content":"<p>在之前的博客中就有对MongoDB一些操作的总结，但确实也遗漏了一些操作，这里将其补齐上来，毕竟以后自己也看的到，补充一个知识点是，MongoDB关于连表查询的操作，<code>$lookup</code>。</p>\n<a id=\"more\"></a>\n<h2><span id=\"lookup语法\"><code>$lookup</code>语法</span></h2>\n<p>执行左连接到一个集合，必须在同一数据库中</p>\n<p>$lookup添加了一个新的数组字段，该字段的元素是 <code>joined</code>集合中的匹配文档。</p>\n<p>$lookup 语法如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"variable\">$lookup</span>:</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">       from: &lt;collection to join&gt;,   <span class=\"comment\">#右集合</span></span><br><span class=\"line\">       localField: &lt;field from the input documents&gt;,  <span class=\"comment\">#左集合 join字段</span></span><br><span class=\"line\">       foreignField: &lt;field from the documents of the <span class=\"string\">\"from\"</span> collection&gt;, <span class=\"comment\">#右集合 join字段</span></span><br><span class=\"line\">       as: &lt;output array field&gt;   <span class=\"comment\">#新生成字段（类型array）</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>from</code></td>\n<td>右集合，指定在同一数据库中执行连接的集合。此集合不能shared分片。</td>\n</tr>\n<tr>\n<td><code>localField</code></td>\n<td>指定左集合（db.collectionname）匹配的字段。如果左集合不包含localField，$lookup 视为null值来匹配。</td>\n</tr>\n<tr>\n<td><code>foreignField</code></td>\n<td>指定from集合（右集合）用来匹配的字段。如果集合不包含该字段，$lookup 视为null值来匹配。</td>\n</tr>\n<tr>\n<td><code>as</code></td>\n<td>指定要添加到输入文档的新数组字段的名称。新的数组字段包含from集合中匹配的文档。如果在文档中指定的名称已经存在，现有的领域覆盖。</td>\n</tr>\n</tbody>\n</table>\n<h2><span id=\"例子\">例子</span></h2>\n<p>使用<code>mongo</code>客户端，输入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.file_bind.aggregate([&#123;$lookup : &#123;from: &quot;file_info&quot;, localField: &quot;software_id&quot;, foreignField: &quot;_id&quot;, as: &quot;match_index&quot;&#125;&#125;]).pretty()</span><br></pre></td></tr></table></figure>\n<p><img src=\"1569558006756.png\" alt=\"获取结果\"></p>\n<p><code>$lookup</code>相当于将右集合所有符合条件的记录，都附加在左集合的记录下，所以<code>match_index</code>是被一个数组包裹的，当我们需要把数据给拆开时，我们需要聚合操作中的另一个函数：<code>&quot;$unwind&quot;</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.file_bind.aggregate([&#123;$lookup : &#123;from: &quot;file_info&quot;, localField: &quot;software_id&quot;, foreignField: &quot;_id&quot;, as: &quot;match_index&quot;&#125;&#125;,  &#123;$limit: 1&#125;,  &#123;$unwind: &quot;$match_index&quot;&#125;]).pretty()</span><br></pre></td></tr></table></figure>\n<p><img src=\"1569572962228.png\" alt=\"unwind操作\"></p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/02/18/B站源码中的log-agent/\">B站源码中的log-agent</a></li><li><a href=\"chunlife.top/2019/12/18/使用unsafe-pointer引发GC错误/\">使用unsafe pointer引发GC错误</a></li><li><a href=\"chunlife.top/2019/06/07/MongoDB命令一览/\">MongoDB命令一览</a></li><li><a href=\"https://lailin.xyz/post/11996.html\">Go Web 小技巧（三）Gin 参数绑定</a></li></ul></div>","categories":[{"name":"DB","slug":"DB","permalink":"chunlife.top/categories/DB/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"mongoDB","slug":"mongoDB","permalink":"chunlife.top/tags/mongoDB/"}]},{"title":"读书ing","date":"2019-09-24T02:35:43.000Z","path":"2019/09/24/读长安十二时辰ing/","content":"<p>突发奇想，想着把此时正在看的书的状态给记录下来，以前的就记不清楚了，就从现在记一记吧。</p>\n<a id=\"more\"></a>\n<h4><span id=\"长安十二时辰2019-9-22\">长安十二时辰（2019-9-22）</span></h4>\n<p>已完整看完整部小说，作者塑造了一个现实意义上的英雄，他有着各类缺点，却最关心平凡人的死活，又不得不和大势所抗争，竭尽全力拼死一搏，张小敬，不退，九死无悔！</p>\n<h4><span id=\"zoo\">ZOO</span></h4>\n<p>在看第一节的时候，才发现这本书老早之前就已经看过了，最早开始是对“七个房间”故事记忆深刻，非常喜欢这个故事，感觉自己脑壳里头，播放了一部电影，自己跟随主角的从希望到绝望，再到劫后余生的生的不敢想。、</p>\n<p>现在呢，可能更喜欢“向阳之诗”吧，每个人或似为人的人，都向往的生，生意味着创造的可能，但每个人又都在迎接死亡，因为死亡的存在，传承也更有其意义。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"https://abelsu7.top/2019/03/18/understanding-linux-kernel/\">Linux 内核笔记 1：绪论</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"读书","slug":"读书","permalink":"chunlife.top/tags/读书/"}]},{"title":"面试题(网络搜集)四","date":"2019-09-17T08:54:26.000Z","path":"2019/09/17/面试题-网络搜集-四/","content":"<h2><span id=\"31-算法\">31. 算法</span></h2>\n<a id=\"more\"></a>\n<p>在utf8字符串判断是否包含指定字符串，并返回下标。<br>\n“北京天安门最美丽” , “天安门”<br>\n结果：2</p>\n<p>解答：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tfmt.Println(Utf8Index(<span class=\"string\">\"北京天安门最美丽\"</span>, <span class=\"string\">\"天安门\"</span>))</span><br><span class=\"line\">\tfmt.Println(strings.Index(<span class=\"string\">\"北京天安门最美丽\"</span>, <span class=\"string\">\"男\"</span>))</span><br><span class=\"line\">\tfmt.Println(strings.Index(<span class=\"string\">\"\"</span>, <span class=\"string\">\"男\"</span>))</span><br><span class=\"line\">\tfmt.Println(Utf8Index(<span class=\"string\">\"12ws北京天安门最美丽\"</span>, <span class=\"string\">\"天安门\"</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Utf8Index</span><span class=\"params\">(str, substr <span class=\"keyword\">string</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tasciiPos := strings.Index(str, substr)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> asciiPos == <span class=\"number\">-1</span> || asciiPos == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> asciiPos</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpos := <span class=\"number\">0</span></span><br><span class=\"line\">\ttotalSize := <span class=\"number\">0</span></span><br><span class=\"line\">\treader := strings.NewReader(str)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, size, err := reader.ReadRune(); err == <span class=\"literal\">nil</span>; _, size, err = reader.ReadRune() &#123;</span><br><span class=\"line\">\t\ttotalSize += size</span><br><span class=\"line\">\t\tpos++</span><br><span class=\"line\">\t\t<span class=\"comment\">// 匹配到</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> totalSize == asciiPos &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> pos</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pos</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"32编程\">32，编程</span></h2>\n<p>实现一个单例</p>\n<p>解答：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"sync\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现一个单例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> singleton <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ins *singleton</span><br><span class=\"line\"><span class=\"keyword\">var</span> mu sync.Mutex</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//懒汉加锁:虽然解决并发的问题，但每次加锁是要付出代价的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetIns</span><span class=\"params\">()</span> *<span class=\"title\">singleton</span></span> &#123;</span><br><span class=\"line\">\tmu.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> mu.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ins == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tins = &amp;singleton&#123;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ins</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//双重锁:避免了每次加锁，提高代码效率</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetIns1</span><span class=\"params\">()</span> *<span class=\"title\">singleton</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ins == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tmu.Lock()</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> mu.Unlock()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ins == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tins = &amp;singleton&#123;&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ins</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//sync.Once实现</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> once sync.Once</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetIns2</span><span class=\"params\">()</span> *<span class=\"title\">singleton</span></span> &#123;</span><br><span class=\"line\">\tonce.Do(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tins = &amp;singleton&#123;&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ins</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"33执行下面的代码发生什么\">33,执行下面的代码发生什么？</span></h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\t\tch &lt;- i</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\ta, ok := &lt;-ch</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">\"close\"</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">\"a: \"</span>, a)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"built_in\">close</span>(ch)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"ok\"</span>)</span><br><span class=\"line\">\ttime.Sleep(time.Second * <span class=\"number\">100</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"考点channel\">考点:<strong>channel</strong></span></h3>\n<p>往已经关闭的channel写入数据会panic的。<br>\n结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">panic: send on closed channel</span><br></pre></td></tr></table></figure>\n<h2><span id=\"34执行下面的代码发生什么\">34,执行下面的代码发生什么？</span></h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">type ConfigOne struct &#123;</span><br><span class=\"line\">\tDaemon string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (c *ConfigOne) String() string &#123;</span><br><span class=\"line\">\treturn fmt.Sprintf(&quot;print: %v&quot;, p)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tc := &amp;ConfigOne&#123;&#125;</span><br><span class=\"line\">\tc.String()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"考点fmtsprintf\">考点:<strong>fmt.Sprintf</strong></span></h3>\n<p>如果类型实现String()，％v和％v格式将使用String()的值。因此，对该类型的String()函数内的类型使用％v会导致无限递归。<br>\n编译报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runtime: goroutine stack exceeds 1000000000-byte limit</span><br><span class=\"line\">fatal error: stack overflow</span><br></pre></td></tr></table></figure>\n<h2><span id=\"35编程题\">35，编程题</span></h2>\n<p>反转整数<br>\n反转一个整数，例如：</p>\n<p>例子1: x = 123, return 321<br>\n例子2: x = -123, return -321</p>\n<p>输入的整数要求是一个 32bit 有符号数，如果反转后溢出，则输出 0</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func reverse(x int) (num int) &#123;</span><br><span class=\"line\">\tfor x != 0 &#123;</span><br><span class=\"line\">\t\tnum = num*10 + x%10</span><br><span class=\"line\">\t\tx = x / 10</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// 使用 math 包中定义好的最大最小值</span><br><span class=\"line\">\tif num &gt; math.MaxInt32 || num &lt; math.MinInt32 &#123;</span><br><span class=\"line\">\t\treturn 0</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"36编程题\">36，编程题</span></h2>\n<p>合并重叠区间<br>\n给定一组 区间，合并所有重叠的 区间。</p>\n<p>例如：<br>\n给定：[1,3],[2,6],[8,10],[15,18]<br>\n返回：[1,6],[8,10],[15,18]</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Interval struct &#123;</span><br><span class=\"line\">\tStart int</span><br><span class=\"line\">\tEnd   int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func merge(intervals []Interval) []Interval &#123;</span><br><span class=\"line\">\tif len(intervals) &lt;= 1 &#123;</span><br><span class=\"line\">\t\treturn intervals</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsort.Slice(intervals, func(i, j int) bool &#123;</span><br><span class=\"line\">\t\treturn intervals[i].Start &lt; intervals[j].Start</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\tres := make([]Interval, 0)</span><br><span class=\"line\">\tswap := Interval&#123;&#125;</span><br><span class=\"line\">\tfor k, v := range intervals &#123;</span><br><span class=\"line\">\t\tif k == 0 &#123;</span><br><span class=\"line\">\t\t\tswap = v</span><br><span class=\"line\">\t\t\tcontinue</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif v.Start &lt;= swap.End &#123;</span><br><span class=\"line\">\t\t\tswap.End = v.End</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tres = append(res, swap)</span><br><span class=\"line\">\t\t\tswap = v</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tres = append(res, swap)</span><br><span class=\"line\">\treturn res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"37输出什么\">37.输出什么？</span></h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tfmt.Println(len(&quot;你好bj!&quot;))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"考点编码长度\">考点:<strong>编码长度</strong></span></h3>\n<p>输出9</p>\n<h2><span id=\"38编译并运行如下代码会发生什么\">38.编译并运行如下代码会发生什么？</span></h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">type Test struct &#123;</span><br><span class=\"line\">\tName string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var list map[string]Test</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlist = make(map[string]Test)</span><br><span class=\"line\">\tname := Test&#123;&quot;xiaoming&quot;&#125;</span><br><span class=\"line\">\tlist[&quot;name&quot;] = name</span><br><span class=\"line\">\tlist[&quot;name&quot;].Name = &quot;Hello&quot;</span><br><span class=\"line\">\tfmt.Println(list[&quot;name&quot;])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"考点map\">考点:<strong>map</strong></span></h3>\n<p>编程报错<code>cannot assign to struct field list[&quot;name&quot;].Name in map</code>。<br>\n因为list[“name”]不是一个普通的指针值，map的value本身是不可寻址的，因为map中的值会在内存中移动，并且旧的指针地址在map改变时会变得无效。<br>\n定义的是var list map[string]Test，注意哦Test不是指针，而且map我们都知道是可以自动扩容的，那么原来的存储name的Test可能在地址A，但是如果map扩容了地址A就不是原来的Test了，所以go就不允许我们写数据。你改为var list map[string]*Test试试看。</p>\n<h2><span id=\"39abcd中哪一行存在错误\">39.ABCD中哪一行存在错误？</span></h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> S <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">(x <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">g</span><span class=\"params\">(x *<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ts := S&#123;&#125;</span><br><span class=\"line\">\tp := &amp;s</span><br><span class=\"line\">\tf(s) <span class=\"comment\">//A</span></span><br><span class=\"line\">\tg(s) <span class=\"comment\">//B</span></span><br><span class=\"line\">\tf(p) <span class=\"comment\">//C</span></span><br><span class=\"line\">\tg(p) <span class=\"comment\">//D</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"考点interface\">考点:<strong>interface</strong></span></h3>\n<p>看到这道题需要第一时间想到的是Golang是强类型语言，interface是所有golang类型的父类，类似Java的Object。<br>\n函数中<code>func f(x interface{})</code>的<code>interface{}</code>可以支持传入golang的任何类型，包括指针，但是函数<code>func g(x *interface{})</code>只能接受<code>*interface{}</code>.</p>\n<h2><span id=\"40编译并运行如下代码会发生什么\">40.编译并运行如下代码会发生什么？</span></h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"sync\"</span></span><br><span class=\"line\">\t<span class=\"comment\">//\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> N = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> wg = &amp;sync.WaitGroup&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; N; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t\t\twg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">println</span>(i)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">\t\t&#125;(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"考点waitgroup\">考点:<strong>WaitGroup</strong></span></h3>\n<p>这是使用WaitGroup经常犯下的错误！请各位同学多次运行就会发现输出都会不同甚至又出现报错的问题。<br>\n这是因为<code>go</code>执行太快了，导致<code>wg.Add(1)</code>还没有执行main函数就执行完毕了。<br>\n改为如下试试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i := 0; i &lt; N; i++ &#123;</span><br><span class=\"line\">        wg.Add(1)</span><br><span class=\"line\">\t\tgo func(i int) &#123;</span><br><span class=\"line\">\t\t\tprintln(i)</span><br><span class=\"line\">\t\t\tdefer wg.Done()</span><br><span class=\"line\">\t\t&#125;(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twg.Wait()</span><br></pre></td></tr></table></figure>\n<h2><span id=\"附录\">附录</span></h2>\n<p><a href=\"https://zhuanlan.zhihu.com/p/35058068?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/35058068?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io</a></p>\n<p><a href=\"https://stackoverflow.com/questions/42600920/runtime-goroutine-stack-exceeds-1000000000-byte-limit-fatal-error-stack-overf\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/42600920/runtime-goroutine-stack-exceeds-1000000000-byte-limit-fatal-error-stack-overf</a></p>\n<p><a href=\"https://studygolang.com/topics/3853\" target=\"_blank\" rel=\"noopener\">https://studygolang.com/topics/3853</a></p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://thelighter.github.io/2020/02/15/flask-backend/\">flask后端redis、MySQL等面试题</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"面试","slug":"面试","permalink":"chunlife.top/tags/面试/"}]},{"title":"面试题(网络搜集)三","date":"2019-09-17T08:53:42.000Z","path":"2019/09/17/面试题-网络搜集-三/","content":"<h1><span id=\"21编译执行下面代码会出现什么\">21.编译执行下面代码会出现什么?</span></h1>\n<a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">var</span>(</span><br><span class=\"line\">    size :=<span class=\"number\">1024</span></span><br><span class=\"line\">    max_size = size*<span class=\"number\">2</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println</span>(size,max_size)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"解析\">解析</span></h2>\n<p>考点:<strong>变量简短模式</strong><br>\n变量简短模式限制：</p>\n<ul>\n<li>定义变量同时显式初始化</li>\n<li>不能提供数据类型</li>\n<li>只能在函数内部使用</li>\n</ul>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax error: unexpected :=</span><br></pre></td></tr></table></figure>\n<h1><span id=\"22下面函数有什么问题\">22.下面函数有什么问题？</span></h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">const cl  = 100</span><br><span class=\"line\"></span><br><span class=\"line\">var bl    = 123</span><br><span class=\"line\"></span><br><span class=\"line\">func main()  &#123;</span><br><span class=\"line\">    println(&amp;bl,bl)</span><br><span class=\"line\">    println(&amp;cl,cl)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"解析\">解析</span></h2>\n<p>考点:<strong>常量</strong><br>\n常量不同于变量的在运行期分配内存，常量通常会被编译器在预处理阶段直接展开，作为指令数据使用，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cannot take the address of cl</span><br></pre></td></tr></table></figure>\n<h1><span id=\"23编译执行下面代码会出现什么\">23.编译执行下面代码会出现什么?</span></h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">func main()  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    for i:=0;i&lt;10 ;i++  &#123;</span><br><span class=\"line\">    loop:</span><br><span class=\"line\">        println(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    goto loop</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"解析\">解析</span></h2>\n<p>考点：<strong>goto</strong><br>\ngoto不能跳转到其他函数或者内层代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goto loop jumps into block starting at</span><br></pre></td></tr></table></figure>\n<h1><span id=\"24编译执行下面代码会出现什么\">24.编译执行下面代码会出现什么?</span></h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main()  &#123;</span><br><span class=\"line\">    type MyInt1 int</span><br><span class=\"line\">    type MyInt2 = int</span><br><span class=\"line\">    var i int =9</span><br><span class=\"line\">    var i1 MyInt1 = i</span><br><span class=\"line\">    var i2 MyInt2 = i</span><br><span class=\"line\">    fmt.Println(i1,i2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"解析\">解析</span></h2>\n<p>考点：**Go 1.9 新特性 Type Alias **<br>\n基于一个类型创建一个新类型，称之为defintion；基于一个类型创建一个别名，称之为alias。<br>\nMyInt1为称之为defintion，虽然底层类型为int类型，但是不能直接赋值，需要强转；<br>\nMyInt2称之为alias，可以直接赋值。</p>\n<p>结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cannot use i (type int) as type MyInt1 in assignment</span><br></pre></td></tr></table></figure>\n<h1><span id=\"25编译执行下面代码会出现什么\">25.编译执行下面代码会出现什么?</span></h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">type User struct &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">type MyUser1 User</span><br><span class=\"line\">type MyUser2 = User</span><br><span class=\"line\">func (i MyUser1) m1()&#123;</span><br><span class=\"line\">    fmt.Println(&quot;MyUser1.m1&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func (i User) m2()&#123;</span><br><span class=\"line\">    fmt.Println(&quot;User.m2&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var i1 MyUser1</span><br><span class=\"line\">    var i2 MyUser2</span><br><span class=\"line\">    i1.m1()</span><br><span class=\"line\">    i2.m2()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"解析\">解析</span></h2>\n<p>考点：**Go 1.9 新特性 Type Alias **<br>\n因为MyUser2完全等价于User，所以具有其所有的方法，并且其中一个新增了方法，另外一个也会有。<br>\n但是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i1.m2()</span><br></pre></td></tr></table></figure>\n<p>是不能执行的，因为MyUser1没有定义该方法。<br>\n结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyUser1.m1</span><br><span class=\"line\">User.m2</span><br></pre></td></tr></table></figure>\n<h1><span id=\"26编译执行下面代码会出现什么\">26.编译执行下面代码会出现什么?</span></h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">type T1 struct &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func (t T1) m1()&#123;</span><br><span class=\"line\">    fmt.Println(&quot;T1.m1&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">type T2 = T1</span><br><span class=\"line\">type MyStruct struct &#123;</span><br><span class=\"line\">    T1</span><br><span class=\"line\">    T2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    my:=MyStruct&#123;&#125;</span><br><span class=\"line\">    my.m1()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"解析\">解析</span></h2>\n<p>考点：**Go 1.9 新特性 Type Alias **<br>\n是不能正常编译的,异常：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ambiguous selector my.m1</span><br></pre></td></tr></table></figure>\n<p>结果不限于方法，字段也也一样；也不限于type alias，type defintion也是一样的，只要有重复的方法、字段，就会有这种提示，因为不知道该选择哪个。<br>\n改为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my.T1.m1()</span><br><span class=\"line\">my.T2.m1()</span><br></pre></td></tr></table></figure>\n<p>type alias的定义，本质上是一样的类型，只是起了一个别名，源类型怎么用，别名类型也怎么用，保留源类型的所有方法、字段等。</p>\n<h1><span id=\"27编译执行下面代码会出现什么\">27.编译执行下面代码会出现什么?</span></h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;errors&quot;</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">var ErrDidNotWork = errors.New(&quot;did not work&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">func DoTheThing(reallyDoIt bool) (err error) &#123;</span><br><span class=\"line\">    if reallyDoIt &#123;</span><br><span class=\"line\">        result, err := tryTheThing()</span><br><span class=\"line\">        if err != nil || result != &quot;it worked&quot; &#123;</span><br><span class=\"line\">            err = ErrDidNotWork</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func tryTheThing() (string,error)  &#123;</span><br><span class=\"line\">    return &quot;&quot;,ErrDidNotWork</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    fmt.Println(DoTheThing(true))</span><br><span class=\"line\">    fmt.Println(DoTheThing(false))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"解析\">解析</span></h2>\n<p>考点：<strong>变量作用域</strong><br>\n因为 if 语句块内的 err 变量会遮罩函数作用域内的 err 变量，结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;nil&gt;</span><br><span class=\"line\">&lt;nil&gt;</span><br></pre></td></tr></table></figure>\n<p>改为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func DoTheThing(reallyDoIt bool) (err error) &#123;</span><br><span class=\"line\">    var result string</span><br><span class=\"line\">    if reallyDoIt &#123;</span><br><span class=\"line\">        result, err = tryTheThing()</span><br><span class=\"line\">        if err != nil || result != &quot;it worked&quot; &#123;</span><br><span class=\"line\">            err = ErrDidNotWork</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1><span id=\"28编译执行下面代码会出现什么\">28.编译执行下面代码会出现什么?</span></h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">func test() []func()  &#123;</span><br><span class=\"line\">    var funs []func()</span><br><span class=\"line\">    for i:=0;i&lt;2 ;i++  &#123;</span><br><span class=\"line\">        funs = append(funs, func() &#123;</span><br><span class=\"line\">            println(&amp;i,i)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return funs</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main()&#123;</span><br><span class=\"line\">    funs:=test()</span><br><span class=\"line\">    for _,f:=range funs&#123;</span><br><span class=\"line\">        f()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"解析\">解析</span></h2>\n<p>考点：<strong>闭包延迟求值</strong><br>\nfor循环复用局部变量i，每一次放入匿名函数的应用都是想一个变量。<br>\n结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0xc042046000 2</span><br><span class=\"line\">0xc042046000 2</span><br></pre></td></tr></table></figure>\n<p>如果想不一样可以改为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func test() []func()  &#123;</span><br><span class=\"line\">    var funs []func()</span><br><span class=\"line\">    for i:=0;i&lt;2 ;i++  &#123;</span><br><span class=\"line\">        x:=i</span><br><span class=\"line\">        funs = append(funs, func() &#123;</span><br><span class=\"line\">            println(&amp;x,x)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return funs</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1><span id=\"29编译执行下面代码会出现什么\">29.编译执行下面代码会出现什么?</span></h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">func test(x int) (func(),func())  &#123;</span><br><span class=\"line\">    return func() &#123;</span><br><span class=\"line\">        println(x)</span><br><span class=\"line\">        x+=10</span><br><span class=\"line\">    &#125;, func() &#123;</span><br><span class=\"line\">        println(x)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main()  &#123;</span><br><span class=\"line\">    a,b:=test(100)</span><br><span class=\"line\">    a()</span><br><span class=\"line\">    b()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"解析\">解析</span></h2>\n<p>考点：<strong>闭包引用相同变量</strong>*<br>\n结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">100</span><br><span class=\"line\">110</span><br></pre></td></tr></table></figure>\n<h1><span id=\"30编译执行下面代码会出现什么\">30.编译执行下面代码会出现什么?</span></h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;reflect&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main1()  &#123;</span><br><span class=\"line\">    defer func() &#123;</span><br><span class=\"line\">       if err:=recover();err!=nil&#123;</span><br><span class=\"line\">           fmt.Println(err)</span><br><span class=\"line\">       &#125;else &#123;</span><br><span class=\"line\">           fmt.Println(&quot;fatal&quot;)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">    defer func() &#123;</span><br><span class=\"line\">        panic(&quot;defer panic&quot;)</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    panic(&quot;panic&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main()  &#123;</span><br><span class=\"line\">    defer func() &#123;</span><br><span class=\"line\">        if err:=recover();err!=nil&#123;</span><br><span class=\"line\">            fmt.Println(&quot;++++&quot;)</span><br><span class=\"line\">            f:=err.(func()string)</span><br><span class=\"line\">            fmt.Println(err,f(),reflect.TypeOf(err).Kind().String())</span><br><span class=\"line\">        &#125;else &#123;</span><br><span class=\"line\">            fmt.Println(&quot;fatal&quot;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">    defer func() &#123;</span><br><span class=\"line\">        panic(func() string &#123;</span><br><span class=\"line\">            return  &quot;defer panic&quot;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    panic(&quot;panic&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"解析\">解析</span></h2>\n<p>考点：<strong>panic仅有最后一个可以被revover捕获</strong><br>\n触发<code>panic(&quot;panic&quot;)</code>后顺序执行defer，但是defer中还有一个panic，所以覆盖了之前的<code>panic(&quot;panic&quot;)</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defer panic</span><br></pre></td></tr></table></figure><div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://thelighter.github.io/2020/02/15/flask-backend/\">flask后端redis、MySQL等面试题</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"面试","slug":"面试","permalink":"chunlife.top/tags/面试/"}]},{"title":"面试题(网络搜集)二","date":"2019-09-17T08:50:18.000Z","path":"2019/09/17/面试题-网络搜集-二/","content":"<h2><span id=\"12是否可以编译通过如果通过输出什么\">12.是否可以编译通过？如果通过，输出什么？</span></h2>\n<a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ti := GetValue()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> i.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"keyword\">int</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">println</span>(<span class=\"string\">\"int\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"keyword\">string</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">println</span>(<span class=\"string\">\"string\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"keyword\">interface</span>&#123;&#125;:</span><br><span class=\"line\">\t\t<span class=\"built_in\">println</span>(<span class=\"string\">\"interface\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">println</span>(<span class=\"string\">\"unknown\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetValue</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"解析\">解析</span></h3>\n<p>考点：<strong>type</strong></p>\n<p>编译失败，因为type只能使用在interface</p>\n<h2><span id=\"13下面函数有什么问题\">13.下面函数有什么问题？</span></h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcMui</span><span class=\"params\">(x,y <span class=\"keyword\">int</span>)</span><span class=\"params\">(sum <span class=\"keyword\">int</span>,error)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y,<span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"解析\">解析</span></h3>\n<p>考点：<strong>函数返回值命名</strong><br>\n在函数有多个返回值时，只要有一个返回值有指定命名，其他的也必须有命名。<br>\n如果返回值有有多个返回值必须加上括号；<br>\n如果只有一个返回值并且有命名也需要加上括号；<br>\n此处函数第一个返回值有sum名称，第二个未命名，所以错误。</p>\n<h2><span id=\"14是否可以编译通过如果通过输出什么\">14.是否可以编译通过？如果通过，输出什么？</span></h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(DeferFunc1(<span class=\"number\">1</span>))</span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(DeferFunc2(<span class=\"number\">1</span>))</span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(DeferFunc3(<span class=\"number\">1</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DeferFunc1</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span> <span class=\"params\">(t <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tt = i</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tt += <span class=\"number\">3</span></span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DeferFunc2</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tt := i</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tt += <span class=\"number\">3</span></span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DeferFunc3</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span> <span class=\"params\">(t <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tt += i</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"解析\">解析</span></h3>\n<p>考点:<strong>defer和函数返回值</strong><br>\n需要明确一点是defer需要在函数结束前执行。<br>\n函数返回值名字会在函数起始处被初始化为对应类型的零值并且作用域为整个函数<br>\nDeferFunc1有函数返回值t作用域为整个函数，在return之前defer会被执行，所以t会被修改，返回4;<br>\nDeferFunc2函数中t的作用域为函数，返回1;<br>\nDeferFunc3返回3</p>\n<h2><span id=\"15是否可以编译通过如果通过输出什么\">15.是否可以编译通过？如果通过，输出什么？</span></h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlist := <span class=\"built_in\">new</span>([]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tlist = <span class=\"built_in\">append</span>(list, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tfmt.Println(list)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"解析\">解析</span></h3>\n<p>考点：<strong>new</strong><br>\nlist:=make([]int,0)</p>\n<h2><span id=\"16是否可以编译通过如果通过输出什么\">16.是否可以编译通过？如果通过，输出什么？</span></h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ts1 := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">\ts2 := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">\ts1 = <span class=\"built_in\">append</span>(s1, s2)</span><br><span class=\"line\">\tfmt.Println(s1)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"解析\">解析</span></h3>\n<p>考点：<strong>append</strong><br>\nappend切片时候别漏了’…’</p>\n<h2><span id=\"17是否可以编译通过如果通过输出什么\">17.是否可以编译通过？如果通过，输出什么？</span></h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsn1 := <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tage  <span class=\"keyword\">int</span></span><br><span class=\"line\">\t\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\t&#125;&#123;age: <span class=\"number\">11</span>, name: <span class=\"string\">\"qq\"</span>&#125;</span><br><span class=\"line\">\tsn2 := <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tage  <span class=\"keyword\">int</span></span><br><span class=\"line\">\t\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\t&#125;&#123;age: <span class=\"number\">11</span>, name: <span class=\"string\">\"qq\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> sn1 == sn2 &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"sn1 == sn2\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsm1 := <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tage <span class=\"keyword\">int</span></span><br><span class=\"line\">\t\tm   <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span></span><br><span class=\"line\">\t&#125;&#123;age: <span class=\"number\">11</span>, m: <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"a\"</span>: <span class=\"string\">\"1\"</span>&#125;&#125;</span><br><span class=\"line\">\tsm2 := <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tage <span class=\"keyword\">int</span></span><br><span class=\"line\">\t\tm   <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span></span><br><span class=\"line\">\t&#125;&#123;age: <span class=\"number\">11</span>, m: <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"a\"</span>: <span class=\"string\">\"1\"</span>&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> sm1 == sm2 &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"sm1 == sm2\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"解析\">解析</span></h3>\n<p>考点:<strong>结构体比较</strong><br>\n进行结构体比较时候，只有相同类型的结构体才可以比较，结构体是否相同不但与属性类型个数有关，还与属性顺序相关。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sn3:= struct &#123;</span><br><span class=\"line\">    name string</span><br><span class=\"line\">    age  int</span><br><span class=\"line\">&#125;&#123;age:11,name:&quot;qq&quot;&#125;</span><br></pre></td></tr></table></figure>\n<p>sn3与sn1就不是相同的结构体了，不能比较。<br>\n还有一点需要注意的是结构体是相同的，但是结构体属性中有不可以比较的类型，如map,slice。<br>\n如果该结构属性都是可以比较的，那么就可以使用“==”进行比较操作。</p>\n<p>可以使用reflect.DeepEqual进行比较</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if reflect.DeepEqual(sn1, sm) &#123;</span><br><span class=\"line\">    fmt.Println(&quot;sn1 ==sm&quot;)</span><br><span class=\"line\">&#125;else &#123;</span><br><span class=\"line\">    fmt.Println(&quot;sn1 !=sm&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以编译不通过： invalid operation: sm1 == sm2</p>\n<h2><span id=\"18是否可以编译通过如果通过输出什么\">18.是否可以编译通过？如果通过，输出什么？</span></h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Foo</span><span class=\"params\">(x <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> x == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"empty interface\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"non-empty interface\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x *<span class=\"keyword\">int</span> = <span class=\"literal\">nil</span></span><br><span class=\"line\">\tFoo(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"解析\">解析</span></h3>\n<p>考点：<strong>interface内部结构</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">non-empty interface</span><br></pre></td></tr></table></figure>\n<h2><span id=\"19是否可以编译通过如果通过输出什么\">19.是否可以编译通过？如果通过，输出什么？</span></h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetValue</span><span class=\"params\">(m <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">string</span>, id <span class=\"keyword\">int</span>)</span> <span class=\"params\">(<span class=\"keyword\">string</span>, <span class=\"keyword\">bool</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> _, exist := m[id]; exist &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"存在数据\"</span>, <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tintmap:=<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"number\">1</span>:<span class=\"string\">\"a\"</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">2</span>:<span class=\"string\">\"bb\"</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">3</span>:<span class=\"string\">\"ccc\"</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tv,err:=GetValue(intmap,<span class=\"number\">3</span>)</span><br><span class=\"line\">\tfmt.Println(v,err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"解析\">解析</span></h3>\n<p>考点：<strong>函数返回值类型</strong><br>\nnil 可以用作 interface、function、pointer、map、slice 和 channel 的“空值”。但是如果不特别指定的话，Go 语言不能识别类型，所以会报错。通常编译的时候不会报错，但是运行是时候会报:<code>cannot use nil as type string in return argument</code>.</p>\n<h2><span id=\"20是否可以编译通过如果通过输出什么\">20.是否可以编译通过？如果通过，输出什么？</span></h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tx = <span class=\"literal\">iota</span></span><br><span class=\"line\">\ty</span><br><span class=\"line\">\tz = <span class=\"string\">\"zz\"</span></span><br><span class=\"line\">\tk</span><br><span class=\"line\">\tp = <span class=\"literal\">iota</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Println(x,y,z,k,p)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"解析\">解析</span></h3>\n<p>考点：<strong>iota</strong><br>\n结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 1 zz zz 4</span><br></pre></td></tr></table></figure><div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://thelighter.github.io/2020/02/15/flask-backend/\">flask后端redis、MySQL等面试题</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"面试","slug":"面试","permalink":"chunlife.top/tags/面试/"}]},{"title":"面试题(网络搜集)一","date":"2019-09-17T08:46:40.000Z","path":"2019/09/17/面试题-网络搜集-一/","content":"<p>最近在很多地方看到了<a href=\"https://zhuanlan.zhihu.com/p/26972862\" target=\"_blank\" rel=\"noopener\">golang的面试题</a>，看到了很多人对Golang的面试题心存恐惧，也是为了复习基础，我把解题的过程总结下来。</p>\n<h2><span id=\"面试题一\">面试题一</span></h2>\n<a id=\"more\"></a>\n<h3><span id=\"1-写出下面代码输出内容\">1. 写出下面代码输出内容。</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    defer_call()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">defer_call</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; fmt.Println(<span class=\"string\">\"打印前\"</span>) &#125;()</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; fmt.Println(<span class=\"string\">\"打印中\"</span>) &#125;()</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; fmt.Println(<span class=\"string\">\"打印后\"</span>) &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(<span class=\"string\">\"触发异常\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>考点：<strong>defer执行顺序</strong><br>\n解答：<br>\ndefer 是<strong>后进先出</strong>。<br>\n协程遇到panic时，遍历本协程的defer链表，并执行defer。在执行defer过程中，遇到recover则停止panic，返回recover处继续往下执行。如果没有遇到recover，遍历完本协程的defer链表后，向stderr抛出panic信息。从执行顺序上来看，实际上是按照先进后出的顺序执行defer</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打印后</span><br><span class=\"line\">打印中</span><br><span class=\"line\">打印前</span><br><span class=\"line\"><span class=\"built_in\">panic</span>: 触发异常</span><br></pre></td></tr></table></figure>\n<p><strong>注意：请用独立终端运行，排查某些IDE对stderr和stdout处理问题导致输出顺序不一致。</strong></p>\n<h3><span id=\"2-以下代码有什么问题说明原因\">2. 以下代码有什么问题，说明原因。</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Name <span class=\"keyword\">string</span></span><br><span class=\"line\">    Age  <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pase_student</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    m := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]*student)</span><br><span class=\"line\">    stus := []student&#123;</span><br><span class=\"line\">        &#123;Name: <span class=\"string\">\"zhou\"</span>, Age: <span class=\"number\">24</span>&#125;,</span><br><span class=\"line\">        &#123;Name: <span class=\"string\">\"li\"</span>, Age: <span class=\"number\">23</span>&#125;,</span><br><span class=\"line\">        &#123;Name: <span class=\"string\">\"wang\"</span>, Age: <span class=\"number\">22</span>&#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, stu := <span class=\"keyword\">range</span> stus &#123;</span><br><span class=\"line\">        m[stu.Name] = &amp;stu</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>考点：<strong>foreach</strong><br>\n解答：<br>\n这样的写法初学者经常会遇到的，很危险！<br>\n与Java的foreach一样，都是使用副本的方式。所以m[<a href=\"http://stu.Name\" target=\"_blank\" rel=\"noopener\">stu.Name</a>]=&amp;stu实际上一致指向同一个指针，<br>\n最终该指针的值为遍历的最后一个struct的值拷贝。<br>\n就像想修改切片元素的属性：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> _, stu := <span class=\"keyword\">range</span> stus &#123;</span><br><span class=\"line\">    stu.Age = stu.Age+<span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也是不可行的。<br>\n大家可以试试打印出来：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func pase_student() &#123;</span><br><span class=\"line\">    m := make(map[string]*student)</span><br><span class=\"line\">    stus := []student&#123;</span><br><span class=\"line\">        &#123;Name: &quot;zhou&quot;, Age: 24&#125;,</span><br><span class=\"line\">        &#123;Name: &quot;li&quot;, Age: 23&#125;,</span><br><span class=\"line\">        &#123;Name: &quot;wang&quot;, Age: 22&#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 错误写法</span><br><span class=\"line\">    for _, stu := range stus &#123;</span><br><span class=\"line\">        m[stu.Name] = &amp;stu</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for k,v:=range m&#123;</span><br><span class=\"line\">        println(k,&quot;=&gt;&quot;,v.Name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 正确</span><br><span class=\"line\">    for i:=0;i&lt;len(stus);i++  &#123;</span><br><span class=\"line\">        m[stus[i].Name] = &amp;stus[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for k,v:=range m&#123;</span><br><span class=\"line\">        println(k,&quot;=&gt;&quot;,v.Name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"3-下面的代码会输出什么并说明原因\">3. 下面的代码会输出什么，并说明原因</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    runtime.GOMAXPROCS(<span class=\"number\">1</span>)</span><br><span class=\"line\">    wg := sync.WaitGroup&#123;&#125;</span><br><span class=\"line\">    wg.Add(<span class=\"number\">20</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">        <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">            fmt.Println(<span class=\"string\">\"A: \"</span>, i)</span><br><span class=\"line\">            wg.Done()</span><br><span class=\"line\">        &#125;()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">        <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">            fmt.Println(<span class=\"string\">\"B: \"</span>, i)</span><br><span class=\"line\">            wg.Done()</span><br><span class=\"line\">        &#125;(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    wg.Wait()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>考点：<strong>go执行的随机性和闭包</strong><br>\n解答：<br>\n谁也不知道执行后打印的顺序是什么样的，所以只能说是随机数字。<br>\n其中<code>A: </code>输出完全随机，取决于goroutine执行时i的值是多少；<br>\n而<code>B: </code>一定输出为0~9，但顺序不定。</p>\n<p>第一个go func中i是外部for的一个变量，地址不变化，但是值都在改变。</p>\n<p>第二个go func中i是函数参数，与外部for中的i完全是两个变量。<br>\n尾部(i)将发生值拷贝，go func内部指向值拷贝地址。</p>\n<p>所以在使用goroutine在处理闭包的时候，避免发生类似第一个go func中的问题。</p>\n<h3><span id=\"4-下面代码会输出什么\">4. 下面代码会输出什么？</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> People <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *People)</span> <span class=\"title\">ShowA</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"showA\"</span>)</span><br><span class=\"line\">    p.ShowB()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *People)</span> <span class=\"title\">ShowB</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"showB\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Teacher <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    People</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Teacher)</span> <span class=\"title\">ShowB</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"teacher showB\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    t := Teacher&#123;&#125;</span><br><span class=\"line\">    t.ShowA()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>考点：<strong>go的组合继承</strong><br>\n解答：<br>\n这是Golang的组合模式，可以实现OOP的继承。<br>\n被组合的类型People所包含的方法虽然升级成了外部类型Teacher这个组合类型的方法（一定要是匿名字段），但它们的方法(ShowA())调用时接受者并没有发生变化。<br>\n此时People类型并不知道自己会被什么类型组合，当然也就无法调用方法时去使用未知的组合者Teacher类型的功能。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">showA</span><br><span class=\"line\">showB</span><br></pre></td></tr></table></figure>\n<h3><span id=\"5-下面代码会触发异常吗请详细说明\">5. 下面代码会触发异常吗？请详细说明</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    runtime.GOMAXPROCS(<span class=\"number\">1</span>)</span><br><span class=\"line\">    int_chan := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    string_chan := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    int_chan &lt;- <span class=\"number\">1</span></span><br><span class=\"line\">    string_chan &lt;- <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> value := &lt;-int_chan:</span><br><span class=\"line\">        fmt.Println(value)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> value := &lt;-string_chan:</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>考点：<strong>select随机性</strong><br>\n解答：<br>\nselect会随机选择一个可用通用做收发操作。<br>\n所以代码是有肯触发异常，也有可能不会。<br>\n单个chan如果无缓冲时，将会阻塞。但结合 select可以在多个chan间等待执行。有三点原则：</p>\n<ul>\n<li>select 中只要有一个case能return，则立刻执行。</li>\n<li>当如果同一时间有多个case均能return则伪随机方式抽取任意一个执行。</li>\n<li>如果没有一个case能return则可以执行”default”块。</li>\n</ul>\n<h3><span id=\"6-下面代码输出什么\">6. 下面代码输出什么？</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">calc</span><span class=\"params\">(index <span class=\"keyword\">string</span>, a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    ret := a + b</span><br><span class=\"line\">    fmt.Println(index, a, b, ret)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    a := <span class=\"number\">1</span></span><br><span class=\"line\">    b := <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">defer</span> calc(<span class=\"string\">\"1\"</span>, a, calc(<span class=\"string\">\"10\"</span>, a, b))</span><br><span class=\"line\">    a = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">defer</span> calc(<span class=\"string\">\"2\"</span>, a, calc(<span class=\"string\">\"20\"</span>, a, b))</span><br><span class=\"line\">    b = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>考点：<strong>defer执行顺序</strong><br>\n解答：<br>\n这道题类似第1题<br>\n需要注意到defer执行顺序和值传递<br>\nindex:1肯定是最后执行的，但是index:1的第三个参数是一个函数，所以最先被调用calc(“10”,1,2)==&gt;10,1,2,3<br>\n执行index:2时,与之前一样，需要先调用calc(“20”,0,2)==&gt;20,0,2,2<br>\n执行到b=1时候开始调用，index:2==&gt;calc(“2”,0,2)==&gt;2,0,2,2<br>\n最后执行index:1==&gt;calc(“1”,1,3)==&gt;1,1,3,4</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">20</span> <span class=\"number\">0</span> <span class=\"number\">2</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">0</span> <span class=\"number\">2</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">3</span> <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"7-请写出以下输入内容\">7. 请写出以下输入内容</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    s := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    s = <span class=\"built_in\">append</span>(s, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">    fmt.Println(s)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>考点：<strong>make默认值和append</strong><br>\n解答：<br>\nmake初始化是由默认值的哦，此处默认值为0</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<p>大家试试改为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s := make([]int, 0)</span><br><span class=\"line\">s = append(s, 1, 2, 3)</span><br><span class=\"line\">fmt.Println(s)//[1 2 3]</span><br></pre></td></tr></table></figure>\n<h3><span id=\"8-下面的代码有什么问题\">8. 下面的代码有什么问题?</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> UserAges <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tages <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">\tsync.Mutex</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(ua *UserAges)</span> <span class=\"title\">Add</span><span class=\"params\">(name <span class=\"keyword\">string</span>, age <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tua.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> ua.Unlock()</span><br><span class=\"line\">\tua.ages[name] = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(ua *UserAges)</span> <span class=\"title\">Get</span><span class=\"params\">(name <span class=\"keyword\">string</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> age, ok := ua.ages[name]; ok &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> age</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>考点：<strong>map线程安全</strong><br>\n解答：<br>\n可能会出现<code>fatal error: concurrent map read and map write</code>.<br>\n修改一下看看效果</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(ua *UserAges)</span> <span class=\"title\">Get</span><span class=\"params\">(name <span class=\"keyword\">string</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    ua.Lock()</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> ua.Unlock()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> age, ok := ua.ages[name]; ok &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"9-下面的迭代会有什么问题\">9. 下面的迭代会有什么问题？</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(set *threadSafeSet)</span> <span class=\"title\">Iter</span><span class=\"params\">()</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">interface</span></span>&#123;&#125; &#123;</span><br><span class=\"line\">\tch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">interface</span>&#123;&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tset.RLock()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> elem := <span class=\"keyword\">range</span> set.s &#123;</span><br><span class=\"line\">\t\t\tch &lt;- elem</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">close</span>(ch)</span><br><span class=\"line\">\t\tset.RUnlock()</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ch</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>考点：<strong>chan缓存池</strong><br>\n解答：<br>\n看到这道题，我也在猜想出题者的意图在哪里。<br>\nchan?sync.RWMutex?go?chan缓存池?迭代?<br>\n所以只能再读一次题目，就从迭代入手看看。<br>\n既然是迭代就会要求set.s全部可以遍历一次。但是chan是为缓存的，那就代表这写入一次就会阻塞。<br>\n我们把代码恢复为可以运行的方式，看看效果</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"sync\"</span></span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//下面的迭代会有什么问题？</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> threadSafeSet <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    sync.RWMutex</span><br><span class=\"line\">    s []<span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(set *threadSafeSet)</span> <span class=\"title\">Iter</span><span class=\"params\">()</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">interface</span></span>&#123;&#125; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ch := make(chan interface&#123;&#125;) // 解除注释看看！</span></span><br><span class=\"line\">    ch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">interface</span>&#123;&#125;,<span class=\"built_in\">len</span>(set.s))</span><br><span class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        set.RLock()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> elem,value := <span class=\"keyword\">range</span> set.s &#123;</span><br><span class=\"line\">            ch &lt;- elem</span><br><span class=\"line\">            <span class=\"built_in\">println</span>(<span class=\"string\">\"Iter:\"</span>,elem,value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">close</span>(ch)</span><br><span class=\"line\">        set.RUnlock()</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ch</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    th:=threadSafeSet&#123;</span><br><span class=\"line\">        s:[]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">\"1\"</span>,<span class=\"string\">\"2\"</span>&#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    v:=&lt;-th.Iter()</span><br><span class=\"line\">    fmt.Sprintf(<span class=\"string\">\"%s%v\"</span>,<span class=\"string\">\"ch\"</span>,v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"10-以下代码能编译过去吗为什么\">10. 以下代码能编译过去吗？为什么？</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> People <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tSpeak(<span class=\"keyword\">string</span>) <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Stduent <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(stu *Stduent)</span> <span class=\"title\">Speak</span><span class=\"params\">(think <span class=\"keyword\">string</span>)</span> <span class=\"params\">(talk <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> think == <span class=\"string\">\"bitch\"</span> &#123;</span><br><span class=\"line\">\t\ttalk = <span class=\"string\">\"You are a good boy\"</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\ttalk = <span class=\"string\">\"hi\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> peo People = Stduent&#123;&#125;</span><br><span class=\"line\">\tthink := <span class=\"string\">\"bitch\"</span></span><br><span class=\"line\">\tfmt.Println(peo.Speak(think))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>考点：<strong>golang的方法集</strong><br>\n解答：<br>\n编译不通过！<br>\n做错了！？说明你对golang的方法集还有一些疑问。<br>\n一句话：golang的方法集仅仅影响接口实现和方法表达式转化，与通过实例或者指针调用方法无关。</p>\n<h3><span id=\"11-以下代码打印出来什么内容说出为什么\">11. 以下代码打印出来什么内容，说出为什么。</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> People <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tShow()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(stu *Student)</span> <span class=\"title\">Show</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">live</span><span class=\"params\">()</span> <span class=\"title\">People</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> stu *Student</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> stu</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> live() == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"AAAAAAA\"</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"BBBBBBB\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>考点：<strong>interface内部结构</strong><br>\n解答：<br>\n很经典的题！<br>\n这个考点是很多人忽略的interface内部结构。<br>\ngo中的接口分为两种一种是空的接口类似这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var in interface&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>另一种如题目：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type People interface &#123;</span><br><span class=\"line\">    Show()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>他们的底层结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type eface struct &#123;      //空接口</span><br><span class=\"line\">    _type *_type         //类型信息</span><br><span class=\"line\">    data  unsafe.Pointer //指向数据的指针(go语言中特殊的指针类型unsafe.Pointer类似于c语言中的void*)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">type iface struct &#123;      //带有方法的接口</span><br><span class=\"line\">    tab  *itab           //存储type信息还有结构实现方法的集合</span><br><span class=\"line\">    data unsafe.Pointer  //指向数据的指针(go语言中特殊的指针类型unsafe.Pointer类似于c语言中的void*)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">type _type struct &#123;</span><br><span class=\"line\">    size       uintptr  //类型大小</span><br><span class=\"line\">    ptrdata    uintptr  //前缀持有所有指针的内存大小</span><br><span class=\"line\">    hash       uint32   //数据hash值</span><br><span class=\"line\">    tflag      tflag</span><br><span class=\"line\">    align      uint8    //对齐</span><br><span class=\"line\">    fieldalign uint8    //嵌入结构体时的对齐</span><br><span class=\"line\">    kind       uint8    //kind 有些枚举值kind等于0是无效的</span><br><span class=\"line\">    alg        *typeAlg //函数指针数组，类型实现的所有方法</span><br><span class=\"line\">    gcdata    *byte</span><br><span class=\"line\">    str       nameOff</span><br><span class=\"line\">    ptrToThis typeOff</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">type itab struct &#123;</span><br><span class=\"line\">    inter  *interfacetype  //接口类型</span><br><span class=\"line\">    _type  *_type          //结构类型</span><br><span class=\"line\">    link   *itab</span><br><span class=\"line\">    bad    int32</span><br><span class=\"line\">    inhash int32</span><br><span class=\"line\">    fun    [1]uintptr      //可变大小 方法集合</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出iface比eface 中间多了一层itab结构。<br>\nitab 存储_type信息和[]fun方法集，从上面的结构我们就可得出，因为data指向了nil 并不代表interface 是nil，<br>\n所以返回值并不为空，这里的fun(方法集)定义了接口的接收规则，在编译的过程中需要验证是否实现接口<br>\n结果：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BBBBBBB</span><br></pre></td></tr></table></figure><div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://thelighter.github.io/2020/02/15/flask-backend/\">flask后端redis、MySQL等面试题</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"面试","slug":"面试","permalink":"chunlife.top/tags/面试/"}]},{"title":"copy-on-write技术","date":"2019-09-03T15:48:54.000Z","path":"2019/09/03/copy-on-write技术/","content":"<h2><span id=\"前因\">前因</span></h2>\n<p>之所以突然去了解这块内容，是因为是之前做了关于<a href=\"https://github.com/fagongzi/gatewa\" target=\"_blank\" rel=\"noopener\">gateway</a>的一些笔记，想趁着笔记还未落灰，把它里头的代码抠出来看看，加深下了解，毕竟貌似有用的到的地方。</p>\n<a id=\"more\"></a>\n<p>看到Gateway中有介绍说使用写时复制（<a href=\"https://github.com/fagongzi/manba/blob/master/pkg/proxy/dispatcher_meta.go#L333\" target=\"_blank\" rel=\"noopener\">COW</a>）技术，可以减少锁的操作。这项技术于我并不陌生，在写linux驱动的时候，<code>研究</code>（貌似说的有点过，学习）内核时就经常听到这个词汇，毕竟不管是文件系统，还是进程操作都会看见它的身影。</p>\n<h2><span id=\"copy-on-write\">Copy-On-Write</span></h2>\n<p>引用维基百科的定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">写入时复制（英语：Copy-on-write，简称COW）是一种计算机程序设计领域的优化策略。</span><br><span class=\"line\"></span><br><span class=\"line\">其核心思想是，如果有多个调用者（callers）同时请求相同资源（如内存或磁盘上的数据存储），他们会共同获取相同的指针指向相同的资源，直到某个调用者试图修改资源的内容时，系统才会真正复制一份专用副本（private copy）给该调用者，而其他调用者所见到的最初的资源仍然保持不变。这过程对其他的调用者都是透明的（transparently）。此作法主要的优点是如果调用者没有修改该资源，就不会有副本（private copy）被创建，因此多个调用者只是读取操作时可以共享同一份资源。</span><br></pre></td></tr></table></figure>\n<p>也就是说，在一份共享资源，被多个调用者共同消费时，若出现修改资源的操作，我们并不直接对资源进行修改，而是对将资源修改操作划分为三个步骤：</p>\n<ul>\n<li>第一：先将资源进行复制，复制出一个新的资源备份；</li>\n<li>第二：往这个资源备份里面添加新的数据；</li>\n<li>第三：将原先资源地址指向资源备份的地址。</li>\n</ul>\n<p>这样的好处是，我们在读数据时不需要加锁，因为资源是不变的，相对于其他不需要修改资源的调用者来说。这类似与一种读写分离的操作，将写和读两种操作作用于两个不同的地址上，互不干扰。</p>\n<h2><span id=\"copy-on-write实现\">Copy-On-Write实现</span></h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strconv\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> testMap <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]*<span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">copyBak</span><span class=\"params\">()</span> <span class=\"title\">map</span>[<span class=\"title\">int</span>]*<span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tvals := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]*<span class=\"keyword\">string</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> key, value := <span class=\"keyword\">range</span> testMap &#123;</span><br><span class=\"line\">\t\tvals[key] = value</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> vals</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttestMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]*<span class=\"keyword\">string</span>)</span><br><span class=\"line\">\tstr := <span class=\"string\">\"123\"</span></span><br><span class=\"line\">\ttestMap[<span class=\"number\">1</span>] = &amp;str</span><br><span class=\"line\">\ttestMap[<span class=\"number\">2</span>] = &amp;str</span><br><span class=\"line\">\ttestMap[<span class=\"number\">3</span>] = &amp;str</span><br><span class=\"line\">\ttestMap[<span class=\"number\">4</span>] = &amp;str</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(*testMap[<span class=\"number\">3</span>])</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000000</span>; i++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 写数据是需要加锁的，并发写的情况下，可能会出现copy多份数据的情况</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 但此处只有一个协程做此操作</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 1、复制出新的Map</span></span><br><span class=\"line\">\t\t\tnewVals := copyBak()</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 2、修改已有的元素，或添加新元素</span></span><br><span class=\"line\">\t\t\tstr = <span class=\"string\">\"12343264364634\"</span> + strconv.Itoa(i)</span><br><span class=\"line\">\t\t\tnewVals[<span class=\"number\">3</span>] = &amp;str</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 3、将原有的Map地址指向新的Map</span></span><br><span class=\"line\">\t\t\ttestMap = newVals</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">select</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改时锁住的仅仅是资源的一个备份，所以并不会影响到原有资源的正常访问，原有资源依然可以正常访问。</p>\n<blockquote>\n<p>我代码里头的例子。</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> UpdatetaskInfoMap <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tTaskCreateTime <span class=\"keyword\">int64</span>                         <span class=\"string\">`json:\"task_Create_time,omitempty\"`</span></span><br><span class=\"line\">\tDeviceIdMap    <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">struct</span>&#123;&#125;           <span class=\"string\">`json:\"device_id_map\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果是结构体，json marshal更为方便进行复制操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(ms *UpdatetaskInfoMap)</span> <span class=\"title\">clone</span><span class=\"params\">()</span> *<span class=\"title\">UpdatetaskInfoMap</span></span> &#123;</span><br><span class=\"line\">\ttaskInfos := &amp;UpdatetaskInfoMap&#123;&#125;</span><br><span class=\"line\">\tbytes, _ := json.Marshal(ms)</span><br><span class=\"line\">\tjson.Unmarshal(bytes, taskInfos)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> taskInfos</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(ms *UpdatetaskInfoMap)</span> <span class=\"title\">copyDeviceIDArr</span><span class=\"params\">(exclude <span class=\"keyword\">string</span>)</span> <span class=\"title\">map</span>[<span class=\"title\">string</span>]<span class=\"title\">struct</span></span>&#123;&#125; &#123;</span><br><span class=\"line\">\tvalues := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">struct</span>&#123;&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> key, value := <span class=\"keyword\">range</span> ms.DeviceIdMap &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> key != exclude &#123;</span><br><span class=\"line\">\t\t\tvalues[key] = value</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> values</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(ms *UpdatetaskInfoMap)</span> <span class=\"title\">AddDeviceId</span><span class=\"params\">(deviceIdArr []<span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    deviceIDMap := ms.copyDeviceIDArr(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, deviceId := <span class=\"keyword\">range</span> deviceIdArr &#123;</span><br><span class=\"line\">\t\tdeviceIDMap[deviceId] = <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tms.DeviceIdMap = deviceIDMap</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(ms *UpdatetaskInfoMap)</span> <span class=\"title\">RemoveDeviceId</span><span class=\"params\">(deviceId <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> _, ok := ms.DeviceIdMap[deviceId]; ok &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> g.ErrTaskNotFound</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdeviceIDMap := ms.copyDeviceIDArr(deviceId)</span><br><span class=\"line\">\tms.DeviceIdMap = deviceIDMap</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"copy-on-write应用场景以及读写锁\">Copy-On-Write应用场景以及读写锁</span></h2>\n<p>Copy-On-Write并发容器用于读多写少的并发场景。比如白名单，黑名单，商品类目的访问、更新场景以及一些数据的配置项（Gateway将此作为更新配置项），假如我们有一个搜索网站，用户在这个网站的搜索框中，输入关键字搜索内容，但是某些关键字不允许被搜索。这些不能被搜索的关键字会被放在一个黑名单当中，黑名单每天晚上更新一次。当用户搜索时，会检查当前关键字在不在黑名单当中，如果在，则提示不能搜索。</p>\n<p>读多写少一般还会被介绍使用读写锁，<code>RWMutex</code>，那和<code>COW</code>之前有什么不一样呢。我们顺道来看一下。</p>\n<p>这里直接上一个<code>Golang</code>中读写锁的阻塞状态：</p>\n<blockquote>\n<ol>\n<li>读锁不能阻塞读锁</li>\n<li>读锁需要阻塞写锁，直到所有读锁都释放</li>\n<li>写锁需要阻塞读锁，直到所有写锁都释放</li>\n<li>写锁需要阻塞写锁</li>\n</ol>\n</blockquote>\n<p>可以看到的是，读锁虽然不会阻塞读锁，但是会将写锁给阻塞了，这并不符合我们在读数据时不加锁的想法。</p>\n<p>我们都知道Map并发读写不安全，但Go语言开发小组很长时间都没去修复这个问题，为什么呢，这是因为<code>Go</code>开发组之前在很多Go其他的组件中使用了Map，若给其加锁，则会导致很多其他组件速度下降，所以开发组权衡后不考虑修改Map，而是后期推出了<code>sync.Map</code>来弥补这个遗憾。</p>\n<p>所以，加锁操作带来的是一些多余的瞬间延时，在不需要的时候尽量不需要加锁。减少了资源的分配。</p>\n<h2><span id=\"copy-on-write缺点\">Copy-On-Write缺点</span></h2>\n<blockquote>\n<p>引用：<a href=\"https://coolshell.cn/articles/11175.html\" target=\"_blank\" rel=\"noopener\">JAVA中的COPYONWRITE容器</a></p>\n</blockquote>\n<p>Copy-On-Write容器有很多优点，但是同时也存在两个问题，即内存占用问题和数据一致性问题。所以在开发的时候需要注意一下。</p>\n<p><strong>内存占用问题</strong>。因为Copy-On-Write的写时复制机制，所以在进行写操作的时候，内存里会同时驻扎两个对象的内存，旧的对象和新写入的对象（注意:在复制的时候只是复制容器里的引用，只是在写的时候会创建新对象添加到新容器里，而旧容器的对象还在使用，所以有两份对象内存）。如果这些对象占用的内存比较大，比如说200M左右，那么再写入100M数据进去，内存就会占用300M，那么这个时候很有可能造成频繁的Yong GC和Full GC。之前我们系统中使用了一个服务由于每晚使用Copy-On-Write机制更新大对象，造成了每晚15秒的Full GC，应用响应时间也随之变长。</p>\n<p>针对内存占用问题，可以通过压缩容器中的元素的方法来减少大对象的内存消耗，比如，如果元素全是10进制的数字，可以考虑把它压缩成36进制或64进制。</p>\n<p>​\t* 注意：若是包含有IO读取操作，则也会造成操作上的IO双倍消费。</p>\n<p><strong>数据一致性问题</strong>。Copy-On-Write容器只能保证数据的<code>最终一致性</code>，不能保证数据的实时一致性。所以如果你希望写入的的数据，马上能读到，请不要使用Copy-On-Write容器。这里也就是说会出现一些脏数据，可能凑巧使用的原有资源数据，</p>\n<h2><span id=\"copy-on-write-linux下的一些应用\">Copy-On-Write Linux下的一些应用</span></h2>\n<p>linux中fork()就有COW的应用，父子进程间数据共享，而当子进程并不使用父进程数据的话，数据不需要进行进行复制，这时候使用写时复制就会很划算，只有当子进程需要使用到父进程数据时，系统触发异常，进入中断，复制使用的那份数据上来。</p>\n<p>文件系统中的文件修改也类似，我们所做的修改并不直接作用于源文件，例如，要修改文件A的内容时，先把A读出来，写到临时文件B里面去。然后在B中做修改，我们不保存时，是不会做写回文件操作的。常见的，我们使用vim打开一个文件，做一些修改，但并不保存，突然做关机，会发现源文件并不会变动，但vim会提示我们是否recover文件，做这个操作的依据便是，其有一份备份数据可以参照。</p>\n<blockquote>\n<p>这里讲解的更为详细，若需要详细了解，可以参考这篇博客，<a href=\"https://juejin.im/post/5bd96bcaf265da396b72f855\" target=\"_blank\" rel=\"noopener\">COW奶牛！Copy On Write机制了解一下</a></p>\n</blockquote>\n<h2><span id=\"20200826-go中指针赋值是否是原子的\">2020/08/26 Go中指针赋值是否是原子的？</span></h2>\n<p>群里今天有人讨论，指针赋值是否是原子的，如果不是原子的，同时读写，就会出现<code>data race</code>，发生panic。而且因为使用go race去检测，是会报出<code>data race</code>警告的。</p>\n<p>这让我又想起了<code>bilibili</code>微服务框架上的一个issue，是B站大佬毛剑关于这个问题和网友的讨论。</p>\n<p><a href=\"https://github.com/Terry-Mao/gopush-cluster/issues/44\" target=\"_blank\" rel=\"noopener\">golang中多goroutine操作map时直接赋值不用加锁？</a>。</p>\n<blockquote>\n<p>data race，只是警告，不代表就真正会panic。因为编译器还是识别不出真正意图的，另外你发的链接和我这里也完全不一样，他是有一个人写，其他人在读，这块data race检查，如果不出意外，应该是根据function的栈地址不同，根据变量的读写来判断警告的，不是100%精准。</p>\n<p>那么问题来了，我的map始终只有读。</p>\n<p>我的写操作，始终只是对变量map的指针赋值，<br>\na 如果一开始指向1，我修改成3，这个操作是原子的，即使是脏读，也不会出现影响，因为我对1，也只有读操作，那么赋值的是谁呢？是临时对象3，因为只有一个人在写他，是变量的拥有者。最终是把 a 从1 改成 3，而这部原子，这个技术大量使用在很多很多地方。</p>\n<p>那么唯一有风险的地方是什么呢，是memory barrier。就是如果存在CPU L1/2 之类的cache，在多核下变量不更新（参考nginx的time更新），可以使用内敛汇编指示该处需要:::memory，需要屏障，另外过期内存。</p>\n<p>然后问题又来了，golang 的memory model 不存在这个问题。</p>\n<p>另外建议看看Java的ConcencyHashMap的实现，核心也是COW，就是先复制副本再替换。话说内核的fork也是COW 实现的，另外nginx的cycle 对象也是同样的远离，即变量（8字节 64bit）操作是原子的。代码中如果是直接操作 r.Clients就有问题了，我看了weedfs的代码，他就犯错了，再另外，Java的Hashmap为什么他们都犯错了，都是用的同一个对象（那怕只有一个人写），也是不行的。</p>\n<p>你会发现ConcencyHashMap 为什么需要volatile来做这个事情，这就是memory barrier的故事，C代码需要依赖内联汇编，让其他的pthread可见更新<strong>asm</strong> <strong>volatile</strong> (&quot;&quot; ::: “memory”)，我之前担心golang会有类似问题，后来看了内存模型，确认不会出现。</p>\n</blockquote>\n<p>最后的结论是，当前是原子操作，但Go规范中，没有明确指出，所以，此处是一个不确定态，如果改变，所有这样的操作都是有风险的。</p>\n<p>另外<a href=\"https://github.com/chrislusf/seaweedfs\" target=\"_blank\" rel=\"noopener\">seaweedfs</a>已经接受了这个PR，加了锁，即使是一个goroutine 在写，其他 goroutine 在读，如果不是原子的，同样有风险。</p>\n<p>这里有相关的讨论：<a href=\"http://yanyiwu.com/work/2015/02/07/golang-concurrency-safety.html\" target=\"_blank\" rel=\"noopener\">谈谈go语言编程的并发安全</a>。</p>\n<p>综合来看，虽然它是一个不确定的状态，但是使用COW，就是为了避免使用锁，所以现在在还未发生改变的情况下，还是默认认为其是原子操作。</p>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Copy-On-Write","slug":"Copy-On-Write","permalink":"chunlife.top/tags/Copy-On-Write/"},{"name":"COW - 写时复制 - Go","slug":"COW-写时复制-Go","permalink":"chunlife.top/tags/COW-写时复制-Go/"}]},{"title":"mysql基准测试、读写分离以及聚集索引知识解","date":"2019-08-26T12:33:19.000Z","path":"2019/08/26/mysql索引知识解/","content":"<p>这篇博客算是我欠下来的，放着思维导图上整理的MySQL索引和读写分离相关的点，到现在都难得下手写出来，因为MySQL索引很多知识，有时候忘了又记，记了又忘，所以把这些知识点都提前放在思维导图上，想着啥时候写下来，不过由于个（懒）人（病）原（发）因（作），所以一直给耽搁了。</p>\n<a id=\"more\"></a>\n<h2><span id=\"1-基准测试\">1、基准测试</span></h2>\n<p>为啥要先介绍基准测试呢，因为其是忠实反应出mysql在不同系统环境呈现出来的性能差异。</p>\n<p>例如在部署完mysql中间件后可以对性能进行重新评估。</p>\n<p>使用的工具一般有两种，<code>mysqlslap</code>和<code>sysbench</code>，前者是mysql自带的，后者是一款开源的性能测试工具，功能更强一些，给出的信息更多，一般用后者就好了。</p>\n<p>这俩工具使用方法介绍的博客非常多了，这里我就不介绍了，摘出两篇放在这里。</p>\n<p><a href=\"https://www.cnblogs.com/kismetv/p/7615738.html\" target=\"_blank\" rel=\"noopener\">详解MySQL基准测试和sysbench工具</a></p>\n<p><a href=\"http://seanlook.com/2016/03/28/mysql-sysbench/\" target=\"_blank\" rel=\"noopener\">使用sysbench对mysql压力测试</a></p>\n<h2><span id=\"2-读写分离中间件\">2、读写分离中间件</span></h2>\n<blockquote>\n<p>可能需要一篇更详细的博客：<a href=\"https://blog.csdn.net/u013421629/article/details/78793966\" target=\"_blank\" rel=\"noopener\">【mysql 读写分离】10分钟了解读写分离的作用</a></p>\n</blockquote>\n<p>读写分离，基本的原理是让主数据库处理事务性增、改、删操作（INSERT、UPDATE、DELETE），而从数据库处理SELECT查询操作。数据库复制被用来把事务性操作导致的变更同步到集群中的从数据库。</p>\n<p>充分利用MySQL主从复制架构下，主从机的MySQL资源，提高读写效率。</p>\n<p>一般来说，使用的有<code>mysql-proxy</code>和<code>maxScale</code>，这里我们一般使用后者。</p>\n<p><strong>读写分离的优点：</strong></p>\n<ul>\n<li>由中间件根据查询语法分析，自动完成读写分离；</li>\n<li>对程序透明，已有程序不需要做任何调整。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>由于增加了中间层所以对查询效率有损耗；</li>\n<li>对于延迟敏感业务无法自动在主库执行（实时性要求）。</li>\n</ul>\n<p>中间件主要解决的是两个问题，读写分离，其中又包含了读的负载均衡。</p>\n<p><strong>读写分离要解决的是</strong>，如何在复制集群的不同角色上，去执行不同的SQL语句。</p>\n<p><strong>读的负载均衡主要解决的是</strong>，具有相同角色的数据库，如何共同分担相同的负载。</p>\n<h2><span id=\"3-数据库索引\">3、数据库索引</span></h2>\n<h3><span id=\"聚集索引\">聚集索引</span></h3>\n<blockquote>\n<p>这里引入一篇博客，他可能说的更好点：<a href=\"https://www.imooc.com/article/22915\" target=\"_blank\" rel=\"noopener\"><strong>聚集索引与非聚集索引的总结</strong></a></p>\n<p>以及<code>stackoverflow</code>上的解答：<a href=\"https://stackoverflow.com/questions/15051869/relationship-of-primary-key-and-clustered-index\" target=\"_blank\" rel=\"noopener\">Relationship of Primary Key and Clustered Index</a></p>\n</blockquote>\n<h4><span id=\"概念\">概念</span></h4>\n<p>先点一下，数据库索引中的<code>聚集索引</code>和<code>非聚集索引</code>的概念。</p>\n<p>聚集索引的定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据行的物理顺序与列值（一般是主键的那一列）的逻辑顺序相同，一个表中只能拥有一个聚集索引。</span><br></pre></td></tr></table></figure>\n<p>非聚集索引的定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义：该索引中索引的逻辑顺序与磁盘上行的物理存储顺序不同，一个表中可以拥有多个非聚集索引。</span><br></pre></td></tr></table></figure>\n<p>我们可以这样进行理解，在实际的MySQL中，<code>聚集索引</code>决定表中数据的<strong>物理存储顺序</strong><code>（例如，ID 1 和 2逻辑顺序上邻近，存储位置也是邻近）</code>，那么表中有且只有一个聚集索引（这里应该很好理解，毕竟顺序的定量条件得是唯一）。同时聚集索引可以由多个列组成。</p>\n<p>所以聚集索引上，存储了实际数据的<code>物理地址</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建聚集索引</span><br><span class=\"line\">create CLUSTERED INDEX 索引名称 ON 表名(字段名)</span><br></pre></td></tr></table></figure>\n<p>对应的也就说明，非聚集索引，逻辑上顺序存储，但在实际的存储上可能会隔得很远。也就是说聚集索引代表着数据的实际<strong>物理地址</strong>，也就是说通过非聚集索引在查找数据时，经历两次查找，一次是查找到非聚集索引自身。然后查找主键（聚集索引）。</p>\n<p>所以在非聚集索引上，其保存的是指向了实际数据物理地址的聚集索引的值。</p>\n<h4><span id=\"更进一步的理解\">更进一步的理解</span></h4>\n<p><img src=\"1566820696501.png\" alt=\"MySQL聚集索引和非聚集索引\"></p>\n<p><strong>翻译：</strong></p>\n<p>主键是逻辑概念——它是表中行的它是表中行的唯一标识符。因此，它有一堆属性——它可能不是null，而且必须是唯一的。当然，由于你可能会通过唯一键搜索记录，因此在主键上拥有索引会非常好。</p>\n<p>聚簇索引是一个<em>物理</em>概念——它是一个影响记录存储在磁盘上的顺序的索引。这使得它在访问数据时成为一个非常快的索引，但如果主键不是*<code>连续序列数字</code>*，它可能会减慢写入速度。（我：在实际应用中，为了不影响写入效率，大多还是以使用自增id为主，即使其没有啥语义）</p>\n<p>是的，您可以拥有一个没有聚簇索引的主键——在你可能想要（例如，当你的主键是连接表上的外键组合时，并且你不希望在插入数据时产生磁盘混乱开销）。</p>\n<p>是的，你可以在不是主键的列上创建聚簇索引。</p>\n<h4><span id=\"innodb如何选择聚集索引\">innodb如何选择聚集索引</span></h4>\n<blockquote>\n<p>引自：<a href=\"https://www.jianshu.com/p/2879225ba243\" target=\"_blank\" rel=\"noopener\">理解InnoDB的聚集索引（译）</a></p>\n</blockquote>\n<p>对于<code>innodb</code>，主键毫无疑问是一个聚集索引。但是当一个表没有主键，或者没有一个索引，<code>innodb</code>会如何处理呢。请看如下规则。</p>\n<ul>\n<li>\n<p>如果一个主键被定义了，那么这个主键就是作为聚集索引</p>\n</li>\n<li>\n<p>如果没有主键被定义，那么该表的第一个唯一非空索引被作为聚集索引</p>\n</li>\n<li>\n<p>如果没有主键也没有合适的唯一索引，那么<code>innodb</code>内部会生成一个隐藏的主键作为聚集索引，这个隐藏的主键是一个6个字节的列，改列的值会随着数据的插入自增。</p>\n</li>\n</ul>\n<blockquote>\n<p>除了Clustered Index之外的索引都是Secondary Index，每一个Secondary Index的记录中除了索引列的值之外，还包含主健值。</p>\n<p>通过二级索引查询首先查到是主键值，然后InnoDB再根据查到的主键值通过主键/聚簇索引找到相应的数据块。</p>\n</blockquote>\n<h4><span id=\"例子\">例子</span></h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table student (</span><br><span class=\"line\"></span><br><span class=\"line\">`id` INT UNSIGNED AUTO_INCREMENT,</span><br><span class=\"line\"></span><br><span class=\"line\">`name` VARCHAR(255),</span><br><span class=\"line\"></span><br><span class=\"line\">PRIMARY KEY(`id`),</span><br><span class=\"line\"></span><br><span class=\"line\">KEY(`name`)</span><br><span class=\"line\"></span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure>\n<p>主键<code>id</code>作为聚集索引，<code>name</code>作为非聚集索引（<strong>secondary index</strong>）。</p>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/39293940\" target=\"_blank\" rel=\"noopener\">MySQL聚集索引和非聚集索引</a></p>\n</blockquote>\n<p>（1）select * from student where id &gt;5000 and id &lt;20000;</p>\n<p>（2）select * from student where name &gt; ‘Alie’ and name &lt; ‘John’;</p>\n<p>第一条SQL语句根据id进行范围查询，因为(5000, 20000)范围内的记录在磁盘上按顺序存储，顺序读取磁盘很快就能读到这批数据。</p>\n<p>第二条SQL语句查询（‘Alie’, ‘John’）范围内的记录，主键id分布可能是离散的1，100，20001，5000…；</p>\n<p>增加了随机读取数据页几率；所以普通索引的范围查询效率被聚集索引甩开几条街都不止；</p>\n<p>非聚集索引的精确查询效率还是可以的，比聚集索引查询只增加了一次IO开销。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"http://localhost:4000/posts/2418566449/\">基于EF的数据库主从复制、读写分离实现</a></li></ul></div>","categories":[{"name":"DB","slug":"DB","permalink":"chunlife.top/categories/DB/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"chunlife.top/tags/mysql/"},{"name":"聚集索引","slug":"聚集索引","permalink":"chunlife.top/tags/聚集索引/"},{"name":"基准测试","slug":"基准测试","permalink":"chunlife.top/tags/基准测试/"},{"name":"读写分离","slug":"读写分离","permalink":"chunlife.top/tags/读写分离/"},{"name":"主键","slug":"主键","permalink":"chunlife.top/tags/主键/"}]},{"title":"USBMS大容量存储设备数据通信","date":"2019-08-15T02:45:01.000Z","path":"2019/08/15/usUSBMS大容量存储设备数据通信/","content":"<p>整理一下在USB通信时所作的相关工作，因为是对USBMS进行相关操作，涉及到了USBMS的传输格式（<code>CBW</code>，<code>CSW</code>），不太熟悉导致前期回补了一下USB的相关知识。</p>\n<p>因为在搜索资料的时候，发现市面上貌似这方面编程相关资料比较少，这里我直接写出来记录一下，也是帮助自己记忆。</p>\n<a id=\"more\"></a>\n<h2><span id=\"传输数据上的简单概念\">传输数据上的简单概念</span></h2>\n<p>usb在普通通信过程中，使用端点进行通信，USBMS（USB Mass Storage）设备则在传输过程中遵守一套传输格式。</p>\n<ul>\n<li>\n<p><strong>CBW-&gt;DATA-&gt;CSW</strong></p>\n</li>\n<li>\n<p>CBW：是一个数据块，携带主机发给设备的SCSI命令。接收了CBW后，设备就可以从中知道在接下来的DATA阶段中该干什么。</p>\n</li>\n<li>\n<p>DATA：阶段有三种情况：无数据需要传输，IN传输（设备到主机）或OUT传输（主机到设备）。</p>\n</li>\n<li>\n<p>CSW：阶段反馈这次传输的结果给主机。</p>\n</li>\n</ul>\n<p>发送数据时，host需要按照这个格式与device进行通信，也只有这样的通信，设备才会与host进行正常的交互。</p>\n<h2><span id=\"数据详解\">数据详解</span></h2>\n<p><img src=\"1565836401981.png\" alt=\"USB抓包\"></p>\n<h3><span id=\"cbw\">CBW</span></h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Section 5.1: Command Block Wrapper (CBW)</span><br><span class=\"line\">struct command_block_wrapper &#123;</span><br><span class=\"line\">\tuint8_t dCBWSignature[4];</span><br><span class=\"line\">\tuint32_t dCBWTag;</span><br><span class=\"line\">\tuint32_t dCBWDataTransferLength;</span><br><span class=\"line\">\tuint8_t bmCBWFlags;</span><br><span class=\"line\">\tuint8_t bCBWLUN;</span><br><span class=\"line\">\tuint8_t bCBWCBLength;</span><br><span class=\"line\">\tuint8_t CBWCB[16];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"20160524224201663.png\" alt=\"Command Block Wrapper\"></p>\n<blockquote>\n<p>注意：发送时指定发送字节为<code>31</code>个字节，发送错误会导致无法识别包为CBW包。</p>\n<p>command_block_wrapper，该数据结构长度为<code>32</code>字节，调用<code>write</code>函数时需注意。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dCBWSignature: CBW的标识，固定值：43425355h(little endian)。</span><br><span class=\"line\">\tdCBWSignature[0] = &apos;U&apos;</span><br><span class=\"line\">\tdCBWSignature[1] = &apos;S&apos;</span><br><span class=\"line\">\tdCBWSignature[2] = &apos;B&apos;</span><br><span class=\"line\">\tdCBWSignature[3] = &apos;C&apos;</span><br><span class=\"line\">\t</span><br><span class=\"line\">dCBWTag: 主机发送的一个命令块标识，设备需要原样作为dCSWTag（CSW中的一部分）再发送给Host; 通信配对。</span><br><span class=\"line\"></span><br><span class=\"line\">dCBWDataTransferLength: 本次CBW命令要求在命令与回应之间传输的字节数（接下要写或读的数据量）。如果为0，则不传输数据。</span><br><span class=\"line\"></span><br><span class=\"line\">bmCBWFlags: 反映数据传输的方向，0x00 表示来自Host，0x80 表示发至Host； </span><br><span class=\"line\"></span><br><span class=\"line\">bCBWLUN: 对于有多个LUN逻辑单元的设备，用来选择具体目标。如果没有多个LUN，则写0。</span><br><span class=\"line\"></span><br><span class=\"line\">bCBWCBLength: 命令的长度，范围在0~16。</span><br><span class=\"line\"></span><br><span class=\"line\">CBWCB: 传输的具体命令，符合bInterfaceSubClass.中定义的命令规范，此处是SCSI指令集。</span><br></pre></td></tr></table></figure>\n<h3><span id=\"data\">DATA</span></h3>\n<p>这里就是真正的数据传输期了，可以没有数据，可以读数据，可以写数据。</p>\n<p>数据的交互都是双方约定的过程，假设在<code>host</code>发送一个私有命令，设备有数据发上来，此时<code>host</code>调用<code>read</code>函数。</p>\n<h3><span id=\"csw\">CSW</span></h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Section 5.2: Command Status Wrapper (CSW)</span><br><span class=\"line\">struct command_status_wrapper &#123;</span><br><span class=\"line\">\tuint8_t dCSWSignature[4];</span><br><span class=\"line\">\tuint32_t dCSWTag;</span><br><span class=\"line\">\tuint32_t dCSWDataResidue;</span><br><span class=\"line\">\tuint8_t bCSWStatus;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"20160524224223818.png\" alt=\"CSW（Command Status Wrapper）状态格式\"></p>\n<p>CSW的长度为13个字节，是对应CBW指令的状态返回，它指示了上一条指令执行是否成功。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dCSWSignature: CSW的标识，固定值：53425355h(little endian)。</span><br><span class=\"line\"></span><br><span class=\"line\">dCSWTag: 设置这个标识和CBW中的dCBWTag一致，参照上面关于dCBWTag的解释。</span><br><span class=\"line\"></span><br><span class=\"line\">dCSWDataResidue: 还需要传送的数据，此数据根据dCBWDataTransferLength－本次已经传送的数据得到。</span><br><span class=\"line\"></span><br><span class=\"line\">bCSWStatus: 指示命令的执行状态。如果命令正确执行，bCSWStatus返回0 ，不正确返回1，phase错返回2（当HOST收到此错误时需要对Device复位）。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以借鉴：<a href=\"https://github.com/younglifestyle/usbOps/blob/master/usbLib/device.go\" target=\"_blank\" rel=\"noopener\">GitHub</a></p>\n</blockquote>\n<h2><span id=\"分析工具\">分析工具</span></h2>\n<p>linux和windows下都通用的是，使用<code>wireshake</code>，抓包工具抓取的包都是一样的，而且都比较好用，算是比较推荐的。推荐文章，<a href=\"http://www.lnsign.com/2018/03/06/usb-packet-capture-usbmon-wireshark/\" target=\"_blank\" rel=\"noopener\">linux下USB数据包分析(usbmon + wireshark)</a>。</p>\n<p>另外windows下，有<code>Bus Hound</code>，也是非常好用，只是linux没有。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"USB Mass Storage","slug":"USB-Mass-Storage","permalink":"chunlife.top/tags/USB-Mass-Storage/"},{"name":"cbw csw","slug":"cbw-csw","permalink":"chunlife.top/tags/cbw-csw/"}]},{"title":"Go语言GoLand——技巧","date":"2019-08-06T16:02:26.000Z","path":"2019/08/07/Go语言GoLand——技巧/","content":"<p>GoLand在其<code>help</code>中即可调出帮助文档，其快捷键都在其中可以查询得到。</p>\n<a id=\"more\"></a>\n<p><img src=\"1565107981920.png\" alt=\"1565107981920\"></p>\n<p>不过在这里我将常见的快捷键自己做了个总结，了解这些快捷键完全可以大大的提高我们的编程效率，类似于会快捷键的<code>vim</code>和不会快捷键的<code>vim</code>的差别了。</p>\n<h3><span id=\"必须要掌握的快捷键\">必须要掌握的快捷键</span></h3>\n<p>这里头罗列的快捷键需要尽量的进行掌握，而且都是在编程过程中，都是会经常使用到的，可以说是非常有用了。</p>\n<p><img src=\"image-20200429215911044.png\" alt=\"尽量要掌握的快捷键\"></p>\n<p><img src=\"image-20200429215948350.png\" alt=\"image-20200429215948350\"></p>\n<h3><span id=\"比较神奇但真的好用的技巧\">比较神奇，但真的好用的技巧</span></h3>\n<p>以下技巧参考自：<a href=\"https://www.bilibili.com/video/av57075824/\" target=\"_blank\" rel=\"noopener\">【Go 夜读】#50 GoLand Tips &amp; Tricks</a>，以及自己了解的独到技巧。</p>\n<h4><span id=\"1-便捷辅助生成代码\">1、便捷辅助生成代码</span></h4>\n<p>在err变量后面，输入<code>.nn</code>即可快捷生成判断语句。</p>\n<p><img src=\"clip_image001.png\" alt=\"快捷\"></p>\n<p><img src=\"clip_image001-1565108828191.png\" alt=\"dasdsa\"></p>\n<h4><span id=\"2-根据提示创建变量\">2、根据提示创建变量</span></h4>\n<p>在编程时，经常会出现需要临时创建一个临时变量的情况，每次我们还需要挪动以下光标，在这种情况下，我们可以使用：<code>Alt+Enter</code>组合键。</p>\n<p><img src=\"clip_image001-1565109052222.png\" alt=\"创建变量\"></p>\n<h4><span id=\"3-重构代码迅速将一串代码拉出来生成函数\">3、重构代码，迅速将一串代码拉出来生成函数</span></h4>\n<p>快捷键：<code>Shift+Ctrl+Alt+T</code>。</p>\n<p><img src=\"clip_image001-1565109182318.png\" alt=\"快捷生成函数\"></p>\n<h4><span id=\"4-快捷定义函数返回值\">4、快捷定义函数返回值</span></h4>\n<p>快捷键：<code>Shift+Ctrl+Alt+T</code>。</p>\n<p><img src=\"clip_image001-1565109246711.png\" alt=\"定义函数返回值\"></p>\n<h4><span id=\"5-快速将函数导出到新建文件包中\">5、快速将函数导出到新建文件（包）中</span></h4>\n<p>选中函数名，祭出大杀器，<code>Shift+Ctrl+Alt+T</code>，至于怎么用，其实我都没讲后面的事，因为操作非常简单，不需要我来当个蹩脚的翻译。</p>\n<p><img src=\"clip_image001-1565109360701.png\" alt=\"快速将函数导出到新建文件\"></p>\n<h4><span id=\"6-多行选中用于多行同时添加\">6、多行选中，用于多行同时添加</span></h4>\n<p><code>Shift + Alt + Insert </code>进入多行选中模式，再按一次退出。</p>\n<h4><span id=\"7-快速生成函数的测试程序\">7、快速生成函数的测试程序</span></h4>\n<p>光标点击到函数，快捷键：<code>Alt+Insert</code>。</p>\n<p>有可能需要安装<code>gotests</code>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> go get -u github.com/cweill/gotests/...</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"1565109708408.png\" alt=\"1565109708408\"></p>\n<h4><span id=\"8-打开最近的文件方便用于各文件跳转\">8、打开最近的文件，方便用于各文件跳转</span></h4>\n<blockquote>\n<p>Ctrl+ E 打开最近打开的文件  Ctrl + shift + E 打开最近所在的位置</p>\n</blockquote>\n<h4><span id=\"9-go-fmt-和-file-watcher\">9、go fmt 和 file watcher</span></h4>\n<p>File watcher 绑定go fmt，可以在保存后操作文件（但我实际使用时觉得不好用，goland已经做了一部分go fmt的功能，但没有那么多），我觉得可以手动使用go fmt。</p>\n<p><img src=\"clip_image001-1565109926332.png\" alt=\"42314321\"></p>\n<h4><span id=\"10-自动换行显示\">10、自动换行显示</span></h4>\n<p>setting搜索Soft Wraps。</p>\n<h4><span id=\"11-跳转文件首行和末尾\">11、跳转文件首行和末尾</span></h4>\n<p><code>Ctrl + Home/End</code>，文件首行和末尾。</p>\n<h3><span id=\"20211-更新\">2021.1 更新</span></h3>\n<h4><span id=\"根据json生成结构体以及智能生成tags\">根据<code>json</code>生成结构体，以及智能生成tags</span></h4>\n<blockquote>\n<p><a href=\"https://www.jetbrains.com/go/promo/whatsnew/\" target=\"_blank\" rel=\"noopener\">https://www.jetbrains.com/go/promo/whatsnew/</a></p>\n</blockquote>\n<p><code>Alt+Enter</code>，对着<code>json</code>数据使用组合键。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"Goland","slug":"Goland","permalink":"chunlife.top/tags/Goland/"}]},{"title":"(存储)文件系统的选择","date":"2019-07-22T09:48:37.000Z","path":"2019/07/22/存储-文件系统的选择/","content":"<p>针对新增加的文件更新需求来看，在项目整体的需求中，在分布式的需求设计中，单机存储已不再满足现有的系统设计，需要为系统增加一个存储服务系统。</p>\n<a id=\"more\"></a>\n<h2><span id=\"选择\">选择</span></h2>\n<p>在各类开源的存储文件系统中，前后主要了解过MongoDB的GridFS，bilibili的bfs，淘宝的TFS，MinIO以及fastdfs。</p>\n<p>GridFS，用于存储和恢复那些超过16M的文件，相当于对MongoDB本身Bson存储容量的一个扩展；</p>\n<p>MinIO，同样是存储大容量非结构化的数据所设计，且由于核心算法的需要，集群搭建至少4台机器起，且组件过大，后期维护；</p>\n<p>TFS，在搭建操作时，由于一直看到搭建复杂，维护不太方便，故放弃；</p>\n<p>bfs和fastdfs，bfs是B站为自家网站设计的图片存储系统，fastdfs更适用大众一些，其算起来都不算是一个完整的微型文件系统，当然，在这里，我们需要的是一个文件存储服务系统。</p>\n<p>综合来看，选择<code>fastdfs</code>似乎是当下适合的选择。</p>\n<h2><span id=\"延伸\">延伸</span></h2>\n<p>fastdfs还有一个Go仓库与之类似，但并不是原仓库作者开发，<a href=\"https://github.com/sjqzhang/go-fastdfs\" target=\"_blank\" rel=\"noopener\">go-fastdfs</a>，虽然作者是号称类<code>fastdfs</code>，但其实还是不太一样的，存储文件方式可能是类似。</p>\n<p>但<code>go-fastdfs</code>是有元数据的存储的（使用<code>leveldb</code>存储），而fastdfs无元数据的存储，当无分布式算法的一致性特性的保证下，元数据的可用性将存在可用性存疑的问题。</p>\n<p>虽然<code>go-fastdfs</code>使用Go开发，操作维护也简便，但出于服务整体的稳定性考虑，还是优先选择<code>fastdfs</code>靠谱一点，毕竟已经经过社区与作者的多年开发及维护，基本全线生产可用，对于本项目来说，已经是完全够用了。</p>\n<h2><span id=\"缺点\">缺点</span></h2>\n<p><code>fastdfs</code>虽然经历了多年的开发迭代，且用于生产环境的公司不少，但还是没有一个完整的介绍文档，显然是一个很大的缺陷，遇到问题大概有两个地方可以寻求帮助：<a href=\"http://bbs.chinaunix.net/forum-240-1.html\" target=\"_blank\" rel=\"noopener\">分布式文件系统（FastDFS）</a>和<a href=\"https://github.com/happyfish100/fastdfs/issues\" target=\"_blank\" rel=\"noopener\">fastdfs issue</a>。</p>\n<p>另外一点就是，Go下的fastdfs client不是官方开发，第三方的仓库也早已经不再开发，简单使用测试没有问题，在分布式下是否会出现问题不太清楚，这块也需要关注，在后期可能也要投入精力。</p>\n","categories":[{"name":"分布式服务","slug":"分布式服务","permalink":"chunlife.top/categories/分布式服务/"}],"tags":[{"name":"fastdfs","slug":"fastdfs","permalink":"chunlife.top/tags/fastdfs/"},{"name":"file system","slug":"file-system","permalink":"chunlife.top/tags/file-system/"},{"name":"go-fastdfs","slug":"go-fastdfs","permalink":"chunlife.top/tags/go-fastdfs/"}]},{"title":"为图片加上水印或文字(使用Go)","date":"2019-07-21T08:29:33.000Z","path":"2019/07/21/为图片加上水印或文字-使用Go/","content":"<p>Go中操作图片需要使用到库，<code>github.com/disintegration/imaging</code>。</p>\n<p>代码和效果图如下：</p>\n<a id=\"more\"></a>\n<p><img src=\"1563699357187.png\" alt=\"1563699357187\"></p>\n<h2><span id=\"代码\">代码</span></h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/bregydoc/gtranslate\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image/color\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"unicode/utf8\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/disintegration/imaging\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/golang/freetype\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/golang/freetype/truetype\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"golang.org/x/image/font\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tFontSize     = <span class=\"number\">20</span></span><br><span class=\"line\">\tSquareHeight = <span class=\"number\">200</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tHandleUserImage()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// HandleUserImage paste user image onto background</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">HandleUserImage</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">string</span>, error)</span></span> &#123;</span><br><span class=\"line\">\tm, err := imaging.Open(<span class=\"string\">\"target.png\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"open file failed\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbm, err := imaging.Open(<span class=\"string\">\"bg.jpg\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"open file failed\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 图片按比例缩放</span></span><br><span class=\"line\">\tdst := imaging.Resize(m, bm.Bounds().Max.X, SquareHeight, imaging.Lanczos)</span><br><span class=\"line\">\t<span class=\"comment\">// 将图片粘贴到背景图的固定位置 最后的参数控制虚化程度</span></span><br><span class=\"line\">\tresult := imaging.Overlay(bm, dst, image.Pt(<span class=\"number\">0</span>, bm.Bounds().Max.Y-SquareHeight), <span class=\"number\">0.3</span>)</span><br><span class=\"line\">\twriteOnImage(result)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfileName := fmt.Sprintf(<span class=\"string\">\"%d.jpg\"</span>, <span class=\"number\">1234</span>)</span><br><span class=\"line\">\terr = imaging.Save(result, fileName)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fileName, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">writeOnImage</span><span class=\"params\">(target *image.NRGBA)</span></span> &#123;</span><br><span class=\"line\">\tc := freetype.NewContext()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 设置屏幕每英寸的分辨率</span></span><br><span class=\"line\">\tc.SetDPI(<span class=\"number\">256</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 背景</span></span><br><span class=\"line\">\tc.SetClip(target.Bounds())</span><br><span class=\"line\">\t<span class=\"comment\">// 设置目标图像</span></span><br><span class=\"line\">\tc.SetDst(target)</span><br><span class=\"line\">\tc.SetHinting(font.HintingFull)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 设置文字颜色、字体、字大小</span></span><br><span class=\"line\">\tc.SetSrc(image.NewUniform(color.RGBA&#123;R: <span class=\"number\">220</span>, G: <span class=\"number\">220</span>, B: <span class=\"number\">220</span>, A: <span class=\"number\">220</span>&#125;))</span><br><span class=\"line\">\t<span class=\"comment\">// 以磅为单位设置字体大小</span></span><br><span class=\"line\">\tc.SetFontSize(FontSize)</span><br><span class=\"line\">\tfontFam, err := getFontFamily()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"get font family error\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 设置用于绘制文本的字体</span></span><br><span class=\"line\">\tc.SetFont(fontFam)</span><br><span class=\"line\"></span><br><span class=\"line\">\tdrawStr := <span class=\"string\">\"你好，世界\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取字体的尺寸大小</span></span><br><span class=\"line\">\tfixed := c.PointToFixed(FontSize)</span><br><span class=\"line\">\t<span class=\"comment\">// fixed.Ceil() 字体大小</span></span><br><span class=\"line\">\t<span class=\"comment\">// utf8.RuneCountInString(drawStr) 获取字符串的实际大小，而不是以byte算</span></span><br><span class=\"line\">\tpt := freetype.Pt(target.Rect.Max.X/<span class=\"number\">2</span>-(utf8.RuneCountInString(drawStr)/<span class=\"number\">2</span>)*fixed.Ceil(), target.Rect.Max.Y-SquareHeight+SquareHeight/<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfontPin, err := c.DrawString(drawStr, pt)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"draw error: %v \\n\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 翻译文字，附加一行，以增强国际化（big）</span></span><br><span class=\"line\">\ttranslated, err := gtranslate.TranslateWithFromTo(</span><br><span class=\"line\">\t\tdrawStr,</span><br><span class=\"line\">\t\tgtranslate.FromTo&#123;</span><br><span class=\"line\">\t\t\tFrom: <span class=\"string\">\"zh-cn\"</span>,</span><br><span class=\"line\">\t\t\tTo:   <span class=\"string\">\"ja\"</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"translate error: %v \\n\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_, err = c.DrawString(translated, freetype.Pt(target.Rect.Max.X/<span class=\"number\">2</span>-(utf8.RuneCountInString(translated)/<span class=\"number\">2</span>)*fixed.Ceil(), fontPin.Y.Ceil()+fixed.Ceil()))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"draw error: %v \\n\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取字符集，仅调用一次</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getFontFamily</span><span class=\"params\">()</span> <span class=\"params\">(*truetype.Font, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里需要读取中文字体，否则中文文字会变成方格</span></span><br><span class=\"line\">\tfontBytes, err := ioutil.ReadFile(<span class=\"string\">\"msyh.ttc\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"read file error:\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &amp;truetype.Font&#123;&#125;, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tf, err := freetype.ParseFont(fontBytes)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"parse font error:\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &amp;truetype.Font&#123;&#125;, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f, err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"image","slug":"image","permalink":"chunlife.top/tags/image/"}]},{"title":"函数选择模式(Functional Options Patter)","date":"2019-07-17T09:48:37.000Z","path":"2019/07/17/函数选择模式-Functional-Options-Patter/","content":"<p>有时候一个函数会有很多参数，为了方便函数的使用，我们会给希望给一些参数设定默认值，调用时只需要传与默认值不同的参数即可，类似于 python 里面的默认参数和字典参数，虽然 golang 里面既没有默认参数也没有字典参数，但是我们有选项模式。</p>\n<a id=\"more\"></a>\n<h3><span id=\"可变长参数列表\">可变长参数列表</span></h3>\n<p>在这之前，首先需要介绍一下可变长参数列表，顾名思义，就是参数的个数不固定，可以是一个也可以是多个，最典型的用法就是标准库里面的 <code>fmt.Printf</code>，语法比较简单，如下面例子实现任意多个参数的加法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func add(nums ...int) int &#123;</span><br><span class=\"line\">    sum := 0</span><br><span class=\"line\">    for _, num := range nums &#123;</span><br><span class=\"line\">        sum += num</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">So(add(1, 2), ShouldEqual, 3)</span><br><span class=\"line\">So(add(1, 2, 3), ShouldEqual, 6)</span><br></pre></td></tr></table></figure>\n<p>在类型前面加 <code>...</code> 来表示这个类型的变长参数列表，使用上把参数当成 <code>slice</code> 来用即可</p>\n<h3><span id=\"选项模式\">选项模式</span></h3>\n<p>假设我们要实现这样一个函数，这个函数接受5个参数，三个 <code>string</code>（其中第一个参数是必填参数），两个 <code>int</code>，这里功能只是简单输出这个参数，于是我们可以简单用如下代码实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func MyFunc1(requiredStr string, str1 string, str2 string, int1 int, int2 int) &#123;</span><br><span class=\"line\">    fmt.Println(requiredStr, str1, str2, int1, int2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 调用方法</span><br><span class=\"line\">MyFunc1(&quot;requiredStr&quot;, &quot;defaultStr1&quot;, &quot;defaultStr2&quot;, 1, 2)</span><br></pre></td></tr></table></figure>\n<p>这种实现比较简单，但是同时传入参数较多，对调用方来说，使用的成本就会比较高，而且每个参数的具体含义这里并不清晰，很容易出错</p>\n<p>那选项模式怎么实现这个需求呢？先来看下最终的效果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyFunc2(&quot;requiredStr&quot;)</span><br><span class=\"line\">MyFunc2(&quot;requiredStr&quot;, WithOptionStr1(&quot;mystr1&quot;))</span><br><span class=\"line\">MyFunc2(&quot;requiredStr&quot;, WithOptionStr2AndInt2(&quot;mystr2&quot;, 22), WithOptionInt1(11))</span><br></pre></td></tr></table></figure>\n<p>如上面代码所示，你可以根据自己的需求选择你需要传入的参数，大大简化了函数调用的复杂度，并且每个参数都有了清晰明确的含义</p>\n<p>那怎么实现上面的功能呢</p>\n<h4><span id=\"定义可选项和默认值\">定义可选项和默认值</span></h4>\n<p>首先定义可选项和默认值，这里有4个可选项，第一个参数为必填项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type MyFuncOptions struct &#123;</span><br><span class=\"line\">    optionStr1 string</span><br><span class=\"line\">    optionStr2 string</span><br><span class=\"line\">    optionInt1 int</span><br><span class=\"line\">    optionInt2 int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var defaultMyFuncOptions = MyFuncOptions&#123;</span><br><span class=\"line\">    optionStr1: &quot;defaultStr1&quot;,</span><br><span class=\"line\">    optionStr2: &quot;defaultStr2&quot;,</span><br><span class=\"line\">    optionInt1: 1,</span><br><span class=\"line\">    optionInt2: 2,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"实现-with-方法\">实现 With 方法</span></h4>\n<p>这些 With 方法看起来有些古怪，接受一个选项参数，返回一个选项方法，而选项方法以选项作为参数负责修改选项的值，如果没看明白没关系，可以先看函数功能如何实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type MyFuncOption func(options *MyFuncOptions)</span><br><span class=\"line\">func WithOptionStr1(str1 string) MyFuncOption &#123;</span><br><span class=\"line\">    return func(options *MyFuncOptions) &#123;</span><br><span class=\"line\">        options.optionStr1 = str1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func WithOptionInt1(int1 int) MyFuncOption &#123;</span><br><span class=\"line\">    return func(options *MyFuncOptions) &#123;</span><br><span class=\"line\">        options.optionInt1 = int1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func WithOptionStr2AndInt2(str2 string, int2 int) MyFuncOption &#123;</span><br><span class=\"line\">    return func(options *MyFuncOptions) &#123;</span><br><span class=\"line\">        options.optionStr2 = str2</span><br><span class=\"line\">        options.optionInt2 = int2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们让 optionStr2 和 optionInt2 合并一起设置，实际应用场景中可以用这种方式将相关的参数放到一起设置</p>\n<h4><span id=\"实现函数功能\">实现函数功能</span></h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func MyFunc2(requiredStr string, opts ...MyFuncOption) &#123;</span><br><span class=\"line\">    options := defaultMyFuncOptions</span><br><span class=\"line\">    for _, o := range opts &#123;</span><br><span class=\"line\">        o(&amp;options)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(requiredStr, options.optionStr1, options.optionStr2, options.optionInt1, options.optionInt2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>使用 With 方法返回的选项方法作为参数列表，用这些方法去设置选项。</strong></p>\n<blockquote>\n<p>转载自：<a href=\"http://www.hatlonely.com/2018/03/10/golang-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%89%E9%A1%B9%E6%A8%A1%E5%BC%8F/index.html\" target=\"_blank\" rel=\"noopener\">golang 设计模式之选项模式</a></p>\n</blockquote>\n<hr>\n<p>将代码直接拿出运行即可知道其中奥妙，这里面合理运行了Go的可变长参数特性。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyFuncOptions <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\toptionStr1 <span class=\"keyword\">string</span></span><br><span class=\"line\">\toptionStr2 <span class=\"keyword\">string</span></span><br><span class=\"line\">\toptionInt1 <span class=\"keyword\">int</span></span><br><span class=\"line\">\toptionInt2 <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> defaultMyFuncOptions = MyFuncOptions&#123;</span><br><span class=\"line\">\toptionStr1: <span class=\"string\">\"defaultStr1\"</span>,</span><br><span class=\"line\">\toptionStr2: <span class=\"string\">\"defaultStr2\"</span>,</span><br><span class=\"line\">\toptionInt1: <span class=\"number\">1</span>,</span><br><span class=\"line\">\toptionInt2: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyFuncOption <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(options *MyFuncOptions)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">WithOptionStr1</span><span class=\"params\">(str1 <span class=\"keyword\">string</span>)</span> <span class=\"title\">MyFuncOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(options *MyFuncOptions)</span></span> &#123;</span><br><span class=\"line\">\t\toptions.optionStr1 = str1</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WithOptionInt1</span><span class=\"params\">(int1 <span class=\"keyword\">int</span>)</span> <span class=\"title\">MyFuncOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(options *MyFuncOptions)</span></span> &#123;</span><br><span class=\"line\">\t\toptions.optionInt1 = int1</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WithOptionStr2AndInt2</span><span class=\"params\">(str2 <span class=\"keyword\">string</span>, int2 <span class=\"keyword\">int</span>)</span> <span class=\"title\">MyFuncOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(options *MyFuncOptions)</span></span> &#123;</span><br><span class=\"line\">\t\toptions.optionStr2 = str2</span><br><span class=\"line\">\t\toptions.optionInt2 = int2</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MyFunc2</span><span class=\"params\">(requiredStr <span class=\"keyword\">string</span>, opts ...MyFuncOption)</span></span> &#123;</span><br><span class=\"line\">\toptions := defaultMyFuncOptions</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, o := <span class=\"keyword\">range</span> opts &#123;</span><br><span class=\"line\">\t\to(&amp;options)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(requiredStr, options.optionStr1, options.optionStr2, options.optionInt1, options.optionInt2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//grpc.Dial(\"xxx\", grpc.WithInsecure(), grpc.WithTimeout(time.Duration(10*time.Second)))</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tMyFunc2(<span class=\"string\">\"requiredStr\"</span>)</span><br><span class=\"line\">\tMyFunc2(<span class=\"string\">\"requiredStr\"</span>, WithOptionStr1(<span class=\"string\">\"mystr1\"</span>))</span><br><span class=\"line\">\tMyFunc2(<span class=\"string\">\"requiredStr\"</span>, WithOptionStr2AndInt2(<span class=\"string\">\"mystr2\"</span>, <span class=\"number\">22</span>), WithOptionInt1(<span class=\"number\">11</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"grpc\">GRPC</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grpc.Dial(addr, grpc.WithInsecure())</span><br><span class=\"line\">grpc.Dial(addr, grpc.WithInsecure(), grpc.WithTimeout(time.Duration(<span class=\"number\">10</span>*time.Second)))</span><br></pre></td></tr></table></figure>\n<p>在<code>grpc</code>中，这样的设计在<code>google.golang.org/grpc/clientconn.go</code>的<code>Dial(target string, opts ...DialOption)</code>，其中<code>DialOption</code>各函数在<code>google.golang.org/grpc/dialoptions.go</code>中。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Dial</span><span class=\"params\">(target <span class=\"keyword\">string</span>, opts ...DialOption)</span> <span class=\"params\">(*ClientConn, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialContext(context.Background(), target, opts...)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialContext</span><span class=\"params\">(ctx context.Context, target <span class=\"keyword\">string</span>, opts ...DialOption)</span> <span class=\"params\">(conn *ClientConn, err error)</span></span> &#123;</span><br><span class=\"line\">\tcc := &amp;ClientConn&#123;</span><br><span class=\"line\">\t\ttarget:            target,</span><br><span class=\"line\">\t\tcsMgr:             &amp;connectivityStateManager&#123;&#125;,</span><br><span class=\"line\">\t\tconns:             <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[*addrConn]<span class=\"keyword\">struct</span>&#123;&#125;),</span><br><span class=\"line\">\t\tdopts:             defaultDialOptions(),</span><br><span class=\"line\">\t\tblockingpicker:    newPickerWrapper(),</span><br><span class=\"line\">\t\tczData:            <span class=\"built_in\">new</span>(channelzData),</span><br><span class=\"line\">\t\tfirstResolveEvent: grpcsync.NewEvent(),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">// 调用传入的设置函数 拿出来一个一个的设置</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, opt := <span class=\"keyword\">range</span> opts &#123;</span><br><span class=\"line\">\t\topt.apply(&amp;cc.dopts)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而这些函数设计思路和上面讲述是一样的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WithDisableRetry</span><span class=\"params\">()</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newFuncDialOption(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(o *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\to.disableRetry = <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WithTimeout</span><span class=\"params\">(d time.Duration)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newFuncDialOption(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(o *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\to.timeout = d</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此外，当我们需要加入的新的参数时，我们只需要加入新函数选项，以前的调用则给定一个默认值。</p>\n<p>函数式选择模式比较常见的用法即是在<code>GRPC</code>上所用，在其他开源基本也是如此用法。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"Functional Options Patter","slug":"Functional-Options-Patter","permalink":"chunlife.top/tags/Functional-Options-Patter/"},{"name":"函数选择模式","slug":"函数选择模式","permalink":"chunlife.top/tags/函数选择模式/"}]},{"title":"go操作usb","date":"2019-07-17T09:44:37.000Z","path":"2019/07/17/go操作usb/","content":"<p>因为要涉及到重新置换以前的硬件操作方案，在重新梳理以前项目后，发现使用的语言繁多，其中使用到了一种公司内部开发的脚本，从易读性和功能性上来看，出于<code>减负</code>的目的，将这些个能被替换的语言，尽量统一到一种语言——Go。</p>\n<p>同时，在使用过程中，Go里面的USB库能找到的使用方面的博客少的可怜，于是写下这一篇操作USB详细的使用解析，方便后来人，避免遇到一知半解的问题。</p>\n<a id=\"more\"></a>\n<p>像一些USB设备，都是串接在一个arm设备上进行管理，然后由arm设备进行状态控制。（这里有点疑惑以前的方案为啥要使用USB，一般情况这种一对多的，使用像485组网大概会更方便些，算是一个更有性价比的方案，当然现在的方案是不可能变动的了。）</p>\n<h2><span id=\"准备\">准备</span></h2>\n<h3><span id=\"gousb\">gousb</span></h3>\n<p>Go操作USB使用到的库是<a href=\"https://github.com/google/gousb\" target=\"_blank\" rel=\"noopener\">gousb</a>，不过在使用过程中，库不支持USB的热插拔event，在这个<a href=\"https://github.com/google/gousb/issues/8\" target=\"_blank\" rel=\"noopener\">issue</a>中有coder完成了这项功能，在这里贴上。感谢作者<a href=\"https://github.com/nkovacs\" target=\"_blank\" rel=\"noopener\">nkovacs</a>。当然作者提交了pr，当被拒绝了，主要是维护者认为库的注册方式是链式调用函数，他们认为在Go中不太常使用，更为常见的是使用的是<code>函数选择模式</code>，这在我之前的博客有讲解过（竟然又见了）。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h := gousb.Hotplug().Enumerate().ProductID(<span class=\"number\">0x1234</span>).Register(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>因为主库没有合并这个特性，我们直接使用该特性即可，这里我讲主库与这个特性合并了。<a href=\"https://github.com/younglifestyle/gousb\" target=\"_blank\" rel=\"noopener\">库</a>。</p>\n<h3><span id=\"libusb\">libusb</span></h3>\n<p>很遗憾，这个库是一个Cgo库，也就是需要使用到C库，所以程序并不是一个无依赖，可直接单文件使用的库，这里我们需要安装库——<a href=\"http://sourceforge.net/projects/libusb/files/libusb-1.0/\" target=\"_blank\" rel=\"noopener\">libusb</a>。</p>\n<p>安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 准备条件</span><br><span class=\"line\">sudo apt-get install gcc</span><br><span class=\"line\">sudo apt-get install libudev-dev</span><br><span class=\"line\"></span><br><span class=\"line\">// 进入安装包解压目录中，使用root权限编译</span><br><span class=\"line\">./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p>若需要程序运行到其他平台，则需要配置交叉编译工具链。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./configure --build=i686-linux --host=arm-linux CC=/xxxx/xxxx-linux-gn</span><br><span class=\"line\">u-gcc CXX=/xxxx/xxxxx-linux-gnu-g++ --disable-udev</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>交叉编译中的udev我没有去编译了，要用到hotplug的话，此处是要使能的。</p>\n</blockquote>\n<h2><span id=\"举个栗子\">举个栗子</span></h2>\n<p>使用介绍可以参考<a href=\"https://godoc.org/github.com/google/gousb\" target=\"_blank\" rel=\"noopener\">GoDoc</a>，这里头有两个简单的例子，若使用，则最好清楚函数的为何要填写这些数据。</p>\n<p>直接上我写的一个例子，</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Initialize a new Context.</span></span><br><span class=\"line\">ctx := gousb.NewContext()</span><br><span class=\"line\"><span class=\"keyword\">defer</span> ctx.Close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Open any device with a given VID/PID using a convenience function.</span></span><br><span class=\"line\">dev, err := ctx.OpenDeviceWithVIDPID(<span class=\"number\">0xba57</span>, <span class=\"number\">0x1001</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Could not open a device: \"</span>, err)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> dev.Close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Detach INTERFACE1 &amp; INTERFACE2</span></span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"Set auto-detach\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err := dev.SetAutoDetach(<span class=\"literal\">true</span>); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"Failed to set auto-detach: %v\"</span>, err)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Switch the configuration to #1</span></span><br><span class=\"line\">cfg, err := dev.Config(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"%s.Config(1): %v \\n\"</span>, dev, err)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> cfg.Close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// In the config #1, claim interface #0 with alt setting #0.</span></span><br><span class=\"line\">intf, err := cfg.Interface(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"%s.Interface(0, 0): %v \\n\"</span>, cfg, err)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> intf.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(intf.Setting.Endpoints)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// And in the same interface open endpoint #5 for writing.</span></span><br><span class=\"line\">epOut, err := intf.OutEndpoint(<span class=\"number\">0x02</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"%s.OutEndpoint(0x02): %v\"</span>, intf, err)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(epOut.String())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// In this interface open endpoint #6 for reading. 0x81</span></span><br><span class=\"line\">epIn, err := intf.InEndpoint(<span class=\"number\">0x82</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"%s.InEndpoint(0x81): %v\"</span>, intf, err)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(epIn.String())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// writeBytes might be smaller than the buffer size if an error occurred. writeBytes might be greater than zero even if err is not nil.</span></span><br><span class=\"line\">writes, err := epOut.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">`&#123;\"xxx\":\"xxx\"&#125;\\r`</span>))</span><br><span class=\"line\"><span class=\"comment\">//writes, err := epOut.Write([]byte(\"123\"))</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Write returned an error:\"</span>, err)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"write :\"</span>, writes)</span><br><span class=\"line\"></span><br><span class=\"line\">buf := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">readBytes, err := epIn.Read(buf)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Read returned an error:\"</span>, err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> readBytes == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"IN endpoint returned 0 bytes of data.\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"read :\"</span>, readBytes, <span class=\"keyword\">string</span>(buf))</span><br></pre></td></tr></table></figure>\n<h2><span id=\"解析函数\">解析函数</span></h2>\n<ul>\n<li><code>gousb.NewContext()</code>中的context：</li>\n</ul>\n<p>Context管理与USB设备通信所需的所有资源。通过Context，用户可以遍历可用的USB设备。</p>\n<ul>\n<li><code>OpenDeviceWithVIDPID</code>：</li>\n</ul>\n<p>根据PID和VID打开设备，当设备不存在，则无法打开。还可以循环遍历设备进行打开设备操作。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var devs []*gousb.Device</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// OpenDevices is used to find the devices to open.</span></span><br><span class=\"line\">devs, err := ctx.OpenDevices(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(desc *gousb.DeviceDesc)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// After inspecting the descriptor, return true or false depending on whether</span></span><br><span class=\"line\">\t<span class=\"comment\">// the device is \"interesting\" or not.  Any descriptor for which true is returned</span></span><br><span class=\"line\">\t<span class=\"comment\">// opens a Device which is retuned in a slice (and must be subsequently closed).</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> desc.Vendor == gousb.ID(xxxx) &amp;&amp; desc.Product == gousb.ID(xxxx) &#123;</span><br><span class=\"line\">\t\tlog.Debugf(<span class=\"string\">\"Found device: %v\"</span>, desc)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>SetAutoDetach</code>：</li>\n</ul>\n<p><code>SetAutoDetach</code>启用/禁用自动内核驱动程序分离。 启用auto-detach后，gousb将自动分离接口上的内核驱动程序，并在释放接口时重新挂接它。 默认情况下，在新打开的设备句柄上禁用自动内核驱动程序分离。</p>\n<ul>\n<li><code>dev.Config(1)</code>：</li>\n</ul>\n<p>获取配置描述符，这里涉及usb的一些概念，在usb中其实有很多描述符来配置usb的相关属性，和描述usb的相关特性，这里就是通过该函数去获取其中的配置描述符。可以在linux中使用<code>lsusb</code>命令查看到。<br>\n<img src=\"1563335549361.png\" alt=\"1563335549361\"></p>\n<p>这些是概念，其中参数填<code>1</code>，我们还未搞清楚。</p>\n<p>接下来，看代码，配置描述符是具象化在库中的结构体<code>ConfigDesc</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ConfigDesc <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Number         <span class=\"keyword\">int</span></span><br><span class=\"line\">    SelfPowered    <span class=\"keyword\">bool</span></span><br><span class=\"line\">    RemoteWakeup   <span class=\"keyword\">bool</span></span><br><span class=\"line\">    MaxPower       Milliamperes</span><br><span class=\"line\">    Interfaces     []InterfaceDesc</span><br><span class=\"line\">    iConfiguration <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而这些数据都在调用<code>OpenDeviceWithVIDPID</code>函数后，被读取到程序中，相应的配置描述符在<code>dev.Desc.Configs</code>中，该变量为<code>map[int]ConfigDesc</code>，而案例中，我只有一个配置描述符，且<code>key</code>为<code>1</code>，所以在程序中直接就给定了。</p>\n<ul>\n<li><code>cfg.Interface(0, 0)</code>：</li>\n</ul>\n<p>程序需要透过操作系统的中间层<code>USB controller interface</code>，以此来和device进行交互操作。接口声明并返回USB设备上的接口。 num指定要声明的接口的编号，alt指定该接口的备用设置编号。若指定出错，库会打印出正确的配置信息。</p>\n<p><strong>这里的参数时怎么得来的呢</strong>？</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fmt.Println(<span class=\"built_in\">len</span>(cfg.Desc.Interfaces), cfg.Desc.Interfaces[<span class=\"number\">0</span>].String())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1    Interface 0 (1 alternate settings)</span></span><br></pre></td></tr></table></figure>\n<p>填入<code>interface</code>数组索引，引用其中的第一个<code>alternate settings</code>。根据实际设备上的参数可以得到<code>(0, 0)</code>的传参。</p>\n<ul>\n<li><code>endpoint</code>：</li>\n</ul>\n<p>usb中数据传输有个endpoint的概念，可以被认为类似于UDP / IP端口，但数据传输是单向的。端点由Endpoint结构表示，所有定义的端点都可以通过<code>Interface.Setting</code>的Endpoints字段获得。<br>\n调用函数返回的结构体中分别含有<code>read</code>或<code>write</code>方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> epNum, endpoints := <span class=\"keyword\">range</span> st.intf.Setting.Endpoints &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> endpoints.Direction == gousb.EndpointDirectionOut &#123;</span><br><span class=\"line\">\t\tst.output, err = st.intf.OutEndpoint(<span class=\"keyword\">int</span>(epNum))</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Error(<span class=\"string\">\"set outpoint error,\"</span>, err)</span><br><span class=\"line\">\t\t\tst.Close()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tst.input, err = st.intf.InEndpoint(<span class=\"keyword\">int</span>(epNum))</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Error(<span class=\"string\">\"set inpoint error,\"</span>, err)</span><br><span class=\"line\">\t\t\tst.Close()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>control</code>函数：</li>\n</ul>\n<p>这里提一下，USB传输可以分为四种传输方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">传输方式</span><br><span class=\"line\">      USB，有四种的传输方式，控制(Control)，同步(isochronous)，中断(interrupt)，大量(bulk)。如果你是从硬件开始来设计整个的系统，你还要正确选择传输的方式，而作为一个驱动程序的书写者，就只需要弄清楚他是采用的什么工作方式就行了，通常所有的传输方式下的主动权都在PC边,也就是host边。</span><br><span class=\"line\">1、控制(Control)方式传输，控制传输是双向传输，数据量通常较小，USB系统软件用来主要进行查询，配置和给USB设备发送通用的命令，控制传输方式可以包括，8，16，32和64字节的数据，这依赖于设备和传输速度，控制传输典型地用在主计算机和USB外设之间的端点(Endpoint)0之间的传输，但是指定供应商的控制传输可能用到其它的端点。</span><br><span class=\"line\"></span><br><span class=\"line\">2、同步(isochronous)方式传输，同步传输提供了确定的带宽和间隔时间（latency)，它被用于时间严格并具有较强容错性的流数据传输，或者用于要求恒定的数据传输率的即时应用中，例如执行即时通话的网络电话应用时，使用同步传输模式是很好的选择，同步数据要求确定的带宽值和确定的最大传输次数，对于同步传输来说，即时的数据传递比完美的精度和数据的完整性更重要一些。</span><br><span class=\"line\"></span><br><span class=\"line\">3、中断(interrupt)方式传输，中断方式传输主要用于定时查询设备是否有中断数据要传输设备的端点模式器的结构决定了它的查询频率，从1到255ms之间，这种传输方式典型的应用在少量的分散的，不可预测数据的传输，键盘，操纵杆和鼠标就属于这一类型中断方式传输是单向的并且对于host，来说只有输入的方式。</span><br><span class=\"line\"></span><br><span class=\"line\">4、大量(bulk)传输，主要应用在数据大量传输传输和接受数据上，同时又没有带宽和间隔时间要求的情况下，要求保证传输，打印机和扫描仪属于这种类型，这种类型的设备适合于传输非常慢和大量被延迟的传输，可以等到所有其它类型的数据的传输完成之后再传输和接收数据。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>USB将其有效的带宽分成各个不同的帧(frame)，每帧通常是1ms时间长，每个设备每帧只能传输一个同步的传输包，在完成了系统的配置信息和连接之后，USB的host就会对不同的传输点和传输方式做一个统筹安排，用来适应整个的USB的带宽，<strong>通常情况下，同步方式和中断方式的传输会占据整个带宽的90%，剩下的就安排给控制方式传输数据。</strong></p>\n</blockquote>\n<p>函数有为control传输留有函数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *Device)</span> <span class=\"title\">Control</span><span class=\"params\">(rType <span class=\"keyword\">uint8</span>, request <span class=\"keyword\">uint8</span>, val <span class=\"keyword\">uint16</span>, idx <span class=\"keyword\">uint16</span>, data []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(<span class=\"keyword\">int</span>, error)</span></span></span><br></pre></td></tr></table></figure>\n<p>参数的填写需要对照数据手册：<a href=\"http://www.jungo.com/st/support/documentation/windriver/802/wdusb_man_mhtml/node55.html\" target=\"_blank\" rel=\"noopener\">USB Control Transfers Overview</a>。这里头就有几张表记录着这些参数的对照。</p>\n<h2><span id=\"热插拔\">热插拔</span></h2>\n<p>热插拔的使用在这个issue中被介绍，<a href=\"https://github.com/google/gousb/issues/8\" target=\"_blank\" rel=\"noopener\">Hot Plug Support</a>，可以参考，使用也很简单，这插一段简单使用的代码。</p>\n<p>值得注意的是，注册热插拔函数后，热插拔函数会自动去扫描USB设备，然后触发注册的热插拔处理函数，也就是说，我的系统有三个usb设备，在注册完函数后，其会被自动调用三次，也就说可以在被触发函数中open设备，<code>evt.DeviceDesc()</code>可以获取<code>pid</code>和<code>vid</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.RegisterHotplug(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(evt gousb.HotplugEvent)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> evt.Type() == gousb.HotplugEventDeviceArrived &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"arrived device\"</span>, evt.Type())</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"un-arrived device\"</span>, evt.Type())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"Functional Options Patter","slug":"Functional-Options-Patter","permalink":"chunlife.top/tags/Functional-Options-Patter/"},{"name":"函数选择模式","slug":"函数选择模式","permalink":"chunlife.top/tags/函数选择模式/"}]},{"title":"CSDN自动展开chorme插件","date":"2019-07-01T04:52:06.000Z","path":"2019/07/01/CSDN自动展开chorme插件/","content":"<p>之前推荐过CSDN自动展开阅读的<a href=\"https://github.com/silenceshell/csdn-auto-readmore\" target=\"_blank\" rel=\"noopener\">chorme插件</a>，但今天无法使用了，这让我很不解，于是去翻看了CSDN的HTML页面代码。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"btn-readmore\"</span> data-track-click=<span class=\"string\">\"&#123;&amp;quot;mod&amp;quot;:&amp;quot;popu_376&amp;quot;,&amp;quot;con&amp;quot;:&amp;quot;,https://blog.csdn.net/jiangxuege/article/details/87912947,readmore&amp;quot;&#125;\"</span>&gt;</span><br><span class=\"line\">                展开阅读全文</span><br><span class=\"line\">                &lt;svg <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"icon chevrondown\"</span> aria-hidden=<span class=\"string\">\"true\"</span>&gt;</span><br><span class=\"line\">                    &lt;use xlink:href=<span class=\"string\">\"#csdnc-chevrondown\"</span>&gt;&lt;/use&gt;</span><br><span class=\"line\">                &lt;<span class=\"regexp\">/svg&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>a&gt;</span><br></pre></td></tr></table></figure>\n<p>在插件中的JS代码为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"btn-readmore\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (btn)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    btn.click();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这应该是CSDN方修改了一些页面结构，这里不管，看到<code>class</code>，手动修改插件为<code>document.getElementsByClassName</code>，但实际上我从浏览器console上得到的结果是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auto.js:4 Uncaught TypeError: btn.click is not a function</span><br></pre></td></tr></table></figure>\n<p>这貌似有些尴尬，但还有方法，就是查看CSDN是怎么找到这个标签的。</p>\n<p>使用浏览器的<code>检查</code>找到这个标签，右键——&gt; Copy ——&gt; Copy Js Path。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#mainBox &gt; main &gt; div.hide-article-box.hide-article-pos.text-center &gt; a\"</span>)</span><br></pre></td></tr></table></figure>\n<p>我们借鉴一下采用<code>querySelector</code>这个方法，结果是成功的，将JS代码改为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\".btn-readmore\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (btn)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    btn.click();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>已提交pr并合并，直接拉仓库即可。</p>\n</blockquote>\n<p>还有没有其他简单的方法去除CSDN的这个展开呢，有的，chorme使用油猴插件，其中有一个作者的插件就能完成，而且自带去除广告的功能，比这个更为强大。</p>\n<p><a href=\"%5Bhttps://greasyfork.org/zh-CN/scripts/372452-csdn%E8%87%AA%E5%8A%A8%E5%B1%95%E5%BC%80-%E5%8E%BB%E5%B9%BF%E5%91%8A-%E5%87%80%E5%8C%96%E5%89%AA%E8%B4%B4%E6%9D%BF-%E5%85%8D%E7%99%BB%E9%99%86%5D(https://greasyfork.org/zh-CN/scripts/372452-csdn%E8%87%AA%E5%8A%A8%E5%B1%95%E5%BC%80-%E5%8E%BB%E5%B9%BF%E5%91%8A-%E5%87%80%E5%8C%96%E5%89%AA%E8%B4%B4%E6%9D%BF-%E5%85%8D%E7%99%BB%E9%99%86)\">CSDN自动展开+去广告+净化剪贴板+免登陆</a>。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/05/23/小工具（windows-便笺）/\">小工具（windows 便笺）</a></li><li><a href=\"www.chunlife.top/2019/05/23/小工具（windows-便笺）/\">小工具（windows 便笺）</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"CSDN","slug":"CSDN","permalink":"chunlife.top/tags/CSDN/"}]},{"title":"一致性hash","date":"2019-07-01T01:47:08.000Z","path":"2019/07/01/一致性hash/","content":"<p>在分布式应用中，我们希望服务器能够分担整体框架的缓冲压力，希望存储请求能够均匀的分散在已有的服务器中，足够平均，也就能最大化的使用服务器，比如falcon的<code>transfer</code>模块，经过一致性哈希算法，对数据的发送目的地进行均匀分布后，有效进行存储，而其中的关键即是<code>均匀</code>，当然后面还会将会提到节点变化引发的映射变化。</p>\n<a id=\"more\"></a>\n<h2><span id=\"解析\">解析</span></h2>\n<p>当看到这里的时候，可以联想一下<code>Map</code>，这和分布式里头的运用是很像的，map也是要讲究让数据均匀分布，以此来保证map操作时间都为O(1)。<br>\n可以想象，map的结构是一个哈希key后头挂一个链表，在数据均匀的挂在每一个哈希值上时，map时间才会是O(1)<code>常量时间</code>。这样理想的存储方式，才既不会浪费空间，也不会消耗时间。</p>\n<p><img src=\"1561981837185.png\" alt=\"图片来自《算法图解》\"></p>\n<p>鉴于此，假如我们有100台服务器作为服务节点<code>nodes</code>，将1000W个数据分布到这100台数据节点上，使用普通哈希算法进行计算，然后以服务节点取模，算出落到服务器节点上的数量。</p>\n<p><img src=\"fe155f98-3a5e-11e6-834d-193e6f85afcd.png\" alt=\"normal_hash\"></p>\n<p>大致<a href=\"https://github.com/younglifestyle/hash_test/blob/master/%E6%99%AE%E9%80%9A%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0.go\" target=\"_blank\" rel=\"noopener\">代码（Go）</a>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tITEMS = <span class=\"number\">10000000</span></span><br><span class=\"line\">\tNODES = <span class=\"number\">100</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 创建节点数据</span></span><br><span class=\"line\">\tnodeStat := <span class=\"built_in\">make</span>(byInt, NODES)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; ITEMS; i++ &#123;</span><br><span class=\"line\">\t\tmd5Byte := MD5(strconv.Itoa(i))</span><br><span class=\"line\">\t\tvalue := genValue(md5Byte[<span class=\"number\">6</span>:<span class=\"number\">10</span>])</span><br><span class=\"line\">\t\tn := value % NODES</span><br><span class=\"line\">\t\tnodeStat[n] += <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsort.Sort(nodeStat)</span><br><span class=\"line\"></span><br><span class=\"line\">\tave := ITEMS / NODES</span><br><span class=\"line\">\tMax := nodeStat[<span class=\"built_in\">len</span>(nodeStat)<span class=\"number\">-1</span>]</span><br><span class=\"line\">\tMin := nodeStat[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"Ave: %d \\n\"</span>, ave)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"Max: %d\\t(%0.2f%%) \\n\"</span>, Max,</span><br><span class=\"line\">\t\t<span class=\"keyword\">float64</span>(Max-ave)*<span class=\"number\">100.0</span>/<span class=\"keyword\">float64</span>(ave))</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"Min: %d\\t(%0.2f%%) \\n\"</span>, Min,</span><br><span class=\"line\">\t\t<span class=\"keyword\">float64</span>(ave-Min)*<span class=\"number\">100.0</span>/<span class=\"keyword\">float64</span>(ave))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  其中一次运行的数据</span></span><br><span class=\"line\"><span class=\"comment\">//  Ave: 100000 </span></span><br><span class=\"line\"><span class=\"comment\">//  Max: 100656\t(0.66%) </span></span><br><span class=\"line\"><span class=\"comment\">//  Min: 99188\t(0.81%)</span></span><br></pre></td></tr></table></figure>\n<p>均匀分布后，就需要考虑另一个显著的问题，例如在分布式场景中，有服务器节点掉线或增加节点后，哈希分布就会重新变化，原有的节点映射将发生变化，这是因为普通哈希算法依赖于节点的数量（<code>node</code>），当节点数量变化后，数据项也将发生变化。</p>\n<p><a href=\"https://github.com/younglifestyle/hash_test/blob/master/%E6%99%AE%E9%80%9A%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0%E4%B9%8B%E8%8A%82%E7%82%B9%E5%8F%98%E5%8C%96.go\" target=\"_blank\" rel=\"noopener\">代码</a>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tchange := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; ITEMS; i++ &#123;</span><br><span class=\"line\">\t\tmd5Byte := MD5(strconv.Itoa(i))</span><br><span class=\"line\">\t\tvalue := genValue(md5Byte[<span class=\"number\">6</span>:<span class=\"number\">10</span>])</span><br><span class=\"line\">\t\t<span class=\"comment\">// 原映射结果</span></span><br><span class=\"line\">\t\tn := value % NODES</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//现映射结果</span></span><br><span class=\"line\">\t\tnNew := value % NEW_NODES</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> n != nNew &#123;</span><br><span class=\"line\">\t\t\tchange += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"keyword\">float64</span>(change) / <span class=\"keyword\">float64</span>(ITEMS))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 0.9799679</span></span><br></pre></td></tr></table></figure>\n<p>结果上可以看出，变化率极高，在分布式场景中，这显然是不适用的。</p>\n<h2><span id=\"一致性哈希\">一致性哈希</span></h2>\n<blockquote>\n<p>维基百科：</p>\n</blockquote>\n<p><strong>需求</strong></p>\n<blockquote>\n<p>在使用n台缓存服务器时，一种常用的负载均衡方式是，对资源o的请求使用hash(o)=o mod n来映射到某一台缓存服务器。当增加或减少一台缓存服务器时这种方式可能会改变所有资源对应的hash值，也就是所有的缓存都失效了，这会使得缓存服务器大量集中地向原始内容服务器更新缓存。因此需要一致哈希算法来避免这样的问题。<br>\n一致哈希尽可能使同一个资源映射到同一台缓存服务器。这种方式要求增加一台缓存服务器时，新的服务器尽量分担存储其他所有服务器的缓存资源。减少一台缓存服务器时，其他所有服务器也可以尽量分担存储它的缓存资源。 一致哈希算法的主要思想是将每个缓存服务器与一个或多个哈希值域区间关联起来，其中区间边界通过计算缓存服务器对应的哈希值来决定。（定义区间的哈希函数不一定和计算缓存服务器哈希值的函数相同，但是两个函数的返回值的范围需要匹配。）如果一个缓存服务器被移除，则它所对应的区间会被并入到邻近的区间，其他的缓存服务器不需要任何改变。</p>\n</blockquote>\n<p>一致性哈希算法解决的痛点，就是当node数发生变化时，尽可能减少数据迁移，减少数据变动。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">具体原理：</span><br><span class=\"line\">先构造一个长度为2^32的整数环（这个环被称为一致性Hash环），根据节点名称的Hash值（其分布为[0, 2^32-1]）将服务器节点放置在这个Hash环上，然后根据数据的Key值计算得到其Hash值（其分布也为[0, 2^32-1]），接着在Hash环上顺时针查找距离这个Key值的Hash值最近的服务器节点，完成Key到服务器的映射查找。</span><br></pre></td></tr></table></figure>\n<p><strong>实现</strong></p>\n<blockquote>\n<p>一致哈希将每个对象映射到圆环边上的一个点，系统再将可用的节点机器映射到圆环的不同位置。</p>\n<p>查找某个对象对应的机器时，需要用一致哈希算法计算得到对象对应圆环边上位置，沿着圆环边上查找直到遇到某个节点机器，这台机器即为对象应该保存的位置。</p>\n<p>当删除一台节点机器时，这台机器上保存的所有对象都要移动到下一台机器。添加一台机器到圆环边上某个点时，这个点的下一台机器需要将这个节点前对应的对象移动到新机器上。</p>\n<p>更改对象在节点机器上的分布可以通过调整节点机器的位置来实现。</p>\n</blockquote>\n<p>服务器三个节点：node 1~3，四个数据，a、b、c、d。<br>\n将服务器节点经过哈希计算后，写入哈希环中。数据在决定被写入服务器时，由数据经过哈希计算后，其与服务器节点的值经过比较（<code>找到第一个大于其哈希值的服务器节点</code>），得到其哈希值就可以将哈希值发送给该服务器节点。<br>\n若该服务器节点失效，则需要再向下遍历出一个大于数据哈希值的节点，将数据重新发送给该服务器节点即可，而其他服务器节点数据不受影响，也就摆脱了第一种普通哈希算法对服务器节点<code>node</code>的依赖。</p>\n<p><img src=\"hash-3.png\" alt=\"hash\"></p>\n<p>直接上<a href=\"https://github.com/younglifestyle/hash_test/blob/master/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C_%E4%B8%8D%E5%B8%A6%E8%99%9A%E6%8B%9F%E8%8A%82%E7%82%B9.go\" target=\"_blank\" rel=\"noopener\">代码</a>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\thashMap := New(<span class=\"literal\">nil</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tnodes := <span class=\"built_in\">make</span>(UInt32Slice, NODES)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; NODES; i++ &#123;</span><br><span class=\"line\">\t\thashMap.Add(strconv.Itoa(i))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; ITEMS; i++ &#123;</span><br><span class=\"line\">\t\tkey := hashMap.Get(strconv.Itoa(i))</span><br><span class=\"line\">\t\tinter, _ := strconv.Atoi(key)</span><br><span class=\"line\">\t\tnodes[inter] += <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsort.Sort(nodes)</span><br><span class=\"line\"></span><br><span class=\"line\">\tave := <span class=\"keyword\">uint32</span>(ITEMS / NODES)</span><br><span class=\"line\">\tMax := nodes[<span class=\"built_in\">len</span>(nodes)<span class=\"number\">-1</span>]</span><br><span class=\"line\">\tMin := nodes[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"Ave: %d \\n\"</span>, ave)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"Max: %d\\t(%0.2f%%) \\n\"</span>, Max,</span><br><span class=\"line\">\t\t<span class=\"keyword\">float64</span>(Max-ave)*<span class=\"number\">100.0</span>/<span class=\"keyword\">float64</span>(ave))</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"Min: %d\\t(%0.2f%%) \\n\"</span>, Min,</span><br><span class=\"line\">\t\t<span class=\"keyword\">float64</span>(ave-Min)*<span class=\"number\">100.0</span>/<span class=\"keyword\">float64</span>(ave))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Ave: 100000 </span></span><br><span class=\"line\"><span class=\"comment\">// Max: 497263\t(397.26%) </span></span><br><span class=\"line\"><span class=\"comment\">// Min: 781\t(99.22%)</span></span><br></pre></td></tr></table></figure>\n<p>可以看到实际结果和理论上需要达到的效果有所不同，甚至区别相差很大，<strong>数据本身的hash值未发生变化，但服务器节点本身就在环上分布不均匀，导致了每个节点实际占据环上的区间大小就不一样</strong> ，这种情况下，会出现某一节点可能有着巨大的负载。</p>\n<p><img src=\"8c9e6caa-3a5f-11e6-87ad-fdb462b76aef.png\" alt=\"consist_hash_1\"></p>\n<p>该现象被称作<code>Hash环</code>倾斜问题，于是针对这个问题引出了下一个概念。</p>\n<h2><span id=\"虚拟节点\">虚拟节点</span></h2>\n<p>针对上述的问题，由于服务器节点分布不均匀，导致数据分布不均匀。而节点分布不均，可以看做是环上节点填充不够充分。当我们将环都填充满时，近似的可以看做这样的分布式均匀的，数据可以均匀的分布在每一个节点上。</p>\n<p>根据这个想法，引入虚拟节点的操作。那么我们可以以现有节点为基数来增加虚节点，对每一个节点进行扩充。这样就既保证了在节点变化时，尽可能小的影响数据分布的变化，而同时又保证了数据分布的均匀。也就是靠增加“节点数量”加强管辖区间的均匀。</p>\n<p><img src=\"hash-model.png\" alt=\"hash-model\"></p>\n<p>通过<a href=\"https://github.com/younglifestyle/hash_test/blob/master/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C_%E5%B8%A6%E8%99%9A%E6%8B%9F%E8%8A%82%E7%82%B9_crc32.go\" target=\"_blank\" rel=\"noopener\">代码</a>可以实际看到结果，均匀度相较于之前提升了不少。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ave: 100000 </span><br><span class=\"line\">Max: 156298\t(56.30%) </span><br><span class=\"line\">Min: 9109\t(90.89%)</span><br></pre></td></tr></table></figure>\n<h2><span id=\"哈希的优化\">哈希的优化</span></h2>\n<p>这个优化不是我做的，我是直接使用别人的结果，做了后期的验证，在文章<a href=\"https://n4mine.github.io/post/optimize-falcon-graph/\" target=\"_blank\" rel=\"noopener\">Falcon存储做过的那些优化</a>，博主在使用原仓库的哈希函数进行部署falcon，但实际使用中还是出现了流量不均的问题，于是对哈希的各类算法实际表现进行了评估，得出了在哈希函数算法的速度与均匀性上，各类算法的差距是明显的，我在之后的实际验证中也验证了博主的观点，所以在看到文章后，我是直接对falcon这出位置进行了改造（falcon仓库现在还是使用的<code>crc32</code>）。</p>\n<p><a href=\"https://github.com/younglifestyle/hash_test/blob/master/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C_%E5%B8%A6%E8%99%9A%E6%8B%9F%E8%8A%82%E7%82%B9_md5.go\" target=\"_blank\" rel=\"noopener\">例如</a>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MD5 哈希：</span><br><span class=\"line\">Ave: 100000 </span><br><span class=\"line\">Max: 124240\t(24.24%) </span><br><span class=\"line\">Min: 11585\t(88.42%) </span><br><span class=\"line\"></span><br><span class=\"line\">CRC32 ：</span><br><span class=\"line\">Ave: 100000 </span><br><span class=\"line\">Max: 156298\t(56.30%) </span><br><span class=\"line\">Min: 9109\t(90.89%)</span><br></pre></td></tr></table></figure>\n<p>对比的结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">murmur32 &gt; fnv1 &gt; fnv1a &gt; xxHash &gt; crc32</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考：</p>\n<p>维基百科的解释：<a href=\"https://zh.wikipedia.org/wiki/%E4%B8%80%E8%87%B4%E5%93%88%E5%B8%8C\" target=\"_blank\" rel=\"noopener\">一致哈希</a></p>\n<p><a href=\"http://vitoliu.top/2018/03/14/%E4%B8%80%E8%87%B4%E6%80%A7hash/\" target=\"_blank\" rel=\"noopener\">分布式系统下一致性hash的作用及实现原理</a></p>\n<p><a href=\"https://yikun.github.io/2016/06/09/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E5%AE%9E%E8%B7%B5/\" target=\"_blank\" rel=\"noopener\">一致性哈希算法的理解与实践</a></p>\n<p><a href=\"https://github.com/g4zhuj/hashring\" target=\"_blank\" rel=\"noopener\">一致性哈希Go实现代码</a>和falcon使用的<a href=\"https://github.com/toolkits/consistent\" target=\"_blank\" rel=\"noopener\">代码</a></p>\n</blockquote>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"http://fja0kl.github.io/2019/06/22/LeetCode-1-Two-Sum/\">[LeetCode]1. Two Sum</a></li></ul></div>","categories":[{"name":"分布式服务","slug":"分布式服务","permalink":"chunlife.top/categories/分布式服务/"}],"tags":[{"name":"一致性","slug":"一致性","permalink":"chunlife.top/tags/一致性/"},{"name":"hash","slug":"hash","permalink":"chunlife.top/tags/hash/"}]},{"title":"小工具CSDN自动点击插件和GitHub在线代码阅读","date":"2019-06-28T02:59:17.000Z","path":"2019/06/28/小工具CSDN自动点击插件和GitHub在线代码阅读/","content":"<p><a href=\"https://github.com/silenceshell/csdn-auto-readmore\" target=\"_blank\" rel=\"noopener\">csdn-auto-readmore</a></p>\n<p><a href=\"https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc\" target=\"_blank\" rel=\"noopener\">Octotree</a></p>\n","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"工具","slug":"工具","permalink":"chunlife.top/tags/工具/"}]},{"title":"根据业务改造ops-update——添加跳板机","date":"2019-06-27T07:30:58.000Z","path":"2019/06/27/根据业务改造ops-update/","content":"<p>首先，这里面包含两个模块<a href=\"https://github.com/Cepave/ops-meta\" target=\"_blank\" rel=\"noopener\">meta</a>，<a href=\"https://github.com/open-falcon/ops-updater\" target=\"_blank\" rel=\"noopener\">updater</a>。</p>\n<p>meta负责接收<code>updater</code>上传上来的设备软件运行信息，以及下发运行软件的地址等相关参数；</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;name&quot;: &quot;falcon-agent&quot;,</span><br><span class=\"line\">        &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">        &quot;tarball&quot;: &quot;http://11.11.11.11:8888/falcon&quot;,</span><br><span class=\"line\">        &quot;md5&quot;: &quot;http://11.11.11.11:8888/falcon&quot;,</span><br><span class=\"line\">        &quot;cmd&quot;: &quot;start&quot;    // 运行参数</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;name&quot;: &quot;dinp-agent&quot;,</span><br><span class=\"line\">        &quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class=\"line\">        &quot;tarball&quot;: &quot;http://11.11.11.11:8888/dinp&quot;,</span><br><span class=\"line\">        &quot;md5&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;cmd&quot;: &quot;stop&quot; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><code>updater</code>则被用来下载软件，以及上报软件运行状态信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;name&quot;: &quot;falcon-agent&quot;,</span><br><span class=\"line\">        &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">        &quot;status&quot;: &quot;started&quot; </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;name&quot;: &quot;dinp-agent&quot;,</span><br><span class=\"line\">        &quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class=\"line\">        &quot;status&quot;: &quot;stoped&quot; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2><span id=\"流程简述\">流程简述</span></h2>\n<p>两个模块都比较简单，不过也是由于简单它们也就被我看上了，在我的项目中，<code>meta</code>是需要和服务器通信的，但服务器不需要<code>meta</code>将数据发送给服务器进行保存（可以指定其监听相应的<code>hostname</code>），<code>updater</code>基本是4min向<code>meta</code>心跳一次。</p>\n<p><img src=\"1561624471274.png\" alt=\"信息流动\"></p>\n<p>服务器在得到更新或添加软件的信后，主动向<code>meta</code>下发下载软件的地址指令，<code>meta</code>附加上用户信息、PC信息等其他信息进行下载请求（这里可以交由其他模块进行下载操作，下载完成后通知到<code>meta</code>模块即可）。</p>\n<h2><span id=\"新增功能\">新增功能</span></h2>\n<h3><span id=\"bash指令控制\">bash指令控制</span></h3>\n<p>下发的指令多添加一些bash指令，主要是为了给出一些自定义的操作，对于这个操作一般也只会针对一两个设备先进行测试，测试没发现问题后，再逐步将这些指令更新入<code>control</code>文件，当然，这是长期的过程。</p>\n<p>防止<code>cmd</code>出问题，协程无法退出的问题，当然也是可以利用<code>contorl</code>文件中的方法的，利用linux命令来kill掉这个卡住的命令。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   ctx, cancelFunc := context.WithCancel(context.TODO())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;  <span class=\"comment\">// 会阻塞，开个协程</span></span><br><span class=\"line\">    \t</span><br><span class=\"line\">       cmd := exec.CommandContext(ctx, <span class=\"string\">`sh`</span>, <span class=\"string\">\"-c\"</span>, <span class=\"string\">\"sleep 2;echo hello;\"</span>)</span><br><span class=\"line\">       <span class=\"comment\">// 执行任务, 捕获输出</span></span><br><span class=\"line\">       output, err := cmd.CombinedOutput()  </span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"keyword\">chan</span> &lt;- output  <span class=\"comment\">// 抛出结果</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// select等待时间，等不到就调用cancelFunc\t</span></span><br><span class=\"line\"><span class=\"comment\">// 取消上下文</span></span><br><span class=\"line\">cancelFunc()</span><br></pre></td></tr></table></figure>\n<h3><span id=\"跳板机的操作\">跳板机的操作</span></h3>\n<p>在实际的应用中，设备都处于内网环境下，当我们需要对设备进行操作时，就需要跳板机了，这里不需要太过于复杂的跳板机操作，不过这里需要对接自家的后台用户的验证，刚好网上有一些简单的跳板机server，这里的实现，多是参考网上代码。</p>\n<p>跳板机不仅仅是需要使用到密码进行验证，这里，拉出一个动态验证密码（手机、邮箱、站内信），设定一个超时时间。</p>\n<p>可以通过<code>control</code>脚本来控制跳板机服务的起停，跳板机的状态和重启操作这里是直接塞给了<code>meta</code>，毕竟算起来，没有违背<code>meta</code>设计简单的初衷。</p>\n<blockquote>\n<p>参考：<a href=\"https://blog.yumaojun.net/2017/02/23/go-ssh-server/\" target=\"_blank\" rel=\"noopener\">https://blog.yumaojun.net/2017/02/23/go-ssh-server/</a>   服务端</p>\n<p>参考：<a href=\"https://mritd.me/2018/11/09/go-interactive-shell/\" target=\"_blank\" rel=\"noopener\">https://mritd.me/2018/11/09/go-interactive-shell/</a>   客户端</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"encoding/binary\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"io\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"net\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os/exec\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"sync\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"syscall\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"unsafe\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/kr/pty\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"golang.org/x/crypto/ssh\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// In the latest version of crypto/ssh (after Go 1.3), the SSH server type has been removed</span></span><br><span class=\"line\">\t<span class=\"comment\">// in favour of an SSH connection type. A ssh.ServerConn is created by passing an existing</span></span><br><span class=\"line\">\t<span class=\"comment\">// net.Conn and a ssh.ServerConfig to ssh.NewServerConn, in effect, upgrading the net.Conn</span></span><br><span class=\"line\">\t<span class=\"comment\">// into an ssh.ServerConn</span></span><br><span class=\"line\">\tconfig := &amp;ssh.ServerConfig&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//Define a function to run when a client attempts a password login</span></span><br><span class=\"line\">\t\tPasswordCallback: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c ssh.ConnMetadata, pass []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(*ssh.Permissions, error)</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Should use constant-time compare (or better, salt+hash) in a production setting.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> c.User() == <span class=\"string\">\"foo\"</span> &amp;&amp; <span class=\"keyword\">string</span>(pass) == <span class=\"string\">\"bar\"</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">\"password rejected for %q\"</span>, c.User())</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// You may also explicitly allow anonymous client authentication, though anon bash</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// sessions may not be a wise idea</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// NoClientAuth: true,</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// You can generate a keypair with 'ssh-keygen -t rsa'</span></span><br><span class=\"line\">\tprivateBytes, err := ioutil.ReadFile(<span class=\"string\">\"id_rsa\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"Failed to load private key (./id_rsa)\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprivate, err := ssh.ParsePrivateKey(privateBytes)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"Failed to parse private key\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tconfig.AddHostKey(private)</span><br><span class=\"line\">\t<span class=\"comment\">// Once a ServerConfig has been configured, connections can be accepted.</span></span><br><span class=\"line\">\tlistener, err := net.Listen(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\"0.0.0.0:2200\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(<span class=\"string\">\"Failed to listen on 2200 (%s)\"</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// Accept all connections</span></span><br><span class=\"line\">\tlog.Print(<span class=\"string\">\"Listening on 2200...\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\ttcpConn, err := listener.Accept()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Printf(<span class=\"string\">\"Failed to accept incoming connection (%s)\"</span>, err)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Before use, a handshake must be performed on the incoming net.Conn.</span></span><br><span class=\"line\">\t\tsshConn, chans, reqs, err := ssh.NewServerConn(tcpConn, config)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Printf(<span class=\"string\">\"Failed to handshake (%s)\"</span>, err)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">\"New SSH connection from %s (%s)\"</span>, sshConn.RemoteAddr(), sshConn.ClientVersion())</span><br><span class=\"line\">\t\t<span class=\"comment\">// Discard all global out-of-band Requests</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> ssh.DiscardRequests(reqs)</span><br><span class=\"line\">\t\t<span class=\"comment\">// Accept all channels</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> handleChannels(chans)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleChannels</span><span class=\"params\">(chans &lt;-<span class=\"keyword\">chan</span> ssh.NewChannel)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Service the incoming Channel channel in go routine</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> newChannel := <span class=\"keyword\">range</span> chans &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> handleChannel(newChannel)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleChannel</span><span class=\"params\">(newChannel ssh.NewChannel)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Since we're handling a shell, we expect a</span></span><br><span class=\"line\">\t<span class=\"comment\">// channel type of \"session\". The also describes</span></span><br><span class=\"line\">\t<span class=\"comment\">// \"x11\", \"direct-tcpip\" and \"forwarded-tcpip\"</span></span><br><span class=\"line\">\t<span class=\"comment\">// channel types.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> t := newChannel.ChannelType(); t != <span class=\"string\">\"session\"</span> &#123;</span><br><span class=\"line\">\t\tnewChannel.Reject(ssh.UnknownChannelType, fmt.Sprintf(<span class=\"string\">\"unknown channel type: %s\"</span>, t))</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// At this point, we have the opportunity to reject the client's</span></span><br><span class=\"line\">\t<span class=\"comment\">// request for another logical connection</span></span><br><span class=\"line\">\tconnection, requests, err := newChannel.Accept()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">\"Could not accept channel (%s)\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// Fire up bash for this session</span></span><br><span class=\"line\">\tbash := exec.Command(<span class=\"string\">\"bash\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// Prepare teardown function</span></span><br><span class=\"line\">\t<span class=\"built_in\">close</span> := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tconnection.Close()</span><br><span class=\"line\">\t\t_, err := bash.Process.Wait()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Printf(<span class=\"string\">\"Failed to exit bash (%s)\"</span>, err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">\"Session closed\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// Allocate a terminal for this channel</span></span><br><span class=\"line\">\tlog.Print(<span class=\"string\">\"Creating pty...\"</span>)</span><br><span class=\"line\">\tbashf, err := pty.Start(bash)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">\"Could not start pty (%s)\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"built_in\">close</span>()</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//pipe session to bash and visa-versa</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> once sync.Once</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tio.Copy(connection, bashf)</span><br><span class=\"line\">\t\tonce.Do(<span class=\"built_in\">close</span>)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tio.Copy(bashf, connection)</span><br><span class=\"line\">\t\tonce.Do(<span class=\"built_in\">close</span>)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"comment\">// Sessions have out-of-band requests such as \"shell\", \"pty-req\" and \"env\"</span></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> req := <span class=\"keyword\">range</span> requests &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span> req.Type &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"shell\"</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// We only accept the default shell</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// (i.e. no command in the Payload)</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(req.Payload) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t\treq.Reply(<span class=\"literal\">true</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"pty-req\"</span>:</span><br><span class=\"line\">\t\t\t\ttermLen := req.Payload[<span class=\"number\">3</span>]</span><br><span class=\"line\">\t\t\t\tw, h := parseDims(req.Payload[termLen+<span class=\"number\">4</span>:])</span><br><span class=\"line\">\t\t\t\tSetWinsize(bashf.Fd(), w, h)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// Responding true (OK) here will let the client</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// know we have a pty ready for input</span></span><br><span class=\"line\">\t\t\t\treq.Reply(<span class=\"literal\">true</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"window-change\"</span>:</span><br><span class=\"line\">\t\t\t\tw, h := parseDims(req.Payload)</span><br><span class=\"line\">\t\t\t\tSetWinsize(bashf.Fd(), w, h)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// parseDims extracts terminal dimensions (width x height) from the provided buffer.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">parseDims</span><span class=\"params\">(b []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(<span class=\"keyword\">uint32</span>, <span class=\"keyword\">uint32</span>)</span></span> &#123;</span><br><span class=\"line\">\tw := binary.BigEndian.Uint32(b)</span><br><span class=\"line\">\th := binary.BigEndian.Uint32(b[<span class=\"number\">4</span>:])</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> w, h</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Winsize stores the Height and Width of a terminal.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Winsize <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tHeight <span class=\"keyword\">uint16</span></span><br><span class=\"line\">\tWidth  <span class=\"keyword\">uint16</span></span><br><span class=\"line\">\tx      <span class=\"keyword\">uint16</span> <span class=\"comment\">// unused</span></span><br><span class=\"line\">\ty      <span class=\"keyword\">uint16</span> <span class=\"comment\">// unused</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// SetWinsize sets the size of the given pty.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SetWinsize</span><span class=\"params\">(fd <span class=\"keyword\">uintptr</span>, w, h <span class=\"keyword\">uint32</span>)</span></span> &#123;</span><br><span class=\"line\">\tws := &amp;Winsize&#123;Width: <span class=\"keyword\">uint16</span>(w), Height: <span class=\"keyword\">uint16</span>(h)&#125;</span><br><span class=\"line\">\tsyscall.Syscall(syscall.SYS_IOCTL, fd, <span class=\"keyword\">uintptr</span>(syscall.TIOCSWINSZ), <span class=\"keyword\">uintptr</span>(unsafe.Pointer(ws)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"ops-updater","slug":"ops-updater","permalink":"chunlife.top/tags/ops-updater/"}]},{"title":"中小型公司如何保存密码？","date":"2019-06-24T03:07:41.000Z","path":"2019/06/24/中小型公司如何保存密码？/","content":"<p>一般的，我们在后端保存密码时，不会使用明文进行保存，明文保存意味着数据库被爆的损失将直线型上升，例如<code>CSDN</code>密码泄露事件，常见的方式是加盐操作，所谓的盐（salt）是一个随机数，算法演示入：<code>MD5（MD5（P） + salt）</code>、<code>SHA1（MD5（P） + salt）</code>或<code>MD5（P + salt）</code>等。</p>\n<a id=\"more\"></a>\n<h2><span id=\"分析\">分析</span></h2>\n<p>但这种方式到如今，基本上都说是不安全的加密方式，这让我在使用的过程中，不免出现一些担心，这需要进行更换加密方式么，它为什么不安全呢？</p>\n<p>在上述操作后，服务器保存的是<code>H = MD5（MD5（P） + salt）</code>中的<code>H</code>，这样会避免即使服务器因为某些原因，数据库泄露导致实际密码被泄露，这里也就是利用了哈希函数运算不可逆的特性。</p>\n<p><img src=\"1561347903109.png\" alt=\"1561347903109\"></p>\n<p>但存在暴力破解的可能性，因为用户保存密码的方式是有迹可循的，例如生日，数字简单循环密码（<code>123456</code>），简单英文密码（<code>qwert</code>），事实上也确实存在这样一张常见密码的表，攻击者若还能拿到盐<code>salt</code>，就可以尝试各种哈希来得到这样的一张密码对照表。过程相对简短，但其中有两个难点，第一：如何拿到盐？第二：确定哈希函数。</p>\n<p>在实际的操作中，方法总比困难多，例如，随机盐的存储一般是和用户信息一起放在数据库中的，那也就以为着，爆破掉数据库，就有可能把盐给一锅端，但同时攻击者需要做的是，每一个盐所产生的对应表并不能套到其他盐的身上，需要根据每个盐都来进行计算。</p>\n<p>这时候就有另一种方案提出，加<code>固定盐</code>，这也就意味着，盐是唯一的，被生成在代码中，并不会随着暴库被偷走，但这时有另外一个问题，那就是：<br>\n攻击者已经攻破我们的系统进入到内部，也就意味他不进能偷走我们的数据库；<br>\n也意味着他能够获取到我们的软件运行文件；<br>\n那也就是意味着，若是攻击者对我们的软件进行分析，找到我们的密码验证的函数；<br>\n然后一顿分析，是有可能拿出我们的<code>盐</code>的，那攻击者只需要得出一套密码对照表，就能完全对应我们所有的密码信息。</p>\n<h2><span id=\"更进一步\">更进一步</span></h2>\n<p>在需要更强的密码存储中，我所了解到的，一般会推荐<code>PBKDF2</code>和<code>bcrypt</code>之类似的算法，不过这类算法，运行成本对于攻击者来说，是比较高的，没有足够的利益，是不会激起他们的兴趣的，但相对的，对于我们的运算成本也增加了，算是以时间成本来换取安全的方式。</p>\n<p>还有就是既然是为了增加攻击者破解的难度，那就多使用哈希函数反复计算，这个其实和上述的算法类似。</p>\n<h2><span id=\"我的理解\">我的理解</span></h2>\n<p>在各种加密方式中，我在选择中，我会选择MD5（SHA1）加随机盐的方式来保存我的后端密码，对于这样的保存方式，在应对中小型网站的存储密码需要中，我觉得是足够了，足以保证数据的相对安全，同时其计算成本也足以保证我的用户密码的安全性，若是测试部门等有关部门对我的选择报以怀疑，这时，我会加上提醒用户不使用类似<code>123456</code>、<code>qwerty</code>等简单密码，且帮助（强制）用户使用字母、数字等混合密码来保证密码的安全性。</p>\n<p>在实际的密码存储中，我记起一句话，抛开业务来谈技术都是耍流氓，不是银行，淘宝等场景下，非得弄个<code>绝对防御</code>，结果保护的也就是些name，发言等一些无关痛痒的数据，这就有点高射炮打蚊子了。所以在这种情况下，MD5（SHA1）加随机盐的方式造成的破解难度，以及网站数据的价值，已经让绝大多数的攻击者难以提起兴趣攻击我们的网站（毕竟人都是要恰饭的嘛）。</p>\n<hr>\n<blockquote>\n<p>参考： <a href=\"http://blog.sina.com.cn/s/blog_77e8d1350100wfc7.html\" target=\"_blank\" rel=\"noopener\">没知识真可怕——应用密码学的笑话之MD5+Salt不安全</a></p>\n</blockquote>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"www.chunlife.top/2019/06/24/中小型公司如何保存密码？/\">中小型公司如何保存密码？</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"MD5","slug":"MD5","permalink":"chunlife.top/tags/MD5/"},{"name":"salt","slug":"salt","permalink":"chunlife.top/tags/salt/"},{"name":"加盐","slug":"加盐","permalink":"chunlife.top/tags/加盐/"}]},{"title":"go实现stack","date":"2019-06-23T14:03:53.000Z","path":"2019/06/23/go实现stack/","content":"<p>堆栈（英语：stack）又称为栈或堆叠，是计算机科学中的一种抽象数据类型，只允许在有序的线性数据集合的一端（称为堆栈顶端，英语：top）进行加入数据（英语：push）和移除数据（英语：pop）的运算。因而按照<strong>后进先出</strong>（LIFO, Last In First Out）的原理运作。</p>\n<a id=\"more\"></a>\n<p>常与另一种有序的线性数据集合队列相提并论。</p>\n<p>堆栈常用一维数组或链表来实现。</p>\n<h2><span id=\"栈\">栈</span></h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Stack <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tPush(i <span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tPop() (i <span class=\"keyword\">int</span>, err error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> stack <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tslice []<span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *stack)</span> <span class=\"title\">Push</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\ts.slice = <span class=\"built_in\">append</span>(s.slice, i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *stack)</span> <span class=\"title\">Pop</span><span class=\"params\">()</span> <span class=\"params\">(i <span class=\"keyword\">int</span>, err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(s.slice) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> i, errors.New(<span class=\"string\">\"no int in stack\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ti = s.slice[<span class=\"built_in\">len</span>(s.slice)<span class=\"number\">-1</span>]</span><br><span class=\"line\">\ts.slice = s.slice[:<span class=\"built_in\">len</span>(s.slice)<span class=\"number\">-1</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"栈模拟队列\">栈模拟队列</span></h2>\n<p>队列是<code>fifo</code>结构，先进先出，栈是后进先出，若是用栈模拟队列该如何实现呢，这就需要使用到两个栈，一个存，一个取，类似于左手倒右手的操作来实现<code>先进先出</code>的特性。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Queue <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 将 i 添加到 队尾</span></span><br><span class=\"line\">\tAdd(i <span class=\"keyword\">int</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 返回队首的i, 如果队空，则返回error</span></span><br><span class=\"line\">\tRemove() (i <span class=\"keyword\">int</span>, err error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Stack <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tPush(i <span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tPop() (i <span class=\"keyword\">int</span>, err error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> stack <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tslice []<span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *stack)</span> <span class=\"title\">Push</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\ts.slice = <span class=\"built_in\">append</span>(s.slice, i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *stack)</span> <span class=\"title\">Pop</span><span class=\"params\">()</span> <span class=\"params\">(i <span class=\"keyword\">int</span>, err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(s.slice) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> i, errors.New(<span class=\"string\">\"no int in stack\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ti = s.slice[<span class=\"built_in\">len</span>(s.slice)<span class=\"number\">-1</span>]</span><br><span class=\"line\">\ts.slice = s.slice[:<span class=\"built_in\">len</span>(s.slice)<span class=\"number\">-1</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 栈组成的队列</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> queueFromStack <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tfs *stack <span class=\"comment\">// 负责存的</span></span><br><span class=\"line\">\tss *stack <span class=\"comment\">// 负责取的</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewQueue</span><span class=\"params\">()</span> *<span class=\"title\">queueFromStack</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;queueFromStack&#123;</span><br><span class=\"line\">\t\tfs: <span class=\"built_in\">new</span>(stack),</span><br><span class=\"line\">\t\tss: <span class=\"built_in\">new</span>(stack),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(q *queueFromStack)</span> <span class=\"title\">Add</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tq.fs.Push(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这一步是O(n)的时间复杂度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(q *queueFromStack)</span> <span class=\"title\">Remove</span><span class=\"params\">()</span> <span class=\"params\">(ret <span class=\"keyword\">int</span>, err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tpop, _ := q.fs.Pop()</span><br><span class=\"line\">\t\t<span class=\"comment\">// 取走队尾</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(q.fs.slice) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tret = pop</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tq.ss.Push(pop)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> <span class=\"built_in\">len</span>(q.ss.slice) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tpop, _ := q.ss.Pop()</span><br><span class=\"line\">\t\tq.fs.Push(pop)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"https://jarrychen.xyz/archives/93bfc68e.html\">逆波兰表达式</a></li></ul></div>","categories":[{"name":"算法","slug":"算法","permalink":"chunlife.top/categories/算法/"}],"tags":[{"name":"stack","slug":"stack","permalink":"chunlife.top/tags/stack/"},{"name":"栈","slug":"栈","permalink":"chunlife.top/tags/栈/"}]},{"title":"go实现队列","date":"2019-06-23T08:44:05.000Z","path":"2019/06/23/go实现队列/","content":"<p>队列是什么？</p>\n<p><code>queue</code>作为一种<code>先进先出</code>（<em>FIFO</em>, First-In-First-Out）的线性表结构，在具体应用中通常用链表或者数组来实现。队列只允许在后端（称为<code>rear</code>）进行插入操作，在前端（称为<code>front</code>）进行删除操作。</p>\n<a id=\"more\"></a>\n<p>在Go语言中，使用slice模拟队列结构。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Queue <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 将 i 添加到 队尾</span></span><br><span class=\"line\">\tEnqueue(i <span class=\"keyword\">int</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 返回队首的i, 如果队空，则返回error</span></span><br><span class=\"line\">\tDequeue() (i <span class=\"keyword\">int</span>, err error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> queue <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tslice []<span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(q *queue)</span> <span class=\"title\">Enqueue</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tq.slice = <span class=\"built_in\">append</span>(q.slice, i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(q *queue)</span> <span class=\"title\">Dequeue</span><span class=\"params\">()</span> <span class=\"params\">(i <span class=\"keyword\">int</span>, err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(q.slice) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>, errors.New(<span class=\"string\">\"no int in queue\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取队首</span></span><br><span class=\"line\">\ti = q.slice[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t<span class=\"comment\">// 删除队首</span></span><br><span class=\"line\">\tq.slice = q.slice[<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(q *queue)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">\"%#v\"</span>, q.slice)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"www.chunlife.top/2019/06/23/go实现队列/\">go实现队列</a></li></ul></div>","categories":[{"name":"算法","slug":"算法","permalink":"chunlife.top/categories/算法/"}],"tags":[{"name":"queue","slug":"queue","permalink":"chunlife.top/tags/queue/"},{"name":"队列","slug":"队列","permalink":"chunlife.top/tags/队列/"}]},{"title":"转载《Go语言interface底层实现》","date":"2019-06-19T07:15:55.000Z","path":"2019/06/19/转载《Go语言interface底层实现》/","content":"<p>interface底层是怎么实现的，由于一直都是浮于水面，未去深究过，这里也是去查了些资料了解，这篇博客把<code>interface</code>结构解构的很清楚了，我觉得，博主画的那几幅图就能很好的进行理解了。</p>\n<a id=\"more\"></a>\n<h1><span id=\"简述\">简述</span></h1>\n<p><code>eface</code>的具体结构是：</p>\n<p><img src=\"eface.png\" alt=\"eface\"></p>\n<p><code>eface</code>的整体结构是：</p>\n<p><img src=\"eface_all.png\" alt=\"eface_all\"></p>\n<p><code>iface</code>的具体结构是：</p>\n<p><img src=\"iface.png\" alt=\"iface\"></p>\n<p><code>itab</code>是<code>iface</code>不同于<code>eface</code>比较关键的数据结构。其可包含两部分：一部分是确定唯一的包含方法的interface的具体结构类型，一部分是指向具体方法集的指针。<br>\n具体结构为：<br>\n<img src=\"iface_itable.png\" alt=\"iface_itable\"></p>\n<hr>\n<hr>\n<blockquote>\n<p>转载自：<a href=\"https://i6448038.github.io/2018/10/01/Golang-interface/\" target=\"_blank\" rel=\"noopener\">https://i6448038.github.io/2018/10/01/Golang-interface/</a></p>\n</blockquote>\n<h1><span id=\"概述\">概述</span></h1>\n<p>Go的interface源码在Golang源码的<code>runtime</code>目录中。<br>\nGo在不同版本之间的interface结构可能会有所不同，但是，整体的结构是不会改变的，此文章用的Go版本是1.11。</p>\n<p>Go的interface是由两种类型来实现的：<code>iface</code>和<code>eface</code>。<br>\n其中，<code>iface</code>表示的是包含方法的interface，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Person interface &#123;</span><br><span class=\"line\">\tPrint()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而<code>eface</code>代表的是不包含方法的interface，即</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Person interface &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person interface&#123;&#125; = xxxx实体</span><br></pre></td></tr></table></figure>\n<h1><span id=\"eface\"><code>eface</code></span></h1>\n<p><code>eface</code>的具体结构是：<br>\n<img src=\"eface.png\" alt=\"eface\"></p>\n<p>一共有两个属性构成，一个是类型信息<code>_type</code>，一个是数据信息。<br>\n其中，<code>_type</code>可以认为是Go语言中所有类型的公共描述，Go语言中几乎所有的数据结构都可以抽象成<code>_type</code>，是所有类型的表现，可以说是万能类型，<br>\n<code>data</code>是指向具体数据的指针。</p>\n<p><code>type</code>的具体代码为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type _type struct &#123;</span><br><span class=\"line\">\tsize       uintptr </span><br><span class=\"line\">\tptrdata    uintptr // size of memory prefix holding all pointers</span><br><span class=\"line\">\thash       uint32</span><br><span class=\"line\">\ttflag      tflag</span><br><span class=\"line\">\talign      uint8</span><br><span class=\"line\">\tfieldalign uint8</span><br><span class=\"line\">\tkind       uint8</span><br><span class=\"line\">\talg        *typeAlg</span><br><span class=\"line\">\t// gcdata stores the GC type data for the garbage collector.</span><br><span class=\"line\">\t// If the KindGCProg bit is set in kind, gcdata is a GC program.</span><br><span class=\"line\">\t// Otherwise it is a ptrmask bitmap. See mbitmap.go for details.</span><br><span class=\"line\">\tgcdata    *byte</span><br><span class=\"line\">\tstr       nameOff</span><br><span class=\"line\">\tptrToThis typeOff</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>eface</code>的整体结构是：<br>\n<img src=\"eface_all.png\" alt=\"eface_all\"><br>\n对于没有方法的interface赋值后的内部结构是怎样的呢？<br>\n可以先看段代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;strconv&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type Binary uint64</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tb := Binary(200)</span><br><span class=\"line\">\tany := (interface&#123;&#125;)(b)</span><br><span class=\"line\">\tfmt.Println(any)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出200，赋值后的结构图是这样的：<br>\n<img src=\"eface_fuzhi.png\" alt=\"eface_fuzhi\"></p>\n<p>对于将不同类型转化成<code>type</code>万能结构的方法，是运行时的<code>convT2E</code>方法，在<code>runtime</code>包中。<br>\n以上，是对于没有方法的接口说明。<br>\n对于包含方法的函数，用到的是另外的一种结构，叫<code>iface</code></p>\n<h1><span id=\"iface\"><code>iface</code></span></h1>\n<p>所有包含方法的接口，都会使用<code>iface</code>结构。包含方法的接口就是一下这种最常见，最普通的接口：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Person interface &#123;</span><br><span class=\"line\">\tPrint()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>iface</code>的源代码是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type iface struct &#123;</span><br><span class=\"line\">\ttab  *itab</span><br><span class=\"line\">\tdata unsafe.Pointer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>iface</code>的具体结构是：</p>\n<p><img src=\"iface.png\" alt=\"iface\"></p>\n<p><code>itab</code>是<code>iface</code>不同于<code>eface</code>比较关键的数据结构。其可包含两部分：一部分是确定唯一的包含方法的interface的具体结构类型，一部分是指向具体方法集的指针。<br>\n具体结构为：<br>\n<img src=\"iface_itable.png\" alt=\"iface_itable\"><br>\n属性 <code>itab</code>的源代码是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type itab struct &#123;</span><br><span class=\"line\">\tinter *interfacetype //此属性用于定位到具体interface</span><br><span class=\"line\">\t_type *_type //此属性用于定位到具体interface</span><br><span class=\"line\">\thash  uint32 // copy of _type.hash. Used for type switches.</span><br><span class=\"line\">\t_     [4]byte</span><br><span class=\"line\">\tfun   [1]uintptr // variable sized. fun[0]==0 means _type does not implement inter.</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>属性<code>interfacetype</code>类似于<code>_type</code>，其作用就是interface的公共描述，类似的还有<code>maptype</code>、<code>arraytype</code>、<code>chantype</code>…其都是各个结构的公共描述，可以理解为一种外在的表现信息。<code>interfacetype</code>源码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type interfacetype struct &#123;</span><br><span class=\"line\">\ttyp     _type</span><br><span class=\"line\">\tpkgpath name</span><br><span class=\"line\">\tmhdr    []imethod</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">type imethod struct &#123;</span><br><span class=\"line\">\tname nameOff</span><br><span class=\"line\">\tityp typeOff</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>iface</code>的整体结构为：</p>\n<p><img src=\"iface_all.png\" alt=\"iface_all\"></p>\n<p>对于含有方法的interface赋值后的内部结构是怎样的呢？<br>\n一下代码运行后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;strconv&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type Binary uint64</span><br><span class=\"line\">func (i Binary) String() string &#123;</span><br><span class=\"line\">\treturn strconv.FormatUint(i.Get(), 10)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (i Binary) Get() uint64 &#123;</span><br><span class=\"line\">\treturn uint64(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tb := Binary(200)</span><br><span class=\"line\">\tany := fmt.Stringer(b)</span><br><span class=\"line\">\tfmt.Println(any)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先，要知道代码运行结果为:200。<br>\n其次，了解到<code>fmt.Stringer</code>是一个包含<code>String</code>方法的接口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Stringer interface &#123;</span><br><span class=\"line\">\tString() string</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，赋值后接口<code>Stringer</code>的内部结构为：<br>\n<img src=\"iface_fuzhi.png\" alt=\"iface_fuzhi\"></p>\n<p>对于将不同类型转化成itable中<code>type(Binary)</code>的方法，是运行时的<code>convT2I</code>方法，在<code>runtime</code>包中。</p>\n<p>参考文献：<br>\n《Go in action》<br>\n<a href=\"https://research.swtch.com/interfaces\" target=\"_blank\" rel=\"noopener\">https://research.swtch.com/interfaces</a><br>\n<a href=\"https://juejin.im/entry/5a7d08d3f265da4e865a6200\" target=\"_blank\" rel=\"noopener\">https://juejin.im/entry/5a7d08d3f265da4e865a6200</a></p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"interface","slug":"interface","permalink":"chunlife.top/tags/interface/"}]},{"title":"转载《解剖Go语言map底层实现》","date":"2019-06-19T06:28:08.000Z","path":"2019/06/19/转载《解剖Go语言map底层实现》/","content":"<blockquote>\n<p>转载自：<a href=\"https://i6448038.github.io/2018/08/26/map-secret/\" target=\"_blank\" rel=\"noopener\">https://i6448038.github.io/2018/08/26/map-secret/</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<h1><span id=\"附在文章开头\">附在文章开头</span></h1>\n<p>这篇博客对<code>map</code>底层解释的很详尽，在之前我也只是了解<code>map</code>、字典这类结构底层是散列表，但并不清楚其内部实现的机理，这篇博客算是让我对其底层有更多的了解了。</p>\n<p>另外，在Go的使用，或更多的在面试中，经常会被问到的一个问题是，<code>map</code>是否是有序的，若无序，则为什么无序？</p>\n<p>首先<code>map</code>数据的存储是无序的，Go <code>map</code>遍历输出是无序的，那么也就是说有一些语言的遍历输出是有序的么？</p>\n<p><code>map</code>其底层为散列表，k-v结构，分布顺序与插入顺序没什么联系，但在实际使用中，散列表在整体插入完成后，其<code>key</code>顺序是固定的，所以在以后的遍历中，访问<code>key</code>的顺序是一致的。</p>\n<p>Go官方明确告诉开发者其<code>map</code>结构遍历输出无序，那什么机制导致其无序呢，查询<a href=\"http://ju.outofmemory.cn/entry/246454\" target=\"_blank\" rel=\"noopener\">资料</a>后发现，<code>for range map </code>在开始处理循环逻辑时，<strong>Go并不是在固定位置上进行遍历，其是随机的，那也就是其起始位置都不固定，遍历顺序肯定会不固定了。</strong></p>\n<hr>\n<hr>\n<p><code>map</code>是Go语言中基础的数据结构，在日常的使用中经常被用到。但是它底层是如何实现的呢？</p>\n<h1><span id=\"map的底层\"><code>map</code>的底层</span></h1>\n<p>Golang中<code>map</code>的底层实现是一个散列表，因此实现<code>map</code>的过程实际上就是实现散表的过程。在这个散列表中，主要出现的结构体有两个，一个叫<code>hmap</code>(<code>a header for a go map</code>)，一个叫<code>bmap</code>(<code>a bucket for a Go map</code>，通常叫其<code>bucket</code>)。这两种结构的样子分别如下所示：<br>\nhmap:</p>\n<p><img src=\"hmap.png\" alt=\"img\"></p>\n<p>图中有很多字段，但是便于理解<code>map</code>的架构，你只需要关心的只有一个，就是标红的字段：buckets数组。Golang的map中用于存储的结构是bucket数组。而bucket(即<code>bmap</code>)的结构是怎样的呢？</p>\n<p>bucket：</p>\n<p><img src=\"bmap.png\" alt=\"img\"></p>\n<p>相比于<code>hmap</code>，bucket的结构显得简单一些，标红的字段依然是“核心”，我们使用的<code>map</code>中的key和value就存储在这里。“高位哈希值”数组记录的是当前bucket中key相关的“索引”，稍后会详细叙述。还有一个字段是一个指向扩容后的bucket的指针，使得bucket会形成一个链表结构。例如下图：</p>\n<p><img src=\"bmap_chain.png\" alt=\"img\"></p>\n<p>由此看出<code>hmap</code>和<code>bucket</code>的关系是这样的：</p>\n<p><img src=\"hmap_bmap.png\" alt=\"关系图\"></p>\n<p>而bucket又是一个链表，所以，整体的结构应该是这样的：</p>\n<p><img src=\"whole.png\" alt=\"结构\"></p>\n<p>哈希表的特点是会有一个哈希函数，对你传来的key进行哈希运算，得到唯一的值，一般情况下都是一个数值。Golang的<code>map</code>中也有这么一个哈希函数，也会算出唯一的值，对于这个值的使用，Golang也是很有意思。</p>\n<p>Golang把求得的值按照用途一分为二：高位和低位。</p>\n<p><img src=\"num.png\" alt=\"这里写图片描述\"></p>\n<p>如图所示，蓝色为高位，红色为低位。<br>\n然后低位用于寻找当前key属于<code>hmap</code>中的哪个bucket，而高位用于寻找bucket中的哪个key。上文中提到：bucket中有个属性字段是“高位哈希值”数组，这里存的就是蓝色的高位值，用来声明当前bucket中有哪些“key”，便于搜索查找。<br>\n需要特别指出的一点是：我们<code>map</code>中的key/value值都是存到同一个数组中的。数组中的顺序是这样的:</p>\n<p><img src=\"key_value.png\" alt=\"这里写图片描述\"></p>\n<p>并不是key0/value0/key1/value1的形式，这样做的好处是：在key和value的长度不同的时候，可以消除padding带来的空间浪费。</p>\n<p>现在，我们可以得到Go语言<code>map</code>的整个的结构图了：</p>\n<p><img src=\"all_elem.png\" alt=\"这里写图片描述\"></p>\n<h1><span id=\"map的扩容\"><code>map</code>的扩容</span></h1>\n<p>当以上的哈希表增长的时候，Go语言会将bucket数组的数量扩充一倍，产生一个新的bucket数组，并将旧数组的数据迁移至新数组。</p>\n<h2><span id=\"加载因子\">加载因子</span></h2>\n<p>判断扩充的条件，就是哈希表中的<code>加载因子</code>(即loadFactor)。</p>\n<p><code>加载因子</code>是一个阈值，一般表示为：散列包含的元素数 除以 位置总数。是一种“产生冲突机会”和“空间使用”的平衡与折中：<code>加载因子</code>越小，说明空间空置率高，空间使用率小，但是<code>加载因子</code>越大，说明空间利用率上去了，但是“产生冲突机会”高了。</p>\n<p>每种哈希表的都会有一个<code>加载因子</code>，数值超过<code>加载因子</code>就会为哈希表扩容。<br>\nGolang的<code>map</code>的<code>加载因子</code>的公式是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map长度 / 2^B</span><br></pre></td></tr></table></figure>\n<p>阈值是<code>6.5</code>。其中<code>B</code>可以理解为已扩容的次数。<br>\n当Go的<code>map</code>长度增长到大于<code>加载因子</code>所需的<code>map</code>长度时，Go语言就会将产生一个新的bucket数组，然后把旧的bucket数组移到一个属性字段<code>oldbucket</code>中。注意：并不是立刻把旧的数组中的元素转义到新的bucket当中，而是，只有当访问到具体的某个bucket的时候，会把bucket中的数据转移到新的bucket中。</p>\n<p>如下图所示：当扩容的时候，Go的<code>map</code>结构体中，会保存旧的数据，和新生成的数组</p>\n<p><img src=\"extends.png\" alt=\"extends\"></p>\n<p>上面部分代表旧的有数据的bucket，下面部分代表新生成的新的bucket。蓝色代表存有数据的bucket，橘黄色代表空的bucket。<br>\n扩容时<code>map</code>并不会立即把新数据做迁移，而是当访问原来旧bucket的数据的时候，才把旧数据做迁移，如下图：</p>\n<p><img src=\"move_bucket.png\" alt=\"move_bucket\"></p>\n<p>注意：这里并不会直接删除旧的bucket，而是把原来的引用去掉，利用GC清除内存。</p>\n<h1><span id=\"map中数据的删除\"><code>map</code>中数据的删除</span></h1>\n<p>如果理解了<code>map</code>的整体结构，那么查找、更新、删除的基本步骤应该都很清楚了。这里不再赘述。<br>\n值得注意的是，找到了<code>map</code>中的数据之后，针对key和value分别做如下操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、如果``key``是一个指针类型的，则直接将其置为空，等待GC清除；</span><br><span class=\"line\">2、如果是值类型的，则清除相关内存。</span><br><span class=\"line\">3、同理，对``value``做相同的操作。</span><br><span class=\"line\">4、最后把key对应的高位值对应的数组index置为空。</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"Map","slug":"Map","permalink":"chunlife.top/tags/Map/"}]},{"title":"转载《一次完整的HTTP网络请求过程详解》","date":"2019-06-19T06:11:12.000Z","path":"2019/06/19/转载《一次完整的HTTP网络请求过程详解》/","content":"<blockquote>\n<p>转载自：<a href=\"https://blog.csdn.net/qq_39393899/article/details/80405979\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_39393899/article/details/80405979 </a></p>\n</blockquote>\n<h2><span id=\"0-前言\">0.  前言</span></h2>\n<p>从我们在浏览器的地址栏输入http: <a href=\"//blog.csdn.net/seu_calvin%E5%90%8E%E5%9B%9E%E8%BD%A6%EF%BC%8C%E5%88%B0%E6%88%91%E4%BB%AC%E7%9C%8B%E5%88%B0%E8%AF%A5%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%BB%E9%A1%B5%EF%BC%8C%E8%BF%99%E4%B8%AD%E9%97%B4%E7%BB%8F%E5%8E%86%E4%BA%86%E4%BB%80%E4%B9%88%E5%91%A2%EF%BC%9F%E7%AE%80%E5%8D%95%E5%9C%B0%E5%9B%9E%E7%AD%94%E8%BF%99%E4%B8%AA%E9%97%AE%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%A6%82%E6%98%AF%E7%BB%8F%E5%8E%86%E4%BA%86%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E3%80%81TCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E3%80%81%E5%BB%BA%E7%AB%8BTCP%E8%BF%9E%E6%8E%A5%E5%90%8E%E5%8F%91%E8%B5%B7HTTP%E8%AF%B7%E6%B1%82%E3%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%93%8D%E5%BA%94HTTP%E8%AF%B7%E6%B1%82%E3%80%81%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90html%E4%BB%A3%E7%A0%81%EF%BC%8C%E5%90%8C%E6%97%B6%E8%AF%B7%E6%B1%82html%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%EF%BC%88%E5%A6%82js%E3%80%81css%E3%80%81%E5%9B%BE%E7%89%87%E7%AD%89%EF%BC%89%E3%80%81%E6%9C%80%E5%90%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%B9%E9%A1%B5%E9%9D%A2%E8%BF%9B%E8%A1%8C%E6%B8%B2%E6%9F%93%E5%B9%B6%E5%91%88%E7%8E%B0%E7%BB%99%E7%94%A8%E6%88%B7%E3%80%82%E4%B8%8B%E9%9D%A2%E5%88%86%E5%88%AB%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%E6%AF%8F%E4%B8%AA%E8%BF%87%E7%A8%8B%E3%80%82\">//blog.csdn.net/seu_calvin后回车，到我们看到该博客的主页，这中间经历了什么呢？简单地回答这个问题，大概是经历了域名解析、TCP的三次握手、建立TCP连接后发起HTTP请求、服务器响应HTTP请求、浏览器解析html代码，同时请求html代码中的资源（如js、css、图片等）、最后浏览器对页面进行渲染并呈现给用户。下面分别介绍一下每个过程。</a></p>\n <a id=\"more\"></a>\n<h2><span id=\"1-域名解析\"><strong>1.  域名解析</strong></span></h2>\n<p>以Chrome浏览器为例，Chrome会解析域名对应的IP地址。</p>\n<p>（1）Chrome浏览器会首先搜索浏览器自身的DNS缓存（可以使用 chrome://net-internals/#dns 来进行查看），浏览器自身的DNS缓存有效期比较短，且容纳有限，大概是1000条。<a href=\"http://xn--blog-zf5ft98bm4dppeba1152alj8ahqv8ni9r0c.csdn.net\" target=\"_blank\" rel=\"noopener\">如果自身的缓存中存在blog.csdn.net</a> 对应的IP地址并且没有过期，则解析成功。</p>\n<p>（2）如果（1）中未找到，那么Chrome会搜索操作系统自身的DNS缓存（可以在命令行下使用 ipconfig /displaydns 查看）。如果找到且没有过期则成功。</p>\n<p>（3）如果（2）中未找到，那么尝试读取位于C:\\Windows\\System32\\drivers\\etc下的hosts文件，如果找到对应的IP地址则解析成功。</p>\n<p>（4）如果（3）中未找到，浏览器首先会找TCP/IP参数中设置的本地DNS服务器，如果要查询的域名包含在本地配置的区域资源中，则完成域名解析，否则根据本地DNS服务器会请求根DNS服务器。</p>\n<p>（5）本地DNS会把请求发至13台根DNS，根DNS服务器收到请求后会返回负责这个域名(.net)的服务器的一个IP，本地DNS服务器使用该IP信息联系负责.net域的这台服务器。这台负责.net域的服务器收到请求后，如果自己无法解析，会返回.net域的下一级DNS服务器地址(<a href=\"http://blog.csdn.net\" target=\"_blank\" rel=\"noopener\">blog.csdn.net</a>)给本地DNS服务器。以此类推，直至找到。</p>\n<h2><span id=\"2-tcp的三次握手\"><strong>2.  TCP的三次握手</strong></span></h2>\n<p>这个部分正好之前整理过，可以参考 <em>NetWork——关于TCP协议的三次握手和四次挥手</em>。</p>\n<p>（也可以参考我的<a href=\"https://chunlife.top/2019/06/10/TCP%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2/\">TCP状态转换</a>。）</p>\n<h2><span id=\"3-建立tcp连接后发起http请求\"><strong>3.  建立TCP连接后发起HTTP请求</strong></span></h2>\n<p>TCP三次握手建立连接成功后，客户端按照指定的格式开始向服务端发送HTTP请求，服务端接收请求后，解析HTTP请求，处理完业务逻辑，最后返回一个具有标准格式的HTTP响应给客户端。</p>\n<h3><span id=\"31-http请求格式\"><strong>3.1  HTTP请求格式</strong></span></h3>\n<p>HTTP请求格式如下所示四部分组成，分别是请求行、请求头、空行、消息体，每部分内容占一行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;request-line&gt;  </span><br><span class=\"line\">&lt;general-headers&gt;  </span><br><span class=\"line\">&lt;request-headers&gt;  </span><br><span class=\"line\">&lt;entity-headers&gt;  </span><br><span class=\"line\">&lt;empty-line&gt;  </span><br><span class=\"line\">[&lt;message-body&gt;]  </span><br><span class=\"line\"></span><br><span class=\"line\">请求行：由三部分组成：分别是请求方法（GET/POST/DELETE/PUT/HEAD）、URI路径、HTTP版本号。</span><br><span class=\"line\"></span><br><span class=\"line\">请求头：缓存相关信息（Cache-Control，If-Modified-Since）、客户端身份信息（User-Agent）等键值对信息。</span><br><span class=\"line\"></span><br><span class=\"line\">空行。</span><br><span class=\"line\"></span><br><span class=\"line\">主体：客户端发给服务端的请求数据，这部分数据并不是每个请求必须的。</span><br></pre></td></tr></table></figure>\n<p>常用的GET、POST、PUT、DELETE四种请求方式中：</p>\n<p>（1）关于<em><strong>GET和DELETE将要处理的资源信息直接放在了URL中</strong></em>。通过&quot;?&lt;键值对&gt;&amp;&lt;键值对&gt;“的形式追加。但是URL最大长度为1024字节。</p>\n<p>（2）关于<em><strong>POST和PUT的请求参数存储在报文的主体中</strong></em>。每一个参数都以”–boundary值“+“属性信息”+”空行“+&quot;参数值&quot;的数据结构存储。请求数据的最后以”–boundary值–“的格式结尾。</p>\n<h3><span id=\"3-2-服务器响应http请求\"><strong>3. 2  服务器响应HTTP请求</strong></span></h3>\n<p>服务器接收处理完请求后返回一个HTTP响应消息给客户端。HTTP响应消息的格式包括：状态行、响应头、空行、消息体。每部分内容占一行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;status-line&gt;  </span><br><span class=\"line\">&lt;general-headers&gt;  </span><br><span class=\"line\">&lt;response-headers&gt;  </span><br><span class=\"line\">&lt;entity-headers&gt;  </span><br><span class=\"line\">&lt;empty-line&gt;  </span><br><span class=\"line\">[&lt;message-body&gt;]  </span><br><span class=\"line\"></span><br><span class=\"line\">状态行：有HTTP协议版本号，状态码和状态说明三部分构成。</span><br><span class=\"line\"></span><br><span class=\"line\">响应头：用于说明数据的一些信息，比如数据类型、内容长度等键值对。</span><br><span class=\"line\"></span><br><span class=\"line\">空行。</span><br><span class=\"line\"></span><br><span class=\"line\">消息体：服务端返回给客户端的HTML文本内容。或者其他格式的数据，比如：视频流、图片或者音频数据。</span><br></pre></td></tr></table></figure>\n<h2><span id=\"4-浏览器解析html代码并请求html代码中的资源\"><strong>4  浏览器解析html代码，并请求html代码中的资源</strong></span></h2>\n<p>浏览器拿到html文件后，就开始解析其中的html代码，遇到<em><strong>js/css/image等静态资源时</strong></em>，向服务器端发起一个HTTP请求，如果服务器端返回<em><strong>304状态码</strong></em>（告诉浏览器服务器端没有修改该资源），那么浏览器会直接读取本地的该资源的缓存文件。否则开启新线程向服务器端去请求下载。（这个时候就用上<em><strong>keep-alive</strong></em>特性了，建立一次HTTP连接，可以请求多个资源。）</p>\n<p>最后，浏览器利用自己内部的工作机制，把请求到的<em><strong>静态资源和html代码</strong></em>进行渲染，再呈现给用户。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/06/10/TCP实现聊天室/\">TCP实现聊天室</a></li><li><a href=\"chunlife.top/2019/06/10/TCP状态转换/\">TCP状态转换</a></li><li><a href=\"chunlife.top/2019/06/06/funny-link-TCP库的使用和bug-fix/\">funny/link TCP库的使用和bug fix</a></li><li><a href=\"www.chunlife.top/2019/06/19/转载《一次完整的HTTP网络请求过程详解》/\">转载《一次完整的HTTP网络请求过程详解》</a></li></ul></div>","categories":[{"name":"系统","slug":"系统","permalink":"chunlife.top/categories/系统/"}],"tags":[{"name":"UDP","slug":"UDP","permalink":"chunlife.top/tags/UDP/"},{"name":"TCP","slug":"TCP","permalink":"chunlife.top/tags/TCP/"}]},{"title":"Markdown For Typora 中文版使用指南（转载）","date":"2019-06-10T10:10:07.000Z","path":"2019/06/10/Markdown-For-Typora-中文版使用指南（转载）/","content":"<blockquote>\n<p>转载自：<a href=\"https://zhuanlan.zhihu.com/p/39872673\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/39872673</a></p>\n</blockquote>\n<h2><span id=\"一-概述\">一、概述</span></h2>\n<p><strong>Markdown</strong>诞生自 <a href=\"https://link.zhihu.com/?target=http%3A//daringfireball.net/\" target=\"_blank\" rel=\"noopener\">Daring Fireball</a>之手，点击<a href=\"https://link.zhihu.com/?target=http%3A//daringfireball.net/projects/markdown/syntax\" target=\"_blank\" rel=\"noopener\">这里</a>可以找到最早版本的语法标准。然而，它的语法标准因解析器和编辑器而异，<strong>Typora</strong>使用的是<a href=\"https://link.zhihu.com/?target=https%3A//help.github.com/articles/github-flavored-markdown/\" target=\"_blank\" rel=\"noopener\">GitHub Flavored Markdown</a>标准。</p>\n<p>需要注意的是在Markdown中的HTML代码块可以被识别但并不会被解析和编译。同样要注意的是，保存之后的文档格式可能会对最初的编写的文档格式有所微调。</p>\n<a id=\"more\"></a>\n<h2><span id=\"二-块元件\">二、块元件</span></h2>\n<h2><span id=\"1-段落和行间隔\">1. 段落和行间隔</span></h2>\n<p>段落，顾名思义就是由一行或多行文本组成的，以段为形式的结构。在Markdown语法中，段落间以一行以上的空行作分隔。在Typora中，你只需要按一下<code>Enter</code>就可以插入一个新的段落。</p>\n<p>按<code>Shift</code>+<code>Enter</code>可以创建一个比段落间距更小的行间距。然而，大多数的Markdown解析器会忽略这个方式创建的行间距，但是你可以通过在这一行的最后插入两个空格<code>Space</code>或者插入<code>&lt;br/&gt;</code>令解析器强制识别。</p>\n<h2><span id=\"2标题\">2.标题</span></h2>\n<p>可以通过在一行的开头使用1-6个<code>#</code>符号来创建标题，对应1-6个级别的标题。栗如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这是一个一级标题</span><br><span class=\"line\"></span><br><span class=\"line\">## 这是一个二级标题</span><br><span class=\"line\"></span><br><span class=\"line\">###### 这是一个六级标题</span><br></pre></td></tr></table></figure>\n<p>在Typora中，在标题文本前输入<code>#</code>，然后按下<code>Enter</code>可以创建一个标题。</p>\n<h2><span id=\"3引用\">3.引用</span></h2>\n<p>Markdown使用邮件风格的<code>&gt;</code>符号来创建引用块。栗如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 这是一个由两个段落组成的引用块，这是第一个段落。</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; 这是第二个段落，爱饭打森，爱乖出台，请曾爱萨菲，撒㩐，经爱抚，百分赛法。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 这是另一个只有一个段落的引用块。两个代码块间可以用一空行来分隔。</span><br></pre></td></tr></table></figure>\n<p>在Typora中，只需要输入<code>&gt;</code>之后输入需要的引用内容就可以生成引用块格式。Typora在随后的输入过程中会自动为你添加<code>&gt;</code>和行间隔。引用块内的引用也是被允许的，只需要在引用块内同样使用<code>&gt;</code>即可。</p>\n<h2><span id=\"4-普通清单\">4. 普通清单</span></h2>\n<p>输入<code>* 清单事项1</code>就会创建一个无序列表，这里的<code>*</code>符号可以用<code>-</code>和<code>+</code>代替。</p>\n<p>输入<code>1. 清单事项1</code>就会创建一个有序列表，它们的语法如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 无序列表</span><br><span class=\"line\">* 红色</span><br><span class=\"line\">* 绿色</span><br><span class=\"line\">* 蓝色</span><br><span class=\"line\"></span><br><span class=\"line\">## 有序列表</span><br><span class=\"line\">1. 红色</span><br><span class=\"line\">2. 绿色</span><br><span class=\"line\">3. 蓝色</span><br></pre></td></tr></table></figure>\n<h2><span id=\"5任务清单\">5.任务清单</span></h2>\n<p>任务清单是一种特殊的列表，列表中的事项用<code>「 」</code>或者<code>「X」</code>分别标记<code>未完成</code>和<code>已完成</code>。栗如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 「 」一个任务列表事项</span><br><span class=\"line\">- 「 」可以有如下格式</span><br><span class=\"line\">- 「 」正常 **加粗** @提及 #1234 等</span><br><span class=\"line\">- 「 」未完成</span><br><span class=\"line\">- 「x」已完成</span><br></pre></td></tr></table></figure>\n<p>你可以通过鼠标点击事项前的任务框，从而切换任务清单事项中的状态。</p>\n<h2><span id=\"6代码块\">6.代码块</span></h2>\n<p>Typora仅仅支持<a href=\"https://link.zhihu.com/?target=https%3A//help.github.com/articles/github-flavored-markdown/\" target=\"_blank\" rel=\"noopener\">GFM</a>的代码块，源码块是不支持的。[^此处翻译不确定]使用代码块的语法非常简单，输入<figure class=\"highlight plain\"><figcaption><span>就可以。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">另外还可以自定义代码块的语言，只需要在 `````后追加输入所需要的语法名称后，我们就会通过语法高亮来实现它，栗如：</span><br><span class=\"line\"></span><br><span class=\"line\">~~~text</span><br><span class=\"line\">这是一个栗子：</span><br></pre></td></tr></table></figure></p>\n<p>function test() {<br>\nconsole.log(“notice the blank line before this function?”);<br>\n}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">syntax highlighting:</span><br><span class=\"line\">```ruby</span><br><span class=\"line\">require &apos;redcarpet&apos;</span><br><span class=\"line\">markdown = Redcarpet.new(&quot;Hello World!&quot;)</span><br><span class=\"line\">puts markdown.to_html</span><br></pre></td></tr></table></figure>\n<pre><code>\n## 7.数学公式\n\n你可以通过使用**MathJax**来实现*LaTeX*的数学符号的表达。\n\n输入`$$`，然后按下`Enter`键就会弹出一个支持TeX/LaTeX语法的输入框，下面是一个栗子：\n$$\n\\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \n\\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\\n\\frac{\\partial X}{\\partial u} &amp; \\frac{\\partial Y}{\\partial u} &amp; 0 \\\n\\frac{\\partial X}{\\partial v} &amp; \\frac{\\partial Y}{\\partial v} &amp; 0 \\\n\\end{vmatrix}\n$$\n在Markdown源文件中，数学的公式块是通过利用`$$`标记借用*LaTeX*语言来实现的：\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$</span><br><span class=\"line\">\\mathbf&#123;V&#125;_1 \\times \\mathbf&#123;V&#125;_2 =  \\begin&#123;vmatrix&#125; </span><br><span class=\"line\">\\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\</span><br><span class=\"line\">\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\</span><br><span class=\"line\">\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\</span><br><span class=\"line\">\\end&#123;vmatrix&#125;</span><br><span class=\"line\">$$</span><br></pre></td></tr></table></figure>\n\n## 8.表格\n\n输入`|标题一|标题二|`然后按下`Enter`将会创建一个有两个列的表格。\n\n表格创建之后，你会看到一个顶部工具栏也会随之出现，通过工具栏你可以实现调整大小，增添和删除表格的功能，你也可以使用\n\n下面的描述可以跳过，因为表格的源码语法是Typora自动生成的。\n\n在markdown语法中，它们如下所示：\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| First Header  | Second Header |</span><br><span class=\"line\">| ------------- | ------------- |</span><br><span class=\"line\">| Content Cell  | Content Cell  |</span><br><span class=\"line\">| Content Cell  | Content Cell  |</span><br></pre></td></tr></table></figure>\n\n效果如下：\n\n| First Header | Second Header |\n| ------------ | ------------- |\n| Content Cell | Content Cell |\n| Content Cell | Content Cell |\n\n你也可以修饰内部的文本格式，比如链接、粗体、斜体、删除线等。\n\n最后，通过使用冒号`：`你可以实现标题栏文字的对齐功能，比如向左对齐、向右对齐和居中对齐：\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| Left-Aligned  | Center Aligned  | Right Aligned |</span><br><span class=\"line\">| :------------ |:---------------:| -----:|</span><br><span class=\"line\">| col 3 is      | some wordy text | $1600 |</span><br><span class=\"line\">| col 2 is      | centered        |   $12 |</span><br><span class=\"line\">| zebra stripes | are neat        |    $1 |</span><br></pre></td></tr></table></figure>\n\n效果如下：\n\n| Left-Aligned | Center Aligned | Right Aligned |\n| :------------ | :-------------: | ------------: |\n| col 3 is | some wordy text | $1600 |\n| col 2 is | centered | $12 |\n| zebra stripes | are neat | $1 |\n\n最左侧的`：`是向左对齐；最右侧的`：`是向右对齐；两侧各一个`：`是居中对齐。\n\n## 9.脚注\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">你可以创建一个脚注，如下所示：</span><br><span class=\"line\"></span><br><span class=\"line\">脚注示范[^这是一个脚注]</span><br></pre></td></tr></table></figure>\n\n上面的语法会编译成：\n\n脚注示范[^这是一个脚注]\n\n鼠标移动到`这是一个脚注`超链接可以看到脚注的文本内容。\n\n## 10.分割线\n\n在一空行输入`***`或者`---` 然后按下`Enter`可以创建一条分隔线。\n\n------\n\n## 11.YAML Front Matter\n\nTypora现在支持 [YAML Front Matter](https://link.zhihu.com/?target=http%3A//jekyllrb.com/docs/frontmatter/)了，在文章的顶部输入`---`然后按下`Enter`就会创建。或者从菜单插入一个元数据块。\n\n## 12.目录\n\n输入`［toc］`然后按下`Enter`就会产生一个自动根据标题和标题等级自动创建的目录框。\n\n## 13.示意图\n\nTypora支持 [sequence](https://link.zhihu.com/?target=https%3A//bramp.github.io/js-sequence-diagrams/), [flowchart](https://link.zhihu.com/?target=http%3A//flowchart.js.org/) 和 [mermaid](https://link.zhihu.com/?target=https%3A//knsv.github.io/mermaid/%23mermaid)，之后的版本将会在设置面板中实现设置。\n\n## 三、实时元件\n\n实时元件将会在你输入完成后立即解码和编译完成。通过鼠标移动到这些语法元件上会显示出这些元件的源码内容，下面就将逐一介绍这些实时元件。\n\n## 1.链接\n\nMarkdown支持两种类型的链接：直连链接和间接链接。\n\n在上面两种链接类型中，链接文本都用`[方框]`来定义。\n\n通过在`[ ]`后追加带有链接地址的`( )`来创建一个直接链接。在括号中，插入你需转到的网址链接，还可以在链接后追加一个`&quot;文本&quot;`来自定义所通往链接的网站标题。栗子如下：\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是一个[栗子](http://example.com/ &quot;栗子网站&quot;)网站的链接实例。</span><br><span class=\"line\"></span><br><span class=\"line\">这个[栗子](http://example.com/)没有网站标题。</span><br></pre></td></tr></table></figure>\n\n上面语法效果如下：\n\n这是一个[栗子](https://link.zhihu.com/?target=http%3A//example.com/)网站的链接实例。\n\n这个[栗子](https://link.zhihu.com/?target=http%3A//example.com/)没有网站标题。\n\n## 1).内部链接\n\n**你可以把( )中的链接换成所在文档的标题**，这样通过点击这个链接就能实现文档内部的跳转。\n例如：\n\n`Ctrl`（在Mac上是`Command`）+ `Click` [这个链接](https://zhuanlan.zhihu.com/write#二、块元素)就会跳转到标题`二、块元素`。如果你想看这是怎么做到的，你可以将鼠标移动到这个链接然后点击就可以看到此链接方式的markdown的语法结构。\n\n## 2).引用链接\n\n引用类型的链接会使用第二个`[ ]`用来放置一个对应相应链接地址的标签，栗子如下：\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是个引用链接的[栗子][id]呦。</span><br><span class=\"line\"></span><br><span class=\"line\">然后，你需要在文档的任何位置对标签作出有效的定义。</span><br><span class=\"line\"></span><br><span class=\"line\">[id]:http://example/com/ &quot;可选标题&quot;</span><br></pre></td></tr></table></figure>\n\n效果如下：\n\n这是个引用链接的[栗子](https://link.zhihu.com/?target=http%3A//example/com/)呦。\n\n然后，你需要在文档的任何位置对标签作出有效的定义。\n\n另一种简洁的语法可以使用文本本身作为链接的名称，因而允许忽略掉链接的名称也可以实现地址追踪，所以第二个`[ ]`只需要空着就好了，但是还是需要对文本本身作出定义以提供追踪地址。\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[baidu][]</span><br><span class=\"line\">然后输入对文本本身的定义：</span><br><span class=\"line\"></span><br><span class=\"line\">[baidu]:http://baidu.com/</span><br></pre></td></tr></table></figure>\n\n在Typora中，`Click`链接就会展开语法结构供你编辑，`Ctrl` + `Click`会在内置浏览器中此超链接。\n\n## 2.URLs\n\nTypora允许你插入urls作为链接内容，用`&lt;括号&gt;`修饰。\n\n`&lt;i@typora.io&gt;`就变成如下效果：i@typora.io。\n\nTypora也支持链接标准的URLs，栗如：\n\n## 3.图片\n\n图片也类似链接，但是需要额外的符号`!`放置在这一行的最开头。图片的语法结构如下所示：\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![图片名称](/path/to/img.jpg)</span><br><span class=\"line\">![图片名称](/path/to/img.jpg &quot;可选名字&quot;)</span><br></pre></td></tr></table></figure>\n\n你也可以使用`drag&amp;drop`动作从图片文件或者网页浏览器实现插入图片的操作。随后可以通过点击图片来编辑语法的源码达到进一步修饰图片的效果。如果图片文件和所编辑的markdown文档在相同目录或亚目录则`drop&amp;drop`操作会自动生成对应的相对路径。\n\n如果你想查看更多插入图片的技巧，请阅读 [http://support.typora.io//Images/](https://link.zhihu.com/?target=http%3A//support.typora.io//Images/)。\n\n## 4.斜体\n\nMarkdown识别`*`和`_`作为斜体语法的标识。用一个`*`或`_`修饰的文本会有一个HTML的标签`&lt;em&gt;`，栗如：\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*一个乘号*</span><br><span class=\"line\"></span><br><span class=\"line\">_一个下划线_</span><br></pre></td></tr></table></figure>\n\n效果如下：\n\n*一个乘号*\n\n*一个下划线*\n\nGFM会忽视掉文本中的下划线，而下划线在编码和名字中使用普遍，栗如：\n\n&gt; wow_great_stuff\n&gt; do_this_and_do_that_and_another_thing.\n\n另一需要注意的问题是如果你需要`*`或`_`本身而不想让它编译成此处的强调标识，你可以使用`\\`来免除编译，栗如：\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\*这个文本是被乘号修饰的，但是但不会变成斜体\\*</span><br></pre></td></tr></table></figure>\n\n效果如下：\n\n*这个文本是被乘号修饰的，但是但不会变成斜体*\n\n附：Typora推荐使用`*`符号。\n\n## 5.强调\n\n两个`*`或者`_`连用就会产生一个HTML标签`&lt;strong&gt;`实现强调加粗的效果。\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**两个乘号连用**</span><br><span class=\"line\">__两个下划线连用__</span><br></pre></td></tr></table></figure>\n\n效果如下：\n\n**两个乘号连用两个下划线连用**\n\n附：Typora推荐使用`*`符号。\n\n## 6.代码\n\n想要创建一个实时显示的代码，用两个` ``符号修饰就可以了。不像预格式化的代码块，这里的实时代码使用正常的段落来表达代码形式。栗如：\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用 `printf()`功能。</span><br></pre></td></tr></table></figure>\n\n效果如下：\n\n使用 `printf()`功能。\n\n## 7.删除线\n\nGFM增添了使用符号添加删除线的语法，而标准的Markdown无此功能。\n\n`~~错误的文本~~` 显示为 ~~错误的文本~~。\n\n## 8.下划线\n\n下划线功能由来源HTML的标签代码实现。\n\n`&lt;u&gt;下划线&lt;/u&gt;` 显示为下划线。\n\n## 9.表情\n\n输出表情需要借助 `：`符号。\n\n栗子：`:smile` 显示为 :smile:。\n\n使用者可以通过使用`ESC`键触发表情建议补全功能，也可在功能面板启用后自动触发此功能。同时，直接从菜单栏`Edit` -&gt; `Emoji &amp; Symbols`插入UTF8表情符号也是可以的。\n\n## 10.HTML\n\nTypora不能使用HTML元素，但是Typora可以解析和编译非常有限的HTML元素，作为Markdown功能的补充，这些有限的功能包括：\n\n- 下划线： `&lt;u&gt;underline&lt;/u&gt;`\n- 图片：`&lt;img src=&quot;http://www.w3.org/html/logo/img/mark-word-icon.png&quot; width=&quot;200px&quot; /&gt;`（HTML标签中的`width`, `height` 以及属于样式的`width`, `height`, `zoom`样式可以被识别和应用。）\n- 评论：`&lt;!-- This is some comments --&gt;`\n- 超链接： `&lt;a href=&quot;http://typora.io&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;` 。\n\n大多数这些属性、样式或分类会被忽略。对其他的标签，Typora会将它们以HTML片段的形式表达。\n\n## 11.行内嵌数学符号\n\n想要使用这个功能，需要在设置面板的 `Markdown`栏启用它。然后使用`$`来启动TeX命令，栗如：`$\\lim_{x \\to \\infty} \\exp(-x) = 0$` 会以LaTeX的命令形式表达出来。\n\n为了触发行内内嵌数学符号的实时编译你需要：输入`$`然后按下`ESC`键之后输入TeX命令，之后就会弹出一个如图所示的工具提示栏：\n\n![img](v2-4033508b043cad96c59ec4edbca92f36_b.gif)\n\n\n\n\n\n## 12.下标\n\n想要使用这个功能，需要在设置面板的 `Markdown` 栏启动它，之后使用`~`来修饰下标文本。栗如：\n\n`H~2~O` 和`X~long\\ text~` 显示为 H~2~O 和X~long\\ text~ 。\n\n## 13.上标\n\n想要使用这个功能，需要在设置面板的 `Markdown` 栏启动它，之后使用`^`来修饰下标文本。栗如：\n\n`X^2^` 显示为 X^2^ 。\n\n## 14.高亮\n\n想要使用这个功能，需要在设置面板的`Markdown` 栏启动它，之后使用`==`来修饰高亮文本，栗如：\n\n`==highlight==` 显示为 ==highlight== 。</code></pre>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/02/09/根据SQL文件自动生成Markdown/\">根据SQL文件自动生成Markdown</a></li><li><a href=\"www.chunlife.top/2019/06/10/Markdown-For-Typora-中文版使用指南（转载）/\">Markdown For Typora 中文版使用指南（转载）</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"chunlife.top/tags/markdown/"}]},{"title":"TCP实现聊天室","date":"2019-06-10T09:19:48.000Z","path":"2019/06/10/TCP实现聊天室/","content":"<p>简单的练手，使用到TCP协议和协程。</p>\n<a id=\"more\"></a>\n<p><code>chan struct{}</code>：<code>struct{}</code>不占用内存，仅做signal使用；<br>\n<code>time.After</code>：超时函数是在进入<code>select</code>中才开始运行，通信每次使用<code>hasData</code>进行重置，不让<code>select</code>走到timeout分支。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"net\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用户结构体类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Client <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tC    <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span></span><br><span class=\"line\">\tName <span class=\"keyword\">string</span></span><br><span class=\"line\">\tAddr <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 全局map，存储在线用户</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> onlineMap <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]Client</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 全局 channel 传递用户消息。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WriteMsgToClient</span><span class=\"params\">(clnt Client, conn net.Conn)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 监听 用户自带Channel 上是否有消息。</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> msg := <span class=\"keyword\">range</span> clnt.C &#123;</span><br><span class=\"line\">\t\tconn.Write([]<span class=\"keyword\">byte</span>(msg + <span class=\"string\">\"\\n\"</span>))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MakeMsg</span><span class=\"params\">(clnt Client, msg <span class=\"keyword\">string</span>)</span> <span class=\"params\">(buf <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\tbuf = <span class=\"string\">\"[\"</span> + clnt.Addr + <span class=\"string\">\"]\"</span> + clnt.Name + <span class=\"string\">\": \"</span> + msg</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">HandlerConnect</span><span class=\"params\">(conn net.Conn)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\">\t<span class=\"comment\">// 创建channel 判断，用户是否活跃。</span></span><br><span class=\"line\">\thasData := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取用户 网络地址 IP+port</span></span><br><span class=\"line\">\tnetAddr := conn.RemoteAddr().String()</span><br><span class=\"line\">\t<span class=\"comment\">// 创建新连接用户的 结构体. 默认用户是 IP+port</span></span><br><span class=\"line\">\tclnt := Client&#123;<span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>), netAddr, netAddr&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 将新连接用户，添加到在线用户map中. key: IP+port value：client</span></span><br><span class=\"line\">\tonlineMap[netAddr] = clnt</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建专门用来给当前 用户发送消息的 go 程</span></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> WriteMsgToClient(clnt, conn)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 发送 用户上线消息到 全局channel 中</span></span><br><span class=\"line\">\t<span class=\"comment\">//message &lt;- \"[\" + netAddr + \"]\" + clnt.Name + \"login\"</span></span><br><span class=\"line\">\tmessage &lt;- MakeMsg(clnt, <span class=\"string\">\"login\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建一个 channel， 用来判断用退出状态</span></span><br><span class=\"line\">\tisQuit := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建一个匿名 go 程， 专门处理用户发送的消息。</span></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tbuf := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">4096</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\tn, err := conn.Read(buf)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> n == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\tisQuit &lt;- <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125;</span><br><span class=\"line\">\t\t\t\tfmt.Printf(<span class=\"string\">\"检测到客户端:%s退出\\n\"</span>, clnt.Name)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">\"conn.Read err:\"</span>, err)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 将读到的用户消息，保存到msg中，string 类型</span></span><br><span class=\"line\">\t\t\tmsg := <span class=\"keyword\">string</span>(buf[:n<span class=\"number\">-1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 提取在线用户列表</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> msg == <span class=\"string\">\"who\"</span> &amp;&amp; <span class=\"built_in\">len</span>(msg) == <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">\t\t\t\tconn.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"online user list:\\n\"</span>))</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 遍历当前 map ，获取在线用户</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> _, user := <span class=\"keyword\">range</span> onlineMap &#123;</span><br><span class=\"line\">\t\t\t\t\tuserInfo := user.Addr + <span class=\"string\">\":\"</span> + user.Name + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">\t\t\t\t\tconn.Write([]<span class=\"keyword\">byte</span>(userInfo))</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 判断用户发送了 改名 命令</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(msg) &gt;= <span class=\"number\">8</span> &amp;&amp; msg[:<span class=\"number\">6</span>] == <span class=\"string\">\"rename\"</span> &#123; <span class=\"comment\">// rename|</span></span><br><span class=\"line\">\t\t\t\tnewName := strings.Split(msg, <span class=\"string\">\"|\"</span>)[<span class=\"number\">1</span>] <span class=\"comment\">// msg[8:]</span></span><br><span class=\"line\">\t\t\t\tclnt.Name = newName                   <span class=\"comment\">// 修改结构体成员name</span></span><br><span class=\"line\">\t\t\t\tonlineMap[netAddr] = clnt             <span class=\"comment\">// 更新 onlineMap</span></span><br><span class=\"line\">\t\t\t\tconn.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"rename successful\\n\"</span>))</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 将读到的用户消息，写入到message中。</span></span><br><span class=\"line\">\t\t\t\tmessage &lt;- MakeMsg(clnt, msg)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\thasData &lt;- <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 保证 不退出</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 监听 channel 上的数据流动</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-isQuit:</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">delete</span>(onlineMap, clnt.Addr)       <span class=\"comment\">// 将用户从 online移除</span></span><br><span class=\"line\">\t\t\tmessage &lt;- MakeMsg(clnt, <span class=\"string\">\"logout\"</span>) <span class=\"comment\">// 写入用户退出消息到全局channel</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-hasData:</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 什么都不做。 目的是重置 下面 case 的计时器。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-time.After(time.Second * <span class=\"number\">60</span>): <span class=\"comment\">// select进入时，开始计时</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">delete</span>(onlineMap, clnt.Addr)                <span class=\"comment\">// 将用户从 online移除</span></span><br><span class=\"line\">\t\t\tmessage &lt;- MakeMsg(clnt, <span class=\"string\">\"time out leaved\"</span>) <span class=\"comment\">// 写入用户退出消息到全局channel</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Manager</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化 onlineMap</span></span><br><span class=\"line\">\tonlineMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]Client)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 监听全局channel 中是否有数据, 有数据存储至 msg， 无数据阻塞。</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tmsg := &lt;-message</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 循环发送消息给 所有在线用户。要想执行，必须 msg := &lt;-message 执行完， 解除阻塞。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, clnt := <span class=\"keyword\">range</span> onlineMap &#123;</span><br><span class=\"line\">\t\t\tclnt.C &lt;- msg</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 创建监听套接字</span></span><br><span class=\"line\">\tlistener, err := net.Listen(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\"127.0.0.1:8000\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"Listen err\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> listener.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建管理者go程，管理map 和全局channel</span></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> Manager()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 循环监听客户端连接请求</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tconn, err := listener.Accept()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">\"Accept err\"</span>, err)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 启动go程处理客户端数据请求</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> HandlerConnect(conn)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/06/19/转载《一次完整的HTTP网络请求过程详解》/\">转载《一次完整的HTTP网络请求过程详解》</a></li><li><a href=\"chunlife.top/2019/06/10/TCP状态转换/\">TCP状态转换</a></li><li><a href=\"chunlife.top/2019/06/06/funny-link-TCP库的使用和bug-fix/\">funny/link TCP库的使用和bug fix</a></li><li><a href=\"www.chunlife.top/2019/06/19/转载《一次完整的HTTP网络请求过程详解》/\">转载《一次完整的HTTP网络请求过程详解》</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"UDP","slug":"UDP","permalink":"chunlife.top/tags/UDP/"},{"name":"TCP","slug":"TCP","permalink":"chunlife.top/tags/TCP/"}]},{"title":"TCP状态转换","date":"2019-06-10T06:12:08.000Z","path":"2019/06/10/TCP状态转换/","content":"<h2><span id=\"一-概述\">一、概述</span></h2>\n<p>TCP与UDP属于传输层的基础协议，在实际的应用中，我们使用到的也就是传输层及传输层以上的协议，其他的底层协议，一般都是以了解基础协议原理即可。</p>\n<a id=\"more\"></a>\n<p><img src=\"1560220515829.png\" alt=\"协议\"></p>\n<h2><span id=\"二-tcp与udp\">二、TCP与UDP</span></h2>\n<h3><span id=\"1-协议的联系\">1、协议的联系</span></h3>\n<p>为了减少协议设计的复杂性，大多数网络模型均采用分层的方式来组织。每一层都有自己的功能，就像建筑物一样，每一层都靠下一层支持。每一层利用下一层提供的服务来为上一层提供服务，本层服务的实现细节对上层屏蔽。</p>\n<p><img src=\"1560220578955.png\" alt=\"对照\"></p>\n<h3><span id=\"2-tcp与udp\">2、TCP与UDP</span></h3>\n<h4><span id=\"21-定义\">2.1 定义</span></h4>\n<p>一般来说，若是对两者协议进行定义，有个经典的归纳：</p>\n<p><strong>TCP通信：</strong><br>\n面向连接的，可靠的数据包传输。</p>\n<p><strong>UDP通信：</strong><br>\n无连接的，不可靠的报文传递。</p>\n<h4><span id=\"22-对协议进行理解\">2.2 对协议进行理解</span></h4>\n<p>为什么会出现上述的定义呢，这是由于两者本身的特点决定的。</p>\n<p>TCP有这么两个特点：</p>\n<ul>\n<li>发送数据前必须建立连接，建立链接后，发送数据的路线确定；</li>\n<li>发送完数据需要有ACK回执包，否则将进行重发；</li>\n</ul>\n<p>TCP在网络上对现有的环境，<em>对不稳定的网络层做完全弥补操作</em>，保证数据传输稳定。</p>\n<hr>\n<p>UDP，靠路由网络分发，无需提前建立连接，只需知道目标机器的IP地址，发送的路线不确定。<em>对不稳定的网络层，不作为</em>。</p>\n<h4><span id=\"23-比较\">2.3 比较</span></h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">TCP</th>\n<th style=\"text-align:center\">UDP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">面向连接</td>\n<td style=\"text-align:center\">面向无连接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">要求系统资源较多</td>\n<td style=\"text-align:center\">要求系统资源较少</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">TCP程序结构较复杂</td>\n<td style=\"text-align:center\">UDP程序结构较简单</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">使用流式</td>\n<td style=\"text-align:center\">使用数据包式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">保证数据准确性</td>\n<td style=\"text-align:center\">不保证数据准确性</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">保证数据顺序</td>\n<td style=\"text-align:center\">不保证数据顺序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">通讯速度较慢</td>\n<td style=\"text-align:center\">通讯速度较快</td>\n</tr>\n</tbody>\n</table>\n<p>TCP：对数据传输安全性、稳定性要求较高的场合。 网络文件传输。下载、上传。</p>\n<p>UDP：对数据实时传输要求较高的场合。视频直播、在线电话会议。游戏。</p>\n<h3><span id=\"3-tcp状态转换\">3、TCP状态转换</span></h3>\n<p>由于TCP在通信时，有连接动作，这个动作并不是一个单一的动作，而是一连串动作的集合，也就是TCP中经典的<code>三次握手，四次挥手</code>。</p>\n<p><img src=\"TCP%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%9B%BE.png\" alt=\"TCP状态转换图\"></p>\n<p>连接过程经历的状态变化：</p>\n<p><img src=\"1560222452099.png\" alt=\"连接状态变化\"></p>\n<p>关闭连接时的状态变化：</p>\n<p><img src=\"1560222690302.png\" alt=\"关闭连接\"></p>\n<p>那为什么是三次握手和四次挥手呢？</p>\n<p>在实际的通信中，三次握手阶段的第二次的通信中，被动接收端是将<code>ACK</code>与<code>SYN</code>包一起发送给主动发起连接端，也就省去了一次过程。那为什么会合并呢，这个问题也可以问，为什么挥手的过程不是合并发送呢？</p>\n<p>我的理解是关闭过程是各自关闭各自的发送功能，也就是：<strong>你关闭你的发送通道，我关闭我的发送通道</strong>。</p>\n<p>而握手阶段，若接收端没有准备好，则<code>ACK</code>包都不会回复。</p>\n<p>可以参考这张图，更为详细的了解状态间的变换。</p>\n<p><img src=\"TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E3%80%814%E6%AC%A1%E6%8C%A5%E6%89%8B.png\" alt=\"TCP三次握手、4次挥手\"></p>\n<h3><span id=\"4-tcp沾包\">4、TCP沾包</span></h3>\n<blockquote>\n<p>以下转载自：<a href=\"https://www.v2ex.com/t/478610?p=2\" target=\"_blank\" rel=\"noopener\">TCP 粘包问题浅析及其解决方案</a></p>\n</blockquote>\n<p>如下图所示，出现的粘包问题一共有三种情况：</p>\n<p><img src=\"TCP-PACKAGE.jpg\" alt=\"TCP沾包\"></p>\n<p><strong>第一种情况：</strong> 如上图中的第一根<strong>bar</strong>所示，服务端一共读到两个数据包，每个数据包都是完成的，并没有发生粘包的问题，这种情况比较好处理，服务器只需要简单的从网络缓冲区去读就好了，每次服务端读取到的消息都是完成的，并不会出现数据不正确的情况。</p>\n<p><strong>第二种情况：</strong> 服务端仅收到一个数据包，这个数据包包含客户端发出的两条消息的完整信息，这个时候基于第一种情况的逻辑实现的服务端就蒙了，因为服务端并不能很好的处理这个数据包，甚至不能处理，这种情况其实就是 TCP 的粘包问题。</p>\n<p><strong>第三种情况：</strong> 服务端收到了两个数据包，第一个数据包只包含了第一条消息的一部分，第一条消息的后半部分和第二条消息都在第二个数据包中，或者是第一个数据包包含了第一条消息的完整信息和第二条消息的一部分信息，第二个数据包包含了第二条消息的剩下部分，这种情况其实是发送了 TCP 拆包问题，因为发生了一条消息被拆分在两个包里面发送了，同样上面的服务器逻辑对于这种情况是不好处理的。</p>\n<p><strong>为什么会发生 TCP 粘包、拆包</strong></p>\n<ol>\n<li>应用程序写入的数据大于套接字缓冲区大小，这将会发生拆包。</li>\n<li>应用程序写入数据小于套接字缓冲区大小，网卡将应用多次写入的数据发送到网络上，这将会发生粘包。</li>\n<li>进行 MSS （最大报文长度）大小的 TCP 分段，当 TCP 报文长度-TCP 头部长度&gt;MSS 的时候将发生拆包。</li>\n<li>接收方法不及时读取套接字缓冲区数据，这将发生粘包。</li>\n</ol>\n<p><strong>如何处理粘包、拆包</strong></p>\n<p>通常会有以下一些常用的方法：</p>\n<ol>\n<li>使用带消息头的协议、消息头存储消息开始标识及消息长度信息，服务端获取消息头的时候解析出消息长度，然后向后读取该长度的内容。</li>\n<li>设置定长消息，服务端每次读取既定长度的内容作为一条完整消息，当消息不够长时，空位补上固定字符。</li>\n<li>设置消息边界，服务端从网络流中按消息编辑分离出消息内容，一般使用‘\\n ’。</li>\n<li>更为复杂的协议，例如楼主最近接触比较多的车联网协议 808,809 协议。</li>\n</ol>\n<hr>\n<p>另外解决方法还可以看程序前辈怒怼TCP，看着很搞笑，<a href=\"https://github.com/ideawu/FUCK_TCP\" target=\"_blank\" rel=\"noopener\"><strong>FUCK_TCP</strong></a>。</p>\n<p>彻底解决 TCP 粘包和拆包问题的代码架构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char tmp[];</span><br><span class=\"line\">Buffer buffer;</span><br><span class=\"line\">// 网络循环：必须在一个循环中读取网络，因为网络数据是源源不断的。</span><br><span class=\"line\">while(1)&#123;</span><br><span class=\"line\">    // 从TCP流中读取不定长度的一段流数据，不能保证读到的数据是你期望的长度</span><br><span class=\"line\">    tcp.read(tmp);</span><br><span class=\"line\">    // 将这段流数据和之前收到的流数据拼接到一起</span><br><span class=\"line\">    buffer.append(tmp);</span><br><span class=\"line\">    // 解析循环：必须在一个循环中解析报文，应对所谓的粘包</span><br><span class=\"line\">    while(1)&#123;</span><br><span class=\"line\">        // 尝试解析报文</span><br><span class=\"line\">        msg = parse(buffer);</span><br><span class=\"line\">        if(!msg)&#123;</span><br><span class=\"line\">            // 报文还没有准备好，糟糕，我们遇到拆包了！跳出解析循环，继续读网络。</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 将解析过的报文对应的流数据清除</span><br><span class=\"line\">        buffer.remove(msg.length);</span><br><span class=\"line\">        // 业务处理</span><br><span class=\"line\">        process(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"三-tcp-time_wait的详解\">三、TCP TIME_WAIT的详解</span></h2>\n<p><a href=\"https://mp.weixin.qq.com/s/8WmASie_DjDDMQRdQi1FDg\" target=\"_blank\" rel=\"noopener\">系统调优，你所不知道的TIME_WAIT和CLOSE_WAIT</a></p>\n<p>前面我们知道了TIME_WAIT出现的时机，TIME_WAIT有何用呢？</p>\n<p>如果我们来做个类比的话，TIME_WAIT的出现，对应的是你的程序里的异常处理，它的出现，就是为了解决网络的丢包和网络不稳定所带来的其他问题：</p>\n<p>一个连接【五元组，我们继续以 180.172.35.150:45678, tcp, 180.97.33.108:80 为例】上延迟的数据包或者丢失重传的数据包，被后面复用的连接【前一个连接关闭后，此时你再次访问百度，新的连接可能还是由180.172.35.150:45678, tcp, 180.97.33.108:80 这个五元组来表示，也就是源端口凑巧还是45678】错误的接收（异常：数据丢了，或者传输太慢了）</p>\n<p>第二，确保连接方能在时间范围内，关闭自己的连接。</p>\n<p>强烈建议看原博客，此处就不摘抄全部记录了。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/06/19/转载《一次完整的HTTP网络请求过程详解》/\">转载《一次完整的HTTP网络请求过程详解》</a></li><li><a href=\"chunlife.top/2019/06/10/TCP实现聊天室/\">TCP实现聊天室</a></li><li><a href=\"chunlife.top/2019/06/06/funny-link-TCP库的使用和bug-fix/\">funny/link TCP库的使用和bug fix</a></li><li><a href=\"www.chunlife.top/2019/06/19/转载《一次完整的HTTP网络请求过程详解》/\">转载《一次完整的HTTP网络请求过程详解》</a></li></ul></div>","categories":[{"name":"系统","slug":"系统","permalink":"chunlife.top/categories/系统/"}],"tags":[{"name":"UDP","slug":"UDP","permalink":"chunlife.top/tags/UDP/"},{"name":"TCP","slug":"TCP","permalink":"chunlife.top/tags/TCP/"}]},{"title":"MongoDB命令一览","date":"2019-06-07T06:21:05.000Z","path":"2019/06/07/MongoDB命令一览/","content":"<p>整理一下基础命令：</p>\n<a id=\"more\"></a>\n<p><img src=\"MongoDB.png\" alt=\"MongoDB\"></p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/02/18/B站源码中的log-agent/\">B站源码中的log-agent</a></li><li><a href=\"chunlife.top/2019/12/18/使用unsafe-pointer引发GC错误/\">使用unsafe pointer引发GC错误</a></li><li><a href=\"chunlife.top/2019/09/27/MongoDB多表查询/\">MongoDB多表查询</a></li><li><a href=\"https://lailin.xyz/post/11996.html\">Go Web 小技巧（三）Gin 参数绑定</a></li></ul></div>","categories":[{"name":"DB","slug":"DB","permalink":"chunlife.top/categories/DB/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"mongoDB","slug":"mongoDB","permalink":"chunlife.top/tags/mongoDB/"}]},{"title":"funny/link TCP库的使用和bug fix","date":"2019-06-06T02:55:52.000Z","path":"2019/06/06/funny-link-TCP库的使用和bug-fix/","content":"<p>公司项目需要对接嵌入式设备，底层<code>stm32</code>使用的是TCP网络协议，go语言中原生TCP编程还是比较简单的，像网络方面的编程，其实很多操作都比较繁复，在编写时，就希望能够有类似的框架性质的库帮助统一所有网络的代码，以及减轻网络编写的负担。</p>\n<p>找到一个项目，<a href=\"https://github.com/funny/link\" target=\"_blank\" rel=\"noopener\">link</a>。</p>\n<p>就像它README所说的，它不是一个完整网络层也不是一个框架，它只是一个脚手架，它可以帮助你快速的实现出你所需要的网络层或者通讯框架，帮你约束网络层的实现方式，不至于用不合理的方式实现网络层，除此之外它不会管更多的事情。</p>\n<p>这样的话其实也就足够使用了，毕竟我要的功能并不复杂，仅需要为了屏蔽掉一些细节问题，除此之外，好像也并不需要什么多余的东西了。</p>\n<h2><span id=\"bug-fix\">bug fix</span></h2>\n<p>仓库中有对<code>json</code>解码的原生支持，但其中似乎存在一些问题，这里补齐一下。</p>\n<blockquote>\n<p>当client端发送的数据为空时，这里会传入nil，也就会出现panic，需要判断body是否为空。</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--- a/codec/json.<span class=\"keyword\">go</span></span><br><span class=\"line\">+++ b/codec/json.<span class=\"keyword\">go</span></span><br><span class=\"line\">@@ <span class=\"number\">-2</span>,<span class=\"number\">7</span> +<span class=\"number\">2</span>,<span class=\"number\">6</span> @@ <span class=\"keyword\">package</span> codec</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">import</span> (</span><br><span class=\"line\">        <span class=\"string\">\"encoding/json\"</span></span><br><span class=\"line\">-       <span class=\"string\">\"errors\"</span></span><br><span class=\"line\">        <span class=\"string\">\"io\"</span></span><br><span class=\"line\">        <span class=\"string\">\"reflect\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">@@ <span class=\"number\">-74</span>,<span class=\"number\">18</span> +<span class=\"number\">73</span>,<span class=\"number\">10</span> @@ <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *jsonCodec)</span> <span class=\"title\">Receive</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> body <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">+</span><br><span class=\"line\">        <span class=\"keyword\">if</span> in.Head != <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> t, exists := c.p.types[in.Head]; exists &#123;</span><br><span class=\"line\">                        body = reflect.New(t).Interface()</span><br><span class=\"line\">+               &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">+                       <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.New(<span class=\"string\">\"Receive Json have no Head match, Close connection\"</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">+       &#125;</span><br><span class=\"line\">+       <span class=\"keyword\">if</span> in.Body == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">+               <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.New(<span class=\"string\">\"Receive Json have no Body field, Close connection\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        err = json.Unmarshal(*in.Body, &amp;body)</span><br></pre></td></tr></table></figure>\n<p>另外还有一处编译的地方，对于win32位来说会报错的地方。</p>\n<blockquote>\n<p><code>math.MaxUint32</code>会超出win32位<code>int</code>的大小，当然这是在编译时就会报错（并不会直接按照类型大小截取大小，反而会直接丢出错误）。</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--- a/codec/fixlen.<span class=\"keyword\">go</span></span><br><span class=\"line\">+++ b/codec/fixlen.<span class=\"keyword\">go</span></span><br><span class=\"line\">@@ <span class=\"number\">-54</span>,<span class=\"number\">11</span> +<span class=\"number\">54</span>,<span class=\"number\">17</span> @@ <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">FixLen</span><span class=\"params\">(base link.Protocol, n <span class=\"keyword\">int</span>, byteOrder binary.ByteOrder, maxRecv, maxS</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        byteOrder.PutUint16(b, <span class=\"keyword\">uint16</span>(size)</span>)</span></span><br><span class=\"line\"><span class=\"function\">                &#125;</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">case</span> 4:</span></span><br><span class=\"line\"><span class=\"function\">-               <span class=\"title\">if</span> <span class=\"title\">maxRecv</span> &gt; <span class=\"title\">math</span>.<span class=\"title\">MaxUint32</span></span> &#123;</span><br><span class=\"line\">-                       maxRecv = math.MaxUint32</span><br><span class=\"line\">+               <span class=\"comment\">// if maxRecv &gt; math.MaxUint32 &#123;</span></span><br><span class=\"line\">+               <span class=\"comment\">//      maxRecv = math.MaxUint32</span></span><br><span class=\"line\">+               <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">+               <span class=\"comment\">// if maxSend &gt; math.MaxUint32 &#123;</span></span><br><span class=\"line\">+               <span class=\"comment\">//      maxSend = math.MaxUint32</span></span><br><span class=\"line\">+               <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">+               <span class=\"keyword\">if</span> maxRecv &gt; math.MaxInt32 &#123;</span><br><span class=\"line\">+                       maxRecv = math.MaxInt32</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">-               <span class=\"keyword\">if</span> maxSend &gt; math.MaxUint32 &#123;</span><br><span class=\"line\">-                       maxSend = math.MaxUint32</span><br><span class=\"line\">+               <span class=\"keyword\">if</span> maxSend &gt; math.MaxInt32 &#123;</span><br><span class=\"line\">+                       maxSend = math.MaxInt32</span><br><span class=\"line\">                &#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"自定义codec\">自定义codec</span></h2>\n<p>和底层的通信采用字节流，需要自定义协议进行操作。这里只需要参照codec里面的协议，自定义一个协议就可以了。</p>\n<p><code>codec</code>其实很好理解，相当于socket的句柄传入包中，由包中函数进行自定义处理数据。</p>\n<blockquote>\n<p>需要注意的一点是：<code>io.Reader</code>类的<code>read</code>函数传入的参数，是一个len不为零的byte的数组，也就是有接收数据的空间，需要提前分配，这里是我在编写的时候不注意的地方，测试程序的read老是过不去。</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> codec</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"errors\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"io\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"gitlab.com/link\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ByteProtocol <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//data []byte</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(b *ByteProtocol)</span> <span class=\"title\">NewCodec</span><span class=\"params\">(rw io.ReadWriter)</span> <span class=\"params\">(link.Codec, error)</span></span> &#123;</span><br><span class=\"line\">\tcodec := &amp;byteCodec&#123;</span><br><span class=\"line\">\t\tp: b,</span><br><span class=\"line\">\t\tr: rw,</span><br><span class=\"line\">\t\tw: rw,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcodec.closer, _ = rw.(io.Closer)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> codec, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Byte</span><span class=\"params\">()</span> *<span class=\"title\">ByteProtocol</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;ByteProtocol&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//data: make([]byte, 0),</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> byteCodec <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tr      io.Reader</span><br><span class=\"line\">\tw      io.Writer</span><br><span class=\"line\">\tp      *ByteProtocol</span><br><span class=\"line\">\tcloser io.Closer</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *byteCodec)</span> <span class=\"title\">Receive</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\trecvData := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">4092</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tcnt, err := c.r.Read(recvData)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> recvData[:cnt], err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *byteCodec)</span> <span class=\"title\">Send</span><span class=\"params\">(msg <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tb, ok := msg.([]<span class=\"keyword\">byte</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> errors.New(<span class=\"string\">\"Send Byte Format Error\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_, err := c.w.Write(b)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *byteCodec)</span> <span class=\"title\">Close</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> c.closer != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> c.closer.Close()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以上还可以将reader改为<code>bufio.Reader</code>和<code>bufio.Writer</code>，但记住，带缓冲的IO，在写完数据后，一定要去记得显示调用<code>Flush()</code>函数，不然数据不会写入的。</p>\n</blockquote>\n<p>建议使用<code>bufio</code>，例如可以使用<code>peek</code>函数，读取协议包（自定义）中实际大小，通过实际的大小去读取<code>data</code>数据，可以设计用来解决TCP沾包的问题。</p>\n<p><code>Receive()</code>中使用for循环读取包，当然这里调用<code>Receive()</code>就要用到<code>Goroutine</code>，然后数据通信则使用channel进行通信，我在实际的程序中就是这样操作的。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"TCP","slug":"TCP","permalink":"chunlife.top/tags/TCP/"},{"name":"funny/link","slug":"funny-link","permalink":"chunlife.top/tags/funny-link/"}]},{"title":"斐波那契数列——Go","date":"2019-06-04T07:08:21.000Z","path":"2019/06/04/斐波那契数列——Golang/","content":"<p>fibonacci 数列算是不管哪个语言里头都能碰到的一个问题，其过于经典，导致其有很多解法，大体上可以归为遍历，递归，优化的递归，矩阵（矩阵这个确实很厉害）。</p>\n<p>什么是 斐波那契数列？ 0,1,1,2,3,5,8 … 除了<code>1</code>和<code>2</code>以外，剩下的数都满足 <code>f(n) = f(n-2)+f(n-1)</code>。</p>\n<a id=\"more\"></a>\n<h3><span id=\"递归方式\">递归方式：</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归的方式 - 时间复杂度 O(2^n)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacciRecusive</span><span class=\"params\">(num <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> num == <span class=\"number\">1</span> || num == <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fibonacciRecusive(num<span class=\"number\">-1</span>) + fibonacciRecusive(num<span class=\"number\">-2</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"改进递归方式\">改进递归方式：</span></h3>\n<p>使用<code>map</code>保存计算结果，相当于对已经计算过的数，避免计算第二次。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 时间复杂度 O(n)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> resultMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacciRecusiveMem</span><span class=\"params\">(num <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> val, ok := resultMap[num]; ok &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> val</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> num == <span class=\"number\">1</span> || num == <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tresult := fibonacciRecusive(num<span class=\"number\">-1</span>) + fibonacciRecusive(num<span class=\"number\">-2</span>)</span><br><span class=\"line\">\tresultMap[num] = result</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"遍历的方式\">遍历的方式：</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 时间复杂度 O(n)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacciIterative</span><span class=\"params\">(num <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f = []<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"number\">0</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">2</span>; i &lt;= num; i++ &#123;</span><br><span class=\"line\">\t\tf = <span class=\"built_in\">append</span>(f, f[i<span class=\"number\">-1</span>]+f[i<span class=\"number\">-2</span>])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f[num]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>还有个矩阵的方式，这个建议直接搜索其他文章，因为光看代码完全不好懂，还是得伴着原理一起下饭。</p>\n</blockquote>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"www.chunlife.top/2019/06/04/斐波那契数列——Golang/\">斐波那契数列——Go</a></li></ul></div>","categories":[{"name":"算法","slug":"算法","permalink":"chunlife.top/categories/算法/"}],"tags":[{"name":"fibonacci","slug":"fibonacci","permalink":"chunlife.top/tags/fibonacci/"},{"name":"斐波那契数列","slug":"斐波那契数列","permalink":"chunlife.top/tags/斐波那契数列/"}]},{"title":"Google浏览器翻墙工具（持续更新）","date":"2019-05-30T01:39:03.000Z","path":"2019/05/30/Google浏览器翻墙工具/","content":"<p>由于一些已知和未知的原因，我朝对网络的管控愈发严格，各类新操作已经是直接导致<code>hosts</code>扶墙直接崩塌，有介于扶墙是程序员必备的技能，这里有必要将这些平时翻墙的方法写出来，也是留作自己的备份。</p>\n<a id=\"more\"></a>\n<p>可见的下载VPN有自由门，赛风，Tor，蓝灯等工具，貌似也只有<strong>蓝灯</strong>，赛风勉强可以用一用，蓝灯专业版需要付费，免费版有限定流量，基本可以使用。</p>\n<p>赛风基本在国内是个残废状态。其他工具则基本不可用，若要使用Tor，一般是使用<code>二次扶梯</code>，在挂了一个VPN的情况下，再挂上Tor，这样才能正常使用该工具。</p>\n<p>另外还有一个勉强可以用的是，<code>SoftEther VPN</code>，这是一个公益性的VPN，属于日本国立筑波大学。<a href=\"https://github.com/SoftEtherVPN/SoftEtherVPN/\" target=\"_blank\" rel=\"noopener\"><strong>SoftEtherVPN</strong></a>。</p>\n<p>若是仅限于访问谷歌，那可以选择<em><strong>谷歌访问助手</strong></em>，对Google系进行访问完全没有问题，使用Gmail等，比较好用，当然，这个工具需要设定主页，但可以使用GitHub上的版本解除限制。<a href=\"https://github.com/haotian-wang/google-access-helper\" target=\"_blank\" rel=\"noopener\"><strong>google-access-helper</strong></a>。</p>\n<p>还有一个需要介绍的是在GitHub上，使用<code>chromium</code>内置了VPN的一款浏览器，时灵时不灵，就是GitHub下载比较慢，不挂VPN基本下不动，这里持续会更新到百度云上(链接有可能会失效，可提醒我，也可直接访问GitHub<a href=\"https://github.com/jjqqkk/chromium\" target=\"_blank\" rel=\"noopener\">仓库地址</a>)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">链接: https://pan.baidu.com/s/1lmxqvDEc5yj4r1DBUaNs9w </span><br><span class=\"line\">提取码: 2333</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"http://ssrshare.github.io/2019/06/22/google-ads/\">google的ads.txt的作用和写法</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"Google","slug":"Google","permalink":"chunlife.top/tags/Google/"},{"name":"lantern","slug":"lantern","permalink":"chunlife.top/tags/lantern/"},{"name":"chromium 谷歌访问助手","slug":"chromium-谷歌访问助手","permalink":"chunlife.top/tags/chromium-谷歌访问助手/"}]},{"title":"Jetbrains系列产品最新激活方法","date":"2019-05-29T03:23:58.000Z","path":"2019/05/29/Jetbrains系列产品最新激活方法/","content":"<p>Go可以选择的IDE其实是有一些的，在初学阶段我比较推荐的是<em>LiteIDE</em>，使用<code>qt</code>进行开发，国产IDE（<img src=\"zan.png\" alt=\"img\">），简单易用，学习上来说是已经够用了，不折腾，不损耗自信心。</p>\n<a id=\"more\"></a>\n<p>其他的话，比价推荐的就是<code>Visual studio code</code>和<code>Jetbrains IDEA</code>，VSC在拥有各类插件，且占用内存空间相对后者较小，易用性很高，在安装方面，其本身是免费的，插件也是免费使用的，但Go的一些工具包是需要自己去GitHub手动拉取的，由于被墙的缘故。</p>\n<p><code>IDEA</code>同样是该有的都有（意思是具备IDE通常应该具备的便捷功能），且有相对少一些的插件，但其能够针对不同的<code>project</code>配置对应的<code>GOPATH</code>，这点，可以说是很方便的，不过其内存占用较前者是多一些的，但其是收费的。</p>\n<p>对于<code>IDEA</code>收费，其实网上有很多解决方法，可以去TB买一个教育邮箱，申请免费使用的年限，同样的，也可以使用一些非常规手段进行正常使用，不过对于公司来说，为了排除被告的风险，还是跟自家的员工搞一个企业版的使用使用吧（或者是强制使用vsc等其他工具）。</p>\n<blockquote>\n<p>以下仅用于学习目的</p>\n</blockquote>\n<p><a href=\"https://zhile.io/2018/08/25/jetbrains-license-server-crack.html\" target=\"_blank\" rel=\"noopener\">Jetbrains系列产品2019.1.3最新激活方法[持续更新]</a></p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"https://gomi1992.xyz/post/4e61479e.html\">Jetbrains全家桶相关技巧</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"Jetbrains","slug":"Jetbrains","permalink":"chunlife.top/tags/Jetbrains/"}]},{"title":"解析Content-Disposition，获取文件名","date":"2019-05-28T01:52:25.000Z","path":"2019/05/28/解析Content-Disposition，获取文件名/","content":"<p>在文件下载中，我们需要设置一个header头，在浏览器下载文件时，指定下载文件的文件名。<code>Content-Disposition</code>，这里做的实用<code>golang</code>就是取出设置在<code>header</code>中的文件名。</p>\n<a id=\"more\"></a>\n<p>服务器设置该header（这里是使用的<code>gin</code>框架）。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c.Header(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"attachment; filename=\"</span>+url.QueryEscape(fileName))</span><br></pre></td></tr></table></figure>\n<p>使用<code>mime.ParseMediaType</code>函数解析。</p>\n<blockquote>\n<p>代码中使用<code>resty</code>库。</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下载文件</span></span><br><span class=\"line\">req := resty.R()</span><br><span class=\"line\">resp, err := req.SetBody(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;&#125;).</span><br><span class=\"line\">\tPost(<span class=\"string\">\"xxxxxxxxxxx\"</span>) <span class=\"comment\">// download接口</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tlog.Debug(<span class=\"string\">\"http request error,\"</span>, err)</span><br><span class=\"line\">\tc.JSON(http.StatusInternalServerError, ERROR[<span class=\"string\">\"INTERNAL_ERROR\"</span>])</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取filename</span></span><br><span class=\"line\">getDispos := resp.Header().Get(<span class=\"string\">\"Content-Disposition\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> getDispos != <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t_, params, err := mime.ParseMediaType(getDispos)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Debug(<span class=\"string\">\"http request error,\"</span>, err)</span><br><span class=\"line\">\t\tc.JSON(http.StatusInternalServerError, ERROR[<span class=\"string\">\"INTERNAL_ERROR\"</span>])</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfileName, ok = params[<span class=\"string\">\"filename\"</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">\t\tlog.Debug(<span class=\"string\">\"filename parameter not exist!\"</span>)</span><br><span class=\"line\">\t\tc.JSON(http.StatusInternalServerError, ERROR[<span class=\"string\">\"INTERNAL_ERROR\"</span>])</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>go client发送文件，即multipart/form-data</p>\n</blockquote>\n<p>可以参考<a href=\"https://github.com/go-resty/resty\" target=\"_blank\" rel=\"noopener\"><strong>go-resty/resty</strong></a>。</p>\n<p>原生库可以参考<a href=\"https://blog.cyeam.com/go/2019/03/15/form-post\" target=\"_blank\" rel=\"noopener\">Go http 如何发送 multipart/form-data (发送文件)？</a>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bodyBuf := &amp;bytes.Buffer&#123;&#125;</span><br><span class=\"line\">bodyWriter := multipart.NewWriter(bodyBuf)</span><br><span class=\"line\">_ = bodyWriter.WriteField(<span class=\"string\">\"param\"</span>, <span class=\"keyword\">string</span>(param))</span><br><span class=\"line\"><span class=\"keyword\">defer</span> bodyWriter.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">req, err := http.NewRequest(<span class=\"string\">\"POST\"</span>, callbackUrl, bodyBuf)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">req.Header.Set(<span class=\"string\">\"Content-Type\"</span>, bodyWriter.FormDataContentType())</span><br><span class=\"line\">req.WithContext(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">resp, err := http.DefaultClient.Do(req)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> resp.Body.Close()</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/03/15/go-mod-支持-http-的方式/\">go mod 支持 http 的方式</a></li><li><a href=\"chunlife.top/2018/12/05/文件上传-服务器端/\">文件上传服务器端</a></li><li><a href=\"www.chunlife.top/2019/05/28/解析Content-Disposition，获取文件名/\">解析Content-Disposition，获取文件名</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"HTTP","slug":"HTTP","permalink":"chunlife.top/tags/HTTP/"},{"name":"Content-Disposition","slug":"Content-Disposition","permalink":"chunlife.top/tags/Content-Disposition/"},{"name":"mime ParseMediaType","slug":"mime-ParseMediaType","permalink":"chunlife.top/tags/mime-ParseMediaType/"}]},{"title":"检查回文数","date":"2019-05-26T07:55:23.000Z","path":"2019/05/26/检查回文数/","content":"<p>回文数类似于这样的字符串和整数<code>123321</code>。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检查数字是否是回文数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">checkNum2</span><span class=\"params\">(num <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> num &lt; <span class=\"number\">0</span> || (num != <span class=\"number\">0</span> &amp;&amp; num%<span class=\"number\">10</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> num == reverseInt(num)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">reverseInt</span><span class=\"params\">(num <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tres := <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ; num != <span class=\"number\">0</span>; num = num / <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">\t\tres = res*<span class=\"number\">10</span> + num%<span class=\"number\">10</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检查数字是否是回文数  类似于先转换成字符串再做比较</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">checkNum</span><span class=\"params\">(num <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> num &lt; <span class=\"number\">0</span> || (num != <span class=\"number\">0</span> &amp;&amp; num%<span class=\"number\">10</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tnumByte := []<span class=\"keyword\">byte</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\ttheNum := num % <span class=\"number\">10</span></span><br><span class=\"line\">\t\tnum = num / <span class=\"number\">10</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> theNum == <span class=\"number\">0</span> &amp;&amp; num == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tnumByte = <span class=\"built_in\">append</span>(numByte, <span class=\"keyword\">byte</span>(theNum))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, j := <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(numByte)<span class=\"number\">-1</span>; i &lt; j; i, j = i+<span class=\"number\">1</span>, j<span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> numByte[i] != numByte[j] &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检查字符串是否是回文数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">checkPalindRome</span><span class=\"params\">(str <span class=\"keyword\">string</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> str == <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttoBytes := []<span class=\"keyword\">rune</span>(str)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, j := <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(toBytes)<span class=\"number\">-1</span>; i &lt; j; i, j = i+<span class=\"number\">1</span>, j<span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> toBytes[i] != toBytes[j] &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(checkPalindRome(<span class=\"string\">\"中国中\"</span>))</span><br><span class=\"line\">\tfmt.Println(checkPalindRome(<span class=\"string\">\"123321\"</span>))</span><br><span class=\"line\">\tfmt.Println(checkPalindRome(<span class=\"string\">\"\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(checkNum(<span class=\"number\">11011</span>))</span><br><span class=\"line\">\tfmt.Println(checkNum2(<span class=\"number\">-1911</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/02/18/B站源码中的log-agent/\">B站源码中的log-agent</a></li><li><a href=\"chunlife.top/2019/12/18/使用unsafe-pointer引发GC错误/\">使用unsafe pointer引发GC错误</a></li><li><a href=\"chunlife.top/2019/09/27/MongoDB多表查询/\">MongoDB多表查询</a></li><li><a href=\"https://thelighter.github.io/2020/02/04/python-algorithm/\">python-algorithmpython必会算法推荐</a></li></ul></div>","categories":[{"name":"算法","slug":"算法","permalink":"chunlife.top/categories/算法/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"算法","slug":"算法","permalink":"chunlife.top/tags/算法/"}]},{"title":"小工具（windows 便笺）","date":"2019-05-23T05:50:42.000Z","path":"2019/05/23/小工具（windows-便笺）/","content":"<blockquote>\n<p>转载自<a href=\"https://blog.csdn.net/chenghuikai/article/details/45173953\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/chenghuikai/article/details/45173953</a></p>\n</blockquote>\n<p>平时我们使用WIN7的便签，挺方便的，而且是系统自带的，还不用额外的安装，当你新建完标签，以后就会随系统开机启动，非常方便，唯一不足的是，不能最小化到右下角，可惜了，不过还是挺好用的，下面告诉你些使用的快捷键，看个图片吧：</p>\n<a id=\"more\"></a>\n<p><img src=\"20150421183545151.jpg\" alt=\"img\"></p>\n<p>有了这些快捷键，用起来是不是很方便呢，而且还可以标注一些重点，分类。图片可以存起来，放到桌面，以备随时查看。</p>\n<p>另外在开始-&gt;运行里，直接输入stikynot，然后回车，就可以打开便签了，免得去程序里翻半天了</p>\n<p>顺便告诉你，便签在程序里的位置，依次打到：开始-&gt;所有程序-&gt;附件，看到了吧，便签就在里面呆着呢！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl + N    新建便笺                  Ctrl + D    删除当前便笺</span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl + E    居中对齐                  Ctrl + R   右对齐</span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl + J   左对齐                     Ctrl + B 粗体</span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl + I    斜体                     Ctrl + U   下划线</span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl + T   删除线                    Ctrl + Shift + &gt;    增大字体</span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl + Shift + &lt; 缩小字体            Ctrl + Shift + L    添加项目符号和编号（重复按可切换、取消）</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/07/01/CSDN自动展开chorme插件/\">CSDN自动展开chorme插件</a></li><li><a href=\"www.chunlife.top/2019/05/23/小工具（windows-便笺）/\">小工具（windows 便笺）</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"便笺","slug":"便笺","permalink":"chunlife.top/tags/便笺/"},{"name":"Sticky Notes","slug":"Sticky-Notes","permalink":"chunlife.top/tags/Sticky-Notes/"}]},{"title":"docker pxc部署","date":"2019-05-21T05:55:04.000Z","path":"2019/05/21/docker-pxc部署/","content":"<p>参考之前的博客，将docker的跨宿主机overlay网络部署成功，然后再进行此次操作。</p>\n<a id=\"more\"></a>\n<h1><span id=\"pxc集群\">pxc集群</span></h1>\n<p>第一个节点：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker volume create v01</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -d \\</span><br><span class=\"line\">-p 3306:3306 \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=abc123456 \\</span><br><span class=\"line\">-e CLUSTER_NAME=PXC \\</span><br><span class=\"line\">-e XTRABACKUP_PASSWORD=abc123456 \\</span><br><span class=\"line\">-v v01:/var/lib/mysql \\</span><br><span class=\"line\">--privileged \\</span><br><span class=\"line\">--name=node1 \\</span><br><span class=\"line\">--net=pxc_overlay \\</span><br><span class=\"line\">percona/percona-xtradb-cluster:5.7</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>docker privileged</strong>：</p>\n<p>使用该参数，container内的root拥有真正的root权限。<br>\n否则，container内的root只是外部的一个普通用户权限。</p>\n</blockquote>\n<p>在官方的<a href=\"https://www.percona.com/doc/percona-xtradb-cluster/LATEST/install/docker.html\" target=\"_blank\" rel=\"noopener\">演示文档</a>中，pxc官方并没有使用这个参数，但其他博客在部署过程中都使用了这个参数，理论上那这个就是没有问题的，但在我的实际部署中，有些节点若使用这个参数反而会报出无法操作某些文件夹的错误，所以在子节点上，我没有加入这个参数。</p>\n<p>其他节点：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker volume create v02</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -d \\</span><br><span class=\"line\">-p 3306:3306 \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=abc123456 \\</span><br><span class=\"line\">-e CLUSTER_NAME=PXC \\</span><br><span class=\"line\">-e XTRABACKUP_PASSWORD=abc123456 \\</span><br><span class=\"line\">-e CLUSTER_JOIN=node1 \\</span><br><span class=\"line\">-v v02:/var/lib/mysql \\</span><br><span class=\"line\">--name=node2 \\</span><br><span class=\"line\">--net=pxc_overlay \\</span><br><span class=\"line\">percona/percona-xtradb-cluster:5.7</span><br></pre></td></tr></table></figure>\n<h1><span id=\"测试\">测试</span></h1>\n<p>一个节点:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p -hxxx.xxx.xxx.xxx -P3306</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>create database   wubotest;</p>\n</blockquote>\n<p>另一个节点:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p -hxxx.xxx.xxx.xxx -P3306</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>show databases;</p>\n</blockquote>\n<h1><span id=\"负载均衡\">负载均衡</span></h1>\n<p><a href=\"https://idig8.com/2019/02/01/shizhanpiankaiyuanxiangmudockerhuayunweibushu-dajianmysqljiqunsi/\" target=\"_blank\" rel=\"noopener\">「实战篇」开源项目docker化运维部署-搭建mysql集群（四）</a></p>\n<p>安装完成后，为了更好的利用集群的特性，你可能就需要用到负载均衡了。</p>\n<p>这方面我没有做，所以也仅是提供个链接供我以后和大家参考了。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/05/21/docker-overlay网络部署/\">docker overlay网络部署</a></li><li><a href=\"chunlife.top/2019/05/17/mysql集群部署/\">mysql集群部署</a></li><li><a href=\"chunlife.top/2019/04/23/docker-Toolbox修改源/\">docker Toolbox修改源</a></li><li><a href=\"www.chunlife.top/2019/05/21/docker-pxc部署/\">docker pxc部署</a></li></ul></div>","categories":[{"name":"devops","slug":"devops","permalink":"chunlife.top/categories/devops/"}],"tags":[{"name":"docker","slug":"docker","permalink":"chunlife.top/tags/docker/"},{"name":"pxc","slug":"pxc","permalink":"chunlife.top/tags/pxc/"},{"name":"Percona XtraDB Cluster","slug":"Percona-XtraDB-Cluster","permalink":"chunlife.top/tags/Percona-XtraDB-Cluster/"}]},{"title":"docker overlay网络部署","date":"2019-05-21T03:16:38.000Z","path":"2019/05/21/docker-overlay网络部署/","content":"<p>在实际的项目中，因为需要部署多节点冗余备份，以实现高可用，这里就要用到各类工具的分布式部署方案了，以前手动部署过mysql replication和pxc，但docker的方案没有尝试成功，无法成功部署，这里也是参考了各类博客和文档后，尝试部署成功。</p>\n<p>假设要在两台节点上安装docker，并使这两个docker可以相互访问。</p>\n<p>环境：Ubuntu 16.04  etcd docker</p>\n<a id=\"more\"></a>\n<h1><span id=\"安装etcd\">安装ETCD</span></h1>\n<h2><span id=\"etcd集群\">etcd集群</span></h2>\n<p>etcd集群参考<a href=\"https://www.kancloud.cn/hanxt/foreign-docker/164734\" target=\"_blank\" rel=\"noopener\">基于etcd服务发现的overlay跨多宿主机容器网络</a>。</p>\n<p>在两台主机上：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L &lt;https://github.com/coreos/etcd/releases/download/v2.2.1/etcd-v2.2.1-linux-amd64.tar.gz&gt; -o etcd-v2.2.1-linux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar xzvf etcd-v2.2.1-linux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">cd etcd-v2.2.1-linux-amd64</span><br></pre></td></tr></table></figure>\n<p>注意下面的命令需要先设置下面值：</p>\n<p>{NODE_NAME}:etcd节点名称，需要和命令中的-initial-cluster的对应的{NODE1_NAME}或{NODE2_NAME}对应</p>\n<p>{NODE_IP}/{NODE1_IP}/{NODE2_NAME}：节点的IP</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./etcd -name &#123;NODE_NAME&#125; -initial-advertise-peer-urls [http://&#123;NODE_IP&#125;:2380](http://NODE_IP:2380) \\</span><br><span class=\"line\">-listen-peer-urls &lt;http://0.0.0.0:2380&gt; \\</span><br><span class=\"line\">-listen-client-urls [http://0.0.0.0:2379,http://127.0.0.1:4001](http://0.0.0.0:2379,http:/127.0.0.1:4001) \\</span><br><span class=\"line\">-advertise-client-urls &lt;http://0.0.0.0:2379&gt; \\</span><br><span class=\"line\">-initial-cluster-token etcd-cluster \\</span><br><span class=\"line\">-initial-cluster &#123;NODE1_NAME&#125;=http://&#123;NODE1_IP&#125;:2380,&#123;NODE2_NAME&#125;=http://&#123;NODE2_IP&#125;:2380 \\</span><br><span class=\"line\">-initial-cluster-state new</span><br></pre></td></tr></table></figure>\n<h2><span id=\"单个运行etcd\">单个运行etcd</span></h2>\n<p>参考<a href=\"https://github.com/alfredhuang211/study-doc/blob/master/docker%E8%B7%A8%E4%B8%BB%E6%9C%BAoverlay%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE.md\" target=\"_blank\" rel=\"noopener\">docker跨主机overlay网络配置</a>。</p>\n<h2><span id=\"etcd配置\">etcd配置:</span></h2>\n<h3><span id=\"etcd启动\">etcd启动</span></h3>\n<p>etcd启动命令:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">etcd --advertise-client-urls &apos;http://192.168.15.232:2379&apos; --listen-client-urls &apos;http://0.0.0.0:2379&apos;</span><br></pre></td></tr></table></figure>\n<p>需要确保 advertise-client-urls 是在正确的ip和端口上监听</p>\n<h3><span id=\"etcd检查\">etcd检查</span></h3>\n<ul>\n<li>本机检查:</li>\n</ul>\n<p>在etcd运行的机器上,检查启动情况:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">etcdctl member list</span><br><span class=\"line\">ce2a822cea30bfca: name=default peerURLs=http://localhost:2380,http://localhost:7001 clientURLs=http://192.168.15.232:2379 isLeader=true</span><br></pre></td></tr></table></figure>\n<p>检查功能是否正确,能否正确设置和获取</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">etcdctl mk key value</span><br><span class=\"line\">etcdctl get key </span><br><span class=\"line\">value</span><br></pre></td></tr></table></figure>\n<ul>\n<li>远程检查</li>\n</ul>\n<p>在其他主机上,验证远程连接的正确性,是否可以正确设置和获取</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./etcdctl -endpoints http://192.168.15.232:2379 get key</span><br><span class=\"line\">value</span><br><span class=\"line\">/etcdctl -endpoints http://192.168.15.232:2379 mk key2 value2</span><br><span class=\"line\">value2</span><br><span class=\"line\">./etcdctl -endpoints http://192.168.15.232:2379 get key2 </span><br><span class=\"line\">value2</span><br></pre></td></tr></table></figure>\n<h1><span id=\"安装docker\">安装docker</span></h1>\n<p>如何安装，参考：<a href=\"https://docs.docker.com/install/linux/docker-ce/ubuntu/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/install/linux/docker-ce/ubuntu/</a></p>\n<p>在两个节点上:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo service docker stop</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo vim /etc/default/docker</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 写入:  (注意下面&#123;NODE_IP&#125;需要改为主机IP)</span></span><br><span class=\"line\">DOCKER_OPTS=\"-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock --cluster-store=etcd://&#123;NODE_IP&#125;:2379 --cluster-advertise=&#123;NODE_IP&#125;:2375\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo service docker start</span></span><br></pre></td></tr></table></figure>\n<p>在其中一台主机上初始化swarm，使其为swarm manager节点</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker swarm init</span></span><br></pre></td></tr></table></figure>\n<p>加入集群（运行完上面的命令后，会出现指示如何加入网络的指令）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker swarm join --token SWMTKN-1-0qo83je2oxsfxd72m09fgsm598i4dqzu3xfim36f4w20ioovgs-7oj4jufbt6yhsbq8mdxzf0bkj xxx.1xx.xxx.201:2377</span><br></pre></td></tr></table></figure>\n<p>在这台主机上，新建overlay network：(注意下面命令{NETWORK_NAME}改为自己的network名称，–attachable参数很重要)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker network create --driver overlay --attachable &#123;NETWORK_NAME&#125;</span></span><br></pre></td></tr></table></figure>\n<h1><span id=\"测试\">测试：</span></h1>\n<p>第一个节点:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -itd --name=worker-1 --net=&#123;NETWORK_NAME&#125; ubuntu</span><br></pre></td></tr></table></figure>\n<p>第二个节点:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -itd --name=worker-2 --net=&#123;NETWORK_NAME&#125; ubuntu</span><br></pre></td></tr></table></figure>\n<p>在两个节点运行的ubuntudocker 容器安装ping和ifconfig并查看各自的ip：</p>\n<p>第一个节点：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker exec worker-1 apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo docker exec worker-1 apt-get install net-tools</span><br><span class=\"line\"></span><br><span class=\"line\">sudo docker exec worker-1 ifconfig      //看到eth0则为该docker容器的ip,比如看到的为10.0.0.2</span><br></pre></td></tr></table></figure>\n<p>第二个节点：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker exec worker-2 apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo docker exec worker-2 apt-get install net-tools</span><br><span class=\"line\"></span><br><span class=\"line\">sudo docker exec worker-2 apt-get install inetutils-ping</span><br><span class=\"line\"></span><br><span class=\"line\">sudo docker exec worker-2 ifconfig      //看到eth0则为该docker容器的ip,比如看到的为10.0.0.4</span><br><span class=\"line\"></span><br><span class=\"line\">sudo docker exec worker-2 ping 10.0.0.2   //ping 得通则成功了</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/05/21/docker-pxc部署/\">docker pxc部署</a></li><li><a href=\"chunlife.top/2019/04/23/docker-Toolbox修改源/\">docker Toolbox修改源</a></li><li><a href=\"www.chunlife.top/2019/05/21/docker-pxc部署/\">docker pxc部署</a></li></ul></div>","categories":[{"name":"devops","slug":"devops","permalink":"chunlife.top/categories/devops/"}],"tags":[{"name":"docker","slug":"docker","permalink":"chunlife.top/tags/docker/"},{"name":"overlay","slug":"overlay","permalink":"chunlife.top/tags/overlay/"},{"name":"跨宿主机","slug":"跨宿主机","permalink":"chunlife.top/tags/跨宿主机/"}]},{"title":"mysql集群部署","date":"2019-05-17T12:18:10.000Z","path":"2019/05/17/mysql集群部署/","content":"<p>在实际的开发环境（我的为Ubuntu）中，为了保证数据的有效性以及稳定性，需要对数据库进行冗余设计，也就是集群部署，以此来应对在实际的生产环境中出现的数据库宕机，我这里主要是看了两种mysql集群设计方案，Replication和PXC（percona-xtradb-cluster）。</p>\n<a id=\"more\"></a>\n<p>Replication方案，配置比较简单，采用主从的方式，内部机理为二进制日志进行同步，但不具备强一致性，从节点不可以作为读写节点，得不到实际保障，多用于数据备份的环境。</p>\n<p>PXC任意一个节点都可以存在读写的方案，也就是任意一个节点都可以当读或者当写。同步复制。保证强一致性。同步复制，事务在所有节点要提交都提交。要么都不提交。</p>\n<h2><span id=\"replication\">Replication</span></h2>\n<h3><span id=\"安装mysql\">安装mysql</span></h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> apt-get install mysql-server -y</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"master\">master</span></h3>\n<h4><span id=\"编辑和修改mysql-server的配置文件\">编辑和修改MySql Server的配置文件</span></h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 注释这句， server可以用其他网卡IP进行访问</span><br><span class=\"line\"># bind-address = 127.0.0.1</span><br></pre></td></tr></table></figure>\n<p>在文件末尾添加以下行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server-id = 1   # 不与其他地方相同</span><br><span class=\"line\">log_bin = /var/log/mysql/mysql-bin.log</span><br><span class=\"line\">log_bin_index =/var/log/mysql/mysql-bin.log.index</span><br><span class=\"line\">relay_log = /var/log/mysql/mysql-relay-bin</span><br><span class=\"line\">relay_log_index = /var/log/mysql/mysql-relay-bin.index</span><br></pre></td></tr></table></figure>\n<h4><span id=\"重启mysql\">重启mysql</span></h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># service mysql restart</span><br></pre></td></tr></table></figure>\n<h4><span id=\"登录mysql创建用于集群的账号\">登录mysql，创建用于集群的账号</span></h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; create user &apos;replica&apos;@&apos;%&apos; identified by &apos;password&apos;;</span><br><span class=\"line\">mysql &gt; GRANT REPLICATION SLAVE ON *.* TO &apos;replica&apos;@&apos;%&apos;;</span><br><span class=\"line\">mysql &gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n<p>执行命令查看服务器状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; show master status;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>图中是我后来截的图，参数和你不一致很正常</p>\n</blockquote>\n<p><img src=\"1558098597813.png\" alt=\"1558098597813\"></p>\n<h3><span id=\"slave\"><strong>Slave</strong></span></h3>\n<h4><span id=\"编辑和修改mysql-server的配置文件\">编辑和修改MySql Server的配置文件</span></h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 注释这句， server可以用其他网卡IP进行访问</span><br><span class=\"line\"># bind-address = 127.0.0.1</span><br></pre></td></tr></table></figure>\n<p>在文件末尾添加以下行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server-id = 2  // 节点这里需要不同</span><br><span class=\"line\">log_bin = /var/log/mysql/mysql-bin.log</span><br><span class=\"line\">log_bin_index =/var/log/mysql/mysql-bin.log.index</span><br><span class=\"line\">relay_log = /var/log/mysql/mysql-relay-bin</span><br><span class=\"line\">relay_log_index = /var/log/mysql/mysql-relay-bin.index</span><br></pre></td></tr></table></figure>\n<h4><span id=\"重启mysql\">重启mysql</span></h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># service mysql restart</span><br></pre></td></tr></table></figure>\n<h4><span id=\"登录mysql配置从节点\">登录mysql，配置从节点</span></h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; stop slave; </span><br><span class=\"line\">mysql &gt; CHANGE MASTER TO MASTER_HOST = &apos;master-ip&apos;, MASTER_USER = &apos;replica&apos;, MASTER_PASSWORD = &apos;password&apos;, MASTER_LOG_FILE = &apos;mysql-bin.000001&apos;, MASTER_LOG_POS = 753; </span><br><span class=\"line\">mysql &gt; start slave;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MASTER_HOST：主服务器的IP地址 </span><br><span class=\"line\">MASTER_USER：我们在之前步骤中创建的主服务器的复制用户。 </span><br><span class=\"line\">MASTER_PASSWORD：我们在之前步骤中创建的主服务器的复制用户密码。 </span><br><span class=\"line\">MASTER_LOG_FILE：主服务器主日志文件的值。 </span><br><span class=\"line\">MASTER_LOG_POS：主服务器的主日志位置的值。</span><br></pre></td></tr></table></figure>\n<hr>\n<p>主从节点的配置都完成，此时即可插入一些数据去查看是否配置成功了。</p>\n<h2><span id=\"pxc\">PXC</span></h2>\n<p>这里推荐一个YouTube的视频进行观看，<a href=\"https://www.youtube.com/watch?v=wIEj3FLAX8M\" target=\"_blank\" rel=\"noopener\">Install Percona XtraDB Cluster on CentOS 7 in simple easy steps</a>。</p>\n<p>可以查看GitHub视频主的仓库，<a href=\"https://github.com/justmeandopensource/percona\" target=\"_blank\" rel=\"noopener\">here</a>。</p>\n<p>可以参考<a href=\"https://www.percona.com/doc/percona-xtradb-cluster/LATEST/index.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<p>这里简略说一下Ubuntu PXC的安装。</p>\n<p>以前装过mysql需要卸载干净，然后将<code>apparmor</code>也一并卸载。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get remove apparmor</span><br></pre></td></tr></table></figure>\n<p>获取仓库包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://repo.percona.com/apt/percona-release_latest.generic_all.deb</span><br></pre></td></tr></table></figure>\n<p><code>dpkg</code>安装最新的仓库，更新。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo dpkg -i percona-release_latest.generic_all.deb</span><br><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install percona-xtradb-cluster-5.6</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以下均为转载自仓库。</p>\n</blockquote>\n<h3><span id=\"install-instructions-for-ubuntu-18\">Install instructions for Ubuntu 18</span></h3>\n<h3><span id=\"assumptions\">Assumptions</span></h3>\n<table>\n<thead>\n<tr>\n<th>Role</th>\n<th>machine name</th>\n<th>IP address</th>\n<th>Memory</th>\n<th>Operating System</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>master node 1</td>\n<td>ubuntuvm01</td>\n<td>172.42.42.101</td>\n<td>1G</td>\n<td>Ubuntu 18</td>\n</tr>\n<tr>\n<td>master node 2</td>\n<td>ubuntuvm02</td>\n<td>172.42.42.102</td>\n<td>1G</td>\n<td>Ubuntu 18</td>\n</tr>\n</tbody>\n</table>\n<h3><span id=\"on-first-node\">On First node</span></h3>\n<h5><span id=\"add-percona-repository\">Add Percona Repository</span></h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://repo.percona.com/apt/percona-release_0.1-6.$(lsb_release -sc)_all.deb</span><br><span class=\"line\">dpkg -i percona-release_0.1-6.$(lsb_release -sc)_all.deb</span><br></pre></td></tr></table></figure>\n<h5><span id=\"install-percona-xtradb-cluster\">Install Percona-XtraDB-Cluster</span></h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install -y percona-xtradb-cluster-57</span><br><span class=\"line\">systemctl stop mysql</span><br></pre></td></tr></table></figure>\n<h5><span id=\"configure-replication-settings\">Configure Replication Settings</span></h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt;&gt;/etc/mysql/my.cnf&lt;&lt;EOF</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">wsrep_provider=/usr/lib/libgalera_smm.so</span><br><span class=\"line\">wsrep_cluster_name=democluster</span><br><span class=\"line\">wsrep_cluster_address=gcomm://</span><br><span class=\"line\">wsrep_node_name=centosvm01</span><br><span class=\"line\">wsrep_node_address=172.42.42.101</span><br><span class=\"line\">wsrep_sst_method=xtrabackup-v2</span><br><span class=\"line\">wsrep_sst_auth=repuser:reppassword</span><br><span class=\"line\">pxc_strict_mode=ENFORCING</span><br><span class=\"line\">binlog_format=ROW</span><br><span class=\"line\">default_storage_engine=InnoDB</span><br><span class=\"line\">innodb_autoinc_lock_mode=2</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<h5><span id=\"bootstrapinitialize-the-cluster\">Bootstrap/Initialize the Cluster</span></h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mysql</span><br></pre></td></tr></table></figure>\n<h5><span id=\"create-replication-user\">Create Replication User</span></h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p -e &quot;create user repuser@localhost identified by &apos;reppassword&apos;&quot;</span><br><span class=\"line\">mysql -uroot -p -e &quot;grant reload, replication client, process, lock tables on *.* to repuser@localhost&quot;</span><br><span class=\"line\">mysql -uroot -p -e &quot;flush privileges&quot;</span><br></pre></td></tr></table></figure>\n<h5><span id=\"update-replication-configuration\">Update Replication configuration</span></h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &apos;s/^wsrep_cluster_address=.*/wsrep_cluster_address=gcomm:\\/\\/172.42.42.101,172.42.42.102/&apos; /etc/mysql/my.cnf</span><br></pre></td></tr></table></figure>\n<h3><span id=\"on-second-node\">On Second node</span></h3>\n<h5><span id=\"add-percona-repository\">Add Percona Repository</span></h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://repo.percona.com/apt/percona-release_0.1-6.$(lsb_release -sc)_all.deb</span><br><span class=\"line\">dpkg -i percona-release_0.1-6.$(lsb_release -sc)_all.deb</span><br></pre></td></tr></table></figure>\n<h5><span id=\"install-percona-xtradb-cluster\">Install Percona-XtraDB-Cluster</span></h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install -y percona-xtradb-cluster-57</span><br><span class=\"line\">systemctl stop mysql</span><br></pre></td></tr></table></figure>\n<h5><span id=\"configure-replication-settings\">Configure Replication Settings</span></h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt;&gt;/etc/mysql/my.cnf&lt;&lt;EOF</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">wsrep_provider=/usr/lib/libgalera_smm.so</span><br><span class=\"line\">wsrep_cluster_name=democluster</span><br><span class=\"line\">wsrep_cluster_address=gcomm://172.42.42.101,172.42.42.102</span><br><span class=\"line\">wsrep_node_name=centosvm02</span><br><span class=\"line\">wsrep_node_address=172.42.42.102</span><br><span class=\"line\">wsrep_sst_method=xtrabackup-v2</span><br><span class=\"line\">wsrep_sst_auth=repuser:reppassword</span><br><span class=\"line\">pxc_strict_mode=ENFORCING</span><br><span class=\"line\">binlog_format=ROW</span><br><span class=\"line\">default_storage_engine=InnoDB</span><br><span class=\"line\">innodb_autoinc_lock_mode=2</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<h5><span id=\"start-mysql-to-join-the-cluster\">Start mysql to join the cluster</span></h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mysql</span><br></pre></td></tr></table></figure><div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/10/28/MySQL存储JSON——Gorm———go编程/\">MySQL存储JSON——Gorm——go编程</a></li><li><a href=\"chunlife.top/2019/05/21/docker-pxc部署/\">docker pxc部署</a></li><li><a href=\"chunlife.top/2019/02/21/mysql并发操作/\">mysql并发操作</a></li><li><a href=\"http://hexo.yuanjh.cn/hexo/a27a49e6/\">mysql常用操作速查[博]</a></li></ul></div>","categories":[{"name":"DB","slug":"DB","permalink":"chunlife.top/categories/DB/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"chunlife.top/tags/mysql/"},{"name":"pxc","slug":"pxc","permalink":"chunlife.top/tags/pxc/"},{"name":"replication","slug":"replication","permalink":"chunlife.top/tags/replication/"},{"name":"percona-xtradb-cluster","slug":"percona-xtradb-cluster","permalink":"chunlife.top/tags/percona-xtradb-cluster/"}]},{"title":"分布式定时任务之强杀任务","date":"2019-05-05T08:10:17.000Z","path":"2019/05/05/分布式定时任务之强杀任务/","content":"<p><a href=\"https://github.com/younglifestyle/goexamples/tree/master/cronPro\" target=\"_blank\" rel=\"noopener\">cronPro</a>，其中有一项功能为强杀任务；这里也可以借助<code>shell</code>命令来完成，通过<code>shell</code>脚本获取任务的<code>pid</code>，这样就可以通过脚本来控制程序在操作系统层面上一定会被<code>kill</code>。</p>\n<a id=\"more\"></a>\n<p>取自falcon-plus的启动脚本。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function check_pid() &#123;</span><br><span class=\"line\">    if [ -f $pidfile ];then</span><br><span class=\"line\">        pid=`cat $pidfile`</span><br><span class=\"line\">        if [ -n $pid ]; then</span><br><span class=\"line\">            running=`ps -p $pid|grep -v \"PID TTY\" |wc -l`</span><br><span class=\"line\">            return $running</span><br><span class=\"line\">        fi</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    return 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function start() &#123;</span><br><span class=\"line\">    check_pid</span><br><span class=\"line\">    running=$?</span><br><span class=\"line\">    if [ $running -gt 0 ];then</span><br><span class=\"line\">        echo -n \"$app now is running already, pid=\"</span><br><span class=\"line\">        cat $pidfile</span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\"></span><br><span class=\"line\">    nohup ./$app &amp;&gt; $logfile &amp;</span><br><span class=\"line\">    echo $! &gt; $pidfile</span><br><span class=\"line\">    echo \"$app started..., pid=$!\"</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function stop() &#123;</span><br><span class=\"line\">    pid=`cat $pidfile`</span><br><span class=\"line\">    kill $pid</span><br><span class=\"line\">    echo \"$app stoped...\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/02/18/B站源码中的log-agent/\">B站源码中的log-agent</a></li><li><a href=\"chunlife.top/2019/12/18/使用unsafe-pointer引发GC错误/\">使用unsafe pointer引发GC错误</a></li><li><a href=\"chunlife.top/2019/09/27/MongoDB多表查询/\">MongoDB多表查询</a></li><li><a href=\"https://lailin.xyz/post/11996.html\">Go Web 小技巧（三）Gin 参数绑定</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"}]},{"title":"进程与线线程的翻译文章","date":"2019-04-25T02:22:20.000Z","path":"2019/04/25/进程与线线程的翻译文章/","content":"<h1><span id=\"a-gentle-introduction-to-multithreading\">A gentle introduction to multithreading</span></h1>\n<p><a href=\"https://www.internalpointers.com/post/gentle-introduction-multithreading\" target=\"_blank\" rel=\"noopener\">https://www.internalpointers.com/post/gentle-introduction-multithreading</a></p>\n<a id=\"more\"></a>\n<p>额，才发现评论里，已经有人翻译了。时间是2019年3月份。</p>\n<p><a href=\"https://mp.weixin.qq.com/s/2d-xgWbhSgyFJ3zKPOIscg\" target=\"_blank\" rel=\"noopener\">多线程简述</a></p>\n<p><strong>转载：</strong></p>\n<p>一次一步，走进并发的世界。</p>\n<p>现代计算机有能力在同一时间执行多个操作。随着硬件的进步和操作系统的发展，这项特性让程序运行得更快，无论是在执行速度上还是在响应性上。</p>\n<p>编写利用到此特性的软件另人着迷但也需要更多技巧: 你需要明白计算机底层发生了什么。本系列第一篇将对 线程(threads) 进行概述。在这些魔法背后，线程是操作系统(os) 提供的工具之一。</p>\n<h2><span id=\"进程process和线程thread-对号入座\">进程(process)和线程(thread): 对号入座</span></h2>\n<p>现代操作系统能够在同一时间运行多个程序. 这也是为什么此刻你可以在浏览器中阅读本文，同时又能使用音乐播放器听音乐的原因(浏览器和播放器是两个不同的程序)。每一个运行的程序都会是一个进程(process)。操作系统知晓很多软件技巧，使得多个进程可以一起运行，并能利用好底层的硬件。无论怎样，最终的结果都是，用户 <em>感觉</em> 所有的程序是同时跑着的。</p>\n<p>多进程并非操作系统中在同一时间执行多条任务的惟一方法。每个进程内部也可能同时跑多个子任务，这被叫做 线程(threads)。可以把线程当作进程的切片。每个进程启动时至少激活了一个线程，这个线程叫做 主线程(main thread)。然后，根据程序或程序设计者的需要，额外的线程会被创建或终止。多线程(multitreading) 就是关于单个进程内跑多个线程的。</p>\n<p>例如，很有可能你用的播放器就跑了多个线程: 一个用来渲染用户界面(通常是主线程)，另一个用来播放音乐。</p>\n<p>可以把操作系统当作持有多个进程的容器，而每个容器本身也持有多个线程。本篇文章主要关注线程，完整的话题很吸引人，值得未来写一篇更深入的分析文章。</p>\n<p><img src=\"1556249590804.png\" alt=\"Operating systems can be seen as a box that contains processes, which in turn contain one or more threads.\"></p>\n<ol>\n<li>操作系统可以被看作包含了很多进程的盒子，而进程本身则包含了很多线程。</li>\n</ol>\n<h3><span id=\"进程和线程的区别\">进程和线程的区别</span></h3>\n<p>操作系统为每个进程分配了自己的一片内存。通常这片内存不与其它进程共享：你的浏览器没法访问你的播放器的内存，反之亦然。把浏览器打开2次也遵循同样的规则，操作系统把一个应用的每个实例都当作一个独立的进程，每个进程都有会分配自己的独占内存。所以，两个或多个进程之间默认无法分享数据，除非它们应用了更高级的技巧–所谓的 进程间通信 (IPC).</p>\n<p>和进程不同，线程与其所在的进程共用一片操作系统分配的内存：播放器主线程内的数据可以轻易地被音频引擎访问到，反之亦然。因此，线程之间通信更加容易。在此基础上，线程通常比进程更轻量：它们资源占用得更少，更易创建。这也是我们称呼线程 轻量化的进程(lightweight processes) 的原因。</p>\n<p>线程让你的程序在同一时间执行多个操作变得方便。没有线程，你要针对每个任务写一个程序，每个任务跑一个进程，并利用操作系统对它们进行同步。这样做更难(进程间通信是棘手的)、更慢(进程比线程的开销更重)</p>\n<h3><span id=\"绿色线程或-纤程\">绿色线程，或 纤程</span></h3>\n<p>目前为止，我们讨论的线程都是操作系统层面的：一个进程想创建一个新线程，必须告诉操作系统。然而，不是每个平台都原生支持线程。绿色线程(green threads), 也叫 纤程(fibers) 是一类模拟，它使得多线程程序在没有多线程支持的环境下也能工作。例如，在底层操作系统没有原生线程支持的情况下，某些虚拟机会实现绿色线程。</p>\n<p>绿色线程的创建和管理都更快速，因为它们完全绕过了操作系统，但也有一些缺点。这个话题在后续的文章中会提到。</p>\n<p>绿色线程(green threads) 这个名字来自于 Sun Microsystem的绿色小组(Green Team), 90年代Java 线程库的初版即在这里设计。今天Java已不再使用绿色线程，在2000年时，他们切换到了原生线程。其它的一些语言–Go, Haskell 或 Rust, 举这几个例子 – 没有使用原生线程，而是实现了和绿色线程类似的功能。</p>\n<h2><span id=\"线程的用途\">线程的用途</span></h2>\n<p>进程为什么要使用多个线程？之前提到过，并行可以加快速度。比如，你打算在电影编辑器中渲染一部电影。编辑器可以聪明到将渲染操作分拆给多个线程，每个线程负责处理一部分数据。所以如果让一个线程来做需要1小时，那么2个线程只需要30分钟，而4个线程15分钟就行了，如此这般。</p>\n<p>事情真的这样简单吗？有3个重要的点要考虑：</p>\n<ol>\n<li>不是所有程序都需要多线程。如果你的程序执行的是顺序操作或者总是等待用户操作，多线程不会带来多少好处；</li>\n<li>引入更多线程不一定会让程序跑得更快：每个子任务必须精心设计以保证并行执行；</li>\n<li>多个线程并不能保证100%并行，即，同一时间执行：这取决于底层硬件。</li>\n</ol>\n<p>第3点至关重要：如果你的计算机不支持同一时间多个操作，操作系统必须进行模拟操作。这一点后面会说到。暂时地，我们把并发(concurrency)描述为在同一时间执行多个任务的感受(perception)，而**真实的并行(true parallelism)**是多个任务确确实实地在同一时间运行着。</p>\n<p><img src=\"1556249652132.png\" alt=\"Parallelism is a subset of concurrency.\"></p>\n<ol>\n<li>并行是并发的子集.</li>\n</ol>\n<h2><span id=\"什么让并发和并行成为可能\">什么让并发和并行成为可能</span></h2>\n<p>程序的运行依赖于计算机中的中央处理器(CPU)。它由多个部分组成，主要的部分被称作 核心(core)：运算就是在这里执行的。一个核心一次只能运行一个操作。</p>\n<p>这自然就成了主要的缺点。为解决这个问题，操作系统发展出了高级技巧，让计算机有能力同时跑多个进程(或线程)，尤其在图形界面环境中，即使是单核机器。其中最重要的部分叫做 先占式多任务处理(preemptive multitasking), 这里 <strong>先占(preemption)</strong> 是这样一种能力: 中断一个任务，切换到另一个任务，稍后再恢复先前中断的任务。</p>\n<p>所以，如果你电脑的cpu只有一个核心，操作系统的职责之一就是将单核的运算能力分拆给多个进程(或线程)，让它们循环地相继执行。这给了我们一种假象，以为有多个程序在并行运行或者一个程序同时做着多件事情(多线程情况下)。这样并发便实现了，但 <em>真正的并行</em> – 同一时间跑多个进程的能力 – 仍然是缺失的。</p>\n<p>时至今日，现代cpu的核心通常不只一个，每个核心都能独立的一次执行一个操作。这意味着，有了多核心，真实的并行有了可能。比如，我自己的 Intel Core i7 有4个核心：它在同一时刻能跑4个不同的进程(或线程)。</p>\n<p>操作系统能监测到cpu的核心数并给它们分配进程或线程。线程可能被分配到任意一个核心上，而且这种调度对于程序是透明的。先占式多任务机制在所有核心都繁忙时也可能介入。这使得计算机有能力执行比核心数更多的进程和线程。</p>\n<h3><span id=\"多线程应用在单核机器上有意义吗\">多线程应用在单核机器上：有意义吗？</span></h3>\n<p>单核机器无法实现真正的并行。不过单核机器上的多线程仍然是有意义的，如果你的程序能够受益的话。当一个进程用到了多线程时，先占式多任务机制可以使你的程序正常的运行，即使某一个线程很慢或者阻塞了。</p>\n<p>比如，你在用一个桌面应用从一个慢速硬盘上读取数据。如果该桌面应用只有一个线程，在读取操作结束前，整个程序都是卡住的：在等待硬盘操作时，赋予该线程的cpu就浪费掉了。当然，除了这个程序外，操作系统还在跑着其它进程，但你在用的这个程序不会有任何进展(除了等待)。</p>\n<p>让我们以多线程方式重新思考这款程序。线程A负责访问硬盘，同时线程B负责处理用户界面。当因为硬盘读取速度慢导致线程A僵住时，线程B仍然管理着用户界面，程序不会丧失响应。这样做是可行的，因为有了2个线程后，当其中一个卡住后，操作系统可以将CPU资源切换给另一个线程使用。</p>\n<h2><span id=\"线程越多风险越多\">线程越多，风险越多</span></h2>\n<p>上面谈到，线程和其所在进程共享内存。这使得在一个应用内线程间交换数据变得极其简单。例如，视频编辑器占有了包含视频时间线的内存区域，这片内存又被一些工作线程读取并渲染到文件中。它们只需要一个把手或指针(pointer)指向那个区域，就能够读取它的内容并写入磁盘。</p>\n<p>一切都很顺利，只要两个或多个线程只是从同一内存进行读取操作。问题发生在当有至少一个线程往共享内存执行写入操作而同时有其它线程在读取时。此时可能发生2类问题：</p>\n<ul>\n<li>数据竞争(data race) – 写线程在修改数据时，读线程在执行读入操作。如果写线程还未完成操作，读线程获取的是脏数据。</li>\n<li>竞态条件 – 读线程只应该在写线程写完后执行读取操作。如果不是这样会怎样？比数据竞争更微妙，竞态条件是关于两个或多个线程以不可预测的顺序执行任务，而实际上这些任务要以特定的顺序执行。即使没有数据竞争，程序也可能出现竞态条件。</li>\n</ul>\n<h3><span id=\"线程安全的概念\">线程安全的概念</span></h3>\n<p>没有数据竞争和竞态条件的代码被认为是线程安全的(thread-safe), 即使有多个线程同时执行的情况下。你可能注意过，一些程序库声明自己是线程安全的。如果你在写多线程程序，你会想知道第三方函数在多个线程中执行是否会导致并发问题。</p>\n<h2><span id=\"数据竞争的根由\">数据竞争的根由</span></h2>\n<p>我们知道一个CPU核心一次只能执行一个机器指令。这样的指令被称作原子的(atomic)，因为它不可再分了：它无法被分成多个更小的操作。在希腊语中，单词**atom(ἄτομος; atomos)**意即 不可切分的(uncuttable)</p>\n<p>不可切分的特点使得原子操作天生线程安全。一个线程对共享数据进行原子写操作时，操作结束前没有其它线程能读取到该次修改。相反地，当一个线程对共享数据进行原子读操作时，它读到的是该时间点上的完整的数据。一个线程不可能溜进另一个线程的原子操作，因此数据竞争不会发生。</p>\n<p>坏消息是大部分操作都是非原子的。即使诸如<code>x=1</code>这样简单的赋值，在某些硬件上都可能涉及多个原子操作，让赋值操作整体上变成非原子的。所以如果一个线程读取x而另一个线程在对x赋值时，数据竞争便产生了。</p>\n<h2><span id=\"竞态条件的根由\">竞态条件的根由</span></h2>\n<p>先占式多任务处理让操作系统对线程管理有了完全的控制权：它可以根据更高级的调度算法，开始、结束或暂停线程。作为程序设计者的你无法控制代码执行的时间或顺序。实际上，像下面这样的代码我们无法保证它们的执行顺序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">writer_thread.start()</span><br><span class=\"line\">reader_thread.start()</span><br></pre></td></tr></table></figure>\n<p>将上述代码执行多次，你会注意到每次表现可能都不一样：有时写线程先开始，有时读线程先开始。如果你的程序需要让写线程跑在读线程前面，你就会遇到竞态条件的问题。</p>\n<p>这类行为被称作 非确定性的(non-deterministic)：结果每次都会变，而且你无法预测。调试受竞态条件影响的程序是烦人的，因为你无法以一种可控的方式重现问题。</p>\n<h2><span id=\"让线程们和谐相处-并发控制\">让线程们和谐相处: 并发控制</span></h2>\n<p>数据竞争和竞态条件都是现实世界中的问题：一些人甚至因为它而丧命(见:<a href=\"https://en.wikipedia.org/wiki/Therac-25\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Therac-25</a>)。调节两个或多个并发线程的手段叫并发控制(concurrency control)：操作系统和编程语言都提供了一些方案。其中最重要的有：</p>\n<ul>\n<li>同步化(synchronization) – 用来确保资源一次只会被一个线程使用。同步即是把代码的一部分标记为<em>受保护的</em>，这样一来，多个线程不能同时执行它，也就不会搞乱共享的数据了。</li>\n<li>原子操作(atomic operations) – 操作系统提供了一些特殊的指令，可以把一组非原子操作(像之前提及的赋值操作)转换成原子操作。这样，共享的数据总是处于有效状态，不管其它线程怎么访问。</li>\n<li>不可变数据(immutable data) – 把共享数据标记为不可变的，这样没有什么可以修改它：线程只允许读取，从根源上把问题解决了。上面说过，只要没有修改，多个线程就能安全的从共享内存读取数据。这也是函数式编程(functional programming) 背后的哲学。</li>\n</ul>\n<p>所有这些迷人的话题，在后续的有关并发的系列文章中都会提到。请继续关注！</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"www.chunlife.top/2019/04/25/进程与线线程的翻译文章/\">进程与线线程的翻译文章</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"翻译","slug":"翻译","permalink":"chunlife.top/tags/翻译/"},{"name":"多进程","slug":"多进程","permalink":"chunlife.top/tags/多进程/"}]},{"title":"面试相关题一","date":"2019-04-25T02:22:20.000Z","path":"2019/04/25/面试相关题一/","content":"<h2><span id=\"1-capmap-是否正确-请说明理由\">1、cap(map) 是否正确? 请说明理由</span></h2>\n<p>不正确，cap是获取slice底层结构中容量（cap）的值，而在go中map结构并没有直接获取长度的函数，若需要获取则只能通过range关键字。</p>\n<a id=\"more\"></a>\n<h2><span id=\"2-a-makeint-5-20\">2、a := make([]int, 5, 20)</span></h2>\n<p>fmt.Println(a[6])</p>\n<p>fmt.Println(a[6:10])</p>\n<p>编译通过，运行出错。数组越界，此slice是一个长度为5，容量为20的slice，而程序访问到了长度之外的数据。</p>\n<h2><span id=\"3-列出-golang-的所有数据类型\">3、列出 golang 的所有数据类型</span></h2>\n<p>这道题。。。。。。</p>\n<p>bool，</p>\n<p>数字类型（整型 int 和浮点型 float32、float64，Go 语言支持整型和浮点型数字），</p>\n<p>字符串类型，</p>\n<p>派生类型</p>\n<ul>\n<li>(a) 指针类型（Pointer）</li>\n<li>(b) 数组类型</li>\n<li>© 结构化类型(struct)</li>\n<li>(d) Channel 类型</li>\n<li>(e) 函数类型</li>\n<li>(f) 切片类型</li>\n<li>(g) 接口类型（interface）</li>\n<li>(h) Map 类型</li>\n</ul>\n<h2><span id=\"4-所有数据类型定义时候的默认值\">4、所有数据类型定义时候的默认值</span></h2>\n<p>bool为false，int为0，slice，map为nil</p>\n<h2><span id=\"5-函数接受者问题\">5、函数接受者问题</span></h2>\n<p>哪个无法运行？为什么？如果能运行，使用什么方法能区别出来？或者说如何能使其中看起来不正确的使它不要运行？</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> A <span class=\"keyword\">struct</span> &#123;&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a A)</span> <span class=\"title\">m</span><span class=\"params\">()</span></span> &#123; </span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"func m...\"</span>) </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *A)</span> <span class=\"title\">n</span><span class=\"params\">()</span></span> &#123; </span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"func n...\"</span>) </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">ao := A&#123;&#125; </span><br><span class=\"line\">ao.m() </span><br><span class=\"line\">ao.n() </span><br><span class=\"line\"></span><br><span class=\"line\">ap := &amp;A&#123;&#125; </span><br><span class=\"line\">ap.m() </span><br><span class=\"line\">ap.n()</span><br></pre></td></tr></table></figure>\n<p>实际运行，上下两种情况均能顺利运行。</p>\n<p>这里区分的话，可以以修改receiver的值作为判断依据。</p>\n<h2><span id=\"6-需要屏蔽-10-万个关键字-写算法实现\">6、需要屏蔽 10 万个关键字， 写算法实现?</span></h2>\n<p>AC自动机（Aho-Corasick）。</p>\n<p>也可以使用<code>grep</code>。</p>\n<h2><span id=\"7-golangempty-slice-与-nil-slicejson包如何应对\">7、Golang，empty slice 与 nil slice，json包如何应对？</span></h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a []<span class=\"keyword\">int</span></span><br><span class=\"line\">b := []<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\">bytes, err := json.Marshal(a)</span><br><span class=\"line\">fmt.Println(<span class=\"keyword\">string</span>(bytes), err)</span><br><span class=\"line\"></span><br><span class=\"line\">bytes, err = json.Marshal(b)</span><br><span class=\"line\">fmt.Println(<span class=\"keyword\">string</span>(bytes), err)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// null &lt;nil&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// [] &lt;nil&gt;</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"8-空struct的使用\">8、空struct{}的使用</span></h2>\n<p>空struct不占用内存，也就是说即使分配切片10000个空struct，也只是占用底层结构体的大小。</p>\n<p>用途一般是：chan struct{} 比如用来实现set: map[string]struct{}</p>\n<p>空struct相等的特性在1.6之后不支持了。</p>\n<h2><span id=\"9-在go语言中结构体是否能够比较该如何比较两个结构体\">9、在Go语言中结构体是否能够比较？该如何比较两个结构体？</span></h2>\n<p>相同类型的结构体能够进行比较。利用字段标签和反射可以达到比较的目的。</p>\n<p>例如库：<a href=\"https://github.com/r3labs/diff\" target=\"_blank\" rel=\"noopener\">diff</a>。</p>\n<h2><span id=\"10-range-关键字\">10、range 关键字</span></h2>\n<p>大概是有这样一串代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">byteArr := []<span class=\"keyword\">byte</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, val := byteArr &#123;</span><br><span class=\"line\">    byteArr := <span class=\"built_in\">append</span>(byteArr, <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">    fmt.Println(i, val)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>问，程序是否会终止。</p>\n<p>答，会终止，循环三次，按原有的数据进行遍历。</p>\n<p>参考我之前的博客：<a href=\"https://chunlife.top/2018/10/22/slice%E7%90%86%E8%A7%A3/#Go-Range\">Go-Range</a></p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://thelighter.github.io/2020/02/15/flask-backend/\">flask后端redis、MySQL等面试题</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"面试","slug":"面试","permalink":"chunlife.top/tags/面试/"}]},{"title":"docker Toolbox修改源","date":"2019-04-23T12:05:42.000Z","path":"2019/04/23/docker-Toolbox修改源/","content":"<p>最近尝试部署一些环境进行测试，使用docker可以很方便的搭建一下环境，而且可以现在都是使用docker进行现代化部署的，按理说，我是不能这么落后，连摸都不摸一下的。</p>\n<a id=\"more\"></a>\n<h2><span id=\"安装docker\">安装docker</span></h2>\n<p>使用阿里云的地址下载：<a href=\"http://mirrors.aliyun.com/docker-toolbox/windows/\" target=\"_blank\" rel=\"noopener\">阿里</a>。</p>\n<p>win 7、win 8 等需要利用 docker toolbox 来安装；win 10使用<code>docker-for-windows</code>。</p>\n<p>windows下安装是极其方便，基本就是一路next，没有需要配置的地方。</p>\n<p>需要的是安装好后的换源。</p>\n<h2><span id=\"换源\">换源</span></h2>\n<p>这里的源使用<a href=\"https://www.daocloud.io/mirror\" target=\"_blank\" rel=\"noopener\">daocloud</a>家的，点击链接，在网页底部可以找到。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker-machine ssh default</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> sudo vi /var/lib/boot2docker/profile</span></span><br><span class=\"line\"></span><br><span class=\"line\">然后在--label provider=virtualbox的下一行添加--registry-mirror=加速地址</span><br><span class=\"line\">// 保存并退出</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker-machine restart default </span></span><br><span class=\"line\"></span><br><span class=\"line\">// 使用docker info 即可查看设置的源</span><br></pre></td></tr></table></figure>\n<h2><span id=\"练习\">练习</span></h2>\n<p><a href=\"https://blog.csdn.net/Sicily_winner/article/details/86704459\" target=\"_blank\" rel=\"noopener\">Docker虚拟机入门（二）–2.2 创建MySQL集群</a></p>\n<h2><span id=\"使用到的命令\">使用到的命令</span></h2>\n<blockquote>\n<p>OneNote 视图很方便即可从图片copy文字。</p>\n</blockquote>\n<p><img src=\"../Go%E6%89%93%E5%8D%B0%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84field/1556022754446.png\" alt=\"test\"></p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/05/21/docker-pxc部署/\">docker pxc部署</a></li><li><a href=\"chunlife.top/2019/05/21/docker-overlay网络部署/\">docker overlay网络部署</a></li><li><a href=\"www.chunlife.top/2019/05/21/docker-pxc部署/\">docker pxc部署</a></li></ul></div>","categories":[{"name":"devops","slug":"devops","permalink":"chunlife.top/categories/devops/"}],"tags":[{"name":"docker","slug":"docker","permalink":"chunlife.top/tags/docker/"}]},{"title":"golang面试题","date":"2019-04-16T07:52:06.000Z","path":"2019/04/16/golang面试题/","content":"<p>暂时废弃，未补充。</p>\n<p>收集碰到的一些题目：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> People <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tShow()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(stu *Student)</span> <span class=\"title\">Show</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">live</span><span class=\"params\">()</span> <span class=\"title\">People</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> stu *Student</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> stu == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"123\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> stu</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> live() == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"AAAAAAA\"</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"BBBBBBB\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// output :</span></span><br><span class=\"line\"><span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"comment\">// BBBBBBB</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ti := GetValue()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> i.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"keyword\">int</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">println</span>(<span class=\"string\">\"int\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"keyword\">string</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">println</span>(<span class=\"string\">\"string\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"keyword\">interface</span>&#123;&#125;:</span><br><span class=\"line\">\t\t<span class=\"built_in\">println</span>(<span class=\"string\">\"interface\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">println</span>(<span class=\"string\">\"unknown\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetValue</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 会报错 cannot type switch on non-interface value i (type int)</span></span><br><span class=\"line\"><span class=\"comment\">// func GetValue() int 更换成 func GetValue() interface&#123;&#125;</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"是否可以编译通过如果通过输出什么\">是否可以编译通过？如果通过，输出什么？</span></h2>\n<p><code>list</code>类型是<code>*[]int</code>，append要求的第一个参数是<code>slice []Type</code>。</p>\n<p>编译会失败 59.175.182.99</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlist := <span class=\"built_in\">new</span>([]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tlist = <span class=\"built_in\">append</span>(list, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tfmt.Println(list)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>可以编译通过，打印<code>0 1 zz zz 4</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tx = <span class=\"literal\">iota</span></span><br><span class=\"line\">\ty</span><br><span class=\"line\">\tz = <span class=\"string\">\"zz\"</span></span><br><span class=\"line\">\tk</span><br><span class=\"line\">\tp = <span class=\"literal\">iota</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Println(x,y,z,k,p)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://thelighter.github.io/2020/02/15/flask-backend/\">flask后端redis、MySQL等面试题</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"面试","slug":"面试","permalink":"chunlife.top/tags/面试/"}]},{"title":"分布式定时任务控制","date":"2019-04-10T11:27:18.000Z","path":"2019/04/10/分布式定时任务控制/","content":"<p><a href=\"https://github.com/younglifestyle/goexamples/tree/master/cronPro\" target=\"_blank\" rel=\"noopener\">cronPro</a>，实现分布式定时任务，配合etcd进行应用分布式程序设计。</p>\n<ul>\n<li>分布式部署；</li>\n<li>etcd配置中心设置；</li>\n<li>worker超时设置。</li>\n</ul>\n<a id=\"more\"></a>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/02/18/B站源码中的log-agent/\">B站源码中的log-agent</a></li><li><a href=\"chunlife.top/2019/12/18/使用unsafe-pointer引发GC错误/\">使用unsafe pointer引发GC错误</a></li><li><a href=\"chunlife.top/2019/09/27/MongoDB多表查询/\">MongoDB多表查询</a></li><li><a href=\"https://lailin.xyz/post/11996.html\">Go Web 小技巧（三）Gin 参数绑定</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"}]},{"title":"golang iota枚举的例子","date":"2019-04-10T07:52:16.000Z","path":"2019/04/10/golang iota枚举的例子/","content":"<p>Go语言中没有枚举这个关键字，这会让人很不解，突然想用到的时候，会觉得很不适应。我不用不代表不要有，这可能是Go语言开发的取舍问题，追求精简，去掉不值得的地方。</p>\n<a id=\"more\"></a>\n<h2><span id=\"缘起\">缘起</span></h2>\n<p>在开源项目<code>BaiduPCS-Go</code>中，有这样的一个操作。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\t<span class=\"comment\">// B byte</span></span><br><span class=\"line\">\tB = (<span class=\"keyword\">int64</span>)(<span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">10</span> * <span class=\"literal\">iota</span>))</span><br><span class=\"line\">\t<span class=\"comment\">// KB kilobyte</span></span><br><span class=\"line\">\tKB</span><br><span class=\"line\">\t<span class=\"comment\">// MB megabyte</span></span><br><span class=\"line\">\tMB</span><br><span class=\"line\">\t<span class=\"comment\">// GB gigabyte</span></span><br><span class=\"line\">\tGB</span><br><span class=\"line\">\t<span class=\"comment\">// TB terabyte</span></span><br><span class=\"line\">\tTB</span><br><span class=\"line\">\t<span class=\"comment\">// PB petabyte</span></span><br><span class=\"line\">\tPB</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>从代码里头都可以猜到，<code>iota</code>这肯定是递增的，看定义，其初始值为<code>0</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"literal\">iota</span> <span class=\"keyword\">int</span> = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>具体对于<code>iota</code>的理解，可以参考：<a href=\"https://yourbasic.org/golang/iota/#complete-enum-type-with-strings-best-practice\" target=\"_blank\" rel=\"noopener\">4 iota enum examples</a>。</p>\n<h2><span id=\"iota基本的例子\">Iota基本的例子</span></h2>\n<ul>\n<li><code>iota</code>关键字代表连续整数的常数0，1，2，…</li>\n<li>只要<code>const</code>出现在源代码中，它就会重置为0 ，</li>\n<li>并在每个<code>const</code>之后递增。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    C0 = <span class=\"literal\">iota</span></span><br><span class=\"line\">    C1 = <span class=\"literal\">iota</span></span><br><span class=\"line\">    C2 = <span class=\"literal\">iota</span></span><br><span class=\"line\">)</span><br><span class=\"line\">fmt.Println(C0, C1, C2) <span class=\"comment\">// \"0 1 2\"</span></span><br></pre></td></tr></table></figure>\n<p>这可以简化为</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tC0 = <span class=\"literal\">iota</span></span><br><span class=\"line\">\tC1</span><br><span class=\"line\">\tC2</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>在这里，我们依赖于在带括号的<code>const</code>声明中隐式重复表达式的事实——表示前面的表达式及其类型的重复。</p>\n<h2><span id=\"从一开始\">从一开始</span></h2>\n<p>要以1而不是0开始常量列表，可以<code>iota</code>在算术表达式中使用。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    C1 = <span class=\"literal\">iota</span> + <span class=\"number\">1</span></span><br><span class=\"line\">    C2</span><br><span class=\"line\">    C3</span><br><span class=\"line\">)</span><br><span class=\"line\">fmt.Println(C1, C2, C3) <span class=\"comment\">// \"1 2 3\"</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"跳过定义\">跳过定义</span></h2>\n<p>您可以使用空白标识符跳过常量列表中的值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    C1 = <span class=\"literal\">iota</span> + <span class=\"number\">1</span></span><br><span class=\"line\">    _</span><br><span class=\"line\">    C3</span><br><span class=\"line\">    C4</span><br><span class=\"line\">)</span><br><span class=\"line\">fmt.Println(C1, C3, C4) <span class=\"comment\">// \"1 3 4\"</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"带字符串的完整枚举类型最佳实践\">带字符串的完整枚举类型[最佳实践]</span></h2>\n<p>这是实现枚举类型的惯用方法：</p>\n<ul>\n<li>创建一个新的整数类型，</li>\n<li>列出其值，使用<code>iota</code>，</li>\n<li>给类型一个<code>String</code>函数。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Direction <span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    North Direction = <span class=\"literal\">iota</span></span><br><span class=\"line\">    East</span><br><span class=\"line\">    South</span><br><span class=\"line\">    West</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d Direction)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [...]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"North\"</span>, <span class=\"string\">\"East\"</span>, <span class=\"string\">\"South\"</span>, <span class=\"string\">\"West\"</span>&#125;[d]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Ex…</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> d Direction = North</span><br><span class=\"line\">fmt.Print(d)</span><br><span class=\"line\"><span class=\"keyword\">switch</span> d &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> North:</span><br><span class=\"line\">    \tfmt.Println(<span class=\"string\">\" goes up.\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> South:</span><br><span class=\"line\">    \tfmt.Println(<span class=\"string\">\" goes down.\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">    \tfmt.Println(<span class=\"string\">\" stays put.\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Output: North goes up.</span></span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"enum","slug":"enum","permalink":"chunlife.top/tags/enum/"}]},{"title":"服务器上传下载问题之分块上传（断点续传）","date":"2019-04-09T08:06:42.000Z","path":"2019/04/09/服务器上传下载问题之分块上传（断点续传）/","content":"<p>在之前的博客中，对服务器的上传下载就写过一些备忘，当时项目是对文件进行操作，涉及到一些网络文件的基础操作，由于没得网络存储，也就是依靠云的磁盘来存储数据文件。</p>\n<p>这里记录一下分块上传，也就是断点续传的实现。</p>\n<a id=\"more\"></a>\n<p>大概可以分为三个步骤：</p>\n<ol>\n<li>尝试秒传接口；</li>\n<li>初始化分块上传信息；</li>\n<li>客户端开始进行分块上传；</li>\n<li>客户端通知服务器完成分块，服务器进行分块合并操作。</li>\n</ol>\n<h1><span id=\"分块上传\">分块上传</span></h1>\n<h2><span id=\"1-尝试秒传\">1、尝试秒传</span></h2>\n<p>秒传是利用文件的哈希值，来对文件进行唯一值匹配，若能够匹配成功，则说明文件已被上传，只需要插入下mysql里面的数据即可，这也就是秒传的意思。</p>\n<p>这里在实现秒传时，在开源项目<code>BaiduPCS-Go</code>中，是需要：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"path\"</span>:           targetPath,                    <span class=\"comment\">// 上传文件的全路径名</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"content-length\"</span>: strconv.FormatInt(length, <span class=\"number\">10</span>), <span class=\"comment\">// 待秒传的文件长度</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"content-md5\"</span>:    contentMD5,                    <span class=\"comment\">// 待秒传的文件的MD5</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"slice-md5\"</span>:      sliceMD5,                      <span class=\"comment\">// 待秒传的文件前256kb的MD5</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"content-crc32\"</span>:  crc32,                         <span class=\"comment\">// 待秒传文件CRC32</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"ondup\"</span>:          <span class=\"string\">\"overwrite\"</span>,                   <span class=\"comment\">// overwrite: 表示覆盖同名文件; newcopy: 表示生成文件副本并进行重命名，命名规则为“文件名_日期.后缀”</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不过在<code>github.com/iikira/BaiduPCS-Go/blob/master/pcsutil/checksum/checksum.go</code>文件中：</p>\n<p>作者表示，这个<code>前256kb的MD5</code>和<code>CRC32</code>不是必须。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 314行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 文件大于256kb, 应该要检测秒传, 反之则不应检测秒传</span></span><br><span class=\"line\"><span class=\"comment\">// 经测试, 秒传文件并非一定要大于256KB</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> task.uploadInfo.Length &gt;= requiredSliceSize &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// do nothing</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 经过测试, 秒传文件并非需要前256kb切片的md5值, 只需格式符合即可</span></span><br><span class=\"line\">task.uploadInfo.SliceMD5Sum()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 经测试, 文件的 crc32 值并非秒传文件所必需</span></span><br><span class=\"line\"><span class=\"comment\">// task.uploadInfo.Crc32Sum()</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"2-初始化分块上传信息\">2、初始化分块上传信息</span></h2>\n<p>当客户端需要上传文件时，首先会向服务端一个接口传递文件信息，这里我们可以获取：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* @apiParam filehash  string\t文件计算的哈希计算值</span><br><span class=\"line\">* @apiParam filesize  int\t    文件大小</span><br></pre></td></tr></table></figure>\n<p>在这步操作中，我们需要填充这个结构体。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MultipleUploadInfo <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tFileHash   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tFileSize   <span class=\"keyword\">int</span></span><br><span class=\"line\">\tUploadID   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tChunkSize  <span class=\"keyword\">int</span></span><br><span class=\"line\">\tChunkCount <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upInfo := &amp;MultipartUploadInfo&#123;</span><br><span class=\"line\">    FileHash:   filehash,</span><br><span class=\"line\">    FileSize:   filesize,</span><br><span class=\"line\">    <span class=\"comment\">// UploadID，我在代码里面是使用的函数NewObjectId()，也就是MongoDB的ID生成方式，这个我在之前的博客中也做了备忘。</span></span><br><span class=\"line\">    UploadID:   username + fmt.Sprintf(<span class=\"string\">\"%x\"</span>, time.Now().UnixNano()),</span><br><span class=\"line\">    ChunkSize:  <span class=\"number\">5</span> &lt;&lt; <span class=\"number\">10</span> &lt;&lt; <span class=\"number\">10</span>, <span class=\"comment\">// 5MB</span></span><br><span class=\"line\">    <span class=\"comment\">// 5MB 为一个分块，可以根据服务器性能适当调整</span></span><br><span class=\"line\">    ChunkCount: <span class=\"keyword\">int</span>(math.Ceil(<span class=\"keyword\">float64</span>(filesize) / (<span class=\"number\">5</span> &lt;&lt; <span class=\"number\">10</span> &lt;&lt; <span class=\"number\">10</span>))),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后需要将这个数据保存下来，因为在后面的使用中需要使用到。</p>\n<p>可以存储在内存中，使用<code>map</code>进行管理（我之前是使用这种方式，所以<code>UploadID</code>我得保持唯一），同样的也可以使用<code>Redis</code>、<code>Memcached</code>，我这里使用到了<code>Map</code>，项目里头有变化。</p>\n<p>此结构体需要返回给客户端。</p>\n<h2><span id=\"3-分块上传\">3、分块上传</span></h2>\n<p>客户端按照分块上传信息，分块读取文件流上传给服务端，按照<code>ChunkSize</code>进行读取。</p>\n<p>上传时，附带上此次上传的<code>Chunk</code>次数。</p>\n<p>服务器将这些数据保存在一个临时目录下，按先后<code>Chunk</code>顺序进行命名，方便合并时使用。</p>\n<p>服务器同时也需要记录该<code>UploadID</code>上传的<code>Chunk</code>次数</p>\n<h2><span id=\"4-合并\">4、合并</span></h2>\n<p>客户端上传完成后，请求该接口（当然，也可以服务器每次接受分块都去检查分块是否已经上传完了，或者是客户端在最后一次上传时，告知服务器这是最后一次上传，这里为了拆开逻辑，故分开接口）。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1、验证ChunkCount是否匹配；</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2、验证分块文件是否对的上ChunkCount；</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3、新建一个文件，将各个分块文件，以追加的方式写入文件，不需要一次性读取到内存，使用io.copy()；</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4、上传都完成后，将文件信息保存到MySQL中。</span></span><br></pre></td></tr></table></figure>\n<h1><span id=\"断点续传断点下载\">断点续传/断点下载</span></h1>\n<p>这两者可以说都是上面那个过程，操作都是类似的，没有什么不一样，同样是控制分块信息，控制分块上传与下载，即使中间终端，也可以重新确认信息后接上上一次中断的过程继续开始操作。</p>\n<p>这里我偷懒没有将代码拿出来进行展示，这里仅展示逻辑了。</p>\n<h1><span id=\"记录代码\">记录代码</span></h1>\n<p><code>github.com/iikira/BaiduPCS-Go/blob/master/pcsutil/checksum/checksum.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Package checksum 校验本地文件包</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> checksum</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"crypto/md5\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/iikira/BaiduPCS-Go/pcsutil/converter\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"hash\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"hash/crc32\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"io\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tdefaultBufSize = <span class=\"number\">256</span> * converter.KB</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> (</span><br><span class=\"line\">\t<span class=\"comment\">// LocalFileMeta 本地文件元信息</span></span><br><span class=\"line\">\tLocalFileMeta <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tPath     <span class=\"keyword\">string</span> <span class=\"string\">`json:\"path\"`</span>     <span class=\"comment\">// 本地路径</span></span><br><span class=\"line\">\t\tLength   <span class=\"keyword\">int64</span>  <span class=\"string\">`json:\"length\"`</span>   <span class=\"comment\">// 文件大小</span></span><br><span class=\"line\">\t\tSliceMD5 []<span class=\"keyword\">byte</span> <span class=\"string\">`json:\"slicemd5\"`</span> <span class=\"comment\">// 文件前 requiredSliceLen (256KB) 切片的 md5 值</span></span><br><span class=\"line\">\t\tMD5      []<span class=\"keyword\">byte</span> <span class=\"string\">`json:\"md5\"`</span>      <span class=\"comment\">// 文件的 md5</span></span><br><span class=\"line\">\t\tCRC32    <span class=\"keyword\">uint32</span> <span class=\"string\">`json:\"crc32\"`</span>    <span class=\"comment\">// 文件的 crc32</span></span><br><span class=\"line\">\t\tModTime  <span class=\"keyword\">int64</span>  <span class=\"string\">`json:\"modtime\"`</span>  <span class=\"comment\">// 修改日期</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// LocalFileInfo LocalFile</span></span><br><span class=\"line\">\tLocalFile <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tLocalFileMeta</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbufSize <span class=\"keyword\">int</span></span><br><span class=\"line\">\t\tbuf     []<span class=\"keyword\">byte</span></span><br><span class=\"line\">\t\tFile    *os.File <span class=\"comment\">// 文件</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// SumConfig 计算文件摘要值配置</span></span><br><span class=\"line\">\tSumConfig <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tIsMD5Sum      <span class=\"keyword\">bool</span></span><br><span class=\"line\">\t\tIsSliceMD5Sum <span class=\"keyword\">bool</span></span><br><span class=\"line\">\t\tIsCRC32Sum    <span class=\"keyword\">bool</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewLocalFileInfo</span><span class=\"params\">(localPath <span class=\"keyword\">string</span>, bufSize <span class=\"keyword\">int</span>)</span> *<span class=\"title\">LocalFile</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;LocalFile&#123;</span><br><span class=\"line\">\t\tLocalFileMeta: LocalFileMeta&#123;</span><br><span class=\"line\">\t\t\tPath: localPath,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tbufSize: bufSize,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// OpenPath 检查文件状态并获取文件的大小 (Length)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lf *LocalFile)</span> <span class=\"title\">OpenPath</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> lf.File != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlf.File.Close()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> err error</span><br><span class=\"line\">\tlf.File, err = os.Open(lf.Path)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tinfo, err := lf.File.Stat()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlf.Length = info.Size()</span><br><span class=\"line\">\tlf.ModTime = info.ModTime().Unix()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Close 关闭文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lf *LocalFile)</span> <span class=\"title\">Close</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> lf.File == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> fmt.Errorf(<span class=\"string\">\"file is nil\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> lf.File.Close()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lf *LocalFile)</span> <span class=\"title\">initBuf</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> lf.buf == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> lf.bufSize != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tlf.buf = <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, lf.bufSize)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tlf.buf = <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, defaultBufSize)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lf *LocalFile)</span> <span class=\"title\">repeatRead</span><span class=\"params\">(ws ...io.Writer)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> lf.File == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlf.initBuf()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\tbegin <span class=\"keyword\">int64</span></span><br><span class=\"line\">\t\tn     <span class=\"keyword\">int</span></span><br><span class=\"line\">\t\terr   error</span><br><span class=\"line\">\t)</span><br><span class=\"line\"></span><br><span class=\"line\">\thandle := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tbegin += <span class=\"keyword\">int64</span>(n)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> k := <span class=\"keyword\">range</span> ws &#123;</span><br><span class=\"line\">\t\t\tws[k].Write(lf.buf[:n])</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 读文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tn, err = lf.File.ReadAt(lf.buf, begin)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err == io.EOF &#123;</span><br><span class=\"line\">\t\t\t\thandle()</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Printf(<span class=\"string\">\"%s\\n\"</span>, err)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\thandle()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Sum 计算文件摘要值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lf *LocalFile)</span> <span class=\"title\">Sum</span><span class=\"params\">(cfg SumConfig)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\tmd5w   hash.Hash</span><br><span class=\"line\">\t\tcrc32w hash.Hash32</span><br><span class=\"line\">\t)</span><br><span class=\"line\"></span><br><span class=\"line\">\tws := <span class=\"built_in\">make</span>([]io.Writer, <span class=\"number\">0</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cfg.IsMD5Sum &#123;</span><br><span class=\"line\">\t\tmd5w = md5.New()</span><br><span class=\"line\">\t\tws = <span class=\"built_in\">append</span>(ws, md5w)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cfg.IsCRC32Sum &#123;</span><br><span class=\"line\">\t\tcrc32w = crc32.NewIEEE()</span><br><span class=\"line\">\t\tws = <span class=\"built_in\">append</span>(ws, crc32w)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cfg.IsSliceMD5Sum &#123;</span><br><span class=\"line\">\t\tlf.SliceMD5Sum()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlf.repeatRead(ws...)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cfg.IsMD5Sum &#123;</span><br><span class=\"line\">\t\tlf.MD5 = md5w.Sum(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cfg.IsCRC32Sum &#123;</span><br><span class=\"line\">\t\tlf.CRC32 = crc32w.Sum32()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Md5Sum 获取文件的 md5 值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lf *LocalFile)</span> <span class=\"title\">Md5Sum</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlf.Sum(SumConfig&#123;</span><br><span class=\"line\">\t\tIsMD5Sum: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// SliceMD5Sum 获取文件前 requiredSliceLen (256KB) 切片的 md5 值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lf *LocalFile)</span> <span class=\"title\">SliceMD5Sum</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> lf.File == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取前 256KB 文件切片的 md5</span></span><br><span class=\"line\">\tlf.initBuf()</span><br><span class=\"line\"></span><br><span class=\"line\">\tm := md5.New()</span><br><span class=\"line\">\tn, err := lf.File.ReadAt(lf.buf, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err == io.EOF &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> md5sum</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Printf(<span class=\"string\">\"SliceMD5Sum: %s\\n\"</span>, err)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">md5sum:</span><br><span class=\"line\">\tm.Write(lf.buf[:n])</span><br><span class=\"line\">\tlf.SliceMD5 = m.Sum(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Crc32Sum 获取文件的 crc32 值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lf *LocalFile)</span> <span class=\"title\">Crc32Sum</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlf.Sum(SumConfig&#123;</span><br><span class=\"line\">\t\tIsCRC32Sum: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>github.com/iikira/BaiduPCS-Go/blob/master/pcsutil/checksum/file.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> checksum</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"bytes\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// EqualLengthMD5 检测md5和大小是否相同</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lfm *LocalFileMeta)</span> <span class=\"title\">EqualLengthMD5</span><span class=\"params\">(m *LocalFileMeta)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> lfm.Length != m.Length &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> bytes.Compare(lfm.MD5, m.MD5) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CompleteAbsPath 补齐绝对路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lfm *LocalFileMeta)</span> <span class=\"title\">CompleteAbsPath</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> filepath.IsAbs(lfm.Path) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tabsPath, err := filepath.Abs(lfm.Path)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlfm.Path = absPath</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GetFileSum 获取文件的大小, md5, 前256KB切片的 md5, crc32</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetFileSum</span><span class=\"params\">(localPath <span class=\"keyword\">string</span>, cfg *SumConfig)</span> <span class=\"params\">(lf *LocalFile, err error)</span></span> &#123;</span><br><span class=\"line\">\tfile, err := os.Open(localPath)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> file.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tfileStat, err := file.Stat()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> fileStat.IsDir() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">\"sum %s: is a directory\"</span>, localPath)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlf = &amp;LocalFile&#123;</span><br><span class=\"line\">\t\tFile: file,</span><br><span class=\"line\">\t\tLocalFileMeta: LocalFileMeta&#123;</span><br><span class=\"line\">\t\t\tPath:   localPath,</span><br><span class=\"line\">\t\t\tLength: fileStat.Size(),</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlf.Sum(*cfg)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> lf, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"服务器","slug":"服务器","permalink":"chunlife.top/tags/服务器/"},{"name":"上传下载","slug":"上传下载","permalink":"chunlife.top/tags/上传下载/"}]},{"title":"etcd备份导出数据","date":"2019-04-08T09:20:40.000Z","path":"2019/04/08/etcd备份导出数据/","content":"<p>一般etcd是不需要手动导出数据的，毕竟使用etcd都是使用多节点，也就是说并不需要将数据导入其他节点，当然如果你需要将本机的etcd导入到其他etcd服务器上，使用<code>etcdctl </code>可进行备份和恢复。</p>\n<p>不过这里我们有个需求，在代码里头做一个备份的接口，比较的简单的，这里直接记录一下。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> EtcdStore <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tsync.RWMutex</span><br><span class=\"line\">\tprefix    <span class=\"keyword\">string</span></span><br><span class=\"line\">\trawClient *clientv3.Client</span><br><span class=\"line\">\tkv        clientv3.KV</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *EtcdStore)</span> <span class=\"title\">ConnectEtcd</span><span class=\"params\">(addr <span class=\"keyword\">string</span>)</span> <span class=\"params\">(err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化配置</span></span><br><span class=\"line\">\tconfig := clientv3.Config&#123;</span><br><span class=\"line\">\t\tEndpoints:   []<span class=\"keyword\">string</span>&#123;addr&#125;,  <span class=\"comment\">// 集群地址</span></span><br><span class=\"line\">\t\tDialTimeout: time.Second * <span class=\"number\">2</span>, <span class=\"comment\">// 连接超时</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 建立连接</span></span><br><span class=\"line\">\te.rawClient, err = clientv3.New(config)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\te.kv = clientv3.NewKV(e.rawClient)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *EtcdStore)</span> <span class=\"title\">SetPrefixPath</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\te.prefix = path</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *EtcdStore)</span> <span class=\"title\">BackupTo</span><span class=\"params\">(to <span class=\"keyword\">string</span>)</span> <span class=\"params\">(err error)</span></span> &#123;</span><br><span class=\"line\">\te.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> e.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 建立连接</span></span><br><span class=\"line\">\ttargetEtcdClient, err := clientv3.New(clientv3.Config&#123;</span><br><span class=\"line\">\t\tEndpoints:   []<span class=\"keyword\">string</span>&#123;to&#125;,    <span class=\"comment\">// 集群地址</span></span><br><span class=\"line\">\t\tDialTimeout: time.Second * <span class=\"number\">2</span>, <span class=\"comment\">// 连接超时</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> targetEtcdClient.Close()</span><br><span class=\"line\">\tkv := clientv3.NewKV(targetEtcdClient)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// get一下`prefix`目录下的所有信息</span></span><br><span class=\"line\">\tgetResp, err := e.kv.Get(context.TODO(),</span><br><span class=\"line\">\t\te.prefix, clientv3.WithPrefix())</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, kvpair := <span class=\"keyword\">range</span> getResp.Kvs &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"keyword\">string</span>(kvpair.Key), <span class=\"keyword\">string</span>(kvpair.Value))</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建Op: operation  对操作的抽象</span></span><br><span class=\"line\">\t\tputOp := clientv3.OpPut(<span class=\"keyword\">string</span>(kvpair.Key), <span class=\"keyword\">string</span>(kvpair.Value))</span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行OP</span></span><br><span class=\"line\">\t\topResp, err := kv.Do(context.TODO(), putOp)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(err, opResp.Put().Header.Revision)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提取路径， /backup/test/1  取出`1`</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ExtractPrefix</span><span class=\"params\">(regKey, prefix <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> strings.TrimPrefix(regKey, prefix)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *EtcdStore)</span> <span class=\"title\">BackupToSpecifyDir</span><span class=\"params\">(toAddr, newPrefix <span class=\"keyword\">string</span>)</span> <span class=\"params\">(err error)</span></span> &#123;</span><br><span class=\"line\">\te.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> e.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 建立连接</span></span><br><span class=\"line\">\ttargetEtcdClient, err := clientv3.New(clientv3.Config&#123;</span><br><span class=\"line\">\t\tEndpoints:   []<span class=\"keyword\">string</span>&#123;toAddr&#125;, <span class=\"comment\">// 集群地址</span></span><br><span class=\"line\">\t\tDialTimeout: time.Second * <span class=\"number\">2</span>,  <span class=\"comment\">// 连接超时</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> targetEtcdClient.Close()</span><br><span class=\"line\">\tkv := clientv3.NewKV(targetEtcdClient)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// get一下`prefix`目录下的所有信息</span></span><br><span class=\"line\">\tgetResp, err := e.kv.Get(context.TODO(),</span><br><span class=\"line\">\t\te.prefix, clientv3.WithPrefix())</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, kvpair := <span class=\"keyword\">range</span> getResp.Kvs &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"keyword\">string</span>(kvpair.Key), <span class=\"keyword\">string</span>(kvpair.Value))</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 重组路径</span></span><br><span class=\"line\">\t\tnewEtcdPath := path.Join(newPrefix, ExtractPrefix(<span class=\"keyword\">string</span>(kvpair.Key), e.prefix))</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建Op: operation  对操作的抽象</span></span><br><span class=\"line\">\t\tputOp := clientv3.OpPut(newEtcdPath, <span class=\"keyword\">string</span>(kvpair.Value))</span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行OP</span></span><br><span class=\"line\">\t\topResp, err := kv.Do(context.TODO(), putOp)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(err, opResp.Put().Header.Revision)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/02/18/B站源码中的log-agent/\">B站源码中的log-agent</a></li><li><a href=\"chunlife.top/2019/12/18/使用unsafe-pointer引发GC错误/\">使用unsafe pointer引发GC错误</a></li><li><a href=\"chunlife.top/2019/09/27/MongoDB多表查询/\">MongoDB多表查询</a></li><li><a href=\"https://lailin.xyz/post/11996.html\">Go Web 小技巧（三）Gin 参数绑定</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"etcd备份","slug":"etcd备份","permalink":"chunlife.top/tags/etcd备份/"}]},{"title":"golang获取目录下的文件","date":"2019-04-08T08:52:20.000Z","path":"2019/04/08/golang获取目录下的文件/","content":"<p>获取目录下的文件或子目录下的文件。</p>\n<a id=\"more\"></a>\n<h2><span id=\"一-遍历目录以及子目录\">一、遍历目录，以及子目录。</span></h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// WalkDir 获取指定目录及所有子目录下的所有文件，可以匹配后缀过滤。 找到第一个.exe文件就返回即可</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WalkDir</span><span class=\"params\">(dirPth, suffix <span class=\"keyword\">string</span>)</span> <span class=\"params\">(files <span class=\"keyword\">string</span>, err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//files = make([]string, 0, 30)</span></span><br><span class=\"line\">\tsuffix = strings.ToLower(suffix) <span class=\"comment\">//忽略后缀匹配的大小写</span></span><br><span class=\"line\"></span><br><span class=\"line\">\terr = filepath.Walk(dirPth, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(filename <span class=\"keyword\">string</span>, fi os.FileInfo, err error)</span> <span class=\"title\">error</span></span> &#123; <span class=\"comment\">//遍历目录</span></span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"file name :\"</span>, fi.Name())</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> files != <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> fi.IsDir() &#123; <span class=\"comment\">// 忽略目录</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> strings.HasSuffix(strings.ToLower(fi.Name()), suffix) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//files = append(files, filename)</span></span><br><span class=\"line\">\t\t\tfiles = filename</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> files, err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"二-遍历目录下的文件列表\">二、遍历目录下的文件列表</span></h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">listAll</span><span class=\"params\">(path <span class=\"keyword\">string</span>, suffix <span class=\"keyword\">string</span>)</span> <span class=\"params\">(fileTarget <span class=\"keyword\">string</span>, err error)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 获取该路径下的文件列表，并不会像Walk一样遍历子目录</span></span><br><span class=\"line\">   files, err := ioutil.ReadDir(path)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span> _, fi := <span class=\"keyword\">range</span> files &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> fi.IsDir() &#123;</span><br><span class=\"line\">         <span class=\"comment\">// 目录则直接跳过</span></span><br><span class=\"line\">         <span class=\"keyword\">continue</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> strings.HasSuffix(strings.ToLower(fi.Name()), suffix) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//files = append(files, filename)</span></span><br><span class=\"line\">            fileTarget = filepath.Join(path, fi.Name())</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> fileTarget, err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/02/18/B站源码中的log-agent/\">B站源码中的log-agent</a></li><li><a href=\"chunlife.top/2019/12/18/使用unsafe-pointer引发GC错误/\">使用unsafe pointer引发GC错误</a></li><li><a href=\"chunlife.top/2019/09/27/MongoDB多表查询/\">MongoDB多表查询</a></li><li><a href=\"https://lailin.xyz/post/11996.html\">Go Web 小技巧（三）Gin 参数绑定</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"}]},{"title":"Go按行读写文件","date":"2019-04-02T06:34:22.000Z","path":"2019/04/02/Go按行读写文件/","content":"<p>代码：</p>\n<a id=\"more\"></a>\n<p>按行写文件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f, err := os.OpenFile(fileName,</span><br><span class=\"line\">os.O_WRONLY|os.O_CREATE|os.O_TRUNC, os.ModePerm)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">w := bufio.NewWriter(f)</span><br><span class=\"line\">fmt.Fprintln(w, fmt.Sprintf(<span class=\"string\">\"start analysis log at the %s \\r\\n\"</span>, <span class=\"string\">`\"`</span>+logFileDir+<span class=\"string\">`\"`</span>))</span><br><span class=\"line\">w.Flush()</span><br></pre></td></tr></table></figure>\n<p>按行读文件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buf := bufio.NewReader(file)</span><br><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\tline, err := buf.ReadString(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">\tline = strings.TrimSpace(line)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err == io.EOF &#123; <span class=\"comment\">//读取结束，会报EOF</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/02/18/B站源码中的log-agent/\">B站源码中的log-agent</a></li><li><a href=\"chunlife.top/2019/12/18/使用unsafe-pointer引发GC错误/\">使用unsafe pointer引发GC错误</a></li><li><a href=\"chunlife.top/2019/10/21/一次Go基础知识讲解（内部分享）/\">一次Go基础知识讲解（内部分享）</a></li><li><a href=\"https://lailin.xyz/post/11996.html\">Go Web 小技巧（三）Gin 参数绑定</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"基础","slug":"基础","permalink":"chunlife.top/tags/基础/"},{"name":"读写文件","slug":"读写文件","permalink":"chunlife.top/tags/读写文件/"}]},{"title":"etcd分布式乐观锁","date":"2019-04-01T03:15:21.000Z","path":"2019/04/01/etcd分布式乐观锁/","content":"<p>在实际应用中，我们若需要分布式的操作，大多数时候并不需要通过手动实现分布式的协议，而可以借助分布式的应用的来实现分布式应用。</p>\n<a id=\"more\"></a>\n<h2><span id=\"etcd原理特性\">etcd原理特性</span></h2>\n<p>etcd实现分布式一致性性，使用到了Raft协议。</p>\n<blockquote>\n<p><a href=\"https://github.com/aCoder2013/blog/issues/30\" target=\"_blank\" rel=\"noopener\">Etcd Raft使用入门及原理解析</a></p>\n<p><strong>Raft</strong>是一个分布式一致性算法，充分的利用了可复制状态机以及日志。其最核心的设计目标就是易于理解。在性能、错误容错等方面来看有点类似<strong>Paxos</strong>，但不同之处在于，Raft论文较为清晰的描述了其主要流程以及其中一些细节问题，而Paxos我们知道非常难以理解。</p>\n<p>当构建一个分布式系统时，一个非常重要的设计目标就是<strong>fault tolerance</strong>。如果系统基于Raft协议实现，那么当其中一个节点挂掉，或者发生了网络分区等异常情况时，只要大多数节点仍然能够正常通讯，整个集群就能够正常对外提供服务而不会挂掉。</p>\n<p>Etcd raft基本上已经实现了Raft协议的完整特性，包括:</p>\n<ul>\n<li>Leader选举</li>\n<li>日志复制</li>\n<li>日志压缩</li>\n<li>成员变更</li>\n<li>Leader和Follower都支持高效的线性只读查询请求</li>\n<li>通过batch、pipeline等手段优化日志复制、网络IO的延迟</li>\n</ul>\n</blockquote>\n<h3><span id=\"etcd的重要特性\">etcd的重要特性</span></h3>\n<ul>\n<li>底层存储是按key有序排列的，可以顺序遍历</li>\n<li>因为key有序，所以etcd天然支持按目录结构高效遍历</li>\n<li>支持复杂事务，提供类似if · · then … else …的事务能力</li>\n<li>基于租约机制实现key的TTL过期</li>\n</ul>\n<h3><span id=\"etcd与raft的关系\">etcd与Raft的关系</span></h3>\n<ul>\n<li>Raft是强一致的集群日志同步算法</li>\n<li>etcd是一个分布式KV存储</li>\n<li>etcd利用raft算法在集群中同步key-value</li>\n</ul>\n<p>可以理解为Raft协议对日志进行管理，etcd对K/V进行管理。为什么会这么说呢，这里需要先了解一下大多数理论（<code>quorum</code>）。</p>\n<h2><span id=\"quorum模型\">quorum模型</span></h2>\n<p>分布式系统的设计中会涉及到许多的协议、机制用来解决可靠性问题、数据一致性问题等，quorum 机制就是其中的一种。</p>\n<h3><span id=\"抽屉理论\">抽屉理论</span></h3>\n<ul>\n<li>一个班级60人</li>\n<li>有一个秘密，告知给班里的31个人</li>\n<li>那么随便挑选31个人</li>\n<li>一定有1个人知道秘密</li>\n</ul>\n<p>抽屉理论是对<code>quorum</code>模型的理解，实际上<code>quorum</code>模型解析的就是这样的一个机制。</p>\n<h3><span id=\"quorum模型\">quorum模型</span></h3>\n<p>集群要出现大多数，那么就需要奇数个节点，一下为三个节点的实例。<img src=\"1554101624877.png\" alt=\"日志复制\"></p>\n<ul>\n<li>① 前端像etcd中写入数据，请求传递给leader；</li>\n<li>② leader节点将<code>写日志</code>传递给子节点，当其中一个<code>follower</code>，返回日志复制成功后，则表示已成功复制给大多数（leader也算一个节点）。</li>\n<li>③ leader节点确认大多数复制成功后，本地提交用户修改操作（此时子节点并没有进行提交），并返回前端修改成功。</li>\n</ul>\n<p>leader节点在本地提交，且通知到客户端成功进行操作后，会异步的告知子节点进行提交操作，follower也将完成节点的本地提交操作。只需要保证日志能够复制给大多数即可。</p>\n<p><img src=\"1554102404533.png\" alt=\"1554102404533\"></p>\n<blockquote>\n<p>在一个 Raft 集群中只有 Leader 节点能够处理客户端的请求（如果客户端的请求发到了 Follower，Follower 将会把请求重定向到 Leader），客户端的每一个请求都包含一条被复制状态机执行的指令。</p>\n</blockquote>\n<p>更为详细的日志复制过程可以查看，<a href=\"https://gitbook.cn/books/5bb037728f7d8b7e900ff2d7/index.html\" target=\"_blank\" rel=\"noopener\">分布式锁的最佳实践之：基于 Etcd 的分布式锁</a>，其中的<code>Raft 算法之 Log replication 原理</code>。</p>\n<p><img src=\"1554102849417.png\" alt=\"Raft 算法之 Log replication 原理\"></p>\n<h2><span id=\"分布式乐观锁简易测试\">分布式乐观锁简易测试</span></h2>\n<p>使用etcd的租约和watch，一个用于自动释放锁，一个用于抢占锁。</p>\n<p>这篇博客有更详细的解释：<a href=\"https://segmentfault.com/a/1190000014297365\" target=\"_blank\" rel=\"noopener\">分布式锁的原理和实现详解</a></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"context\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/coreos/etcd/clientv3\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\tconfig         clientv3.Config</span><br><span class=\"line\">\t\tclient         *clientv3.Client</span><br><span class=\"line\">\t\terr            error</span><br><span class=\"line\">\t\tlease          clientv3.Lease</span><br><span class=\"line\">\t\tleaseGrantResp *clientv3.LeaseGrantResponse</span><br><span class=\"line\">\t\tleaseId        clientv3.LeaseID</span><br><span class=\"line\">\t\tkeepRespChan   &lt;-<span class=\"keyword\">chan</span> *clientv3.LeaseKeepAliveResponse</span><br><span class=\"line\">\t\tkeepResp       *clientv3.LeaseKeepAliveResponse</span><br><span class=\"line\">\t\tctx            context.Context</span><br><span class=\"line\">\t\tcancelFunc     context.CancelFunc</span><br><span class=\"line\">\t\tkv             clientv3.KV</span><br><span class=\"line\">\t\ttxn            clientv3.Txn</span><br><span class=\"line\">\t\ttxnResp        *clientv3.TxnResponse</span><br><span class=\"line\">\t)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 客户端配置</span></span><br><span class=\"line\">\tconfig = clientv3.Config&#123;</span><br><span class=\"line\">\t\tEndpoints:   []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"www.wukoon-app.com:2379\"</span>&#125;,</span><br><span class=\"line\">\t\tDialTimeout: <span class=\"number\">5</span> * time.Second,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 建立连接</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> client, err = clientv3.New(config); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// lease实现锁自动过期:</span></span><br><span class=\"line\">\t<span class=\"comment\">// op操作</span></span><br><span class=\"line\">\t<span class=\"comment\">// txn事务: if else then</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 1, 上锁 (创建租约, 自动续租, 拿着租约去抢占一个key)</span></span><br><span class=\"line\">\tlease = clientv3.NewLease(client)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 申请一个5秒的租约</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> leaseGrantResp, err = lease.Grant(context.TODO(), <span class=\"number\">5</span>); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 拿到租约的ID</span></span><br><span class=\"line\">\tleaseId = leaseGrantResp.ID</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 准备一个用于取消自动续租的context</span></span><br><span class=\"line\">\tctx, cancelFunc = context.WithCancel(context.TODO())</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 确保函数退出后, 自动续租会停止</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> cancelFunc()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> lease.Revoke(context.TODO(), leaseId)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 5秒后会取消自动续租</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> keepRespChan, err = lease.KeepAlive(ctx, leaseId); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 处理续约应答的协程</span></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> keepResp = &lt;-keepRespChan:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> keepRespChan == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tfmt.Println(<span class=\"string\">\"租约已经失效了\"</span>)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">goto</span> END</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 每秒会续租一次, 所以就会受到一次应答</span></span><br><span class=\"line\">\t\t\t\t\tfmt.Println(<span class=\"string\">\"收到自动续租应答:\"</span>, keepResp.ID)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\tEND:</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//  if 不存在key， then 设置它, else 抢锁失败</span></span><br><span class=\"line\">\tkv = clientv3.NewKV(client)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建事务</span></span><br><span class=\"line\">\ttxn = kv.Txn(context.TODO())</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 定义事务</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 如果key不存在</span></span><br><span class=\"line\">\ttxn.If(clientv3.Compare(clientv3.CreateRevision(<span class=\"string\">\"/cron/lock/job9\"</span>), <span class=\"string\">\"=\"</span>, <span class=\"number\">0</span>)).</span><br><span class=\"line\">\t\tThen(clientv3.OpPut(<span class=\"string\">\"/cron/lock/job9\"</span>, <span class=\"string\">\"xxx\"</span>, clientv3.WithLease(leaseId))).</span><br><span class=\"line\">\t\tElse(clientv3.OpGet(<span class=\"string\">\"/cron/lock/job9\"</span>)) <span class=\"comment\">// 否则抢锁失败</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 提交事务</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> txnResp, err = txn.Commit(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"comment\">// 没有问题</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 判断是否抢到了锁</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !txnResp.Succeeded &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"锁被占用:\"</span>, <span class=\"keyword\">string</span>(txnResp.Responses[<span class=\"number\">0</span>].GetResponseRange().Kvs[<span class=\"number\">0</span>].Value))</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 2, 处理业务</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"处理任务\"</span>)</span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 3, 释放锁(取消自动续租, 释放租约)</span></span><br><span class=\"line\">\t<span class=\"comment\">// defer 会把租约释放掉, 关联的KV就被删除了</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/03/02/6-824-Lab-1-MapReduce/\">6.824 Lab 1: MapReduce</a></li><li><a href=\"chunlife.top/2019/02/28/学习使用confd/\">etcd配置中心——confd/viper</a></li><li><a href=\"http://blog.tianfeiyu.com/2019/10/08/etcd_improvements/\">etcd 性能测试与调优</a></li></ul></div>","categories":[{"name":"分布式服务","slug":"分布式服务","permalink":"chunlife.top/categories/分布式服务/"}],"tags":[{"name":"分布式","slug":"分布式","permalink":"chunlife.top/tags/分布式/"},{"name":"etcd","slug":"etcd","permalink":"chunlife.top/tags/etcd/"},{"name":"乐观锁","slug":"乐观锁","permalink":"chunlife.top/tags/乐观锁/"},{"name":"distributed lock - 分布式锁","slug":"distributed-lock-分布式锁","permalink":"chunlife.top/tags/distributed-lock-分布式锁/"}]},{"title":"es告警功能——elastalert","date":"2019-03-27T08:39:28.000Z","path":"2019/03/27/es告警功能——elastalert/","content":"<p>ElasticSearch可以使用X-Pack进行报警功能，由于其是收费使用，而当下也仅是使用告警功能。</p>\n<a id=\"more\"></a> \n<p>所以这里寻求的是开源解决方案，<strong><a href=\"https://github.com/Yelp/elastalert\" target=\"_blank\" rel=\"noopener\">elastalert</a></strong>，在GitHub中star数量5K+，已经算是很受欢迎的项目了，可以配合<code>kibana</code>进行使用，适用于所有版本的Elasticsearch，而且官方使用教程还挺详细，可以参考进行使用。</p>\n<p>使用elastalert需要预先配置rule.yaml，根据软件介绍，选择适合自身规则的软件告警规则，根据告警规则填充详细的文档。</p>\n<p>我们可以定义多个yaml，同时进行多种告警。对于每个rule.yaml，其包含一种告警发生规则，即阈值；包含一些告警方式，即email、jira等。</p>\n<h2><span id=\"安装elastalert\">安装Elastalert</span></h2>\n<p>安装之前需要准备好Python的环境，这里已经提前安装完成，<code>Python2.7</code>。</p>\n<p>拉取最新的elastalert仓库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> pip install elastalert</span></span><br><span class=\"line\">或者</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> https://github.com/Yelp/elastalert.git</span></span><br></pre></td></tr></table></figure>\n<p>安装模块：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> pip install <span class=\"string\">\"setuptools&gt;=11.3\"</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo python setup.py install</span></span><br></pre></td></tr></table></figure>\n<p>安装成功后：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~$ ls /usr/local/bin/elastalert*</span><br><span class=\"line\">/usr/local/bin/elastalert               /usr/local/bin/elastalert-rule-from-kibana</span><br><span class=\"line\">/usr/local/bin/elastalert-create-index  /usr/local/bin/elastalert-test-rule</span><br></pre></td></tr></table></figure>\n<ul>\n<li>elastalert-create-index  ElastAlert将有关其查询及其警报的信息和元数据保存回Elasticsearch。这对于审计，调试很有用，它允许ElastAlert重新启动并从中断的位置恢复。并不实际影响ElastAlert运行，但强烈推荐这么做。</li>\n<li>elastalert-rule-from-kibana 从 Kibana 已保存的仪表盘中读取 Filtering 设置，帮助生成 <code>config.yaml</code>里的配置。不过注意，它只会读取 filtering，不包括 queries。</li>\n<li>elastalert-test-rule 测试自定义配置中的 rule 设置。</li>\n<li>elastalert运行elastalert。</li>\n</ul>\n<h2><span id=\"设置elasticsearch\">设置Elasticsearch</span></h2>\n<blockquote>\n<p>ElastAlert将有关其查询及其警报的信息和元数据保存回Elasticsearch。这对于审计，调试很有用，它允许ElastAlert重新启动并从中断的位置恢复。并不实际影响ElastAlert运行，但强烈推荐这么做。</p>\n</blockquote>\n<p>会需要输入es host port等参数，其他默认即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ elastalert-create-index</span><br><span class=\"line\">New index name (Default elastalert_status)</span><br><span class=\"line\">Name of existing index to copy (Default None)</span><br><span class=\"line\">New index elastalert_status created</span><br><span class=\"line\">Done!</span><br></pre></td></tr></table></figure>\n<h2><span id=\"设置配置文件configyaml和规则rule\">设置配置文件config.yaml和规则Rule</span></h2>\n<h3><span id=\"配置文件\">配置文件</span></h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`$ cp ~/elastalert/config.yaml.example ~/elastalert/config.yaml$ vi ~/elastalert/config.yaml`</span><br></pre></td></tr></table></figure>\n<p>调试时，我仅配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This is the folder that contains the rule yaml files</span></span><br><span class=\"line\"><span class=\"comment\"># Any .yaml file will be loaded as a rule</span></span><br><span class=\"line\"><span class=\"attr\">rules_folder:</span> <span class=\"string\">example_rules</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># How often ElastAlert will query Elasticsearch</span></span><br><span class=\"line\"><span class=\"comment\"># The unit can be anything from weeks to seconds</span></span><br><span class=\"line\"><span class=\"attr\">run_every:</span></span><br><span class=\"line\"><span class=\"attr\">  minutes:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ElastAlert will buffer results from the most recent</span></span><br><span class=\"line\"><span class=\"comment\"># period of time, in case some log sources are not in real time</span></span><br><span class=\"line\"><span class=\"attr\">buffer_time:</span></span><br><span class=\"line\"><span class=\"attr\">  minutes:</span> <span class=\"number\">15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The Elasticsearch hostname for metadata writeback</span></span><br><span class=\"line\"><span class=\"comment\"># Note that every rule can have its own Elasticsearch host</span></span><br><span class=\"line\"><span class=\"attr\">es_host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The Elasticsearch port</span></span><br><span class=\"line\"><span class=\"attr\">es_port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The index on es_host which is used for metadata storage</span></span><br><span class=\"line\"><span class=\"comment\"># This can be a unmapped index, but it is recommended that you run</span></span><br><span class=\"line\"><span class=\"comment\"># elastalert-create-index to set a mapping</span></span><br><span class=\"line\"><span class=\"attr\">writeback_index:</span> <span class=\"string\">elastalert_status</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If an alert fails for some reason, ElastAlert will retry</span></span><br><span class=\"line\"><span class=\"comment\"># sending the alert until this time period has elapsed</span></span><br><span class=\"line\"><span class=\"attr\">alert_time_limit:</span></span><br><span class=\"line\"><span class=\"attr\">  days:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>配置文件上的参数意义官方都已经注释。</p>\n<p>官方文档中同样也有<a href=\"https://elastalert.readthedocs.io/en/latest/recipes/writing_filters.html#negation-and-or\" target=\"_blank\" rel=\"noopener\">注解</a>。</p>\n<h3><span id=\"配置规则\">配置规则</span></h3>\n<p><strong>特别重要</strong>：监控的index中都必须存在<code>@timestamp</code>字段；go语言中使用time格式进行存储。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;@timestamp&quot; : &#123;</span><br><span class=\"line\">            &quot;type&quot; : &quot;date&quot;,</span><br><span class=\"line\">            &quot;format&quot; : &quot;dateOptionalTime&quot;</span><br><span class=\"line\">          &#125;</span><br></pre></td></tr></table></figure>\n<p>基于<code>example_rules/example_percentage_match.yaml </code>更改。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Example</span> <span class=\"string\">Percentage</span> <span class=\"string\">Match</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">percentage_match</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">es_host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\"><span class=\"attr\">es_port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">index:</span> <span class=\"string\">pro_record</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">\"95% of all http requests should be successful\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">filter:</span></span><br><span class=\"line\"><span class=\"attr\">- term:</span></span><br><span class=\"line\"><span class=\"attr\">   _type:</span> <span class=\"string\">record</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">buffer_time:</span></span><br><span class=\"line\"><span class=\"attr\">  minutes:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#use_terms_query: true</span></span><br><span class=\"line\"><span class=\"attr\">query_key:</span> <span class=\"string\">[\"binx.keyword\"]</span></span><br><span class=\"line\"><span class=\"attr\">doc_type:</span> <span class=\"string\">record</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">match_bucket_filter:</span></span><br><span class=\"line\"><span class=\"attr\">- term:</span></span><br><span class=\"line\">    <span class=\"string\">binx.keyword:</span> <span class=\"string\">\"xxxxx\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#min_percentage: 1</span></span><br><span class=\"line\"><span class=\"attr\">max_percentage:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#bucket_interval:</span></span><br><span class=\"line\"><span class=\"comment\">#  minutes: 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#sync_bucket_interval: true</span></span><br><span class=\"line\"><span class=\"comment\">#allow_buffer_time_overlap: true</span></span><br><span class=\"line\"><span class=\"comment\">#use_run_every_query_size: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Required)</span></span><br><span class=\"line\"><span class=\"comment\"># The alert is use when a match is found</span></span><br><span class=\"line\"><span class=\"attr\">alert:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">\"debug\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>文件作为演示，数据都已被更改</p>\n</blockquote>\n<p>使用<code>elastalert-test-rule</code>对规则进行测试。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`elastalert-test-rule ~/elastalert/example_rules/example_frequency.yaml`</span><br></pre></td></tr></table></figure>\n<p>正常出现<code>Successfully loaded Example Percentage Match</code>，然后实际输出也并没报错，那到这里就规则至少文件是没问题的了。</p>\n<p>参考：<a href=\"https://elastalert.readthedocs.io/en/latest/ruletypes.html#commonconfig\" target=\"_blank\" rel=\"noopener\">Rule Types and Configuration Options</a></p>\n<p>若是想要监控特定订单下的bin错误，那就需要增加查询条件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">match_bucket_filter:</span></span><br><span class=\"line\"><span class=\"attr\">- term:</span></span><br><span class=\"line\">    <span class=\"string\">order.keyword:</span> <span class=\"string\">\"TDRAM19012\"</span></span><br><span class=\"line\"><span class=\"attr\">- term:</span></span><br><span class=\"line\">    <span class=\"string\">bin.keyword:</span> <span class=\"string\">\"2142134038\"</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"使用http-post报警\">使用HTTP POST报警</span></h3>\n<p>根据官方<a href=\"https://elastalert.readthedocs.io/en/latest/ruletypes.html#rule-types\" target=\"_blank\" rel=\"noopener\">文档</a>，查看配置参数的含义：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">alert:</span> <span class=\"string\">post</span></span><br><span class=\"line\"><span class=\"attr\">http_post_url:</span> <span class=\"string\">\"http://example.com/api\"</span></span><br><span class=\"line\"><span class=\"attr\">http_post_payload:</span></span><br><span class=\"line\"><span class=\"attr\">  ip:</span> <span class=\"string\">clientip</span></span><br><span class=\"line\"><span class=\"attr\">http_post_static_payload:</span></span><br><span class=\"line\"><span class=\"attr\">  apikey:</span> <span class=\"string\">abc123</span></span><br></pre></td></tr></table></figure>\n<p><code>alert: post</code>：指定警报方式；</p>\n<p><code>http_post_url: &quot;http://example.com/api&quot;</code>：post地址，route方法同样也为<code>post</code>；</p>\n<p><code>http_post_payload</code>：这个参数表示是否需要重定义ElastAlert的键值，例如设置了<code>ip: clientip</code>，那么原来数据中的<code>clientip</code>键，将被替换成<code>ip</code>，也可以填入没有的键值，只不过value是<code>null</code>。<strong>可以不需要此参数，表示直接返回ES的数据</strong>。</p>\n<p><code>http_post_static_payload</code>：这个表示每次警报发送固定的信息，也就是每次警报都会带上<code>apikey: abc123</code>。</p>\n<p>例如在上面基础上去掉了<code>http_post_payload</code>，返回的json数据是：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"num_hits\"</span>: <span class=\"number\">1</span>, <span class=\"attr\">\"@timestamp\"</span>: <span class=\"string\">\"2019-03-28T06:54:51.043483Z\"</span>, <span class=\"attr\">\"denominator\"</span>: <span class=\"number\">1</span>, <span class=\"attr\">\"bin.keyword\"</span>: <span class=\"string\">\"2142134038\"</span>, <span class=\"attr\">\"num_matches\"</span>: <span class=\"number\">1</span>, <span class=\"attr\">\"percentage\"</span>: <span class=\"number\">100.0</span>, <span class=\"attr\">\"order\"</span>: <span class=\"string\">\"TDRAM19012\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"运行\">运行</span></h2>\n<p>最后，运行命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> python -m elastalert.elastalert --config ./config.yaml</span></span><br></pre></td></tr></table></figure>\n<p>或者单独执行 <code>rules_folder</code> 里的某个 rule：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> python -m elastalert.elastalert --config ./config.yaml --rule ./examele_rules/example_percentage_match.yaml</span></span><br></pre></td></tr></table></figure>\n<p>调试时使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> python -m elastalert.elastalert --verbose --rule example_rules/example_percentage_match.yaml --config config.yaml --debug</span></span><br></pre></td></tr></table></figure>\n<p>启动后无error错误打印，代表程序运行成功。</p>\n<h2><span id=\"测试\">测试</span></h2>\n<p>向ES index <code>pro_record</code>插入一些数据，因为制定的规则是在一分钟之内，只要有符合匹配规则的数据插入，其百分比超过100%，就将会报错。</p>\n<p>若打印出现类似于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">Percentage violation, value: 100.0 (min: None max : 1) of 1 items</span><br><span class=\"line\"></span><br><span class=\"line\">@timestamp: 2019-03-27T08:04:16.323823Z</span><br><span class=\"line\">bin.keyword: 2142134038</span><br><span class=\"line\">denominator: 1</span><br><span class=\"line\">num_hits: 21</span><br><span class=\"line\">num_matches: 9</span><br><span class=\"line\">percentage: 100.0</span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<p>表示规则已正常运行，且能成功进行匹配。</p>\n<h2><span id=\"参考\">参考</span></h2>\n<blockquote>\n<p>介绍命令 <a href=\"https://www.ctolib.com/docs/sfile/ELKstack-guide-cn/elasticsearch/other/elastalert.html\" target=\"_blank\" rel=\"noopener\">ElastAlert</a></p>\n<p>官方文档 <a href=\"https://elastalert.readthedocs.io/en/latest/recipes/writing_filters.html\" target=\"_blank\" rel=\"noopener\">Writing Filters For Rules</a></p>\n<p>对各项报警进行分析，其是使用post方式告警 <a href=\"https://4hou.win/wordpress/?cat=3634\" target=\"_blank\" rel=\"noopener\">基于Elastalert的安全告警剖析</a></p>\n<p>从安装到使用  <a href=\"https://anjia0532.github.io/2017/02/14/elasticsearch-elastalert/\" target=\"_blank\" rel=\"noopener\">ElastAlert 基于Elasticsearch的监控告警</a></p>\n</blockquote>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/03/14/ElasticSearch数据迁移/\">ElasticSearch数据迁移</a></li><li><a href=\"www.chunlife.top/2019/03/27/es告警功能——elastalert/\">es告警功能——elastalert</a></li></ul></div>","categories":[{"name":"DB","slug":"DB","permalink":"chunlife.top/categories/DB/"}],"tags":[{"name":"elasticsearch","slug":"elasticsearch","permalink":"chunlife.top/tags/elasticsearch/"},{"name":"elastalert","slug":"elastalert","permalink":"chunlife.top/tags/elastalert/"}]},{"title":"Go执行shell命令之copy命令","date":"2019-03-22T15:22:56.000Z","path":"2019/03/22/Go执行shell命令之copy/","content":"<p>当我以为我不会遇到坑的时候，坑就在那里，不偏不移，刚好让我踩过去。之前写了关于如何调用系统命令的小结，这里果然不负我望，当场让我晓得了，总结不够到位，有瑕疵。</p>\n<a id=\"more\"></a>\n<p>项目有用到<code>cp</code>的操作，大概就是把某目录下的所有文件复制到上级目录中，也就是<code>cp -rf ./test/* ../</code>。</p>\n<p>首先看代码。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cpCmd := exec.Command(<span class=\"string\">\"cp\"</span>, <span class=\"string\">\"-rf\"</span>, <span class=\"string\">\"./test/*\"</span>, <span class=\"string\">\"../\"</span>)</span><br><span class=\"line\">cpCmd.Dir = <span class=\"string\">\"/home/tmp\"</span></span><br><span class=\"line\">err := cpCmd.Run()</span><br></pre></td></tr></table></figure>\n<p>代码看起来是没有问题的，但是运行起来，却是会报出错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp: cannot stat ‘./test/*’: No such file or directory</span><br></pre></td></tr></table></figure>\n<p>这是为何呢，若是直接在shell中运行该命令，是没有问题的，为什么在程序中运行就会出现问题呢？</p>\n<p>用力Google了一下，查到<a href=\"https://superuser.com/questions/1235420/cp-cannot-stat-some-path-no-such-file-or-directory\" target=\"_blank\" rel=\"noopener\">cp: cannot stat ‘/some/path/*’: No such file or directory</a>。</p>\n<p>大概的意思是，该<code>*</code>会被处理成字符串，而不是特殊意义上的通配符，所以，也就会被认定为一个文件或者文件夹，所以，它就报错了，大概就是这么个情况。</p>\n<p>至于程序中如何解决这种情况呢？准确的来讲，我其实是没有找到解决方式的，也就只是换了种替代方式（一个一个文件/文件夹移动）。</p>\n<p><img src=\"1553269116203.png\" alt=\"123\"></p>\n<p>这里，还发现另一个问题，若调用命令如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cpCmd := exec.Command(<span class=\"string\">\"sh\"</span>, <span class=\"string\">\"-c\"</span>,<span class=\"string\">\"cp\"</span>, <span class=\"string\">\"-rf\"</span>, <span class=\"string\">\"./test/*\"</span>, <span class=\"string\">\"../\"</span>)</span><br></pre></td></tr></table></figure>\n<p>则程序将报出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp: missing file operand</span><br></pre></td></tr></table></figure>\n<p>同样的，很遗憾，我未能找到具体发生这个现象的原因，算起来，这算是比较坑爹的问题吧，因为是面对项目，只能说碰到了优先以解决为主，当时间不允许的情况下，赶紧避开。</p>\n<p>这里记录一下，我再找找出现问题的原因。</p>\n<p>这里放一个小的复制封装：<a href=\"https://github.com/juju/utils/blob/master/fs/copy.go\" target=\"_blank\" rel=\"noopener\">https://github.com/juju/utils/blob/master/fs/copy.go</a></p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"Shell","slug":"Shell","permalink":"chunlife.top/tags/Shell/"},{"name":"exec","slug":"exec","permalink":"chunlife.top/tags/exec/"}]},{"title":"go执行shell命令","date":"2019-03-21T17:28:06.000Z","path":"2019/03/22/go执行shell命令/","content":"<p>其实在之前的项目中，就有运用到调用linux中的命令，例如，借鉴<a href=\"https://github.com/open-falcon/falcon-plus\" target=\"_blank\" rel=\"noopener\">falcon</a>，里面agent更新文件是调用的wget去获取server端目录下的<code>agent</code>的<code>tar</code>包。</p>\n<a id=\"more\"></a>\n<h3><span id=\"基础任务调用\">基础任务调用</span></h3>\n<p>按道理来讲，官方库<code>os/exec</code>已经将这个操作封装得很好了，我们所需要做的，也就是调用API进行操作即可，这里插入一些关于API调用的流程问题。</p>\n<p>这是一个基础的调用命令的使用方式：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\tcmd *exec.Cmd</span><br><span class=\"line\">\t\toutput []<span class=\"keyword\">byte</span></span><br><span class=\"line\">\t\terr error</span><br><span class=\"line\">\t)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 生成Cmd</span></span><br><span class=\"line\">\tcmd = exec.Command(<span class=\"string\">\"/bin/bash\"</span>, <span class=\"string\">\"-c\"</span>, <span class=\"string\">\"echo 1;echo2;\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 执行了命令, 捕获了子进程的输出( pipe )</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> output, err = cmd.CombinedOutput(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 打印子进程的输出</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"keyword\">string</span>(output))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实，它借用到了Linux的进程的相关函数操作，如图：</p>\n<p><img src=\"1553186402784.png\" alt=\"任务执行原理\"></p>\n<p>也就是说，golang在调用fork，其与子进程通过管道进行了相应的连接，这是linux的基础知识——进程间通信（感觉回到了嵌入式）。</p>\n<p>也就是相当于<code>go</code>写入一个<code>command</code>交给子进程去运行，然后结果被子进程输入管道，<code>go</code>会去读取。</p>\n<p>系统调用阶段会使用到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipe():创建2个文件描述符，fd[0]可读，fd[1]可写</span><br><span class=\"line\">fork()：创建子进程，fd[1]被继承到子进程</span><br><span class=\"line\">dup2():重定向子进程stdout/stderr到fd[1]</span><br><span class=\"line\">exec()：在当前进程内，加载并执行二进制程序</span><br></pre></td></tr></table></figure>\n<p>这种调用其实是非常占用空间的，子进程会共享父进程的代码空间，数据空间则互相独立，子进程数据空间中的内容是父进程的<strong>完整拷贝</strong>，指令指针也完全相同。也就是这个的消耗资源也就是比协程消耗得更多的，基本相当于线程对协程而言了。</p>\n<h3><span id=\"强制结束任务\">强制结束任务</span></h3>\n<p>在实际使用中，我们需要控制任务的生命周期，有时候，我们并不需要任务继续执行下去了，这时候，我们就要使点手段来结束掉任务。</p>\n<p>可以使用如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">   <span class=\"string\">\"context\"</span></span><br><span class=\"line\">   <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">   <span class=\"string\">\"os/exec\"</span></span><br><span class=\"line\">   <span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> result <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   err    error</span><br><span class=\"line\">   output []<span class=\"keyword\">byte</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//  执行1个cmd, 让它在一个协程里去执行, 让它执行2秒: sleep 2; echo hello;</span></span><br><span class=\"line\">   <span class=\"comment\">// 1秒的时候, 我们杀死cmd</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> (</span><br><span class=\"line\">      ctx        context.Context</span><br><span class=\"line\">      cancelFunc context.CancelFunc</span><br><span class=\"line\">      cmd        *exec.Cmd</span><br><span class=\"line\">      resultChan <span class=\"keyword\">chan</span> *result</span><br><span class=\"line\">      res        *result</span><br><span class=\"line\">   )</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 创建了一个结果队列</span></span><br><span class=\"line\">   resultChan = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> *result, <span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// context:   chan byte</span></span><br><span class=\"line\">   <span class=\"comment\">// cancelFunc:  close(chan byte)</span></span><br><span class=\"line\"></span><br><span class=\"line\">   ctx, cancelFunc = context.WithCancel(context.TODO())</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> (</span><br><span class=\"line\">         output []<span class=\"keyword\">byte</span></span><br><span class=\"line\">         err    error</span><br><span class=\"line\">      )</span><br><span class=\"line\">      <span class=\"comment\">//cmd = exec.CommandContext(ctx, \"/bin/bash\", \"-c\", \"sleep 2;echo hello;\")</span></span><br><span class=\"line\">      cmd = exec.CommandContext(ctx, <span class=\"string\">`D:\\Git\\bin\\bash.exe`</span>, <span class=\"string\">\"-c\"</span>, <span class=\"string\">\"sleep 2;echo hello;\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 执行任务, 捕获输出</span></span><br><span class=\"line\">      output, err = cmd.CombinedOutput()</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 把任务输出结果, 传给main协程</span></span><br><span class=\"line\">      resultChan &lt;- &amp;result&#123;</span><br><span class=\"line\">         err:    err,</span><br><span class=\"line\">         output: output,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 继续往下走</span></span><br><span class=\"line\">   time.Sleep(<span class=\"number\">1</span> * time.Second)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 取消上下文</span></span><br><span class=\"line\">   cancelFunc()</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 在main协程里, 等待子协程的退出，并打印任务执行结果</span></span><br><span class=\"line\">   res = &lt;-resultChan</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 打印任务执行结果</span></span><br><span class=\"line\">   fmt.Println(res.err, <span class=\"keyword\">string</span>(res.output))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：若你在windows下运行该命令，运行得到的结果是（go1.11，go1.12，这俩版本linux不会出现这种情况）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exit status 1  hello</span><br></pre></td></tr></table></figure>\n<p>也就是说程序虽然被kill掉了，但命令还是执行了。</p>\n<p>博客：<a href=\"https://yuerblog.cc/2018/07/23/golang-command-context-not-exit-problem/#comment-575\" target=\"_blank\" rel=\"noopener\">golang的CommandContext取消不退出问题</a>，介绍的是在go1.10中，Linux下运行命令无法终止的情况（go1.11已被修复），但博客中有提到一个<a href=\"https://github.com/golang/go/issues/23019\" target=\"_blank\" rel=\"noopener\">issue</a>，该地址里有介绍到windows相关，我未深究这个问题的解决，毕竟我没在windows下的使用环境（大概都是运行在linux下的吧）。</p>\n<p>这里还是提一下这个问题，望了解。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"Shell","slug":"Shell","permalink":"chunlife.top/tags/Shell/"},{"name":"exec","slug":"exec","permalink":"chunlife.top/tags/exec/"}]},{"title":"slice小问题","date":"2019-03-20T16:32:33.000Z","path":"2019/03/21/slice面试题/","content":"<p>之前我有写过一篇关于slice的博客——<a href=\"https://chunlife.top/2018/10/22/slice%E7%90%86%E8%A7%A3/\">slice理解</a>。其中是对slice的底层结构，扩展，以及range关键字进行解析，而现在刚好又碰到一个关于slice的问题，算是自己粗心犯的一个错吧。</p>\n<a id=\"more\"></a>\n<h3><span id=\"slice初始化\">slice初始化</span></h3>\n<p>一般来说slice的初始化方式可以有两种：</p>\n<ul>\n<li>通过数组来初始化</li>\n<li>通过内置函数make()初始化</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s :=[]int&#123;1,2,3 &#125; </span><br><span class=\"line\">直接初始化切片，[]表示是切片类型，&#123;1,2,3&#125;初始化值依次是1,2,3.其cap=len=3</span><br><span class=\"line\">s := arr[:] </span><br><span class=\"line\">初始化切片s,是数组arr的引用</span><br><span class=\"line\">s := arr[:endIndex] </span><br><span class=\"line\">缺省startIndex时将表示从arr的第一个元素开始到第endIndex个元素</span><br></pre></td></tr></table></figure>\n<p>所以说，若是直接声明一个slice，是不可用的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s []int</span><br></pre></td></tr></table></figure>\n<p>所以，为了偷懒，我一般是使用<code>make</code>的方式。</p>\n<h3><span id=\"问题出现\">问题出现</span></h3>\n<p>我有些忘记了<code>make</code>函数创建slice时，返回的是一个已被填充好值的slice，但我依然习惯性的使用了append去添加元素，这样会导致slice数据出现冗余，类似于这样的代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   s := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">   s = <span class=\"built_in\">append</span>(s, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">   fmt.Println(s)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码运行结果是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0 0 0 0 0 1 2 3]</span><br></pre></td></tr></table></figure>\n<h3><span id=\"为什么\">为什么？</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">make</span><span class=\"params\">([]T, <span class=\"built_in\">len</span>, <span class=\"built_in\">cap</span>)</span> []<span class=\"title\">T</span></span></span><br></pre></td></tr></table></figure>\n<p>其中T代表被创建的切片元素的类型。函数 <code>make</code> 接受一个类型、一个长度和一个可选的容量参数。调用 <code>make</code> 时，内部会分配一个数组，然后返回数组对应的切片。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s []<span class=\"keyword\">byte</span></span><br><span class=\"line\">s = <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\">// s == []byte&#123;0, 0, 0, 0, 0&#125;</span></span><br></pre></td></tr></table></figure>\n<p>当容量参数被忽略时，它默认为指定的长度。下面是简洁的写法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<p>所以说，当继续使用<code>append</code>时，数据时直接填充在这些默认值<code>0</code>的后面的，这也就造成实际数据中出现多余的<code>0</code>，从而影响后续的操作。</p>\n<h3><span id=\"附加\">附加</span></h3>\n<h4><span id=\"slice追加到另一个slice\">slice追加到另一个slice</span></h4>\n<p>如果将一个slice追加到另一个slice中需要带上&quot;<strong>…</strong>&quot;，这样才能表示是将slice中的元素依次追加到另一个slice中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s :=append(s,s1...)</span><br></pre></td></tr></table></figure>\n<p>在通过下标访问元素时下标不能超过len大小，如同数组的下标不能超出len范围一样。</p>\n<h4><span id=\"删除切片元素\">删除切片元素</span></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index ：= <span class=\"number\">5</span></span><br><span class=\"line\">ss = <span class=\"built_in\">append</span>(ss[:index], ss[index+<span class=\"number\">1</span>:]...)</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"slice","slug":"slice","permalink":"chunlife.top/tags/slice/"}]},{"title":"压缩zip和解压缩unzip","date":"2019-03-20T09:47:28.000Z","path":"2019/03/20/zip解压-压缩/","content":"<p>在项目中需要使用到zip压缩与解压缩的功能，这类功能应该来说是很基础了，直接引用go官方的包<code>archive/zip</code>，对于如何压缩文件夹的功能不是很熟悉，参考别人的代码加入到项目中，在实际使用中发现有些不符合预期的地方。</p>\n<a id=\"more\"></a>\n<h2><span id=\"问题\">问题</span></h2>\n<p>代码引用自博客——<a href=\"https://blog.csdn.net/u011304970/article/details/71131592\" target=\"_blank\" rel=\"noopener\">Go压缩解压文件夹</a></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//zipDir(\"F:\\\\dumps\", \"F:\\\\dumps.zip\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">zipDir</span><span class=\"params\">(dir, zipFile <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfz, err := os.Create(zipFile)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Debug(<span class=\"string\">\"Create zip file failed: %s\\n\"</span>, err.Error())</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fz.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tw := zip.NewWriter(fz)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> w.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tfilepath.Walk(dir, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(path <span class=\"keyword\">string</span>, info os.FileInfo, err error)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> !info.IsDir() &#123;</span><br><span class=\"line\">\t\t\tfDest, err := w.Create(path[<span class=\"built_in\">len</span>(dir)+<span class=\"number\">1</span>:])</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tlog.Printf(<span class=\"string\">\"Create failed: %s\\n\"</span>, err.Error())</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tfSrc, err := os.Open(path)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tlog.Printf(<span class=\"string\">\"Open failed: %s\\n\"</span>, err.Error())</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">defer</span> fSrc.Close()</span><br><span class=\"line\">\t\t\t_, err = io.Copy(fDest, fSrc)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tlog.Printf(<span class=\"string\">\"Copy failed: %s\\n\"</span>, err.Error())</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>压缩文件夹函数确实能够压缩文件夹，但实际使用中，我发现和我需要的效果有些出入，例如，我的目录结果为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frist/</span><br><span class=\"line\">├── second_1</span><br><span class=\"line\">│   └── 1.txt</span><br><span class=\"line\">└── second_2</span><br><span class=\"line\">    └── 1.txt</span><br><span class=\"line\">2 directories, 2 files</span><br></pre></td></tr></table></figure>\n<p>我需要连着<code>frist</code>顶级目录一起进行压缩，但事与愿违，即使传入<code>frist</code>的上一级目录，<code>zipDir</code>函数依然只会压缩<code>second_1</code>以及<code>second_2</code>；而且，当我输出的目标ZIP文件是压缩的文件夹中时，压缩包内会出现一个名为<code>zip</code>的临时文件。</p>\n<h2><span id=\"解决\">解决</span></h2>\n<p>故此，我本着不应该没人做的更好的想法（嘿嘿~），找到了<a href=\"http://blog.ralch.com/tutorial/golang-working-with-zip/\" target=\"_blank\" rel=\"noopener\">Golang: Working with ZIP archives</a>。</p>\n<p>可以压缩顶层目录，且压缩文件即使要输出到压缩目录，也不会出现什么异常。</p>\n<h3><span id=\"compressing\">Compressing</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// zipit(\"/tmp/documents\", \"/tmp/backup.zip\")</span></span><br><span class=\"line\"><span class=\"comment\">// zipit(\"/tmp/report.txt\", \"/tmp/report-2015.zip\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">zipit</span><span class=\"params\">(source, target <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tzipfile, err := os.Create(target)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> zipfile.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tarchive := zip.NewWriter(zipfile)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> archive.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tinfo, err := os.Stat(source)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> baseDir <span class=\"keyword\">string</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> info.IsDir() &#123;</span><br><span class=\"line\">\t\tbaseDir = filepath.Base(source)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfilepath.Walk(source, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(path <span class=\"keyword\">string</span>, info os.FileInfo, err error)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\theader, err := zip.FileInfoHeader(info)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> baseDir != <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\t\theader.Name = filepath.Join(baseDir, strings.TrimPrefix(path, source))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> info.IsDir() &#123;</span><br><span class=\"line\">\t\t\theader.Name += <span class=\"string\">\"/\"</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\theader.Method = zip.Deflate</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\twriter, err := archive.CreateHeader(header)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> info.IsDir() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfile, err := os.Open(path)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> file.Close()</span><br><span class=\"line\">\t\t_, err = io.Copy(writer, file)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"2019-3-22-114746\">2019-3-22 11:47:46</span></h4>\n<p>发现一个小问题，当传入相对路径<code>./testDir</code>给函数<code>zipit</code>时，会出现两个顶层目录，是因为这行代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header.Name = filepath.Join(baseDir, strings.TrimPrefix(path, source))</span><br></pre></td></tr></table></figure>\n<p><code>strings.TrimPrefix</code>，去掉前缀</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Code:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"string\">\"¡¡¡Hello, Gophers!!!\"</span></span><br><span class=\"line\">    s = strings.TrimPrefix(s, <span class=\"string\">\"¡¡¡Hello, \"</span>)</span><br><span class=\"line\">    s = strings.TrimPrefix(s, <span class=\"string\">\"¡¡¡Howdy, \"</span>)</span><br><span class=\"line\">    fmt.Print(s)</span><br><span class=\"line\">Output:</span><br><span class=\"line\">\tGophers!!!</span><br></pre></td></tr></table></figure>\n<p>这行代码的意思也就是，去掉前缀的绝对路径，保留下要压缩文件的相对路径，但我们传入的是<code>./testDir</code>，相对于路径来说，多了<code>./</code>，所以其并不会去除成功，那么就会出现顶层目录出现两级的情况。</p>\n<p>解决方法是：</p>\n<ul>\n<li>传入相对路径时，不加<code>./</code>。</li>\n<li>检查传入的路径是否为绝对路径。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> isAbs := filepath.IsAbs(source); !isAbs &#123;</span><br><span class=\"line\">   <span class=\"comment\">//source, err = filepath.Abs(source)  // 将传入路径直接转化为绝对路径</span></span><br><span class=\"line\">   <span class=\"comment\">//if err != nil &#123;</span></span><br><span class=\"line\">   <span class=\"comment\">// return err</span></span><br><span class=\"line\">   <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">   source = filepath.Base(source)  <span class=\"comment\">// 去掉字符“./”</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>加入以上代码可以解决问题，代码中，其实可以看到我屏蔽了——<code>filepath.Abs</code>函数解决方式，这个函数调用了<code>syscall</code>，也就是说借用了系统命令，这相对而言是比<code>filepath.Base</code>更消耗资源的，因为涉及到了语言系统交互的层面，类似于<a href=\"https://chunlife.top/2019/03/22/go%E6%89%A7%E8%A1%8Cshell%E5%91%BD%E4%BB%A4/\">go执行shell命令</a>。</p>\n<h3><span id=\"extracting\">Extracting</span></h3>\n<p>附上zip解压缩的代码，以便以后查看。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// unzip(\"/tmp/report-2015.zip\", \"/tmp/reports/\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">unzip</span><span class=\"params\">(archive, target <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\treader, err := zip.OpenReader(archive)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := os.MkdirAll(target, <span class=\"number\">0755</span>); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, file := <span class=\"keyword\">range</span> reader.File &#123;</span><br><span class=\"line\">\t\tpath := filepath.Join(target, file.Name)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> file.FileInfo().IsDir() &#123;</span><br><span class=\"line\">\t\t\tos.MkdirAll(path, file.Mode())</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfileReader, err := file.Open()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> fileReader.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttargetFile, err := os.OpenFile(path, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, file.Mode())</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> targetFile.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> _, err := io.Copy(targetFile, fileReader); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我再放置一篇博主的：<a href=\"http://blog.ralch.com/articles/golang-working-with-tar-and-gzip/\" target=\"_blank\" rel=\"noopener\">Golang: Working with Gzip and Tar</a></p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/02/18/B站源码中的log-agent/\">B站源码中的log-agent</a></li><li><a href=\"chunlife.top/2019/12/18/使用unsafe-pointer引发GC错误/\">使用unsafe pointer引发GC错误</a></li><li><a href=\"chunlife.top/2019/09/27/MongoDB多表查询/\">MongoDB多表查询</a></li><li><a href=\"https://lailin.xyz/post/11996.html\">Go Web 小技巧（三）Gin 参数绑定</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"zip","slug":"zip","permalink":"chunlife.top/tags/zip/"}]},{"title":"正则表达式","date":"2019-03-19T13:04:25.000Z","path":"2019/03/19/正则表达式（速查表）/","content":"<p>如果strings包提供的函数能解决你的问题，那么就尽量使用它来解决。因为他们足够简单、而且性能和可读性都要比正则好。</p>\n<a id=\"more\"></a>\n<h2><span id=\"学习正则匹配\">学习正则匹配</span></h2>\n<p>如何系统的学习正则匹配呢，需要一点辅助工具和知识，然后就是勤加练习。这里就祭出这个玩意：</p>\n<p><a href=\"https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md\" target=\"_blank\" rel=\"noopener\">learn-regex</a>。</p>\n<h2><span id=\"正则匹配表\">正则匹配表</span></h2>\n<p>Go使用的正则标准与其他编程语言的标准有些不同，这里参考：<a href=\"http://www.sun190.com/2015/01/re2-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/\" target=\"_blank\" rel=\"noopener\">re2-正则表达式</a>。</p>\n<p>常用的可以参考以下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">----字符：</span><br><span class=\"line\"></span><br><span class=\"line\">\t“.”: 匹配任意一个字符</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;[ ]&quot;: 匹配 [ ] 内任意一个字符。 </span><br><span class=\"line\"></span><br><span class=\"line\">\t“-”：指定范围： a-z、A-Z、0-9</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;^&quot;: 取反。 使用在 [ ] 内部。[^xy]8 </span><br><span class=\"line\"></span><br><span class=\"line\">\t[[:digit:]] ——&gt; 数字 == [0-9]</span><br><span class=\"line\"></span><br><span class=\"line\">-----次数：</span><br><span class=\"line\"></span><br><span class=\"line\">\t“?”: 匹配 前面 单元出现 0-1次</span><br><span class=\"line\"></span><br><span class=\"line\">\t“+”：匹配 前面 单元 出现 1-N次</span><br><span class=\"line\"></span><br><span class=\"line\">\t“*”：匹配 前面 单元 出现 0-N次</span><br><span class=\"line\"></span><br><span class=\"line\">\t“&#123;N&#125;”: 匹配 前面 单元  精确匹配 N 次</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;&#123;N,&#125;&quot;: 匹配 前面 单元 至少匹配 N 次</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;&#123;N,M&#125;&quot;: 匹配 前面 单元 匹配 N -- M 次。</span><br><span class=\"line\"></span><br><span class=\"line\">---- 单元限定符：</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t“()”: 可以将一部分正则表达式，组成一个 单元，可以对该单元使用 数量限定符</span><br></pre></td></tr></table></figure>\n<p>更多例子则是参考：<br>\n<img src=\"%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99.png\" alt=\"正则表达式匹配规则\"></p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"www.chunlife.top/2019/03/19/正则表达式（速查表）/\">正则表达式</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"正则表达式","slug":"正则表达式","permalink":"chunlife.top/tags/正则表达式/"}]},{"title":"搜集赏","date":"2019-03-19T08:54:20.000Z","path":"2019/03/19/搜集赏/","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">就像高中夏天某个只有选修课的下午。就像再也买不到的橘子味巧克力。就像甜甜的回笼觉。</span><br></pre></td></tr></table></figure>\n<hr>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">总会有光明的东西的，在未来。</span><br></pre></td></tr></table></figure>\n<p>——《像少年啦飞驰》韩寒</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">“我们命中注定要失去所爱之人，</span><br><span class=\"line\"></span><br><span class=\"line\">不然我们怎么知道他们在我们生命中有多重要？”</span><br></pre></td></tr></table></figure>\n<p>——布拉德·皮特主演·《返老还童》</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">你要是愿意，我就永远爱你，你要是不愿意，我就永远相思。</span><br></pre></td></tr></table></figure>\n<p>——王小波 |《爱你就像爱生命》</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我说你是人间的四月天， 笑响点亮了四面风， 轻灵在春的光艳中交舞着变。 你是四月早天里的云烟， 黄昏吹着风的软， 星子在无意中闪， 细雨点洒在花前。</span><br></pre></td></tr></table></figure>\n<p>——林徽因</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">没有你，良辰美景更与何人说？</span><br></pre></td></tr></table></figure>\n<p>——《天使爱美丽》</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">你是我 人世间 最契合</span><br></pre></td></tr></table></figure>\n<p>——《说客》</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">想必 女孩子 是由砂糖 香辛料 和某些美好的事物组成的吧</span><br></pre></td></tr></table></figure>\n<p>——比企谷八幡 《我的青春恋爱物语果然有问题》</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">要让爱情简单，最好就是精选适合自己的对象。</span><br><span class=\"line\">一个真正值得去爱、也懂得回爱的人，自然会让爱情变得简单。这样，两人之间平时不需要猜测心意，不用担心行踪；不害怕在无意之间激怒，不怀疑做任何事情的动机。两人之间，有一点牵挂，却不会纠缠；两人之间，有一点想念，却不会伤心。</span><br></pre></td></tr></table></figure>\n<p>——网络<code>鸡汤类</code>文学</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">远在远方的风比远方更远</span><br></pre></td></tr></table></figure>\n<p>——《九月》海子</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">今夜我不关心人类</span><br><span class=\"line\"></span><br><span class=\"line\">我只想你</span><br></pre></td></tr></table></figure>\n<p>——《日记》海子</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我知道这将是我的一生热爱 我将为此一直奋斗。——张弛（沈腾饰）</span><br></pre></td></tr></table></figure>\n<p>——《飞驰人生》，韩寒</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">“以前写过一句话：我所理解的生活，就是和喜欢的一切在一起。</span><br><span class=\"line\"></span><br><span class=\"line\">鸡汤越短，做起来越难。</span><br><span class=\"line\"></span><br><span class=\"line\">此刻，《飞驰人生》应该已经上映了。这是一个很简单的故事，讲的就是和你所爱的一切在一起，以及爱的代价。片子里有对手却没有大反派。你不想索然无味的过完这一生，而反派就是那索然无味的一生。”</span><br></pre></td></tr></table></figure>\n<p>——韩寒</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">想你吃醋，却怕你祝我幸福</span><br></pre></td></tr></table></figure>\n<p>——网易热心网友</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我只听音乐 不听故事</span><br></pre></td></tr></table></figure>\n<p>——后来我听说你</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前几天，我听一个广播节目。主持人问，现在很多人开网约车，这样能赚多少钱，能够赚到大钱吗？</span><br><span class=\"line\"></span><br><span class=\"line\">这个问题很容易回答，答案就是不能。出租车司机的收入，主要由营业时间的长短决定。基本上，一天开12个小时，就是比开6个小时，收入高出一倍。每天只有24个小时，因此收入存在上限，不可能偏离平均水平很远。</span><br><span class=\"line\"></span><br><span class=\"line\">出租车是“时间换收入”的典型行业，投入的时间越多，收入越高，在家休息就没收入。很多行业都属于“时间换收入”，所有此类行业都赚不到大钱。因为你能用来交换的时间是有限的，而且进入中年以后，你就拿不出更多的时间来交换。开出租车赚零花钱，或者作为短期过渡，这是没问题的，但作为终身职业是很糟糕的。</span><br><span class=\"line\"></span><br><span class=\"line\">我觉得，越来越多的程序员正在落入这个陷井，用编码的时间换取收入。只有不停地做项目，才能拿到钱。项目做得越多，收入越高。这个项目开发完了，公司又让他去干下一个项目。 忙了好几年，项目完成了一大堆，但是自己什么也没留下，以后的收入还要取决于从零开始的新项目。这样的话，你跟出租车司机有何两样，哪一天你不写代码了，不是照样没收入。</span><br><span class=\"line\"></span><br><span class=\"line\">那些赚到大钱的人，没有一个是靠时间换取收入的。他们要么通过积累资产致富，要么购买他人的时间，为自己创造财富。你应该警惕，不要落入“时间换取收入”的陷井，不要只顾着为别人生产代码，而要注意积累自己的资产，以及适时开展属于自己的业务。</span><br></pre></td></tr></table></figure>\n<p>——<a href=\"https://www.yuque.com/ruanyf/share/issue-50\" target=\"_blank\" rel=\"noopener\">阮一峰每周分享第50期</a></p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">生活就像一盒巧克力，你永远不知道下一块是什么味道</span><br></pre></td></tr></table></figure>\n<p>——《阿甘正传》</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">车，马，邮件都慢</span><br><span class=\"line\">一生只够爱一个人</span><br></pre></td></tr></table></figure>\n<p>——《<a href=\"https://baike.baidu.com/item/%E4%BB%8E%E5%89%8D%E6%85%A2/17158480\" target=\"_blank\" rel=\"noopener\">从前慢</a>》 木心先生</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个女孩让我帮她寄快递 给了我一个空纸箱让我打包 我好奇的问她:“这是寄给谁的” 她说:“我喜欢很久的一个男生” 我懵了一下:“可是里面没有东西啊” 她说:有些东西只有我自己能看见 我一听更懵逼了 神秘的问她到底是什么 她说:“一箱情愿”</span><br></pre></td></tr></table></figure>\n<p>——网易云音乐（虽然知道是假的，但是故事还是狠巧妙）</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当你抬头奢求天空的时候，你要相信你的脚下踩有黄金。</span><br></pre></td></tr></table></figure>\n<p>——PowerPoint 2013设计小册</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">就像高中夏天某个只有选修课的下午。就像再也买不到的橘子味巧克力。就像甜甜的回笼觉。</span><br></pre></td></tr></table></figure>\n<p>——在谢春花《借我》这首歌的网易云页面，有这样一条留言。</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不要放弃，不管多么痛苦，都不要逃往轻松的一边。</span><br></pre></td></tr></table></figure>\n<p>——鬼灭之刃 <em>我妻善逸</em>（糟糕的台词和名字）</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">凶手和恋人都喜欢事后返回现场</span><br></pre></td></tr></table></figure>\n<p>——未知</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/03/29/重新见面，请多指教/\">重新见面，请多指教</a></li><li><a href=\"chunlife.top/2019/12/31/科学需要谨慎，知识需要校校验/\">科学需要谨慎，知识需要校验</a></li><li><a href=\"chunlife.top/2018/12/14/第一期/\">第一期</a></li><li><a href=\"http://yoursite.com/2020/03/28/swing/Shell-Script%E6%9D%A5%E6%96%B0%E5%8D%9A%E5%AE%A2/\">Shell Script更新博客</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"chunlife.top/tags/随笔/"}]},{"title":"stringSlice转换——无需内存copy","date":"2019-03-19T02:59:53.000Z","path":"2019/03/19/stringSlice转换——无需内存copy/","content":"<p>摘取自<a href=\"https://github.com/fagongzi/gateway\" target=\"_blank\" rel=\"noopener\"><strong>gateway</strong></a>，作者提到过这种方式，也是来源于另一个开源项目，操作方式极其硬核，故收藏了。</p>\n<a id=\"more\"></a>\n<h3><span id=\"string与slice互转\">String与Slice互转</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> hack</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">   <span class=\"string\">\"reflect\"</span></span><br><span class=\"line\">   <span class=\"string\">\"unsafe\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// SliceToString slice to string with out data copy</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SliceToString</span><span class=\"params\">(b []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(s <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">   pbytes := (*reflect.SliceHeader)(unsafe.Pointer(&amp;b))</span><br><span class=\"line\">   pstring := (*reflect.StringHeader)(unsafe.Pointer(&amp;s))</span><br><span class=\"line\">   pstring.Data = pbytes.Data</span><br><span class=\"line\">   pstring.Len = pbytes.Len</span><br><span class=\"line\">   <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// StringToSlice string to slice with out data copy</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StringToSlice</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"params\">(b []<span class=\"keyword\">byte</span>)</span></span> &#123;</span><br><span class=\"line\">   pbytes := (*reflect.SliceHeader)(unsafe.Pointer(&amp;b))</span><br><span class=\"line\">   pstring := (*reflect.StringHeader)(unsafe.Pointer(&amp;s))</span><br><span class=\"line\">   pbytes.Data = pstring.Data</span><br><span class=\"line\">   pbytes.Len = pstring.Len</span><br><span class=\"line\">   pbytes.Cap = pstring.Len</span><br><span class=\"line\">   <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用到了slice与string关键字在Go中的本质，直接对关键字的核心构造进行一系列操作，根本不讲Go语言的规矩，算是一种<code>黑魔法</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string的本质：reflect.StringHeader&#123;&#125;</span><br><span class=\"line\">slice的本质：reflect.SliceHeader&#123;&#125;</span><br><span class=\"line\">go指针的本质：unsafe.Pointer&#123;&#125;、uintptr&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>查看源码，可以找到Go编译器对slice与string的具体解释，均保留有一个指针，用于指向数据真正的地址。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type SliceHeader struct &#123;</span><br><span class=\"line\">    Data uintptr</span><br><span class=\"line\">    Len  int</span><br><span class=\"line\">    Cap  int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SliceHeader是切片的运行时表示。它不能被安全或便携地使用，其表示可能会在以后的版本中更改。此外，数据字段不足以保证它引用的数据不会被垃圾收集，因此程序必须保留一个单独的，正确键入的指向底层数据的指针。</span><br><span class=\"line\"></span><br><span class=\"line\">type StringHeader struct &#123;</span><br><span class=\"line\">    Data uintptr</span><br><span class=\"line\">    Len  int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">StringHeader是字符串的运行时表示形式。</span><br></pre></td></tr></table></figure>\n<p><strong>另外</strong>，我们看到这俩结构体类似，内存布局也是类似的，只是<code>StringHeader</code>少了一个字段，但至少内存是对其的，那么？（C语言又在发威了~）</p>\n<p>注意：反过来转换不行，<code>StringHeader</code>对比<code>SliceHeader</code>少了一个字段</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">byteString</span><span class=\"params\">(b []<span class=\"keyword\">byte</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> *(*<span class=\"keyword\">string</span>)(unsafe.Pointer(&amp;b))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"结构体与byte\">结构体与[]byte</span></h3>\n<p>同理，结构体与[]byte也是可以互相转换的，可以用于优化<code>encoding/binady</code>的性能。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyStruct <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    A <span class=\"keyword\">int</span></span><br><span class=\"line\">    B <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取结构体真实数据的大小</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sizeOfMyStruct = <span class=\"keyword\">int</span>(unsafe.Sizeof(MyStruct&#123;&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 填充[]byte的数据结构</span></span><br><span class=\"line\"><span class=\"comment\">// 结构体的数据指针也就是一个4字节的int类型（c基础知识！）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MyStructToBytes</span><span class=\"params\">(s *MyStruct)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x reflect.SliceHeader</span><br><span class=\"line\">    x.Len = sizeOfMyStruct</span><br><span class=\"line\">    x.Cap = sizeOfMyStruct</span><br><span class=\"line\">    x.Data = <span class=\"keyword\">uintptr</span>(unsafe.Pointer(s))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *(*[]<span class=\"keyword\">byte</span>)(unsafe.Pointer(&amp;x))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// unsafe.Pointer(&amp;b)：取[]byte首地址</span></span><br><span class=\"line\"><span class=\"comment\">// (*reflect.SliceHeader)(unsafe.Pointer(&amp;b)) ： 强制转换其为reflect.SliceHeader指针</span></span><br><span class=\"line\"><span class=\"comment\">// (*reflect.SliceHeader)(unsafe.Pointer(&amp;b)).Data ： 将slice的数据指针取出来</span></span><br><span class=\"line\"><span class=\"comment\">// unsafe.Pointer((*reflect.SliceHeader)(unsafe.Pointer(&amp;b)).Data) : 将uint指针转成任意指针</span></span><br><span class=\"line\"><span class=\"comment\">// (*MyStruct)(unsafe.Pointer((*reflect.SliceHeader)(unsafe.Pointer(&amp;b)).Data))：成功转换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BytesToMyStruct</span><span class=\"params\">(b []<span class=\"keyword\">byte</span>)</span> *<span class=\"title\">MyStruct</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (*MyStruct)(unsafe.Pointer(</span><br><span class=\"line\">        (*reflect.SliceHeader)(unsafe.Pointer(&amp;b)).Data))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"写在后头\">写在后头</span></h3>\n<p>上头写的东西，感觉有些突破语言既定的规范了，当然我这么想是有根据的，从源码注释上来看，显然，这个语言特性是不稳定的，指不定哪天Go开发人员觉着这个<code>黑魔法</code>不够魔性，直接不允许你这么做了。</p>\n<p><code>黑魔法</code>，也是被一些人诟病的地方吧，有好有坏，不了解也可以，了解了也不是不可。</p>\n<p><strong>注意</strong>：使用这种方式去转换，是无法对数据进行修改的。意思是，调用了<code>ToBytes</code>后得到的<code>[]byte</code>是没有办法改变的，一旦修改即会出现<code>unexpected fault address xxxxx</code>，<strong>只可读，而没有写操作的能力，切记切记</strong>，<img src=\"sort%E6%8E%A5%E5%8F%A3%E7%9A%84%E4%BD%BF%E7%94%A8.png\" alt=\"img\">。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ToString unsafe 转换, 将 []byte 转换为 string</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ToString</span><span class=\"params\">(p []<span class=\"keyword\">byte</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> *(*<span class=\"keyword\">string</span>)(unsafe.Pointer(&amp;p))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ToBytes unsafe 转换, 将 string 转换为 []byte</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ToBytes</span><span class=\"params\">(str <span class=\"keyword\">string</span>)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> *(*[]<span class=\"keyword\">byte</span>)(unsafe.Pointer(&amp;str))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IntToBool int 类型转换为 bool</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">IntToBool</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> i != <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// SliceInt64ToString []int64 转换为 []string</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SliceInt64ToString</span><span class=\"params\">(si []<span class=\"keyword\">int64</span>)</span> <span class=\"params\">(ss []<span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\tss = <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(si))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k := <span class=\"keyword\">range</span> si &#123;</span><br><span class=\"line\">\t\tss = <span class=\"built_in\">append</span>(ss, strconv.FormatInt(si[k], <span class=\"number\">10</span>))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ss</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// SliceStringToInt64 []string 转换为 []int64</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SliceStringToInt64</span><span class=\"params\">(ss []<span class=\"keyword\">string</span>)</span> <span class=\"params\">(si []<span class=\"keyword\">int64</span>)</span></span> &#123;</span><br><span class=\"line\">\tsi = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int64</span>, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(ss))</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\ti   <span class=\"keyword\">int64</span></span><br><span class=\"line\">\t\terr error</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k := <span class=\"keyword\">range</span> ss &#123;</span><br><span class=\"line\">\t\ti, err = strconv.ParseInt(ss[k], <span class=\"number\">10</span>, <span class=\"number\">64</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsi = <span class=\"built_in\">append</span>(si, i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// SliceStringToInt []string 转换为 []int</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SliceStringToInt</span><span class=\"params\">(ss []<span class=\"keyword\">string</span>)</span> <span class=\"params\">(si []<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tsi = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(ss))</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\ti   <span class=\"keyword\">int</span></span><br><span class=\"line\">\t\terr error</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k := <span class=\"keyword\">range</span> ss &#123;</span><br><span class=\"line\">\t\ti, err = strconv.Atoi(ss[k])</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsi = <span class=\"built_in\">append</span>(si, i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MustInt 将string转换为int, 忽略错误</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MustInt</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tn, _ = strconv.Atoi(s)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MustInt64 将string转换为int64, 忽略错误</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MustInt64</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"params\">(i <span class=\"keyword\">int64</span>)</span></span> &#123;</span><br><span class=\"line\">\ti, _ = strconv.ParseInt(s, <span class=\"number\">10</span>, <span class=\"number\">64</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/02/18/B站源码中的log-agent/\">B站源码中的log-agent</a></li><li><a href=\"chunlife.top/2019/12/18/使用unsafe-pointer引发GC错误/\">使用unsafe pointer引发GC错误</a></li><li><a href=\"chunlife.top/2019/09/27/MongoDB多表查询/\">MongoDB多表查询</a></li><li><a href=\"https://lailin.xyz/post/11996.html\">Go Web 小技巧（三）Gin 参数绑定</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"函数","slug":"函数","permalink":"chunlife.top/tags/函数/"}]},{"title":"记录以前使用linux的一些命令","date":"2019-03-19T02:19:44.000Z","path":"2019/03/19/记录以前使用linux的一些命令/","content":"<p>1、find</p>\n<p>find使用在查找大型代码结构的项目时，特别有用，例如linux内核。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在某一目录下查找文件名包含“fb”字样的文件</span><br><span class=\"line\">find -name &quot;*fb*&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">在内核的drivers/net目录下查找文件名包含“fb”字样的文件</span><br><span class=\"line\">find drivers/net -name &quot;*fb*&quot;</span><br></pre></td></tr></table></figure>\n<p>2、grep</p>\n<p>针对某些函数，需要对代码进行彻查，查看函数调用的位置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查找当前目录下的所有文件、目录</span><br><span class=\"line\">grep &quot;request&quot; * -nR</span><br></pre></td></tr></table></figure>\n<p>3、ldd</p>\n<p>命令用于判断某个可执行的 binary 档案含有什么动态函式库，这个可能是在嵌入式方向中用到的机会比较多。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--version　　       打印ldd的版本号</span><br><span class=\"line\">-v --verbose　　  打印所有信息，例如包括符号的版本信息</span><br><span class=\"line\">-d --data-relocs　执行符号重部署，并报告缺少的目标对象（只对ELF格式适用）</span><br><span class=\"line\">-r --function-relocs　对目标对象和函数执行重新部署，并报告缺少的目标对象和函数（只对ELF格式适用）</span><br><span class=\"line\">--help 用法信息</span><br></pre></td></tr></table></figure>\n<p>4、Shell取出^M</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat -v buildprod.sh | tr -d '^M'  &gt; b1.sh</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"http://yoursite.com/2020/03/18/linux/vim%E7%9A%84%E5%91%BD%E4%BB%A4/\">vim的命令</a></li></ul></div>","categories":[{"name":"系统","slug":"系统","permalink":"chunlife.top/categories/系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"chunlife.top/tags/linux/"}]},{"title":"sort接口的使用","date":"2019-03-15T09:01:53.000Z","path":"2019/03/15/sort接口的使用/","content":"<p>该包实现了四种基本排序算法：插入排序、归并排序、堆排序和快速排序。（看到网上貌似有些文章漏掉了堆排序，不知道是不是以前的<code>go</code>没有堆排序）</p>\n<a id=\"more\"></a>\n<p>这四种排序方法是不公开的，它们只被用于sort包内部使用，由语言自动选择排序方式。</p>\n<h3><span id=\"1-基础类型排序\">1、基础类型排序</span></h3>\n<p>排序是在内部进行的，并不会返回一个新的切片。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"sort\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    strs := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"c\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>&#125;</span><br><span class=\"line\">    sort.Strings(strs)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"Strings:\"</span>, strs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// An example of sorting `int`s.</span></span><br><span class=\"line\">    ints := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">    sort.Ints(ints)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"Ints:   \"</span>, ints)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查slice是否是排序状态</span></span><br><span class=\"line\">    s := sort.IntsAreSorted(ints)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"Sorted: \"</span>, s)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"2-自定义排序\">2、自定义排序</span></h3>\n<p>实现 sort.Interface 的三个方法，Len，Swap，Less。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Interface <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Len is the number of elements in the collection.</span></span><br><span class=\"line\">        Len() <span class=\"keyword\">int</span></span><br><span class=\"line\">        <span class=\"comment\">// Less reports whether the element with</span></span><br><span class=\"line\">        <span class=\"comment\">// index i should sort before the element with index j.</span></span><br><span class=\"line\">        Less(i, j <span class=\"keyword\">int</span>) <span class=\"keyword\">bool</span></span><br><span class=\"line\">        <span class=\"comment\">// Swap swaps the elements with indexes i and j.</span></span><br><span class=\"line\">        Swap(i, j <span class=\"keyword\">int</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码示例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"sort\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> byLength []<span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s byLength)</span> <span class=\"title\">Len</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s byLength)</span> <span class=\"title\">Swap</span><span class=\"params\">(i, j <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    s[i], s[j] = s[j], s[i]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s byLength)</span> <span class=\"title\">Less</span><span class=\"params\">(i, j <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(s[i]) &lt; <span class=\"built_in\">len</span>(s[j])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    fruits := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"peach\"</span>, <span class=\"string\">\"banana\"</span>, <span class=\"string\">\"kiwi\"</span>&#125;</span><br><span class=\"line\">    sort.Sort(byLength(fruits))</span><br><span class=\"line\">    fmt.Println(fruits)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 生成递减序列</span></span><br><span class=\"line\">    sort.Sort(sort.Reverse(byLength(fruits)))</span><br><span class=\"line\">    fmt.Println(fruits)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/02/18/B站源码中的log-agent/\">B站源码中的log-agent</a></li><li><a href=\"chunlife.top/2019/12/18/使用unsafe-pointer引发GC错误/\">使用unsafe pointer引发GC错误</a></li><li><a href=\"chunlife.top/2019/09/27/MongoDB多表查询/\">MongoDB多表查询</a></li><li><a href=\"https://jarrychen.xyz/archives/c2a5fdc5.html\">堆排序</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"函数","slug":"函数","permalink":"chunlife.top/tags/函数/"},{"name":"排序","slug":"排序","permalink":"chunlife.top/tags/排序/"},{"name":"sort","slug":"sort","permalink":"chunlife.top/tags/sort/"}]},{"title":"移动文件或文件夹","date":"2019-03-15T06:29:30.000Z","path":"2019/03/15/移动文件或文件夹/","content":"<p>golang 移动（重命名）文件或文件夹，移动文件到目标位置时，不会自动创建目标位置的文件夹。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr := os.Rename(<span class=\"string\">\"./tmp\"</span>, <span class=\"string\">\"./tmp1\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/02/18/B站源码中的log-agent/\">B站源码中的log-agent</a></li><li><a href=\"chunlife.top/2019/12/18/使用unsafe-pointer引发GC错误/\">使用unsafe pointer引发GC错误</a></li><li><a href=\"chunlife.top/2019/09/27/MongoDB多表查询/\">MongoDB多表查询</a></li><li><a href=\"https://lailin.xyz/post/11996.html\">Go Web 小技巧（三）Gin 参数绑定</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"文件处理小程序","slug":"文件处理小程序","permalink":"chunlife.top/tags/文件处理小程序/"}]},{"title":"MongoDB ObjectID生成","date":"2019-03-15T03:10:14.000Z","path":"2019/03/15/MongoDB ObjectID生成/","content":"<p>在项目中需要用到一个随机数，将其作为唯一且无法重复，第一个想到的就是MongoDB里面的objectID，将其作为一个唯一且不重复的键值。</p>\n<a id=\"more\"></a>\n<p>ObjectId是一个12字节的 BSON 类型字符串。按照字节顺序，一次代表：</p>\n<ul>\n<li>4字节：UNIX时间戳</li>\n<li>3字节：表示运行MongoDB的机器</li>\n<li>2字节：表示生成此_id的进程</li>\n<li>3字节：由一个随机数开始的计数器生成的值</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// machineId stores machine id generated once and used in subsequent calls</span></span><br><span class=\"line\"><span class=\"comment\">// to NewObjectId function.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> machineId = readMachineId()</span><br><span class=\"line\"><span class=\"keyword\">var</span> processId = os.Getpid()</span><br><span class=\"line\"><span class=\"comment\">// objectIdCounter is atomically incremented when generating a new ObjectId</span></span><br><span class=\"line\"><span class=\"comment\">// using NewObjectId() function. It's used as a counter part of an id.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> objectIdCounter = readRandomUint32()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// readRandomUint32 returns a random objectIdCounter.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">readRandomUint32</span><span class=\"params\">()</span> <span class=\"title\">uint32</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b [<span class=\"number\">4</span>]<span class=\"keyword\">byte</span></span><br><span class=\"line\">\t_, err := io.ReadFull(rand.Reader, b[:])</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(fmt.Errorf(<span class=\"string\">\"cannot read random object id: %v\"</span>, err))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">uint32</span>((<span class=\"keyword\">uint32</span>(b[<span class=\"number\">0</span>]) &lt;&lt; <span class=\"number\">0</span>) | (<span class=\"keyword\">uint32</span>(b[<span class=\"number\">1</span>]) &lt;&lt; <span class=\"number\">8</span>) | (<span class=\"keyword\">uint32</span>(b[<span class=\"number\">2</span>]) &lt;&lt; <span class=\"number\">16</span>) | (<span class=\"keyword\">uint32</span>(b[<span class=\"number\">3</span>]) &lt;&lt; <span class=\"number\">24</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// readMachineId generates and returns a machine id.</span></span><br><span class=\"line\"><span class=\"comment\">// If this function fails to get the hostname it will cause a runtime error.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">readMachineId</span><span class=\"params\">()</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum [<span class=\"number\">3</span>]<span class=\"keyword\">byte</span></span><br><span class=\"line\">\tid := sum[:]</span><br><span class=\"line\">\thostname, err1 := os.Hostname()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err1 != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t_, err2 := io.ReadFull(rand.Reader, id)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err2 != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">panic</span>(fmt.Errorf(<span class=\"string\">\"cannot get hostname: %v; %v\"</span>, err1, err2))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thw := md5.New()</span><br><span class=\"line\">\thw.Write([]<span class=\"keyword\">byte</span>(hostname))</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(id, hw.Sum(<span class=\"literal\">nil</span>))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> id</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewObjectId returns a new unique ObjectId.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewObjectId</span><span class=\"params\">()</span> <span class=\"title\">ObjectId</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b [<span class=\"number\">12</span>]<span class=\"keyword\">byte</span></span><br><span class=\"line\">\t<span class=\"comment\">// Timestamp, 4 bytes, big endian</span></span><br><span class=\"line\">\tbinary.BigEndian.PutUint32(b[:], <span class=\"keyword\">uint32</span>(time.Now().Unix()))</span><br><span class=\"line\">\t<span class=\"comment\">// Machine, first 3 bytes of md5(hostname)</span></span><br><span class=\"line\">\tb[<span class=\"number\">4</span>] = machineId[<span class=\"number\">0</span>]</span><br><span class=\"line\">\tb[<span class=\"number\">5</span>] = machineId[<span class=\"number\">1</span>]</span><br><span class=\"line\">\tb[<span class=\"number\">6</span>] = machineId[<span class=\"number\">2</span>]</span><br><span class=\"line\">\t<span class=\"comment\">// Pid, 2 bytes, specs don't specify endianness, but we use big endian.</span></span><br><span class=\"line\">\tb[<span class=\"number\">7</span>] = <span class=\"keyword\">byte</span>(processId &gt;&gt; <span class=\"number\">8</span>)</span><br><span class=\"line\">\tb[<span class=\"number\">8</span>] = <span class=\"keyword\">byte</span>(processId)</span><br><span class=\"line\">\t<span class=\"comment\">// Increment, 3 bytes, big endian</span></span><br><span class=\"line\">\ti := atomic.AddUint32(&amp;objectIdCounter, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tb[<span class=\"number\">9</span>] = <span class=\"keyword\">byte</span>(i &gt;&gt; <span class=\"number\">16</span>)</span><br><span class=\"line\">\tb[<span class=\"number\">10</span>] = <span class=\"keyword\">byte</span>(i &gt;&gt; <span class=\"number\">8</span>)</span><br><span class=\"line\">\tb[<span class=\"number\">11</span>] = <span class=\"keyword\">byte</span>(i)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ObjectId(b[:])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"mongodb-objectid改变\">MongoDB objectID改变</span></h2>\n<p>在golang的MongoDB官方库中，objectID的生成方式发生了改变。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// \"go.mongodb.org/mongo-driver/bson/primitive\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> objectIDCounter = readRandomUint32()</span><br><span class=\"line\"><span class=\"keyword\">var</span> processUnique = processUniqueBytes()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewObjectID generates a new ObjectID.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewObjectID</span><span class=\"params\">()</span> <span class=\"title\">ObjectID</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b [<span class=\"number\">12</span>]<span class=\"keyword\">byte</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tbinary.BigEndian.PutUint32(b[<span class=\"number\">0</span>:<span class=\"number\">4</span>], <span class=\"keyword\">uint32</span>(time.Now().Unix()))</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(b[<span class=\"number\">4</span>:<span class=\"number\">9</span>], processUnique[:])</span><br><span class=\"line\">\tputUint24(b[<span class=\"number\">9</span>:<span class=\"number\">12</span>], atomic.AddUint32(&amp;objectIDCounter, <span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到这12字节，已改为，4字节unix时间戳+5字节随机值+随机值加上1。</p>\n<p>查看<a href=\"https://docs.mongodb.com/manual/reference/method/ObjectId/#objectid\" target=\"_blank\" rel=\"noopener\">官方文档</a>也可以发现，其对objectID的定义已经更改。</p>\n<ul>\n<li>a 4-byte value representing the seconds since the Unix epoch,</li>\n<li>a 5-byte random value, and</li>\n<li>a 3-byte counter, starting with a random value.</li>\n</ul>\n<p>只找到一篇博客对这个修改的推测，我也确实没有找到确切的修改理由，我认为博主说的有些道理。</p>\n<blockquote>\n<p>引用自：<a href=\"https://blog.wolfogre.com/posts/mongo-objectid-design/\" target=\"_blank\" rel=\"noopener\">Mongo ObjectId 早就不用机器标识和进程号了</a></p>\n<p>mongo 的 C++ 源码中，设置 ObjectId 中间 5 个字节的函数叫 <code>setInstanceUnique</code>，而在官方 golang 驱动中叫 <code>processUnique</code>，字面意思相近，都是说明这个值的作用是“区分不同进程实例”，而这个值具体怎么实现并没有什么要求，所以，使用“机器标识+进程号”来拿区分不同进程实例是可以的，使用互无关联的随机数来拿区分不同进程实例也是可以的。</p>\n<p>可想而知，“在同一秒内，两个进程实例产生了相同的 5 字节随机数，且刚巧这时候两个进程的自增计数器的值也是相同的”——这种情况发生的概率实在太低了，完全可以认为不可能发生，所以使用互无关联的随机数来拿区分不同进程实例是完全合乎需求的。</p>\n<p>那问题来了，为什么不继续使用“机器标识+进程号”呢？主观臆测开始。</p>\n<p>问题就在于，机器标识和进程号一定就那么可靠吗，尤其在这个物理机鲜见，虚拟机、云主机、容器横行的时代？</p>\n<p>先说机器标识码，ObjectId 的机器标识码是取系统 hostname 哈希值的前几位，问题来了，想必在座的各位都有干过吧：准备了几台虚拟机，hostname 都是默认的 localhost，谁都想着这玩意儿能有什么用，还得刻意给不同机器起不同的 hostname？此外，hostname 在容器、云主机里一般默认就是随机数，也不会检查同一集群里是否有 hostname 重名。</p>\n<p>再说进程号，这个问题就更大了，要知道，容器内的进程拥有自己独立的进程空间，在这个空间里只用它自己这一个进程（以及它的子进程），所以它的进程号永远都是 1。也就是说，如果某个服务（既可以是 mongo 实例也可以是 mongo 客户端）是使用容器部署的，无论部署多少个实例，在这个服务上生成的 ObjectId，第八第九个字节恒为 <code>0000 0001</code>，相当于说这两个字节废了。</p>\n<p>综上，与其使用一个固定值来“区分不同进程实例”，且这个固定值还是人类随意设置或随机生成的 hostname 加上一个可能恒为 1 的进程号，倒不如每次都随机生成一个新值。</p>\n</blockquote>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/02/18/B站源码中的log-agent/\">B站源码中的log-agent</a></li><li><a href=\"chunlife.top/2019/12/18/使用unsafe-pointer引发GC错误/\">使用unsafe pointer引发GC错误</a></li><li><a href=\"chunlife.top/2019/09/27/MongoDB多表查询/\">MongoDB多表查询</a></li><li><a href=\"https://lailin.xyz/post/11996.html\">Go Web 小技巧（三）Gin 参数绑定</a></li></ul></div>","categories":[{"name":"DB","slug":"DB","permalink":"chunlife.top/categories/DB/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"mongoDB","slug":"mongoDB","permalink":"chunlife.top/tags/mongoDB/"}]},{"title":"Go API统一注释说明","date":"2019-03-14T14:42:02.000Z","path":"2019/03/14/Go API统一注释说明/","content":"<h3><span id=\"安装\">安装</span></h3>\n<p>​\t运行下面指令后会在$GOPATH/bin中生成一个apidoc的可执行程序</p>\n<a id=\"more\"></a>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd $GOPATH/src/github.com/caixw/</span><br><span class=\"line\"></span><br><span class=\"line\">git clone https://github.com/caixw/apidoc.git</span><br><span class=\"line\"></span><br><span class=\"line\">cd $GOPATH/src/github.com/caixw/apidoc</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout v3.0</span><br><span class=\"line\"></span><br><span class=\"line\">go build</span><br><span class=\"line\"></span><br><span class=\"line\">cp apidoc $GOPATH/bin/</span><br></pre></td></tr></table></figure>\n<h3><span id=\"生成流程\">生成流程</span></h3>\n<ol>\n<li>在项目工程目录下生成apidoc配置文件：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apidoc -g</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在代码中每个API接口处理函数前加一些特殊的注释，注释格式见下文</li>\n<li>注释完后运行<code>apidoc</code> ，即在当前目录的<strong>doc</strong>目录生成相应项目的文档</li>\n<li>打开相应的html即可阅读</li>\n</ol>\n<h3><span id=\"注释格式\">注释格式</span></h3>\n<p>​\t在写代码时，需要在代码中加上特定格式的注释，以便用apidoc生成文档。</p>\n<ul>\n<li>项目文档的描述：在项目的<strong>某一个源文件（推荐main.go）的开头</strong>加上该项目文档的注释</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @apidoc &lt;title of doc&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiVersion &lt;version&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiBaseURL &lt;domain&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiContent</span></span><br><span class=\"line\"><span class=\"comment\"> * 描述，可以多行，支持html</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p>​\t&lt;title of doc&gt;填写为文档的名称</p>\n<p>​\t&lt;version&gt;为文档的版本</p>\n<p>​\t&lt;domain&gt;问API的域名，比如https://test.com</p>\n<p>​\t例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @apidoc USER模块API接口</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiVersion V0.1</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiBaseURL https://www.wukoon-app.com</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiContent</span></span><br><span class=\"line\"><span class=\"comment\"> * 描述，可以多行，支持html</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>API的描述：在需要导出的<strong>API相应处理函数</strong>前加上特定的注释</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @api &lt;method&gt; &lt;url&gt; &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiGroup &lt;group&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiQuery &lt;QueryName&gt; &lt;type&gt; &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> * @apiRequest json</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiHeader &lt;key&gt; &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &lt;ParamName&gt; &lt;type&gt; &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiExample json</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;body data example in json format&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccess &lt;status&gt; &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &lt;ParamName&gt; &lt;type&gt; &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiExample json</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;Success data in json format&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> * @apiError &lt;status&gt; &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam &lt;ParamName&gt; &lt;type&gt; &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiExample json</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;fail data in json format&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p>​\t&lt;method&gt;是API的HTTP method，比如GET</p>\n<p>​\t&lt;url&gt;是API的路径，比如/api/v1/user/user</p>\n<p>​\t&lt;summary&gt;是简要说明</p>\n<p>​\t&lt;group&gt;对 api 的分组信息，不同的分组，最终可能会被呈现在不同的页面。</p>\n<p>​\t&lt;QueryName&gt;Query的名称</p>\n<p>​       &lt;type&gt; Query的类型，比如int，string等</p>\n<p>​\t&lt;key&gt;HTTP请求头字段，有需要指定的话可以使用</p>\n<p>​\t&lt;ParamName&gt; 请求参数名称</p>\n<p>​\t&lt;body data example in json format&gt;请求body的例子</p>\n<p>​\t&lt;status&gt;HTTP状态码，比如200</p>\n<p>​\t&lt;Success data in json format&gt;成功返回数据例子</p>\n<p>​\t&lt;fail data in json format&gt;错误返回数据例子</p>\n<p>​\t例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @api PUT /api/v1/user/user 修改用户profile</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiGroup user</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiQuery userid int 执行修改请求的用户id</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiQuery token string 执行修改请求的用户token</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> * @apiRequest json</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiHeader session 12345</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam userid int 要修改的用户id</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam name string 将用户id对应的名称修改为name</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiExample json</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;\"userid\":1,\"name\":\"wubo\"&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> * @apiSuccess 200 OK</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam errcode int 错误代码</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam errmsg string 错误信息</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiExample json</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;\"errcode\":0,\"errmsg\":\"ok\"&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> * @apiError 200 OK</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam errcode int 错误代码</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiParam errmsg string 错误信息</span></span><br><span class=\"line\"><span class=\"comment\"> * @apiExample json</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;\"errcode\":30002,\"errmsg\":\"invalid parameter\"&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"参考\">参考</span></h3>\n<p>apidoc项目：<a href=\"https://github.com/caixw/apidoc\" target=\"_blank\" rel=\"noopener\">https://github.com/caixw/apidoc</a></p>\n<p>apidoc文档：<a href=\"http://apidoc.tools/\" target=\"_blank\" rel=\"noopener\">http://apidoc.tools/</a></p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/02/18/B站源码中的log-agent/\">B站源码中的log-agent</a></li><li><a href=\"chunlife.top/2019/12/18/使用unsafe-pointer引发GC错误/\">使用unsafe pointer引发GC错误</a></li><li><a href=\"chunlife.top/2019/09/27/MongoDB多表查询/\">MongoDB多表查询</a></li><li><a href=\"https://lailin.xyz/post/11996.html\">Go Web 小技巧（三）Gin 参数绑定</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"apidoc","slug":"apidoc","permalink":"chunlife.top/tags/apidoc/"},{"name":"go","slug":"go","permalink":"chunlife.top/tags/go/"}]},{"title":"ElasticSearch数据迁移","date":"2019-03-14T14:41:15.000Z","path":"2019/03/14/ElasticSearch数据迁移/","content":"<p>在机器上进行归档数据，需要借助的是<code>reindex</code>API。</p>\n<a id=\"more\"></a>\n<h4><span id=\"1-第一步\">1、第一步</span></h4>\n<p>迁移数据前，在ES中创建对应的index以及mapping。</p>\n<p>例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /my_index</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"settings\"</span>: &#123; </span><br><span class=\"line\">        <span class=\"string\">\"number_of_shards\"</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"number_of_replicas\"</span>:<span class=\"number\">0</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"mappings\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">\"time\"</span> : &#123;</span><br><span class=\"line\">            <span class=\"string\">\"type\"</span> : <span class=\"string\">\"integer\"</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"string\">\"uid\"</span> : &#123;</span><br><span class=\"line\">            <span class=\"string\">\"type\"</span> : <span class=\"string\">\"text\"</span></span><br><span class=\"line\">          &#125;，</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为了加快数据迁移，将 <code>refresh_interval</code> 置为-1，<code>number_of_replicas</code> 置为0：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT -H &apos;Content-type&apos;:&apos;application/json&apos; &#123;some ip&#125;:9200/&#123;index&#125;/_settings -d </span><br><span class=\"line\">&apos;&#123;</span><br><span class=\"line\">    &quot;index&quot;: &#123;</span><br><span class=\"line\">        &quot;refresh_interval&quot;: -1,</span><br><span class=\"line\">        &quot;number_of_replicas&quot;: 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;&apos;</span><br></pre></td></tr></table></figure>\n<p><code>refresh_interval</code>：文档自动刷新功能，文档的变化并不是立即对搜索实时可见的，需要进行一次刷新；</p>\n<p><code>number_of_replicas</code> ：创建副本，存储备份用，在导入时，关闭以节省时间。</p>\n<h4><span id=\"2-第二步\">2、第二步</span></h4>\n<p>使用reindex-from-remote来同步数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPOST -H &apos;Content-type&apos;:&apos;application/json&apos; http://127.0.0.1:9200/_reindex?pretty -d &apos;&#123;</span><br><span class=\"line\">    &quot;conflicts&quot;: &quot;proceed&quot;,</span><br><span class=\"line\">    &quot;source&quot;: &#123;</span><br><span class=\"line\">        &quot;remote&quot;:&#123;</span><br><span class=\"line\">            &quot;host&quot;:&quot;http://127.0.0.1:9200&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;index&quot;:&quot;produce_record&quot;,</span><br><span class=\"line\">        &quot;query&quot;: &#123;</span><br><span class=\"line\">         &quot;match&quot;: &#123;</span><br><span class=\"line\">            &quot;test&quot;: &quot;data&quot;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;，</span><br><span class=\"line\">        &quot;size&quot;:1000</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;dest&quot;: &#123;</span><br><span class=\"line\">        &quot;index&quot;: &quot;produce_record_v1&quot;,</span><br><span class=\"line\">        &quot;version_type&quot;: &quot;external&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;&apos;</span><br></pre></td></tr></table></figure>\n<p><code>conflicts</code>：导入过程中，源文档和目标文档出现冲突，不会导致导入失败。</p>\n<p><code>version_type</code>为&quot;external&quot;，当目标文档中_id相同时，将保留文档，而不是去覆盖；</p>\n<p>&quot;internal&quot;则是直接覆盖。</p>\n<h4><span id=\"3-第三步\">3、第三步</span></h4>\n<p>将 <code>refresh_interval</code>、<code>number_of_replicas</code> 分别设置回&quot;30s&quot;和1。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT -H 'Content-type':'application/json' &#123;some ip&#125;:9200/&#123;index&#125;/_settings -d </span><br><span class=\"line\">'&#123;</span><br><span class=\"line\">    \"index\": &#123;</span><br><span class=\"line\">        \"refresh_interval\": \"30s\",</span><br><span class=\"line\">        \"number_of_replicas\": 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;'</span><br></pre></td></tr></table></figure>\n<p>ElasticSearch集群方案：</p>\n<p>使用多节点，冷热数据分离的方式，也就是将读写I/O进行区分，在master上进行写操作，大量read操作分散到集群节点上。</p>\n<p><a href=\"https://blog.csdn.net/jiao_fuyou/article/details/78354327\" target=\"_blank\" rel=\"noopener\">Elasticsearch集群冷热分离-实际操作</a></p>\n<p><a href=\"https://blog.csdn.net/eases_stone/article/details/82181244\" target=\"_blank\" rel=\"noopener\">elasticsearch5.x系列之八冷热数据分离方案</a></p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/03/27/es告警功能——elastalert/\">es告警功能——elastalert</a></li><li><a href=\"www.chunlife.top/2019/03/27/es告警功能——elastalert/\">es告警功能——elastalert</a></li></ul></div>","categories":[{"name":"DB","slug":"DB","permalink":"chunlife.top/categories/DB/"}],"tags":[{"name":"elasticsearch","slug":"elasticsearch","permalink":"chunlife.top/tags/elasticsearch/"}]},{"title":"etcd配置中心——confd/viper","date":"2019-02-28T02:16:35.000Z","path":"2019/02/28/学习使用confd/","content":"<p>配置中心的使用呢，之前在项目中使用的是<a href=\"https://github.com/spf13/viper\" target=\"_blank\" rel=\"noopener\">viper</a>（现在又给改回去了，误解了viper的操作），但根据实际测试以及在GitHub的<a href=\"https://github.com/spf13/viper/issues?utf8=%E2%9C%93&amp;q=is%3Aissue+concurrent+map+read+and+map+write+\" target=\"_blank\" rel=\"noopener\">issue</a>中看到的帖子，看到viper是线程不安全的（确实是不安全的）。</p>\n<a id=\"more\"></a>\n<h2><span id=\"viper\">viper</span></h2>\n<p>函数<code>WatchRemoteConfig</code>可以监听ETCD KEY，但实际上这些操作在源码中都没出现加锁的操作，这里我对viper这么受欢迎的库在远端监听时不支持线程安全表示怀疑，因为我在官方README中并没有见到有特地提到说不能在并发环境中使用的注意事项，我想，事情可能并不是那么简单，现实是，事情可能就是这个样子的，监听远程key确实只能在一个协程中进行（为什么需要开多个协程去监听呢？）。</p>\n<p>使用<code>WatchRemoteConfig()</code>，viper会重新获取key中的所有数据，我们需使用<code>Unmarshal</code>将数据进行序列化保存，但这里可以不去<code>Unmarshal</code>，直接使用类似于<code>viper.GetString(&quot;logfile&quot;)</code>去获取key-value。</p>\n<p><strong>注意</strong>：这里就是问题出现的点了，使用<code>viper.GetString(&quot;logfile&quot;)</code>获取数据，相当于从一个map中直接拿数据，要知道，map是不能并发读和并发写的，所以会引发<code>concurrent map read and map write </code>。</p>\n<p>问题找到了，那么viper的用法呢，其实也没有错，但需要注意的是，我们确实<strong>只能</strong>在一个协程中使用viper，且我们在获取到数据后，最好是使用带锁的map或是并发<code>sync.Map</code>将数据保存起来，而不是使用<code>viper.GetString</code>去从viper的缓存中获取数据，我们不应该<code>信任</code>viper。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> runtime_viper = viper.New()</span><br><span class=\"line\"></span><br><span class=\"line\">runtime_viper.AddRemoteProvider(<span class=\"string\">\"etcd\"</span>, <span class=\"string\">\"http://127.0.0.1:4001\"</span>, <span class=\"string\">\"/config/hugo.yml\"</span>)</span><br><span class=\"line\">runtime_viper.SetConfigType(<span class=\"string\">\"yaml\"</span>) <span class=\"comment\">// because there is no file extension in a stream of bytes, supported extensions are \"json\", \"toml\", \"yaml\", \"yml\", \"properties\", \"props\", \"prop\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// read from remote config the first time.</span></span><br><span class=\"line\">err := runtime_viper.ReadRemoteConfig()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// unmarshal config</span></span><br><span class=\"line\">runtime_viper.Unmarshal(&amp;runtime_conf)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// open a goroutine to watch remote changes forever</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t    time.Sleep(time.Second * <span class=\"number\">5</span>) <span class=\"comment\">// delay after each request</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"comment\">// currently, only tested with etcd support</span></span><br><span class=\"line\">\t    err := runtime_viper.WatchRemoteConfig()</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t        log.Errorf(<span class=\"string\">\"unable to read remote config: %v\"</span>, err)</span><br><span class=\"line\">\t        <span class=\"keyword\">continue</span></span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"comment\">// unmarshal new config into our runtime config struct. you can also use channel</span></span><br><span class=\"line\">\t    <span class=\"comment\">// to implement a signal to notify the system of the changes</span></span><br><span class=\"line\">\t    runtime_viper.Unmarshal(&amp;runtime_conf)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 使用线程安全的sync.Map进行保存</span></span><br><span class=\"line\">        SyncCfgMap.Store(<span class=\"string\">\"config\"</span>, &amp;runtime_conf)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<h2><span id=\"confd安装\">confd安装</span></h2>\n<p><a href=\"https://blog.csdn.net/bbwangj/article/details/82953786\" target=\"_blank\" rel=\"noopener\">confd的安装与使用</a></p>\n<p><a href=\"https://github.com/kelseyhightower/confd\" target=\"_blank\" rel=\"noopener\">confd</a>网上资料很多了，基本上算是比较好配置的了，没有什么坑可以占，麻烦点的就是对于解析的配置。</p>\n<p>一般的，confd两个目录：conf.d，templates。</p>\n<p><code>conf.d</code>目录下的一个配置文件，代表将输出一个配置。而输出这些配置的依据或者是规则，放置于templates目录下，语法需要参考confd官方的<a href=\"https://github.com/kelseyhightower/confd/blob/master/docs/templates.md\" target=\"_blank\" rel=\"noopener\">文档</a>。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"etcd","slug":"etcd","permalink":"chunlife.top/tags/etcd/"},{"name":"confd","slug":"confd","permalink":"chunlife.top/tags/confd/"},{"name":"viper","slug":"viper","permalink":"chunlife.top/tags/viper/"}]},{"title":"baiduPCS学习","date":"2019-02-22T03:16:41.000Z","path":"2019/02/22/baiduPCS学习/","content":"<p>首先，百度云是一个非常好用的网盘，因为之前限速是在限得太过于厉害，无法忍受，在网上找了很多工具，其中就有<a href=\"https://github.com/iikira/BaiduPCS-Go\" target=\"_blank\" rel=\"noopener\">BaiduPCS-Go</a>，不得不说特别的好用，之前在此基础上，我添加了一个同步文件夹的功能，感觉代码挺简陋的，所以我也不好意思PR，这里主要是我想把项目中一些可以复用的函数给抽取出来，以便我日后翻阅吧。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Trigger 用于触发事件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Trigger</span><span class=\"params\">(f <span class=\"keyword\">func</span>()</span>)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> f == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> f()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TriggerOnSync 用于触发事件, 同步触发</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TriggerOnSync</span><span class=\"params\">(f <span class=\"keyword\">func</span>()</span>)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> f == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tf()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>delay是利用了channel的阻塞性质，以及关闭channel后，接受channel语句会获取数据，不再阻塞，这也就达到了delay的作用。（直接使用定时器也没啥毛病）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// NewDelayChan 发送延时信号</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewDelayChan</span><span class=\"params\">(t time.Duration)</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">struct</span></span>&#123;&#125; &#123;</span><br><span class=\"line\">   c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</span><br><span class=\"line\">   <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">      time.Sleep(t)</span><br><span class=\"line\">      <span class=\"built_in\">close</span>(c)</span><br><span class=\"line\">   &#125;()</span><br><span class=\"line\">   <span class=\"keyword\">return</span> c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &lt;-delayChan</span></span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/02/18/B站源码中的log-agent/\">B站源码中的log-agent</a></li><li><a href=\"chunlife.top/2019/12/18/使用unsafe-pointer引发GC错误/\">使用unsafe pointer引发GC错误</a></li><li><a href=\"chunlife.top/2019/09/27/MongoDB多表查询/\">MongoDB多表查询</a></li><li><a href=\"https://lailin.xyz/post/11996.html\">Go Web 小技巧（三）Gin 参数绑定</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"函数","slug":"函数","permalink":"chunlife.top/tags/函数/"}]},{"title":"mysql并发操作","date":"2019-02-21T01:45:11.000Z","path":"2019/02/21/mysql并发操作/","content":"<p>在项目中，遇到个并发问题，虽然不是个大问题，但确实是之前没考虑到的，具体体现类似于余额扣减，多个客户端同时访问web接口，导致临界数据计算出现异常。此时就代表着我可能就碰到了一个并发问题了。</p>\n<a id=\"more\"></a>\n<p>这里资料主要是参考了：</p>\n<p>知乎上的回答：<a href=\"https://www.zhihu.com/question/61484424\" target=\"_blank\" rel=\"noopener\">高并发下怎么做余额扣减？</a></p>\n<p><a href=\"http://blog.51cto.com/1385903/2115479\" target=\"_blank\" rel=\"noopener\">金融系统中高并发下投资余额扣减问题的解决思路</a></p>\n<p>通过知乎上的一些回答，第一个让我get到需要改正的点的是，条件判断和临界参数的比较（与0比较，或是余额比较），都是可以直接交给数据库去做的，这样就可以利用到MySQL自身的锁机制来帮助我们处理并发。</p>\n<h2><span id=\"mysql锁\">MySQL锁</span></h2>\n<p>MySQL中一般常见的锁，表锁和行锁，根据mysql引擎使用的不同，能够使用的锁也不同，例如行锁适用于<code>InnoDB</code>，这里也只是介绍行锁，其并发度也是最高的。</p>\n<p>这里介绍InnoDB的行锁模式及加锁方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   共享锁（s）：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。</span><br><span class=\"line\">   排他锁（Ｘ）：允许获取排他锁的事务更新数据，阻止其他事务取得相同的数据集共享读锁和排他写锁。</span><br><span class=\"line\">另外，为了允许行锁和表锁共存，实现多粒度锁机制，InnoDB还有两种内部使用的意向锁（Intention Locks），这两种意向锁都是表锁。</span><br><span class=\"line\">   意向共享锁（IS）：事务打算给数据行共享锁，事务在给一个数据行加共享锁前必须先取得该表的IS锁。</span><br><span class=\"line\">   意向排他锁（IX）：事务打算给数据行加排他锁，事务在给一个数据行加排他锁前必须先取得该表的IX锁。</span><br></pre></td></tr></table></figure>\n<p>​    如果一个事务请求的锁模式与当前的锁兼容，InnoDB就请求的锁授予该事务；反之，如果两者两者不兼容，该事务就要等待锁释放。</p>\n<p>​    意向锁是InnoDB自动加的，不需用户干预。对于<strong>UPDATE、DELETE和INSERT</strong>语句，InnoDB会自动给涉及及数据集加排他锁（Ｘ）；对于普通SELECT语句，InnoDB不会加任何锁；<strong>事务</strong>可以通过以下语句显示给记录集加共享锁或排锁。</p>\n<p>共享锁（Ｓ）：SELECT * FROM table_name WHERE … LOCK IN SHARE MODE</p>\n<p>排他锁（X）：SELECT * FROM table_name WHERE … FOR UPDATE</p>\n<p>用SELECT … IN SHARE MODE获得共享锁，主要用在需要数据依存关系时确认某行记录是否存在，并确保没有人对这个记录进行UPDATE或者DELETE操作。但是如果当前事务也需要对该记录进行更新操作，则很有可能造成死锁，对于锁定行记录后需要进行更新操作的应用，应该使用SELECT … FOR UPDATE方式获取排他锁。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Go中显示标明需要获取排他锁的SQL语句， ·WAIT 2·表示其他SQL请求等待2s后timeout，NOWAIT表示不等待</span></span><br><span class=\"line\">tx := Db.Set(<span class=\"string\">\"gorm:query_option\"</span>, <span class=\"string\">\" FOR UPDATE WAIT 2\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">begin;</span><br><span class=\"line\"><span class=\"comment\">// Add extra SQL option for selecting SQL</span></span><br><span class=\"line\">db.Set(<span class=\"string\">\"gorm:query_option\"</span>, <span class=\"string\">\"FOR UPDATE\"</span>).First(&amp;user, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">// SELECT * FROM users WHERE id = 10 FOR UPDATE;</span></span><br><span class=\"line\">commit;</span><br></pre></td></tr></table></figure>\n<p>需要<strong>注意</strong>的是：for update仅适用于，且必须在事务块(BEGIN/COMMIT)中才能生效。只有通过 <em><strong>索引</strong></em> 条件检索数据，<code>InnoDB</code>才会使用行级锁，否则，<code>InnoDB</code>将使用表锁！</p>\n<p>使用<code>SELECT ... FOR UPDATE</code>时，只有明确指定<code>主键</code>，MySQL才会执行Row Lock（只锁住被选取的数据），否则MySQL将获取表锁。</p>\n<blockquote>\n<p>结合前面的来说，使用主键索引、唯一索引或普通索引，<code>InnoDB</code>都会使用行锁来对数据加锁。且其在查询时，若没有查询到数据，将不会产生锁。</p>\n<p>若在查询条件中，使用不等于&lt;&gt;，模糊查询like等函数还是会产生表锁的。</p>\n</blockquote>\n<p>总得来说，这里MySQL使用的是悲观锁，对于悲观锁的理解是，读写都来一把锁，将数据进行锁定；而乐观锁呢，大意就是不需要锁进行操作，而是通过合理的逻辑，去规避同时操作数据所出现的问题，以不加锁的方式实现同一时间仅一次操作数据的操作能够正常执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">乐观所和悲观锁策略</span><br><span class=\"line\">悲观锁：在读取数据时锁住那几行，其他对这几行的更新需要等到悲观锁结束时才能继续 。</span><br><span class=\"line\">乐观所：读取数据时不锁，更新时检查是否数据已经被更新过，如果是则取消当前更新，一般在悲观锁的等待时间过长而不能接受时我们才会选择乐观锁。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考：<a href=\"https://www.cnblogs.com/houweijian/p/5869243.html\" target=\"_blank\" rel=\"noopener\">mysql事务，select for update，及数据的一致性处理</a></p>\n</blockquote>\n<h2><span id=\"数据一致性\">数据一致性</span></h2>\n<p>假设有A、B两个用户同时各购买一件 id=1 的商品，用户A获取到的库存量为 1000，用户B获取到的库存量也为 1000，用户A完成购买后修改该商品的库存量为 999，用户B完成购买后修改该商品的库存量为 999，此时库存量数据产生了不一致。</p>\n<p>有两种解决方案：</p>\n<p>悲观锁方案：每次获取商品时，对该商品加排他锁。也就是在用户A获取获取 id=1 的商品信息时对该行记录加锁，期间其他用户阻塞等待访问该记录。悲观锁适合写入频繁的场景。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">begin;</span><br><span class=\"line\">select * <span class=\"keyword\">from</span> goods where id = <span class=\"number\">1</span> <span class=\"keyword\">for</span> update;</span><br><span class=\"line\">update goods set stock = stock - <span class=\"number\">1</span> where id = <span class=\"number\">1</span>;</span><br><span class=\"line\">commit;</span><br></pre></td></tr></table></figure>\n<p>乐观锁方案：每次获取商品时，不对该商品加锁。在更新数据的时候需要比较程序中的库存量与数据库中的库存量是否相等，如果相等则进行更新，反之程序重新获取库存量，再次进行比较，直到两个库存量的数值相等才进行数据更新。乐观锁适合读取频繁的场景。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#不加锁获取 id=1 的商品对象</span><br><span class=\"line\">select * <span class=\"keyword\">from</span> goods where id = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">begin;</span><br><span class=\"line\">#更新 stock 值，这里需要注意 where 条件 “stock = cur_stock”，只有程序中获取到的库存量与数据库中的库存量相等才执行更新</span><br><span class=\"line\">update goods set stock = stock - <span class=\"number\">1</span> where id = <span class=\"number\">1</span> and stock = cur_stock;</span><br><span class=\"line\">commit;</span><br></pre></td></tr></table></figure>\n<p>如果我们需要设计一个商城系统，该选择以上的哪种方案呢？</p>\n<p>查询商品的频率比下单支付的频次高，基于以上我可能会优先考虑第二种方案（当然还有其他的方案，这里只考虑以上两种方案）。</p>\n<blockquote>\n<p><a href=\"https://cloud.tencent.com/developer/article/1531886\" target=\"_blank\" rel=\"noopener\">数据库：MySQL 中 “select … for update” 排他锁分析</a></p>\n</blockquote>\n<h2><span id=\"too-many-open-file\"><em>too</em> <em>many</em> <em>open</em> <em>file</em></span></h2>\n<p>在服务器端时，在正常运行的过程中，总会出现<code>socket: too many open file</code>，然后当次HTTP请求就会出现访问错误，这是由于linux对程序打开文件的限制，使用命令<code>ulimit -a</code>，默认<code>open file (-n) 1024</code>，解决方法是<code>ulimit -n 8192</code>，将支持打开的文件数量调大些。</p>\n<p>这里还是服务端在请求产生后，资源没有及时释放，我使用<code>resty</code> HTTP库时，会比较快的出现这个问题，我换成使用原生Golang库发起请求时，这个问题会减轻很多，这里我对这个库的资源回收方面的处理表示一些不好的意向。另外<code>viper</code>库竟然不支持并发安全，这也是让我没有预料到的。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"http://hexo.yuanjh.cn/hexo/a27a49e6/\">mysql常用操作速查[博]</a></li></ul></div>","categories":[{"name":"DB","slug":"DB","permalink":"chunlife.top/categories/DB/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"mysql","slug":"mysql","permalink":"chunlife.top/tags/mysql/"}]},{"title":"自定义json Marshalling","date":"2019-02-17T02:34:35.000Z","path":"2019/02/17/自定义json Marshalling/","content":"<p>在开发中，若是遇到结构体中的私有变量（小写变量），需要出现在<code>json Marshal</code>结果中，使用json外包显然是无法做到的，因为外包是无法看到私有变量的，<code>reflect</code>机制需要的是大写变量，但就是需要这样的操作，怎么办呢，可以实现该结构体自有<code>Marshal</code>方法。</p>\n<a id=\"more\"></a>\n<p>看到一篇好文章：<a href=\"http://choly.ca/post/go-json-marshalling/\" target=\"_blank\" rel=\"noopener\">Custom JSON Marshalling in Go</a>，以下是翻译。</p>\n<p>补：</p>\n<blockquote>\n<p>有人问我，这个小写变量没啥软用啊，你咋不大写？</p>\n<p>额，我这里自己对结构体编写了构造函数，我有一些初始设置是写在结构体里的，不想被外界修改，所以使用了这个操作，另外我可以借助这个操作来更改实际输出给外部的结构体格式。</p>\n<p>当然，一切以项目需求为主，<img src=\"2E8E715C.png\" alt=\"img\">。</p>\n</blockquote>\n<p>Go的<code>encoding/json</code>包使得序列化结构体<code>s</code>到JSON数据变得非常容易。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"encoding/json\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyUser <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID       <span class=\"keyword\">int64</span>     <span class=\"string\">`json:\"id\"`</span></span><br><span class=\"line\">\tName     <span class=\"keyword\">string</span>    <span class=\"string\">`json:\"name\"`</span></span><br><span class=\"line\">\tLastSeen time.Time <span class=\"string\">`json:\"lastSeen\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t_ = json.NewEncoder(os.Stdout).Encode(</span><br><span class=\"line\">\t\t&amp;MyUser&#123;<span class=\"number\">1</span>, <span class=\"string\">\"Ken\"</span>, time.Now()&#125;,</span><br><span class=\"line\">\t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Output:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"id\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"Ken\"</span>,<span class=\"attr\">\"lastSeen\"</span>:<span class=\"string\">\"2009-11-10T23:00:00Z\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>但是，如果我们想要改变其中一个字段值的显示方式呢？例如，假设我想<code>LastSeen</code>成为一个unix时间戳。</p>\n<p>简单的解决方案是引入另一个辅助<code>struct</code>，并使用方法中正确格式化的值填充它<code>MarshalJSON</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *MyUser)</span> <span class=\"title\">MarshalJSON</span><span class=\"params\">()</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> json.Marshal(&amp;<span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tID       <span class=\"keyword\">int64</span>  <span class=\"string\">`json:\"id\"`</span></span><br><span class=\"line\">\t\tName     <span class=\"keyword\">string</span> <span class=\"string\">`json:\"name\"`</span></span><br><span class=\"line\">\t\tLastSeen <span class=\"keyword\">int64</span>  <span class=\"string\">`json:\"lastSeen\"`</span></span><br><span class=\"line\">\t&#125;&#123;</span><br><span class=\"line\">\t\tID:       u.ID,</span><br><span class=\"line\">\t\tName:     u.Name,</span><br><span class=\"line\">\t\tLastSeen: u.LastSeen.Unix(),  <span class=\"comment\">// 调换了参数</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是有用的，但是当有很多字段时它会变得很麻烦。如果我们可以将原始内容嵌入<code>struct</code>到辅助中<code>struct</code>并使其继承所有不需要更改的字段，这将是好的解决方式。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *MyUser)</span> <span class=\"title\">MarshalJSON</span><span class=\"params\">()</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> json.Marshal(&amp;<span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tLastSeen <span class=\"keyword\">int64</span> <span class=\"string\">`json:\"lastSeen\"`</span></span><br><span class=\"line\">\t\t*MyUser</span><br><span class=\"line\">\t&#125;&#123;</span><br><span class=\"line\">\t\tLastSeen: u.LastSeen.Unix(),</span><br><span class=\"line\">\t\tMyUser:   u,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的问题是辅助结构也将继承原始的<code>MarshalJSON</code>方法，导致它进入无限循环（<code>我：这里我不太清楚作者无限循环的意思</code>）。解决方案是为原始类型添加别名。此别名将具有所有相同的字段，但不包含任何方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *MyUser)</span> <span class=\"title\">MarshalJSON</span><span class=\"params\">()</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">type</span> Alias MyUser</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> json.Marshal(&amp;<span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tLastSeen <span class=\"keyword\">int64</span> <span class=\"string\">`json:\"lastSeen\"`</span></span><br><span class=\"line\">\t\t*Alias</span><br><span class=\"line\">\t&#125;&#123;</span><br><span class=\"line\">\t\tLastSeen: u.LastSeen.Unix(),</span><br><span class=\"line\">\t\tAlias:    (*Alias)(u),</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我：辅助<code>struct</code>的<code>lastSeen</code>会覆盖原始<code>struct</code>中的同名<code>tag</code>参数。</p>\n</blockquote>\n<p>可以使用相同的技术来实现<code>UnmarshalJSON</code>方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *MyUser)</span> <span class=\"title\">UnmarshalJSON</span><span class=\"params\">(data []<span class=\"keyword\">byte</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">type</span> Alias MyUser</span><br><span class=\"line\">\taux := &amp;<span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tLastSeen <span class=\"keyword\">int64</span> <span class=\"string\">`json:\"lastSeen\"`</span></span><br><span class=\"line\">\t\t*Alias</span><br><span class=\"line\">\t&#125;&#123;</span><br><span class=\"line\">\t\tAlias: (*Alias)(u),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := json.Unmarshal(data, &amp;aux); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tu.LastSeen = time.Unix(aux.LastSeen, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://kezunlin.me/post/77697d8d/\">python useful tools and code snippets</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"json","slug":"json","permalink":"chunlife.top/tags/json/"},{"name":"Marshal","slug":"Marshal","permalink":"chunlife.top/tags/Marshal/"}]},{"title":"初步学习ES","date":"2019-01-09T03:34:40.000Z","path":"2019/01/09/初步学习ES/","content":"<h2><span id=\"基础es\">基础ES</span></h2>\n<p>ES访问基于RESTful web接口，功能可以说是十分强劲（学会用才行），对各类搜索来说可以说特别方便的，可以使用的搜索方式很多。</p>\n<p>先了解了解ES基础的使用方法。</p>\n<a id=\"more\"></a>\n<p>基础接口使用：</p>\n<p><img src=\"clip_image001.png\" alt=\"123\"></p>\n<p><img src=\"1547005720207.png\" alt=\"数据库对比\"></p>\n<h2><span id=\"资料收集\">资料收集</span></h2>\n<p>本来是想写点什么的，不过发现前人已经将基础部分描述得很清楚了，对于我来讲，拿出小本本，做好笔，站在前人的肩膀上，坐享成果，岂不是美滋滋。</p>\n<p>简单介绍一些学习的博客，用于帮助理解ES。</p>\n<p>博主写了5篇关于ES的文章，从基础概念到Java API的使用。</p>\n<p><a href=\"https://blog.csdn.net/xialei199023/article/list/2?t=1\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/xialei199023/article/list/2?t=1</a></p>\n<p>一个博客专栏，共有6篇博客。</p>\n<p><a href=\"https://blog.csdn.net/vbirdbest/column/info/19346\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/vbirdbest/column/info/19346</a></p>\n<p>个人比较<strong>喜欢</strong>的一篇博客，写的非常详尽，对初学者极度友好。</p>\n<p><a href=\"https://my.oschina.net/yumg/blog/625448\" target=\"_blank\" rel=\"noopener\">认识ElasticSearch的API，并深入Search的使用</a></p>\n<p>获取筛选字段。</p>\n<p><a href=\"https://blog.csdn.net/afeiqiang/article/details/82999962\" target=\"_blank\" rel=\"noopener\">Elasticsearch搜索详解（三）：返回字段筛选</a></p>\n<p>ES查询使用</p>\n<p><a href=\"https://www.cnblogs.com/yjf512/p/4897294.html\" target=\"_blank\" rel=\"noopener\">elasticsearch 查询（match和term）</a></p>\n<p><strong>聚合</strong>操作可以算是ES中实现一些复杂操作的方式，</p>\n<p><a href=\"https://blog.csdn.net/donghaixiaolongwang/article/details/58597058\" target=\"_blank\" rel=\"noopener\">Elasticsearch–Aggregation详细总结（聚合统计）</a></p>\n<p><a href=\"https://blog.csdn.net/xialei199023/article/details/48298635\" target=\"_blank\" rel=\"noopener\">实时搜索引擎Elasticsearch（4）——Aggregations （聚合）API的使用</a></p>\n<p><a href=\"https://www.jianshu.com/p/6e28c967d872\" target=\"_blank\" rel=\"noopener\">使用Elasticsearch实现统计(golang)</a></p>\n<p>对于随时查找并使用的场景，可以查看官方的手册：</p>\n<p><a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/current/preface.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/cn/elasticsearch/guide/current/preface.html</a></p>\n<h2><span id=\"搜索解决的问题随时更新\">搜索解决的问题（随时更新）</span></h2>\n<p><a href=\"https://stackoverflow.com/questions/28189725/find-distinct-values-not-distinct-counts-in-elasticsearch\" target=\"_blank\" rel=\"noopener\">Distinct ES实现方法</a></p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"DB","slug":"DB","permalink":"chunlife.top/categories/DB/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"Elastic Search","slug":"Elastic-Search","permalink":"chunlife.top/tags/Elastic-Search/"}]},{"title":"技术博客的重要性","date":"2018-12-24T14:24:55.000Z","path":"2018/12/24/技术博客的重要性/","content":"<p>本篇文章由我翻译自：<a href=\"https://akomljen.com/the-importance-of-tech-blogging/\" target=\"_blank\" rel=\"noopener\">https://akomljen.com/the-importance-of-tech-blogging/</a>，翻译难免出现差错，尽请谅解。</p>\n<a id=\"more\"></a>\n<p>我有很多干货将在博客上分享，这实际上已经是我的第三个技术博客，算是比较的成功的。很多优秀的工程师有很多优秀的想法，但经常找不到开始动笔分享的理由。通常你会听到“我没有时间去写”这样的话，或者他们只是看不到这件事的重要之处。他们不了解博客如何在专业性领域帮助他们。现在，对你来说更重要的是将自己分享给世界，作为技术人员，我们应该成为一个榜样。</p>\n<h2><span id=\"为什么要开始写博客\">为什么要开始写博客？</span></h2>\n<p>首先我来回答这个问题，为什么？</p>\n<p>这有很多答案，但其中最重要的一个原因是——曝光。作为计算机软件工程师，我们工作范围非常广泛，同时也面对着来自世界不同地区的竞争。<strong>你应该用着眼更大的范围去思考和行动！</strong></p>\n<p>科技世界简历的作用越来越低效，让人们找到你，读到你正在做的事情，之后，这些人总会提供一些东西给你——这也是曝光为何显得如此重要的原因了。根据我作为DevOps工程师的个人经验，我很少发送简历。实际上我自己都不知道上次发简历的时间了。你几乎能在任何地方看到我的文章，HR或公司每周都会直接与我联系。<strong>机会主动靠近我，而不是我去寻找机会。</strong></p>\n<p>记住以上所有内容，你还将学到更多关于写作的知识。</p>\n<p><img src=\"1545658771436.png\" alt=\"分享博客\"></p>\n<h2><span id=\"从哪儿开始\">从哪儿开始？</span></h2>\n<p>你可以写下你最近做过的有趣的事情，或者写一些你想要更好理解的事情。不要试图找到一个完美的写作由头。在学习<a href=\"https://akomljen.com/tag/kubernetes/\" target=\"_blank\" rel=\"noopener\">Kubernetes的过程中</a>，我一直努力寻找帮助我开始学习的好文章。我如今正在写很多关于Kubernetes的文章。再举一个例子，我的未婚妻等了好几年才开始写博客。她不相信她的内容对某人来说会很有趣，并且一直让她感到厌烦。我很自豪她开始了，现在她的写作比我更多。我建议你阅读她关于如何掌握生活改变的两篇博文：</p>\n<ul>\n<li><a href=\"https://gattabrava.com/mastering-life-change-the-unwelcome-kind/\" target=\"_blank\" rel=\"noopener\">掌握生活变化：不受欢迎的种类</a></li>\n<li><a href=\"https://gattabrava.com/mastering-life-change-the-invited-kind/\" target=\"_blank\" rel=\"noopener\">掌握生活变化：邀请的种类</a></li>\n</ul>\n<p><img src=\"1545659175572.png\" alt=\"秀恩爱\"></p>\n<p>不要花太多时间思考写什么以及你的博客应该是什么样子。基本上，你可以立即开始写一些谷歌文档。写作的同时也会得到一些新的想法。无论如何，你可能在一段时间里对第一篇文章并不是那么有感情，对于你投入了努力感觉显得并不重要。这是正常的。随着时间的推移，你将掌握你独有的技能。</p>\n<p>我提到这是我的第三篇博客。我写的是关于FreeBSD的提示和技巧，因为它是我首选的操作系统。这并不是很顺利（谁猜得到呢），几年前研究OpenShift时我决定写一篇关于如何在该平台上免费运行Wordpress博客的博客文章，我很快创建了名为TechBar的新博客并开始写作。新博客也不顺利。问题是我并不专注，一段时间后我完全停止写作。<strong>在博客方面，专注是关键。</strong></p>\n<h2><span id=\"技术资料\">技术资料</span></h2>\n<p>也许你已经写了一些东西，但现在你需要选择你的博客名称，域名，托管地点和其他技术内容。你可能会因为做出很多决定而迷失方向。它可能非常简单或非常复杂，具体取决于您选择的路径。我建议使用一些随时可用的主机平台与Wordpress或Ghost。Medium也是一种选择，但我不是粉丝。</p>\n<p>有很多可以使用的托管服务提供商。对于Wordpress，你可以使用<a href=\"https://www.bluehost.com/track/komljen/\" target=\"_blank\" rel=\"noopener\">Bluehost</a>，只需3.95美元/月，对于Ghost，有官方的<a href=\"https://ghost.org/pricing/\" target=\"_blank\" rel=\"noopener\">Ghost pro</a>计划，其中最便宜的是每月79美元。在我看来，Ghost pro对于初学者来说太贵了。我使用了两个平台，我更喜欢Ghost。只是我个人的偏好。我在<a href=\"https://m.do.co/c/60b55ed9afcf\" target=\"_blank\" rel=\"noopener\">DigitalOcean</a>上部署了Ghost，使用最小的VM进行备份只花了6美元/月。由于Cloudflare，它大部分时间都处于闲置状态，每天有1k用户。</p>\n<p>我是DevOps的人，我无法帮助自己不创建Terraform文件来启动VM，创建防火墙规则，启用备份，设置Cloudflare，复制所有文件并在Docker中启动Ghost博客。当然，使用像Docker和Let’s Encrypt这样的好东西 - 因为HTTPS是必须的。我的Terraform文件仍未准备好共享，但这里是docker compose文件，你可以使用它来启动Ghost博客并通过Let’s Encrypt获得免费的SSL证书：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">⚡ cat &gt; docker-compose.yml &lt;&lt;EOF</span><br><span class=\"line\">version: &apos;3&apos;</span><br><span class=\"line\">services:</span><br><span class=\"line\">   nginx:</span><br><span class=\"line\">     image: nginx</span><br><span class=\"line\">     container_name: nginx-proxy</span><br><span class=\"line\">     restart: always</span><br><span class=\"line\">     volumes:</span><br><span class=\"line\">       - certs:/etc/nginx/certs:ro</span><br><span class=\"line\">       - nginx_conf.d:/etc/nginx/conf.d</span><br><span class=\"line\">       - nginx_vhost.d:/etc/nginx/vhost.d</span><br><span class=\"line\">       - nginx_html:/usr/share/nginx/html</span><br><span class=\"line\">     labels:</span><br><span class=\"line\">       - &quot;com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy&quot;</span><br><span class=\"line\">     ports:</span><br><span class=\"line\">       - &quot;80:80&quot;</span><br><span class=\"line\">       - &quot;443:443&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">   nginx-gen:</span><br><span class=\"line\">     image: jwilder/docker-gen</span><br><span class=\"line\">     restart: always</span><br><span class=\"line\">     command: -notify-sighup nginx-proxy -watch /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf</span><br><span class=\"line\">     volumes:</span><br><span class=\"line\">       - ./files/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro</span><br><span class=\"line\">       - /var/run/docker.sock:/tmp/docker.sock:ro</span><br><span class=\"line\">       - certs:/etc/nginx/certs:ro</span><br><span class=\"line\">       - nginx_conf.d:/etc/nginx/conf.d</span><br><span class=\"line\">       - nginx_vhost.d:/etc/nginx/vhost.d</span><br><span class=\"line\">     depends_on:</span><br><span class=\"line\">       - nginx</span><br><span class=\"line\">     labels:</span><br><span class=\"line\">       - &quot;com.github.jrcs.letsencrypt_nginx_proxy_companion.docker_gen&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">   nginx-letsencrypt:</span><br><span class=\"line\">     image: jrcs/letsencrypt-nginx-proxy-companion:stable</span><br><span class=\"line\">     restart: always</span><br><span class=\"line\">     volumes:</span><br><span class=\"line\">       - certs:/etc/nginx/certs</span><br><span class=\"line\">       - nginx_vhost.d:/etc/nginx/vhost.d</span><br><span class=\"line\">       - nginx_html:/usr/share/nginx/html</span><br><span class=\"line\">       - /var/run/docker.sock:/var/run/docker.sock:ro</span><br><span class=\"line\">     depends_on:</span><br><span class=\"line\">       - nginx</span><br><span class=\"line\">       - nginx-gen</span><br><span class=\"line\"></span><br><span class=\"line\">   ghost:</span><br><span class=\"line\">     image: ghost:1.24.7-alpine</span><br><span class=\"line\">     restart: always</span><br><span class=\"line\">     volumes:</span><br><span class=\"line\">       - ./data:/var/lib/ghost/content</span><br><span class=\"line\">       - ./files/config.production.json:/var/lib/ghost/config.production.json</span><br><span class=\"line\">     environment:</span><br><span class=\"line\">       - VIRTUAL_HOST=&lt;YOUR_DOMAIN&gt;, www.&lt;YOUR_DOMAIN&gt;</span><br><span class=\"line\">       - LETSENCRYPT_HOST=&lt;YOUR_DOMAIN&gt;, www.&lt;YOUR_DOMAIN&gt;</span><br><span class=\"line\">       - LETSENCRYPT_EMAIL=&lt;YOUR_EMAIL&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  nginx_vhost.d:</span><br><span class=\"line\">  nginx_conf.d:</span><br><span class=\"line\">  nginx_html:</span><br><span class=\"line\">  certs:</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p>在使用此文件之前，你需要准备好域名并执行一些准备步骤：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">⚡ mkdir files</span><br><span class=\"line\"></span><br><span class=\"line\">⚡ curl https://raw.githubusercontent.com/jwilder/nginx-proxy/master/nginx.tmpl &gt; files/nginx.tmpl</span><br><span class=\"line\"></span><br><span class=\"line\">⚡ cat &gt; files/config.production.json &lt;&lt;EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;url&quot;: &quot;http://&lt;YOUR_DOMAIN&gt;/&quot;,</span><br><span class=\"line\">  &quot;server&quot;: &#123;</span><br><span class=\"line\">    &quot;port&quot;: 2368,</span><br><span class=\"line\">    &quot;host&quot;: &quot;0.0.0.0&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;database&quot;: &#123;</span><br><span class=\"line\">    &quot;client&quot;: &quot;sqlite3&quot;,</span><br><span class=\"line\">    &quot;connection&quot;: &#123;</span><br><span class=\"line\">      &quot;filename&quot;: &quot;/var/lib/ghost/content/data/ghost.db&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;mail&quot;: &#123;</span><br><span class=\"line\">    &quot;transport&quot;: &quot;Direct&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;logging&quot;: &#123;</span><br><span class=\"line\">    &quot;transports&quot;: [</span><br><span class=\"line\">      &quot;file&quot;,</span><br><span class=\"line\">      &quot;stdout&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;process&quot;: &quot;systemd&quot;,</span><br><span class=\"line\">  &quot;paths&quot;: &#123;</span><br><span class=\"line\">    &quot;contentPath&quot;: &quot;/var/lib/ghost/content&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">⚡ docker-compose.yml up -d</span><br></pre></td></tr></table></figure>\n<p>这就是我在这个博客中使用的内容，也是我未婚妻的博客<a href=\"https://gattabrava.com/\" target=\"_blank\" rel=\"noopener\">Gatta Brava</a>在Terraform的帮助下也做了同样的事情。</p>\n<p>对于这两个博客，我付出了比想象中更多的努力。我买了一个自定义主题并做了一些定制。我不知道我在CSS方面做了什么，但我尝试过，我对最终结果感到满意。你可以使用默认的Ghost Casper主题来进行写作。你可以随时更改它，所以不用担心。</p>\n<p>我博客的所有访问量中有90％来自自然搜索。在搜索引擎优化和营销方面，我学到了很多东西。所有这些事情都无法在一夜之间学会，所以请写下并学习如何宣传您的内容。有时你会得到很好的反馈，这会增强你的信心。**博客是你的个人项目。**你做出的所有决策，将它将绽放光芒。</p>\n<p>我建议观看Troy Hunt关于如何破解你的职业生涯的演讲（ hack your career）。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2018/12/14/程序员的简历之道/\">程序员的简历就该这样写</a></li><li><a href=\"chunlife.top/2018/08/26/组件与语言特性的学习/\">组件与语言特性的学习</a></li><li><a href=\"https://blog.gomi1992.xyz/post/e284fae8.html\">hexo+github+语雀 搭建博客</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"学习","slug":"学习","permalink":"chunlife.top/tags/学习/"},{"name":"博客","slug":"博客","permalink":"chunlife.top/tags/博客/"}]},{"title":"程序员的简历就该这样写","date":"2018-12-14T08:40:42.000Z","path":"2018/12/14/程序员的简历之道/","content":"<p>感觉对我是非常有指导意义的，那看到了实在忍不住就收藏了，收藏了觉着还不得劲，非得转载才安心（要是侵犯了作者权益，请联系我直接删除，非常感谢作者）。</p>\n<a id=\"more\"></a>\n<h2><span id=\"程序员的简历就该这样写\"></span></h2>\n<h3><span id=\"1-前言\">1 前言</span></h3>\n<p><font color=\"red\">一份好的简历可以在整个申请面试以及面试过程中起到非常好的作用。</font> 在不夸大自己能力的情况下，写出一份好的简历也是一项很棒的能力。</p>\n<h3><span id=\"2-为什么说简历很重要\">2 为什么说简历很重要？</span></h3>\n<h4><span id=\"21-先从面试前来说\">2.1 先从面试前来说</span></h4>\n<p>假如你是网申，你的简历必然会经过HR的筛选，一张简历HR可能也就花费10秒钟看一下，然后HR就会决定你这一关是Fail还是Pass。</p>\n<p>假如你是内推，如果你的简历没有什么优势的话，就算是内推你的人再用心，也无能为力。</p>\n<p>另外，就算你通过了筛选，后面的面试中，面试官也会根据你的简历来判断你究竟是否值得他花费很多时间去面试。</p>\n<p>所以，简历就像是我们的一个门面一样，它在很大程度上决定了你能否进入到下一轮的面试中。</p>\n<h4><span id=\"22-再从面试中来说\">2.2 再从面试中来说</span></h4>\n<p>我发现大家比较喜欢看面经 ，这点无可厚非，但是大部分面经都没告诉你很多问题都是在特定条件下才问的。举个简单的例子：一般情况下你的简历上注明你会的东西才会被问到（Java、数据结构、网络、算法这些基础是每个人必问的），比如写了你会 redis,那面试官就很大概率会问你 redis 的一些问题。比如：redis的常见数据类型及应用场景、redis是单线程为什么还这么快、 redis 和 memcached 的区别、redis 内存淘汰机制等等。</p>\n<p>所以，首先，你要明确的一点是：<strong>你不会的东西就不要写在简历上</strong>。另外，<strong>你要考虑你该如何才能让你的亮点在简历中凸显出来</strong>，比如：你在某某项目做了什么事情解决了什么问题（只要有项目就一定有要解决的问题）、你的某一个项目里使用了什么技术后整体性能和并发量提升了很多等等。</p>\n<p>面试和工作是两回事，聪明的人会把面试官往自己擅长的领域领，其他人则被面试官牵着鼻子走。虽说面试和工作是两回事，但是你要想要获得自己满意的 offer ，你自身的实力必须要强。</p>\n<h3><span id=\"3-下面这几点你必须知道\">3 下面这几点你必须知道</span></h3>\n<ol>\n<li>大部分公司的HR都说我们不看重学历（骗你的！），但是如果你的学校不出众的话，很难在一堆简历中脱颖而出，除非你的简历上有特别的亮点，比如：某某大厂的实习经历、获得了某某大赛的奖等等。</li>\n<li><strong>大部分应届生找工作的硬伤是没有工作经验或实习经历，所以如果你是应届生就不要错过秋招和春招。一旦错过，你后面就极大可能会面临社招，这个时候没有工作经验的你可能就会面临各种碰壁，导致找不到一个好的工作</strong></li>\n<li><strong>写在简历上的东西一定要慎重，这是面试官大量提问的地方；</strong></li>\n<li><strong>将自己的项目经历完美的展示出来非常重要。</strong></li>\n</ol>\n<h3><span id=\"4-必须了解的两大法则\">4  必须了解的两大法则</span></h3>\n<p><strong>①STAR法则（Situation Task Action Result）：</strong></p>\n<ul>\n<li><strong>Situation：</strong> 事情是在什么情况下发生；</li>\n<li><strong>Task:：</strong> 你是如何明确你的任务的；</li>\n<li><strong>Action：</strong> 针对这样的情况分析，你采用了什么行动方式；</li>\n<li><strong>Result：</strong> 结果怎样，在这样的情况下你学习到了什么。</li>\n</ul>\n<p>简而言之，STAR法则，就是一种讲述自己故事的方式，或者说，是一个清晰、条理的作文模板。不管是什么，合理熟练运用此法则，可以轻松的对面试官描述事物的逻辑方式，表现出自己分析阐述问题的清晰性、条理性和逻辑性。</p>\n<p>下面这段内容摘自百度百科，我觉得写的非常不错：</p>\n<blockquote>\n<p>STAR法则，500强面试题回答时的技巧法则，备受面试者成功者和500强HR的推崇。<br>\n由于这个法则被广泛应用于面试问题的回答，尽管我们还在写简历阶段，但是，写简历时能把面试的问题就想好，会使自己更加主动和自信，做到简历，面试关联性，逻辑性强，不至于在一个月后去面试，却把简历里的东西都忘掉了（更何况有些朋友会稍微夸大简历内容）<br>\n在我们写简历时，每个人都要写上自己的工作经历，活动经历，想必每一个同学，都会起码花上半天甚至更长的时间去搜寻脑海里所有有关的经历，争取找出最好的东西写在简历上。<br>\n但是此时，我们要注意了，简历上的任何一个信息点都有可能成为日后面试时的重点提问对象，所以说，不能只管写上让自己感觉最牛的经历就完事了，要想到今后，在面试中，你所写的经历万一被面试官问到，你真的能回答得流利，顺畅，且能通过这段经历，证明自己正是适合这个职位的人吗？</p>\n</blockquote>\n<p><strong>②FAB 法则（Feature Advantage Benefit）：</strong></p>\n<ul>\n<li><strong>Feature：</strong> 是什么；</li>\n<li><strong>Advantage：</strong> 比别人好在哪些地方；</li>\n<li><strong>Benefit：</strong> 如果雇佣你，招聘方会得到什么好处。</li>\n</ul>\n<p>简单来说，这个法则主要是让你的面试官知道你的优势、招了你之后对公司有什么帮助。</p>\n<h3><span id=\"5-项目经历怎么写\">5 项目经历怎么写？</span></h3>\n<p>简历上有一两个项目经历很正常，但是真正能把项目经历很好的展示给面试官的非常少。对于项目经历大家可以考虑从如下几点来写：</p>\n<ol>\n<li>对项目整体设计的一个感受</li>\n<li>在这个项目中你负责了什么、做了什么、担任了什么角色</li>\n<li>从这个项目中你学会了那些东西，使用到了那些技术，学会了那些新技术的使用</li>\n<li>另外项目描述中，最好可以体现自己的综合素质，比如你是如何协调项目组成员协同开发的或者在遇到某一个棘手的问题的时候你是如何解决的又或者说你在这个项目用了什么技术实现了什么功能比如:用redis做缓存提高访问速度和并发量、使用消息队列削峰和降流等等。</li>\n</ol>\n<h3><span id=\"6-专业技能该怎么写\">6 专业技能该怎么写？</span></h3>\n<p>先问一下你自己会什么，然后看看你意向的公司需要什么。一般HR可能并不太懂技术，所以他在筛选简历的时候可能就盯着你专业技能的关键词来看。对于公司有要求而你不会的技能，你可以花几天时间学习一下，然后在简历上可以写上自己了解这个技能。比如你可以这样写(下面这部分内容摘自我的简历，大家可以根据自己的情况做一些修改和完善)：</p>\n<ul>\n<li>计算机网络、数据结构、算法、操作系统等课内基础知识：掌握</li>\n<li>Java 基础知识：掌握</li>\n<li>JVM 虚拟机（Java内存区域、虚拟机垃圾算法、虚拟垃圾收集器、JVM内存管理）：掌握</li>\n<li>高并发、高可用、高性能系统开发：掌握</li>\n<li>Struts2、Spring、Hibernate、Ajax、Mybatis、JQuery ：掌握</li>\n<li>SSH 整合、SSM 整合、 SOA 架构：掌握</li>\n<li>Dubbo： 掌握</li>\n<li>Zookeeper: 掌握</li>\n<li>常见消息队列: 掌握</li>\n<li>Linux：掌握</li>\n<li>MySQL常见优化手段：掌握</li>\n<li>Spring Boot +Spring Cloud +Docker:了解</li>\n<li>Hadoop 生态相关技术中的 HDFS、Storm、MapReduce、Hive、Hbase ：了解</li>\n<li>Python 基础、一些常见第三方库比如OpenCV、wxpy、wordcloud、matplotlib：熟悉</li>\n</ul>\n<h3><span id=\"7-开源程序员markdown格式简历模板分享\">7 开源程序员Markdown格式简历模板分享</span></h3>\n<p>分享一个Github上开源的程序员简历模板。包括PHP程序员简历模板、iOS程序员简历模板、Android程序员简历模板、Web前端程序员简历模板、Java程序员简历模板、C/C++程序员简历模板、NodeJS程序员简历模板、架构师简历模板以及通用程序员简历模板 。<br>\nGithub地址：<a href=\"https://github.com/geekcompany/ResumeSample\" target=\"_blank\" rel=\"noopener\">https://github.com/geekcompany/ResumeSample</a></p>\n<p>我的下面这篇文章讲了如何写一份Markdown格式的简历，另外，文中还提到了一种实现 Markdown 格式到PDF、HTML、JPEG这几种格式的转换方法。</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&amp;mid=2247484347&amp;idx=1&amp;sn=a986ea7e199871999a5257bd3ed78be1&amp;chksm=fd9855dacaefdccc2c5d5f8f79c4aa1b608ad5b42936bccaefb99a850a2e6e8e2e910e1b3153&amp;token=719595858&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">手把手教你用Markdown写一份高质量的简历</a></p>\n<h3><span id=\"8-其他的一些小tips\">8 其他的一些小tips</span></h3>\n<ol>\n<li>尽量避免主观表述，少一点语义模糊的形容词，尽量要简洁明了，逻辑结构清晰。</li>\n<li>注意排版（不需要花花绿绿的），尽量使用Markdown语法。</li>\n<li>如果自己有博客或者个人技术栈点的话，写上去会为你加分很多。</li>\n<li>如果自己的Github比较活跃的话，写上去也会为你加分很多。</li>\n<li>注意简历真实性，一定不要写自己不会的东西，或者带有欺骗性的内容</li>\n<li>项目经历建议以时间倒序排序，另外项目经历不在于多，而在于有亮点。</li>\n<li>如果内容过多的话，不需要非把内容压缩到一页，保持排版干净整洁就可以了。</li>\n<li>简历最后最好能加上：“感谢您花时间阅读我的简历，期待能有机会和您共事。”这句话，显的你会很有礼貌。</li>\n</ol>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2018/12/24/技术博客的重要性/\">技术博客的重要性</a></li><li><a href=\"chunlife.top/2018/08/26/组件与语言特性的学习/\">组件与语言特性的学习</a></li><li><a href=\"chunlife.top/2017/04/13/我的简历/\">我的简历</a></li><li><a href=\"https://abelsu7.top/2019/05/29/python-quick-reference/\">Python 速查</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"学习","slug":"学习","permalink":"chunlife.top/tags/学习/"},{"name":"简历","slug":"简历","permalink":"chunlife.top/tags/简历/"},{"name":"转载","slug":"转载","permalink":"chunlife.top/tags/转载/"}]},{"title":"第一期","date":"2018-12-14T06:50:06.000Z","path":"2018/12/14/第一期/","content":"<p><img src=\"%E4%B9%94%E5%B8%83%E6%96%AF.png\" alt=\"乔布斯\"></p>\n<p>什么事都需要一个开头，也许是兴趣使然，也许是纯属特闲，一切都是这么自然而然，很多时候我们都会迷茫，不清楚未来的方向，谁能搞得清楚自己真的会往哪边走呢，我们需要的也仅是一处避风之所，随心而动，望万事和谐。</p>\n<p>1、<a href=\"http://tech.163.com/18/1214/08/E2VL8R5F00097U7S.html\" target=\"_blank\" rel=\"noopener\">品牌争议性太大 三星取消与意大利Supreme合作</a></p>\n<p>在本周举办的三星A8s发布会上，三星宣布与Supreme进行品牌联合，但仅在发布会举办期间，微博各路大V已开始质疑Supreme发言人发表的相关言论，以及穿着的衣服款式并不属于美国潮牌Supreme。</p>\n<p>发布会后，三星高管在微博与网友进行强行解释（已删除），表示Supreme为意大利Supreme。</p>\n<p>后，美国Supreme不承认与三星进行合作（意大利Supreme与美国Supreme有着宿怨，一般意大利Supreme可以被理解为美国Supreme的山寨牌）。</p>\n<p>2、<a href=\"https://www.bbc.com/zhongwen/simp/business-46517846\" target=\"_blank\" rel=\"noopener\">中国法院给予苹果临时禁令，高通称或将申请强制执行</a></p>\n<p>高通与苹果在全球展开激烈的专利战，相爱相杀。</p>\n<p>此次在中国涉及到的专利纠纷主要涉及：</p>\n<ul>\n<li>一项涉及调整照片的大小和外观；</li>\n<li>一项涉及应用程序在触摸屏上操作时的管理方式；</li>\n</ul>\n<p>已禁止包括iPhone X之前的几乎所有还在生产的iPhone型号。</p>\n<p>对此苹果公司表示尊重法院裁定，但其未接受法院的审判结果，消费者依然可以正常购买iPhone。</p>\n<p>此为专利纠纷案，福州中院表示只接受一次诉讼。而高通在之后的动作中表示会继续诉讼下去，争取禁止掉iPhone最新发布的手机。</p>\n<p>有趣的是，某科技企业副总裁发文（未找到截图出处，真假未考证）：</p>\n<p><img src=\"%E6%9D%8E%E6%A5%A0%E8%AF%84%E8%AE%BA.jpg\" alt=\"李楠评论\"></p>\n<p>4、<a href=\"http://www.xinhuanet.com/tech/2018-12/13/c_1123844656.htm\" target=\"_blank\" rel=\"noopener\">三星手机天津工厂月底停产</a></p>\n<p>今年4月份，三星深圳电子通信公司宣布关闭，三百多名中国员工被遣散，公司内部的韩国高管也被派遣回国，随后就有消息传出，三星天津通信技术有限公司也面临关闭。</p>\n<p>三星天津工厂现有员工约2600名，每年出产智能手机约3600万部左右。</p>\n<p>5、<a href=\"https://cn.engadget.com/2018/12/11/vivo-nex-dual-screen-edition/\" target=\"_blank\" rel=\"noopener\">vivo Nex双屏版发布</a></p>\n<p>高通骁龙 845，提供最高 10GB 的 RAM。</p>\n<p>双屏版作为解放前置摄像头的另一个尝试，真正的使用效率需要经历市场考验，虽然与之前魅族pro7有着不一样的设计语言，但确实与主流相差甚远，作为又一部试水产品，vivo今年的一系列操作确实是大大的拉高了品牌的附加价值。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/03/29/重新见面，请多指教/\">重新见面，请多指教</a></li><li><a href=\"chunlife.top/2019/12/31/科学需要谨慎，知识需要校校验/\">科学需要谨慎，知识需要校验</a></li><li><a href=\"chunlife.top/2019/03/19/搜集赏/\">搜集赏</a></li><li><a href=\"http://yoursite.com/2020/03/28/swing/Shell-Script%E6%9D%A5%E6%96%B0%E5%8D%9A%E5%AE%A2/\">Shell Script更新博客</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"chunlife.top/tags/随笔/"},{"name":"手机","slug":"手机","permalink":"chunlife.top/tags/手机/"}]},{"title":"网关插件编写","date":"2018-12-13T14:56:08.000Z","path":"2018/12/13/网关插件编写/","content":"<h2><span id=\"概述\">概述</span></h2>\n<p>在使用网关的过程中，可能需要对已有功能进行一些扩展，这个时候就需要对网关进行一些改造工作，在gateway中，除了一些核心模块外，相关的功能模块都采用插件的形式进行实现，例如：黑白名单，熔断器，JWT，限流等，所以，在功能上的扩展上是可以按照插件的形式进行添加的，这也是gateway作者推荐的操作。</p>\n<a id=\"more\"></a>\n<h2><span id=\"接口interface\">接口interface</span></h2>\n<p>插件的实现依赖于gateway给出的两个接口：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Context filter context</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Context <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tStartAt() time.Time</span><br><span class=\"line\">\tEndAt() time.Time</span><br><span class=\"line\"></span><br><span class=\"line\">\tOriginRequest() *fasthttp.RequestCtx</span><br><span class=\"line\">\tForwardRequest() *fasthttp.Request</span><br><span class=\"line\">\tResponse() *fasthttp.Response</span><br><span class=\"line\"></span><br><span class=\"line\">\tAPI() *metapb.API</span><br><span class=\"line\">\tDispatchNode() *metapb.DispatchNode</span><br><span class=\"line\">\tServer() *metapb.Server</span><br><span class=\"line\">\tAnalysis() *util.Analysis</span><br><span class=\"line\"></span><br><span class=\"line\">\tSetAttr(key <span class=\"keyword\">string</span>, value <span class=\"keyword\">interface</span>&#123;&#125;)</span><br><span class=\"line\">\tGetAttr(key <span class=\"keyword\">string</span>) <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BaseFilter base filter support default implemention</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> BaseFilter <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Init init filter</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f BaseFilter)</span> <span class=\"title\">Init</span><span class=\"params\">(cfg <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Pre execute before proxy</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f BaseFilter)</span> <span class=\"title\">Pre</span><span class=\"params\">(c Context)</span> <span class=\"params\">(statusCode <span class=\"keyword\">int</span>, err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fasthttp.StatusOK, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Post execute after proxy</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f BaseFilter)</span> <span class=\"title\">Post</span><span class=\"params\">(c Context)</span> <span class=\"params\">(statusCode <span class=\"keyword\">int</span>, err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fasthttp.StatusOK, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PostErr execute proxy has errors</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f BaseFilter)</span> <span class=\"title\">PostErr</span><span class=\"params\">(c Context)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这些相关的定义都在<code>github.com/fagongzi/gateway/pkg/filter</code>包中，每一个Filter都需要导入。其中的<code>Context</code>的上下文接口，提供了Filter和Gateway交互的能力；<code>BaseFilter</code>定义了默认行为。</p>\n<p>在实际代码中，<code>Context</code>可以让插件在全局获取到route请求中的数据，例如API绑定到网关时，用户填写的相关配置——<code>API()</code>，HTTP请求的request——<code>ForwardRequest()</code>，后台接口返回的结果——<code>Response()</code>。</p>\n<p><code>BaseFilter</code>作为插件的响应动作，并不强制实现所有函数，这里只有两个比较重要的函数需要被关注到，<code>Pre</code>和<code>Post</code>，<code>Pre</code>作为网关在转发请求到后台时的前置性操作，例如黑名单功能插件就需要在<code>Pre</code>函数中判断URI是否匹配预先设置的正则表达式。例如接下来需要实现的一个webhook功能，可能就需要在<code>post</code>中进行一些操作，根据接口返回的一些信息来决定是否访问一些接口。</p>\n<h2><span id=\"request处理流程\">Request处理流程</span></h2>\n<p>request -&gt; filter预处理 -&gt; 转发请求 -&gt; filter后置处理 -&gt; 响应客户端</p>\n<p>整个逻辑处理符合以下规则:</p>\n<ul>\n<li>filter预处理返回错误，流程立即终止，并且使用filter返回的状态码响应客户端</li>\n<li>filter后置处理返回错误，使用filter返回的状态码响应客户端</li>\n<li>转发请求，后端返回的状态码<code>&gt;=500</code>，调用filter的错误处理接口</li>\n</ul>\n<p>这里直接截取gateway官方的帮助文档中的内容，代码所体现的内容正如流程所说的。</p>\n<p><code>main</code> ——&gt;</p>\n<p>proxy.go</p>\n<p><code>Start()</code>——&gt; <code>ServeFastHTTP</code> ——&gt; <code>p.doProxy</code>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// pre filters  轮询调用所有注册过的插件的pre函数</span></span><br><span class=\"line\">filterName, code, err := p.doPreFilters(c)</span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// post filters 轮询调用所有注册过的插件的post函数</span></span><br><span class=\"line\">filterName, code, err = p.doPostFilters(c)</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<h2><span id=\"编写插件\">编写插件</span></h2>\n<p>预先设定一个简单的需求，例如，在一些特定的接口访问成功后，访问一个特定的地址，传输一些信息给这个地址。</p>\n<p>插件操作简单，不需要一些附加的逻辑，所有编写这个插件，只需要完成<code>BaseFilter</code>的相关函数即可，这里先完成一个大概的框架。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// WebHookFilter is an event handler that triggers web hooks</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> WebHookFilter <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tfilter.BaseFilter</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Name name</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(w *WebHookFilter)</span> <span class=\"title\">Name</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> FilterWebHook</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newWebHookFilter</span><span class=\"params\">()</span> <span class=\"title\">filter</span>.<span class=\"title\">Filter</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;WebHookFilter&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Post execute after proxy</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(w *WebHookFilter)</span> <span class=\"title\">Post</span><span class=\"params\">(c filter.Context)</span> <span class=\"params\">(statusCode <span class=\"keyword\">int</span>, err error)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(c.API().GetTags()) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> fasthttp.StatusBadRequest, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> isNeedWebHook <span class=\"keyword\">bool</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, tags := <span class=\"keyword\">range</span> c.API().GetTags() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> tags.Name == <span class=\"string\">\"webhook\"</span> &amp;&amp; tags.Value == <span class=\"string\">\"true\"</span> &#123;</span><br><span class=\"line\">\t\t\tisNeedWebHook = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// web url传递一个统一的地址？</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> isNeedWebHook &amp;&amp; c.Response().StatusCode() == http.StatusOK &#123;</span><br><span class=\"line\">\t\tlog.Info(Send(c.Response().Body()))  <span class=\"comment\">// 处理逻辑</span></span><br><span class=\"line\">        <span class=\"comment\">// go Send(c.Response().Body())</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlog.Info(<span class=\"string\">\"webhook post exec!\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fasthttp.StatusOK, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到在<code>post</code>函数中，出现<code>c.API().GetTags()</code>，这里的tag是API设置时的一个可选填项，用于个性化标记一个API，用在这里是因为不想对已有的gateway参数进行增添，直接使用一个gateway的可选参数来定制自己的参数，算是一种偷懒少改代码的方式。</p>\n<p><code>Post</code>这里是一般压力的话，使用协程进行异步操作；若是访问比较频繁，就使用10个channel限制一下速度，慢慢发送数据；当然更顺畅的做法肯定是引入消息队列（MQ），不过当整个系统没这么复杂时，多上一个组件，可能也会造成一定量的维护负担（视业务来定）。</p>\n<p>若使用代码来设置API（一般使用前端UI较为方便）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sb := c.NewAPIBuilder()</span><br><span class=\"line\"><span class=\"comment\">// 必选项</span></span><br><span class=\"line\">sb.Name(<span class=\"string\">\"用户API\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 设置URL规则，匹配所有开头为/api/user的请求</span></span><br><span class=\"line\">sb.MatchURLPattern(<span class=\"string\">\"/hello/(.+)\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 匹配GET请求</span></span><br><span class=\"line\">sb.MatchMethod(<span class=\"string\">\"GET\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 添加tag</span></span><br><span class=\"line\">sb.AddTag(<span class=\"string\">\"webhook\"</span>, <span class=\"string\">\"true\"</span>)</span><br></pre></td></tr></table></figure>\n<p>到这里代码已完成一个大概的框架，可以看到编写逻辑非常简单，但若要插件插入gateway运行，还需要将插件信息注册gateway中，接口中的<code>Name()</code>需要和这里的name信息能够匹配。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--- &quot;gateway\\pkg\\proxy\\factory.go&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// Filter WebHook jwt filter</span><br><span class=\"line\">FilterWebHook = &quot;WEBHOOK&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func (p *Proxy) newFilter(filterSpec *FilterSpec) (filter.Filter, error) &#123;</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tswitch input &#123;</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\tcase FilterWebHook:</span><br><span class=\"line\">\t\treturn newWebHookFilter(), nil</span><br><span class=\"line\">\tdefault:</span><br><span class=\"line\">\t\treturn nil, ErrUnknownFilter</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">--- &quot;gateway\\cmd\\proxy\\proxy.go&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func init() &#123;</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\tdefaultFilters.Set(proxy.FilterWebHook)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>插件程序编写到这里，其实已经是可以正常运行了，但还缺了一个必要的环节，那就是可配置的参数信息，用于多机环境下进行工作，参数借助etcd进行分布式设置。</p>\n<h2><span id=\"获取etcd配置\">获取etcd配置</span></h2>\n<p><code>initDispatcher() </code>——&gt; <code>GetStoreFrom</code> ——&gt; <code>fn, ok := supportSchema[schema]</code> ——&gt; <code>getEtcdStoreFrom</code> ——&gt; <code>NewEtcdStore</code> ——&gt; <code>store.init()</code>，到这里就配置好各个插件取etcd配置的函数了,<strong>需要动手添加函数</strong>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *EtcdStore)</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\te.watchMethodMapping[EventSrcBind] = e.doWatchWithBind</span><br><span class=\"line\">\te.watchMethodMapping[EventSrcServer] = e.doWatchWithServer</span><br><span class=\"line\">\te.watchMethodMapping[EventSrcCluster] = e.doWatchWithCluster</span><br><span class=\"line\">\te.watchMethodMapping[EventSrcAPI] = e.doWatchWithAPI</span><br><span class=\"line\">\te.watchMethodMapping[EventSrcRouting] = e.doWatchWithRouting</span><br><span class=\"line\">\te.watchMethodMapping[EventSrcProxy] = e.doWatchWithProxy</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>函数是根据配置路径的前缀来匹配插件的配置的，而这些前缀同样也是需要提前写好的，<strong>需要动手添加函数</strong>， <code>NewEtcdStore</code> 函数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store := &amp;EtcdStore&#123;</span><br><span class=\"line\">    prefix:             prefix,</span><br><span class=\"line\">    clustersDir:        fmt.Sprintf(<span class=\"string\">\"%s/clusters\"</span>, prefix),</span><br><span class=\"line\">    serversDir:         fmt.Sprintf(<span class=\"string\">\"%s/servers\"</span>, prefix),</span><br><span class=\"line\">    bindsDir:           fmt.Sprintf(<span class=\"string\">\"%s/binds\"</span>, prefix),</span><br><span class=\"line\">    apisDir:            fmt.Sprintf(<span class=\"string\">\"%s/apis\"</span>, prefix),</span><br><span class=\"line\">    proxiesDir:         fmt.Sprintf(<span class=\"string\">\"%s/proxies\"</span>, prefix),</span><br><span class=\"line\">    routingsDir:        fmt.Sprintf(<span class=\"string\">\"%s/routings\"</span>, prefix),</span><br><span class=\"line\">    idPath:             fmt.Sprintf(<span class=\"string\">\"%s/id\"</span>, prefix),</span><br><span class=\"line\">    watchMethodMapping: <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[EvtSrc]<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(EvtType, *mvccpb.KeyValue)</span> *<span class=\"title\">Evt</span>),</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">base</span>:               100,</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">end</span>:                100,</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>接下来就是监听etcd的配置信息：</p>\n<p><code>p.dispatcher.load()</code> ——&gt; <code>go r.watch()</code> ——&gt; <code>r.store.Watch(r.watchEventC, r.watchStopC)</code> ——&gt; <code>e.doWatch()</code> ——&gt; <code>e.evtCh &lt;- e.watchMethodMapping[evtSrc](evtType, ev.Kv)</code></p>\n<p>根据etcd出发的事件，判断是哪个插件的配置进行更改或是删除，然后调用在 <code>store.init()</code>中配置的取etcd配置的函数（还未处理），再通过channel发送出去，<strong>需要动手添加一个case处理自定义的插件</strong>。</p>\n<p>在这个流程中的<code>go r.watch()</code>，有着另一条分支路线，<code>go r.readyToReceiveWatchEvent()</code>，<strong>这里也是需要我们添加函数处理的地方，用于根据etcd事件对参数进行实际处理（增删改）</strong>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *dispatcher)</span> <span class=\"title\">readyToReceiveWatchEvent</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tevt := &lt;-r.watchEventC</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> evt.Src == store.EventSrcCluster &#123;</span><br><span class=\"line\">\t\t\tr.doClusterEvent(evt)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> evt.Src == store.EventSrcServer &#123;</span><br><span class=\"line\">\t\t\tr.doServerEvent(evt)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> evt.Src == store.EventSrcBind &#123;</span><br><span class=\"line\">\t\t\tr.doBindEvent(evt)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> evt.Src == store.EventSrcAPI &#123;</span><br><span class=\"line\">\t\t\tr.doAPIEvent(evt)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> evt.Src == store.EventSrcRouting &#123;</span><br><span class=\"line\">\t\t\tr.doRoutingEvent(evt)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> evt.Src == store.EventSrcProxy &#123;</span><br><span class=\"line\">\t\t\tr.doProxyEvent(evt)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Warnf(<span class=\"string\">\"unknown event &lt;%+v&gt;\"</span>, evt)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，配置参数信息被保存到了结构体<code>dispatcher</code>中，当然若是新增的配置，这里依然是需要在结构体<code>dispatcher</code>中新增一个结构体成员来保存用于自定义插件的配置的。</p>\n<p>那如何使用这些配置呢？</p>\n<p>在context中，插件所使用的函数由proxyContext实现，<code>&quot;gateway\\pkg\\proxy\\filter.go&quot;</code>，这里保存了<code>dispatcher</code>的相关信息，可以由开发者自由拿取数据。</p>\n<p>至此，整个开发阶段全部完成，插件部分逻辑可随着业务更改而进行些许的更改，但整体插件的编写是不会出现太多变动的。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"Gateway","slug":"Gateway","permalink":"chunlife.top/tags/Gateway/"}]},{"title":"文件上传服务器端","date":"2018-12-05T06:17:04.000Z","path":"2018/12/05/文件上传-服务器端/","content":"<h2><span id=\"前言\">前言</span></h2>\n<p>在之前的项目中，有做过文件上传下载操作，当时对这些操作都不是非常熟悉，所以在实现功能上，停留在能正常工作的前提下，在找到更好的方法后，回头来尝试优化之前的解决方法。</p>\n<p>上传操作中，服务器常使用<code>ParseMultipartForm</code>，解析form表单传递的文件数据。</p>\n<a id=\"more\"></a>\n<h2><span id=\"问题\">问题</span></h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// in the body of a http.HandlerFunc</span></span><br><span class=\"line\">err := r.ParseMultipartForm(<span class=\"number\">32</span> &lt;&lt; <span class=\"number\">20</span>) <span class=\"comment\">// 32Mb</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    http.Error(w, err.Error(), http.StatusBadRequest)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用函数<code>ParseMultipartForm</code>是没有问题的，它会解析http的request body。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ParseMultipartForm parses a request body as multipart/form-data.</span></span><br><span class=\"line\"><span class=\"comment\">// The whole request body is parsed and up to a total of maxMemory bytes of</span></span><br><span class=\"line\"><span class=\"comment\">// its file parts are stored in memory, with the remainder stored on</span></span><br><span class=\"line\"><span class=\"comment\">// disk in temporary files.</span></span><br><span class=\"line\"><span class=\"comment\">// ParseMultipartForm calls ParseForm if necessary.</span></span><br><span class=\"line\"><span class=\"comment\">// After one call to ParseMultipartForm, subsequent calls have no effect.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ParseMultipartForm将请求主体解析为multipart/form-data。</span></span><br><span class=\"line\"><span class=\"comment\">// 解析整个请求体，并将其文件的总maxMemory字节存储在内存中，其余部分存储在</span></span><br><span class=\"line\"><span class=\"comment\">// 临时文件中的磁盘。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *Request)</span> <span class=\"title\">ParseMultipartForm</span><span class=\"params\">(maxMemory <span class=\"keyword\">int64</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据注释，可以得知，不管文件是否过多，或者文件是否为serve端需要，这些文件都会被缓存，这里体现出这个函数对上传的操作性不是太强，若想要增强对文件上传一些限制操作，也就是在读取文件缓存前的一些限制。</p>\n<ul>\n<li>文件类型验证</li>\n<li>文件大小验证</li>\n<li>白名单“字段”</li>\n<li>按顺序解析字段，如果没有则终止</li>\n<li>如果任何验证失败，则提前终止</li>\n<li>没有预先分配</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// function body of a http.HandlerFunc</span></span><br><span class=\"line\">r.Body = http.MaxBytesReader(w, r.Body, <span class=\"number\">32</span>&lt;&lt;<span class=\"number\">20</span>+<span class=\"number\">1024</span>)</span><br><span class=\"line\">reader, err := r.MultipartReader()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    http.Error(w, err.Error(), http.StatusBadRequest)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// parse text field</span></span><br><span class=\"line\">text := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">512</span>)</span><br><span class=\"line\">p, err := reader.NextPart()</span><br><span class=\"line\"><span class=\"comment\">// one more field to parse, EOF is considered as failure here</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> p.FormName() != <span class=\"string\">\"text_field\"</span> &#123;</span><br><span class=\"line\">    http.Error(w, <span class=\"string\">\"text_field is expected\"</span>, http.StatusBadRequest)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_, err = p.Read(text)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &amp;&amp; err != io.EOF &#123;</span><br><span class=\"line\">    http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// parse file field</span></span><br><span class=\"line\">p, err = reader.NextPart()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &amp;&amp; err != io.EOF &#123;</span><br><span class=\"line\">    http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> p.FormName() != <span class=\"string\">\"file_field\"</span> &#123;</span><br><span class=\"line\">    http.Error(w, <span class=\"string\">\"file_field is expected\"</span>, http.StatusBadRequest)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">buf := bufio.NewReader(p)</span><br><span class=\"line\">sniff, _ := buf.Peek(<span class=\"number\">512</span>)   <span class=\"comment\">// 判断文件类型</span></span><br><span class=\"line\">contentType := http.DetectContentType(sniff)</span><br><span class=\"line\"><span class=\"keyword\">if</span> contentType != <span class=\"string\">\"application/zip\"</span> &#123;</span><br><span class=\"line\">    http.Error(w, <span class=\"string\">\"file type not allowed\"</span>, http.StatusBadRequest)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f, err := ioutil.TempFile(<span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\"><span class=\"keyword\">var</span> maxSize <span class=\"keyword\">int64</span> = <span class=\"number\">32</span> &lt;&lt; <span class=\"number\">20</span></span><br><span class=\"line\">lmt := io.MultiReader(buf, io.LimitReader(p, maxSize - <span class=\"number\">511</span>))</span><br><span class=\"line\">written, err := io.Copy(f, lmt)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &amp;&amp; err != io.EOF &#123;</span><br><span class=\"line\">    http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> written &gt; maxSize &#123;</span><br><span class=\"line\">    os.Remove(f.Name())</span><br><span class=\"line\">    http.Error(w, <span class=\"string\">\"file size over limit\"</span>, http.StatusBadRequest)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// schedule for other stuffs (s3, scanning, etc.)</span></span><br></pre></td></tr></table></figure>\n<p>内容参考自：<code>https://medium.com/@owlwalks/dont-parse-everything-from-client-multipart-post-golang-9280d23cd4ad</code>。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"http","slug":"http","permalink":"chunlife.top/tags/http/"},{"name":"file","slug":"file","permalink":"chunlife.top/tags/file/"}]},{"title":"初次使用MongoDB","date":"2018-11-24T08:18:59.000Z","path":"2018/11/24/初次使用MongoDB/","content":"<h2><span id=\"简单了解\">简单了解</span></h2>\n<p>MongoDB在Go中是有官方的API接口库的，不过在官方开发库之前，一直是存在个人开发版（mgo），后来交由社区进行维护了，貌似此人也是与MongoDB官方进行合作进行官方库的开发。</p>\n<a id=\"more\"></a>\n<p>官方库大概是2018年出了第一版正式版，现在已经是正在服役阶段了。而不管是社区版还是官方版，且都是在个人版的基础上进行开发，这里都需要感谢<a href=\"https://github.com/niemeyer\" target=\"_blank\" rel=\"noopener\">niemeyer</a>。</p>\n<p>社区版：<a href=\"https://github.com/globalsign/mgo\" target=\"_blank\" rel=\"noopener\">https://github.com/globalsign/mgo</a></p>\n<p>官方版：<a href=\"https://github.com/mongodb/mongo-go-driver\" target=\"_blank\" rel=\"noopener\">https://github.com/mongodb/mongo-go-driver</a></p>\n<p>网上相对较多的资料还是以mgo的为主，比较mongo-go-driver相对较晚，基于同一主干，且mgo也并没有处于废弃状态，所以在使用上依然还是倾向于使用mgo，当然，在官方版更新了好几个版本后，后续会考虑将版本给更换过来。</p>\n<h2><span id=\"标识2019-10\">标识（2019-10）</span></h2>\n<p>MongoDB的Go<a href=\"https://github.com/mongodb/mongo-go-driver\" target=\"_blank\" rel=\"noopener\">官方库</a>已经是趋于稳定，发布正式版本了，所以作为开发者来说，以后选择官方库应该是最佳选择了，毕竟这个库会一直保持维护的。</p>\n<p>但毕竟是一个新的库，网上大部分博客都是关于<code>mgo</code>这个社区维护版本的库使用方式，这有个库也包含了一些例子可以帮助学习。</p>\n<p><a href=\"https://github.com/simagix/mongo-go-examples\" target=\"_blank\" rel=\"noopener\">mongo-go-examples</a>。</p>\n<h2><span id=\"基础操作\">基础操作</span></h2>\n<h3><span id=\"连接serve\">连接serve</span></h3>\n<p>mgo：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解析MongoDB参数</span></span><br><span class=\"line\">mongo, err := mgo.ParseURL(<span class=\"string\">\"mongodb://localhost:27017/articles_demo_dev\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 1、连接MongoDB</span></span><br><span class=\"line\">s, err := mgo.Dial(<span class=\"string\">\"mongodb://localhost:27017/articles_demo_dev\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"Can't connect to mongo, go error %v\\n\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err.Error())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"comment\">// 2、选择数据库</span></span><br><span class=\"line\">coll := session.DB(mongo.Database)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3、选择表（集合）</span></span><br><span class=\"line\">coll.C(g.DbModuleBindFile)</span><br></pre></td></tr></table></figure>\n<p>mongo-go-driver：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1, 建立连接</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> client, err = mongo.Connect(context.TODO(), <span class=\"string\">\"mongodb://localhost:27017\"</span>, clientopt.ConnectTimeout(<span class=\"number\">5</span>*time.Second)); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2, 选择数据库my_db</span></span><br><span class=\"line\">database = client.Database(<span class=\"string\">\"my_db\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3, 选择表my_collection</span></span><br><span class=\"line\">collection = database.Collection(<span class=\"string\">\"my_collection\"</span>)</span><br></pre></td></tr></table></figure>\n<p>插入数据：</p>\n<p>MongoDB的ID是推特很早的时候开源的，tweet的ID。</p>\n<p>snowflake: 毫秒/微秒的当前时间 + 机器的ID + 当前毫秒/微秒内的自增ID(每当毫秒变化了, 会重置成0，继续自增）。</p>\n<p>mgo：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">idTest := bson.NewObjectId()</span><br><span class=\"line\">err = r.C.Insert(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"ID由开发者指定,否则MongoDB自己生成\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"_id\"</span>:  idTest,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插入多条数据</span></span><br><span class=\"line\">r.C.Insert(&amp;Person&#123;<span class=\"string\">\"Heln\"</span>, <span class=\"string\">\"31\"</span>&#125;,</span><br><span class=\"line\">           &amp;Person&#123;<span class=\"string\">\"Ana\"</span>, <span class=\"string\">\"32\"</span>&#125;,</span><br><span class=\"line\">           &amp;Person&#123;<span class=\"string\">\"A3a\"</span>, <span class=\"string\">\"27\"</span>&#125;,</span><br><span class=\"line\">           &amp;Person&#123;<span class=\"string\">\"Awa\"</span>, <span class=\"string\">\"24\"</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p>mongo-go-driver：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> result, err = collection.InsertOne(context.TODO(), <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"ID由开发者指定,否则MongoDB自己生成\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"one\"</span>:  <span class=\"string\">\"one\"</span>,</span><br><span class=\"line\">&#125;); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// _id: 默认生成一个全局唯一ID, ObjectID：12字节的二进制</span></span><br><span class=\"line\">docId = result.InsertedID.(objectid.ObjectID)</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"自增ID:\"</span>, docId.Hex())</span><br></pre></td></tr></table></figure>\n<h3><span id=\"查询\">查询</span></h3>\n<p>mgo：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err = r.C.Find(bson.M&#123;<span class=\"string\">\"index_no\"</span>: <span class=\"string\">\"123\"</span>&#125;).</span><br><span class=\"line\">\tSelect(bson.M&#123;<span class=\"string\">\"_id\"</span>: <span class=\"number\">0</span>, <span class=\"string\">\"test\"</span>: <span class=\"number\">1</span>&#125;).One(&amp;tes)</span><br></pre></td></tr></table></figure>\n<p>**注意：**查询时，select中除了id外，其他要么是1，要么是0，否则将报错，select是选择返回的参数。</p>\n<p>mongo-go-driver：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 4, 按照jobName字段过滤, 想找出jobName=job10, 找出5条</span></span><br><span class=\"line\">cond = &amp;FindByJobName&#123;JobName: <span class=\"string\">\"job10\"</span>&#125; <span class=\"comment\">// &#123;\"jobName\": \"job10\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5, 查询（过滤 +翻页参数）</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> cursor, err = collection.Find(context.TODO(), cond, findopt.Skip(<span class=\"number\">0</span>), findopt.Limit(<span class=\"number\">2</span>)); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tfmt.Println(err)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 延迟释放游标</span></span><br><span class=\"line\"><span class=\"keyword\">defer</span> cursor.Close(context.TODO())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 6, 遍历结果集</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> cursor.Next(context.TODO()) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个日志对象</span></span><br><span class=\"line\">\trecord = &amp;LogRecord&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 反序列化bson到对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err = cursor.Decode(record); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 把日志行打印出来</span></span><br><span class=\"line\">\tfmt.Println(*record)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"删除\">删除</span></h3>\n<p>mgo：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.C.Remove(bson.M&#123;<span class=\"string\">\"_id\"</span>: bson.ObjectIdHex(id)&#125;)  <span class=\"comment\">// 多条一条记录</span></span><br><span class=\"line\">r.C.RemoveAll(bson.M&#123;<span class=\"string\">\"_id\"</span>: bson.ObjectIdHex(id)&#125;) <span class=\"comment\">// 多条记录</span></span><br></pre></td></tr></table></figure>\n<p>mongo-go-driver：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 4, 要删除开始时间早于当前时间的所有日志($lt是less than)</span></span><br><span class=\"line\"><span class=\"comment\">//  delete(&#123;\"timePoint.startTime\": &#123;\"$lt\": 当前时间&#125;&#125;)</span></span><br><span class=\"line\">delCond = &amp;DeleteCond&#123;beforeCond: TimeBeforeCond&#123;Before: time.Now().Unix()&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行删除</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> delResult, err = collection.DeleteMany(context.TODO(), delCond); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tfmt.Println(err)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"删除的行数:\"</span>, delResult.DeletedCount)</span><br></pre></td></tr></table></figure>\n<h2><span id=\"其他操作\">其他操作</span></h2>\n<h3><span id=\"计算数组大小\">计算数组大小</span></h3>\n<p>MongoDB获取内嵌数组的长度：</p>\n<p><a href=\"https://stackoverflow.com/questions/21387969/mongodb-count-the-number-of-items-in-an-array\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/21387969/mongodb-count-the-number-of-items-in-an-array</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.mycollection.insert(&#123;&apos;foo&apos;:[1,2,3,4]&#125;)</span><br><span class=\"line\">&gt; db.mycollection.insert(&#123;&apos;foo&apos;:[5,6,7]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; db.mycollection.aggregate(&#123;$project: &#123; count: &#123; $size:&quot;$foo&quot; &#125;&#125;&#125;)</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5314b5c360477752b449eedf&quot;), &quot;count&quot; : 4 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5314b5c860477752b449eee0&quot;), &quot;count&quot; : 3 &#125;</span><br></pre></td></tr></table></figure>\n<p>使用Go实现，使用mgo，需要用到聚合操作：</p>\n<p><img src=\"1542714314472.png\" alt=\"数据库数据\"></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mgo</span></span><br><span class=\"line\">pipe := r.C.Pipe([]bson.M&#123;</span><br><span class=\"line\">    &#123;<span class=\"string\">\"$match\"</span>: bson.M&#123;<span class=\"string\">\"_id\"</span>: idTest&#125;&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"$project\"</span>: bson.M&#123;<span class=\"string\">\"count\"</span>: bson.M&#123;<span class=\"string\">\"$size\"</span>:<span class=\"string\">\"$fileid_bind_module\"</span>&#125;&#125;&#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">resp := bson.M&#123;&#125;</span><br><span class=\"line\">err = pipe.One(&amp;resp)</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"error is :\"</span>, err, resp)</span><br><span class=\"line\"><span class=\"comment\">// result:</span></span><br><span class=\"line\"><span class=\"comment\">// map[count:3 _id:ObjectIdHex(\"5bf3f2b290054419149526ef\")]</span></span><br></pre></td></tr></table></figure>\n<p>另外一种方法：<a href=\"http://cw.hubwiz.com/card/c/543b2f3cf86387171814c026/1/1/9/\" target=\"_blank\" rel=\"noopener\">$size数组元素个数</a>。</p>\n<h4><span id=\"addtoset\">$addToSet</span></h4>\n<p>设置一个字段<code>size</code>来保存数组的大小，不过这种操作无法与<code>$addToSet</code>一起进行使用。因为<code>$addToSet</code>不会在数组中插入重复的数据，而inc操作依然会继续加<code>1</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err := r.C.Update(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"_id\"</span>: bson.ObjectIdHex(<span class=\"string\">\"5bebe0cf7f45aa3270c9e532\"</span>),</span><br><span class=\"line\">&#125;, bson.M&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"$addToSet\"</span>: bson.M&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"test\"</span>: <span class=\"string\">\"1234567890\"</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4><span id=\"加一个size字段\">加一个size字段</span></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err = db.C(<span class=\"string\">\"xxxxxx\"</span>).Update(bson.M&#123;<span class=\"string\">\"_id\"</span>: tmpFile.Id&#125;,</span><br><span class=\"line\">\tbson.M&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"$push\"</span>: bson.M&#123;<span class=\"string\">\"file_id_list\"</span>: p.FileIdList[<span class=\"number\">0</span>]&#125;,</span><br><span class=\"line\">\t<span class=\"string\">\"$inc\"</span>:  bson.M&#123;<span class=\"string\">\"list_size\"</span>: <span class=\"number\">1</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<h3><span id=\"mongodb数组操作\">MongoDB数组操作</span></h3>\n<p>对数组的增删查改，可以学习：<a href=\"https://www.cnblogs.com/ljhdo/p/5428037.html\" target=\"_blank\" rel=\"noopener\">MongoDB 数组</a>。</p>\n<h4><span id=\"mgo查找单层数组\">mgo查找单层数组</span></h4>\n<p><img src=\"1542714781584.png\" alt=\"单层数组\"></p>\n<p>代码中需要使用到<code>$elemMatch</code>参数。</p>\n<p><code>[]int{1, 2, 3}</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err = r.C.Find(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;</span><br><span class=\"line\">        <span class=\"string\">\"test\"</span>: bson.M&#123;<span class=\"string\">\"$elemMatch\"</span>: bson.M&#123;<span class=\"string\">\"$eq\"</span>: ids&#125;,</span><br><span class=\"line\">\t&#125;&#125;).One(&amp;bind)</span><br></pre></td></tr></table></figure>\n<h4><span id=\"mgo查找多层数组\">mgo查找多层数组</span></h4>\n<p><code>{&quot;_id&quot;:&quot;xxxxxx&quot;, &quot;testArr&quot;: [{&quot;x&quot;: &quot;1&quot;, &quot;test1&quot;: 1}, {&quot;x&quot;: &quot;3&quot;, &quot;test1&quot;: 2}]}</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> testData <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">err = r.C.Find(bson.M&#123;</span><br><span class=\"line\">    \t<span class=\"string\">\"_id\"</span>: idTest123,</span><br><span class=\"line\">    \t<span class=\"string\">\"testArr\"</span>: bson.M&#123;<span class=\"string\">\"$elemMatch\"</span>: bson.M&#123;<span class=\"string\">\"test1\"</span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t&#125;&#125;).One(&amp;testData)</span><br></pre></td></tr></table></figure>\n<h4><span id=\"mgo删除数组元素\">mgo删除数组元素</span></h4>\n<p>删除数组元素，会将该子结构完全删除。</p>\n<h5><span id=\"删除单层数组\">删除单层数组</span></h5>\n<p><code>[]int{1, 2, 3}</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err := r.C.Update(bson.M&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"_id\"</span>: idTest,</span><br><span class=\"line\">&#125;, bson.M&#123;<span class=\"string\">\"$pull\"</span>: bson.M&#123;<span class=\"string\">\"test\"</span>: <span class=\"string\">\"123\"</span>&#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h5><span id=\"删除两层数组\">删除两层数组</span></h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除数组元素</span></span><br><span class=\"line\">r.C.Update(bson.M&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"_id\"</span>: idTest123&#125;,</span><br><span class=\"line\">\tbson.M&#123;<span class=\"string\">\"$pull\"</span>: bson.M&#123;<span class=\"string\">\"testArr\"</span>: bson.M&#123;<span class=\"string\">\"test1\"</span>: <span class=\"number\">1</span>&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<h4><span id=\"聚合操作aggregation\">聚合操作：Aggregation</span></h4>\n<p><code>$match</code>：类似于find中条件匹配；</p>\n<p><code>$unwind</code>：将数组拆开，化成一个个独立信息，除了散开的数组字段不同，其他字段均相同；</p>\n<p><code>$skip</code>与<code>limit</code>：类似于MongoDB中的skip与limit；</p>\n<p><code>$project</code>：修改输入文档的结构。可以用来重命名、增加或删除域，指定获取的字段，没有的字段，也可以用于创建计算结果以及嵌套文档。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipe := r.C.Pipe([]bson.M&#123;</span><br><span class=\"line\">\t&#123;<span class=\"string\">\"$match\"</span>: bson.M&#123;<span class=\"string\">\"_id\"</span>: idTest123, <span class=\"string\">\"product_id\"</span>: <span class=\"number\">123</span>&#125;&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"string\">\"$unwind\"</span>: <span class=\"string\">\"$testArr\"</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"string\">\"$skip\"</span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"string\">\"$limit\"</span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"string\">\"$project\"</span>: bson.M&#123;<span class=\"string\">\"product_id\"</span>: <span class=\"number\">1</span>, <span class=\"string\">\"one\"</span>: <span class=\"string\">\"$testArr.test1\"</span>&#125;&#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">resp := bson.M&#123;&#125;</span><br><span class=\"line\">err = pipe.One(&amp;resp)  </span><br><span class=\"line\"><span class=\"comment\">//pipe.All(&amp;resp)  匹配数据表中全部符合的数据</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"用objectid查询某一时间段内数据\">用objectID查询某一时间段内数据</span></h3>\n<p>ObjectID是由精确到秒的时间戳再加上机器标识等信息组成的，并且建有索引，因此ObjectID本身就可以用于按时间范围查询数据，而不用专门另建时间戳字段和索引。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">timeToObjId</span><span class=\"params\">(t <span class=\"keyword\">int64</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//var t = time.Now().Unix()</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 转换成16进制的字符串，再加补齐16个0</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">\"%x0000000000000000\"</span>, t)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//往前多少天时间戳</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetUnixToOldTimeDay</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span> <span class=\"title\">int64</span></span> &#123;</span><br><span class=\"line\">\tday := time.Now().Day()</span><br><span class=\"line\">\toldMonth := day - i</span><br><span class=\"line\">\tt := time.Date(time.Now().Year(), time.Now().Month(), oldMonth, time.Now().Hour(), time.Now().Minute(), time.Now().Second(), time.Now().Nanosecond(), time.Local)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> t.Unix()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">objIdOneMonth</span><span class=\"params\">()</span> <span class=\"params\">(oldMonthId <span class=\"keyword\">string</span>, nowId <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\ttimeUinx := GetUnixToOldTimeDay(<span class=\"number\">30</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\toldMonthId = timeToObjId(timeUinx)</span><br><span class=\"line\">\tnowId = timeToObjId(time.Now().Unix())</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.C(DbSysMsg).Pipe([]bson.M&#123;</span><br><span class=\"line\">\t\t\t&#123;<span class=\"string\">\"$match\"</span>: bson.M&#123;<span class=\"string\">\"_id\"</span>: bson.M&#123;<span class=\"string\">\"$lte\"</span>: bson.ObjectIdHex(nowId),</span><br><span class=\"line\">                                           <span class=\"string\">\"$gt\"</span>: bson.ObjectIdHex(oldMonthId)&#125;&#125;&#125;,</span><br><span class=\"line\">\t\t\t&#123;<span class=\"string\">\"$limit\"</span>: <span class=\"number\">200</span>&#125;, <span class=\"comment\">//每个月1号都清除当前时间的前200条已经空了的消息连接关系</span></span><br><span class=\"line\">\t\t\t&#123;<span class=\"string\">\"$project\"</span>: bson.M&#123;<span class=\"string\">\"count\"</span>: bson.M&#123;<span class=\"string\">\"$size\"</span>: <span class=\"string\">\"user_list_status\"</span>&#125;&#125;&#125;,</span><br><span class=\"line\">\t\t&#125;)</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://jarrychen.xyz/archives/18097549.html\">Js 数组的reduce方法</a></li></ul></div>","categories":[{"name":"DB","slug":"DB","permalink":"chunlife.top/categories/DB/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"mongoDB","slug":"mongoDB","permalink":"chunlife.top/tags/mongoDB/"},{"name":"数组","slug":"数组","permalink":"chunlife.top/tags/数组/"},{"name":"array","slug":"array","permalink":"chunlife.top/tags/array/"}]},{"title":"slice理解以及range","date":"2018-10-22T12:56:26.000Z","path":"2018/10/22/slice理解/","content":"<h2><span id=\"slice理解\">slice理解</span></h2>\n<p>slice本身没有数据，是对底层的一个view。</p>\n<a id=\"more\"></a>\n<p>为什么这么说呢，可以看看slice的构造。</p>\n<p>可以看到切片的结构体由3部分构成，Pointer 是指向一个数组的指针，len 代表当前切片的长度，cap 是当前切片的容量。cap 总是大于等于 len 的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> slice <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tarray unsafe.Pointer</span><br><span class=\"line\">\t<span class=\"built_in\">len</span>   <span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"built_in\">cap</span>   <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用时，切片类似动用的是指针，真正占用内存的是实际分配了内存的一个数组，所以说其本身没有数据。</p>\n<p><img src=\"1540737171037.png\" alt=\"slice的实现\"></p>\n<p>更多slice的代码细节可以参考：<a href=\"https://halfrost.com/go_slice/\" target=\"_blank\" rel=\"noopener\">深入解析 Go 中 Slice 底层实现</a></p>\n<h2><span id=\"slice的扩展\">slice的扩展</span></h2>\n<p>先上一段代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">arr[<span class=\"number\">0</span>], arr[<span class=\"number\">2</span>] = <span class=\"number\">0</span>, <span class=\"number\">2</span></span><br><span class=\"line\">s1 := arr[<span class=\"number\">2</span>:<span class=\"number\">6</span>]</span><br><span class=\"line\">s2 := s1[<span class=\"number\">3</span>:<span class=\"number\">5</span>] <span class=\"comment\">// [s1[3], s1[4]]</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"s1=%v, len(s1)=%d, cap(s1)=%d\\n\"</span>, s1, <span class=\"built_in\">len</span>(s1), <span class=\"built_in\">cap</span>(s1))</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"s2=%v, len(s2)=%d, cap(s2)=%d\\n\"</span>, s2, <span class=\"built_in\">len</span>(s2), <span class=\"built_in\">cap</span>(s2))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果：</span></span><br><span class=\"line\"><span class=\"comment\">// s1=[2 3 4 5], len(s1)=4, cap(s1)=6</span></span><br><span class=\"line\"><span class=\"comment\">// s2=[5 6], len(s2)=2, cap(s2)=3</span></span><br></pre></td></tr></table></figure>\n<p>结果是比较奇怪的，因为S1切片元素中没有元素[6]，为什么会出现这个现象呢，说到底还是由于slice的特性导致的，其作为对于底层数组的一个view。</p>\n<p>s1 = arr[2:6]，s1这里依然作为arr数组的view，当s2在s1的基础上取数据时，操作的底层数组都为arr，而s1[3:5]下标对应的arr的元素恰好是[5 6]。</p>\n<p>参考图片描述，可以看到不同slice，对应底层数组的下标变化。</p>\n<p><img src=\"slice%E7%9A%84%E6%89%A9%E5%B1%95.png\" alt=\"slice的扩展\"></p>\n<p>slice的len限定了切片能够索引的数据，但并不代表slice只能“看到”len长度的数据，capacity才表示底层数组具体的内存大小。</p>\n<p>也就是说：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fmt.Printf(<span class=\"string\">\"s2=%v \\n\"</span>, s2[<span class=\"number\">2</span>])  <span class=\"comment\">// 报错，panic: runtime error: index out of range</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"s2=%v \\n\"</span>, s2[<span class=\"number\">2</span>:<span class=\"number\">3</span>])  <span class=\"comment\">// '7'</span></span><br></pre></td></tr></table></figure>\n<p>总的可以继续得出：</p>\n<p><code>slice可以向后扩展，不可以向前扩展</code><br>\n<code>s[i]不可以超越len(s)，向后扩展不可以超越底层数组cap(s)</code></p>\n<h2><span id=\"添加slice\">添加slice</span></h2>\n<p><code>添加元素时如果超越cap，系统会重新分配更大的底层数组</code></p>\n<p>这里的重新分配，也就是意味着底层数据会被copy到一个新的内存，此内存的容量大于分配前的底层数组。至于会分配多大的内存，一般采取的是一次性给足，而不是适量分配。</p>\n<p>例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://www.cnblogs.com/baylorqu/p/9588733.html idea上运行正常</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testAppend</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ts := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">\toldcap := <span class=\"built_in\">cap</span>(s)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++ &#123;</span><br><span class=\"line\">\t\ts = <span class=\"built_in\">append</span>(s, i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> newcap := <span class=\"built_in\">cap</span>(s); oldcap &lt; newcap &#123;</span><br><span class=\"line\">\t\t\tfmt.Printf(<span class=\"string\">\"oldcap %d ===&gt; newcap %d\\n\"</span>, oldcap, newcap)</span><br><span class=\"line\">\t\t\toldcap = newcap</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//oldcap 1 ===&gt; newcap 2</span></span><br><span class=\"line\"><span class=\"comment\">//oldcap 2 ===&gt; newcap 4</span></span><br><span class=\"line\"><span class=\"comment\">//oldcap 4 ===&gt; newcap 8</span></span><br><span class=\"line\"><span class=\"comment\">//oldcap 8 ===&gt; newcap 16</span></span><br><span class=\"line\"><span class=\"comment\">//oldcap 16 ===&gt; newcap 32</span></span><br></pre></td></tr></table></figure>\n<p><code>由于值传递的关系，必须接收append的返回值</code></p>\n<p><code>append的用法：s=append(s,Val)</code></p>\n<p>这里另举一个有意思的代码，引出下一个章节。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> v &#123;</span><br><span class=\"line\">\tv = <span class=\"built_in\">append</span>(v, i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看这个代码是否可以猜到代码运行结果呢？程序是否会崩溃呢？</p>\n<h2><span id=\"go-range\">go range</span></h2>\n<p>在实际的打印结果中，可以看到打印是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1 2 3 0 1 2]</span><br></pre></td></tr></table></figure>\n<p>比较奇怪，打印成功，而不是死循环。</p>\n<p>不是死循环，切片增加了三个元素，循环了三次，为什么会循环三次呢？好像和slice的长度有关系，粗略的看是可以这么看的，这里我找了下具体原因。</p>\n<p>由于懒，先看了下前辈们是否有分析过这个问题，所以直接上了Google，果然没有让我失望，参考：<a href=\"http://newt0n.github.io/2017/04/06/Go-Range-%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\" target=\"_blank\" rel=\"noopener\">Go Range 内部实现</a>。</p>\n<p>博客看到range语法糖还原部分，就可以得到我所需要的信息了。取自博客：</p>\n<p><code>range</code> 循环在内部实现上实际就是 C 风格循环的语法糖，意料之外而又在情理之中。编译器会对每一种 <code>range</code> 支持的类型做专门的 “<strong>语法糖还原</strong>”。比如，</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//   slice</span></span><br><span class=\"line\"><span class=\"comment\">//   for_temp := range</span></span><br><span class=\"line\"><span class=\"comment\">//   len_temp := len(for_temp)</span></span><br><span class=\"line\"><span class=\"comment\">//   for index_temp = 0; index_temp &lt; len_temp; index_temp++ &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//           value_temp = for_temp[index_temp]</span></span><br><span class=\"line\"><span class=\"comment\">//           index = index_temp</span></span><br><span class=\"line\"><span class=\"comment\">//           value = value_temp</span></span><br><span class=\"line\"><span class=\"comment\">//           original body</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到的是，这个转化在编译器编译时完成，也就是说range循环的长度不会在运行时产生变化的，<strong>因为slice的长度是被直接赋值给了一个临时变量，所以slice本身的长度变化，并不能影响到整个循环的变化</strong>。</p>\n<p>这段代码之所以会终止是因为它其实可以粗略的翻译成类似下面的这段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for_temp := v</span><br><span class=\"line\">len_temp := len(for_temp)</span><br><span class=\"line\">for index_temp = 0; index_temp &lt; len_temp; index_temp++ &#123;</span><br><span class=\"line\">        value_temp = for_temp[index_temp]</span><br><span class=\"line\">        index = index_temp</span><br><span class=\"line\">        value = value_temp</span><br><span class=\"line\">        v = append(v, index)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们知道切片实际上是一个结构体的语法糖，这个结构体有着一个指向数组的指针成员。在循环开始前对这个结构体生成副本然后赋值给 <code>for_temp</code>，后面的循环实际上是在对 <code>for_temp</code> 进行迭代。任何对于原始变量 <code>v</code> 本身（而非对其背后指向的数组）的更改都和生成的副本 <code>for_temp</code> 没有关系。<strong>但其背后指向的数组还是以指针的形式共享给 <code>v</code> 和 <code>for_temp</code>，所以 <code>v[i] = 1</code> 这样的语句仍然可以工作</strong>。</p>\n<p>这里引出我遇到的一个问题，我需要移除slice中的一些参数，于是在range中做一些判断，然后使用类似于<code>arr = append(arr[:2], arr[3:]...)</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testRangeSlice</span><span class=\"params\">(arr []<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"%p \\n\"</span>, &amp;arr)</span><br><span class=\"line\">\tfmt.Println(<span class=\"built_in\">cap</span>(arr), <span class=\"built_in\">len</span>(arr), arr)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index, a := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> index == <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t\tarr = <span class=\"built_in\">append</span>(arr[:<span class=\"number\">2</span>], arr[<span class=\"number\">3</span>:]...)</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"built_in\">cap</span>(arr), <span class=\"built_in\">len</span>(arr), arr)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"index\"</span>, index, a)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"built_in\">cap</span>(arr), <span class=\"built_in\">len</span>(arr), arr)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"%p \\n\"</span>, &amp;arr)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0xc000042400 </span><br><span class=\"line\">6 6 [1 2 3 4 5 6]</span><br><span class=\"line\">index 0 1</span><br><span class=\"line\">index 1 2</span><br><span class=\"line\">6 5 [1 2 4 5 6]</span><br><span class=\"line\">index 2 3</span><br><span class=\"line\">index 3 5</span><br><span class=\"line\">index 4 6   // ********</span><br><span class=\"line\">index 5 6   // ********</span><br><span class=\"line\">6 5 [1 2 4 5 6]</span><br><span class=\"line\">0xc000042400</span><br></pre></td></tr></table></figure>\n<p>可以看到执行结果出现了重复的数据，原始数据的<code>4</code>没有被访问到，这里依然是range语法糖还原后造成的这个结果。中期改变切片，造成切片数据的变化（这里应该是造成了底层数组的真实变化），因为长度早已被固定，这里依然会选择循环<code>6</code>次，而slice的容量没有因为append操作改变，依然为<code>6</code>。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"slice","slug":"slice","permalink":"chunlife.top/tags/slice/"},{"name":"range","slug":"range","permalink":"chunlife.top/tags/range/"}]},{"title":"我收藏的博客","date":"2018-10-22T12:56:26.000Z","path":"2018/10/22/我收藏的博客/","content":"<p>有干货，界面好看的博客  <a href=\"https://halfrost.com\" target=\"_blank\" rel=\"noopener\">https://halfrost.com</a></p>\n<hr>\n<p>阮一峰，<a href=\"https://www.yuque.com/ruanyf/share\" target=\"_blank\" rel=\"noopener\">每周分享</a></p>\n<hr>\n<a id=\"more\"></a>\n<p><a href=\"https://www.cnblogs.com/esingchan/p/3958962.html\" target=\"_blank\" rel=\"noopener\">ZIP压缩算法详细分析及解压实例解释</a></p>\n<hr>\n<p>次碳酸钴的<a href=\"https://www.web-tinker.com/articles/\" target=\"_blank\" rel=\"noopener\">技术博客</a></p>\n<hr>\n<p>Articles by <a href=\"http://blog.ralch.com/articles/\" target=\"_blank\" rel=\"noopener\">Svetlin Ralchev</a>，博客质量都挺高，界面很简洁。</p>\n<hr>\n<p>初学者<a href=\"https://www.kancloud.cn/liupengjie/go/570004\" target=\"_blank\" rel=\"noopener\">资料</a>，用于突然忘记基础知识的时候，去看看。</p>\n<hr>\n<p><a href=\"https://github.com/developer-learning/reading-go\" target=\"_blank\" rel=\"noopener\">Go 每日阅读和 Go 夜读</a></p>\n<hr>\n<p><a href=\"http://blog.betacat.io/post/raft-implementation-in-etcd/#life-of-a-vote-request\" target=\"_blank\" rel=\"noopener\">Raft在etcd中的实现</a></p>\n<hr>\n<p>Go标准库的示例，查看string包的时候翻到的，<a href=\"https://github.com/polaris1119/The-Golang-Standard-Library-by-Example\" target=\"_blank\" rel=\"noopener\">The-Golang-Standard-Library-by-Example</a></p>\n<hr>\n<p><a href=\"https://github.com/gocn/news\" target=\"_blank\" rel=\"noopener\">GoCN</a> 每日新闻</p>\n<hr>\n<p><a href=\"https://github.com/521xueweihan/git-tips\" target=\"_blank\" rel=\"noopener\">git-tips</a>，有一个很详细的<a href=\"https://github.com/521xueweihan/git-tips/blob/master/git.png\" target=\"_blank\" rel=\"noopener\">思维导图</a>。</p>\n<hr>\n<p><a href=\"https://changkun.us/\" target=\"_blank\" rel=\"noopener\">欧长坤的博客</a></p>\n<h3><span id=\"面试时需要\">面试时需要</span></h3>\n<p>技术面试必备<a href=\"https://cyc2018.github.io/CS-Notes/#/README\" target=\"_blank\" rel=\"noopener\">基础知识</a></p>\n<p><img src=\"1554885421792.png\" alt=\"帮助了解\"></p>\n<p><a href=\"https://github.com/xmge/gonote\" target=\"_blank\" rel=\"noopener\">xmge/gonote</a>，<code>go</code>学习笔记。</p>\n<p><img src=\"1554885523893.png\" alt=\"学习笔记\"></p>\n<p><a href=\"https://github.com/imhuay/Algorithm_Interview_Notes-Chinese\" target=\"_blank\" rel=\"noopener\">imhuay/Algorithm_Interview_Notes-Chinese</a>，2018/2019/校招/春招/秋招/算法/机器学习(Machine Learning)/深度学习(Deep Learning)/自然语言处理(NLP)/C/C++/Python/面试笔记。</p>\n<p><img src=\"1554885757696.png\" alt=\"面试\"></p>\n<p><a href=\"https://github.com/MisterBooo/LeetCodeAnimation\" target=\"_blank\" rel=\"noopener\">MisterBooo/LeetCodeAnimation</a>，用动画的形式呈现解LeetCode题目的思路。</p>\n<p><img src=\"1554886318716.png\" alt=\"动画算法\"></p>\n<p><a href=\"https://github.com/Snailclimb/JavaGuide\" target=\"_blank\" rel=\"noopener\">【Java学习+面试指南】</a> 一份涵盖大部分Java程序员所需要掌握的核心知识。</p>\n<p><img src=\"1554886372815.png\" alt=\"1554886372815\"></p>\n<p><a href=\"https://github.com/kylesliu/awesome-golang-leetcode\" target=\"_blank\" rel=\"noopener\">kylesliu/awesome-golang-leetcode</a>，使用Go语言解题。</p>\n<p><img src=\"1554886435676.png\" alt=\"1554886435676\"></p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"www.chunlife.top/2018/10/22/我收藏的博客/\">我收藏的博客</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"学习博客","slug":"学习博客","permalink":"chunlife.top/tags/学习博客/"}]},{"title":"Go条件编译","date":"2018-10-18T14:32:48.000Z","path":"2018/10/18/go build条件编译/","content":"<p>在某个项目需要支持多平台时，某个功能可能需要针对不同平台编写专属这个平台的具体实现。 在c/c++中，不同平台的实现或者某个平台的特性往往通过<code>#if</code>, <code>#else</code>, <code>#endif</code>这类预处理指令来配合 交叉编译达到。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p><a href=\"https://golang.org/pkg/go/build/\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n<p><a href=\"http://manguijie.top/2018/08/go-condition-build\" target=\"_blank\" rel=\"noopener\">go build条件编译</a></p>\n</blockquote>\n<hr>\n<h3><span id=\"go-build-tags\">go build -tags</span></h3>\n<p>go某种程度上也可以支持条件编译。go中的条件编译显得格外的隐蔽，并且条件编译也仅限于包级别。</p>\n<p>假设某个服务，对外既提供HTTP服务，也可选的提供grpc服务。以此为例来说明如何支持可选的grpc。</p>\n<p>go条件编译以一行特殊的 <code>// +build</code> 注释行开始。</p>\n<p>为了跟包文档区分开，<code>// +build</code>行后面必须跟一个空白行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*错误: +build下没有用空白行分隔，build tag无法生效*/</span><br><span class=\"line\">// +build enable_rpc </span><br><span class=\"line\">func init()&#123;</span><br><span class=\"line\">    go StartRPCForever()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*正确*/</span><br><span class=\"line\">// +build enable_rpc</span><br><span class=\"line\"></span><br><span class=\"line\">func init()&#123;</span><br><span class=\"line\">    go StartRPCForever()    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func StartRPCForever()&#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在编译时，我们可以通过命令行: <code>go build -tags=enable_rpc</code>来启动RPC服务。</p>\n<p><code>+build</code>后面的tag也有讲究: 以</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// +build linux,386 darwin,!cgo 为例:</span><br></pre></td></tr></table></figure>\n<p>go build子命令将其解释成:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(linux AND 386) OR (darwin AND (NOT cgo))</span><br></pre></td></tr></table></figure>\n<p>当<code>+build</code>以多行出现时，这些<code>+build</code>之后的标签构成<strong>AND</strong>关系:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// +build linux darwin</span><br><span class=\"line\">// +build 386</span><br></pre></td></tr></table></figure>\n<p>go build子命令将其解释为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(linux OR darwin) AND 386</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"go build","slug":"go-build","permalink":"chunlife.top/tags/go-build/"},{"name":"tags","slug":"tags","permalink":"chunlife.top/tags/tags/"}]},{"title":"Go依赖管理","date":"2018-10-18T14:32:48.000Z","path":"2018/10/18/go 依赖管理/","content":"<h2><span id=\"依赖管理的选择\">依赖管理的选择</span></h2>\n<p>Go主要依赖管理工具包括dep，govendor，glide，gomodule。</p>\n<a id=\"more\"></a>\n<p>dep：<a href=\"https://github.com/golang/dep\" target=\"_blank\" rel=\"noopener\">https://github.com/golang/dep</a></p>\n<p>govendor：<a href=\"https://github.com/kardianos/govendor\" target=\"_blank\" rel=\"noopener\">https://github.com/kardianos/govendor</a></p>\n<p>glide：<a href=\"https://github.com/Masterminds/glide/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/Masterminds/glide/releases</a></p>\n<p>dep，govendor，gomodule，前两者是使用go 1.5版本的Vendor特性，已成为go的实际功能，其非常成熟；</p>\n<p>gomodule是作为Go 1.11引入的新特性，还未正式合并作为一个功能，为此，go废弃了之前作为准官方的vendor机制，目的是为了摆脱Go项目中一直存在坏境变量：GOPATH，而且目前可以使用此功能配合<a href=\"https://github.com/gomods/athens\" target=\"_blank\" rel=\"noopener\">athens</a>，做到访问私人仓库，访问国外仓库，使依赖管理做到无任何多余的操作。参考<a href=\"http://blog.cyeam.com/golang/2018/09/27/athens#get-goproxyvlist-%E8%BF%94%E5%9B%9E%E6%89%80%E6%9C%89%E5%B7%B2%E7%9F%A5%E7%9A%84%E5%BD%93%E5%89%8D-module-%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%B7%E6%AF%8F%E8%A1%8C%E4%B8%80%E6%9D%A1\" target=\"_blank\" rel=\"noopener\">为 Go module 搭建私服</a>，需要搭建代理服务器，未来建议包依赖管理可使用该功能。</p>\n<p>上述几种功能在使用中，面对私人仓库，均出现一些拉取错误，无法正常的进行拉取，进行相应的配置后，错误并未消除，选用glide后，可以顺利完成包管理的操作，而且目前来说，Glide几乎等同于官方依赖管理工具，gomodule也可以兼容Glide的管理，这里有包管理工具一些对比：<a href=\"https://github.com/Masterminds/glide/wiki/Go-Package-Manager-Comparison%E3%80%82\" target=\"_blank\" rel=\"noopener\">https://github.com/Masterminds/glide/wiki/Go-Package-Manager-Comparison。</a></p>\n<h2><span id=\"glide\">Glide</span></h2>\n<p>Glide信息可以参考官方文档：<a href=\"https://glidedocs.readthedocs.io/zh/latest/glide.yaml/\" target=\"_blank\" rel=\"noopener\">https://glidedocs.readthedocs.io/zh/latest/glide.yaml/</a></p>\n<h3><span id=\"准备\">准备</span></h3>\n<p>下载glide，<a href=\"https://github.com/Masterminds/glide/releases%EF%BC%8C%E5%B0%86%E6%96%87%E4%BB%B6%E6%94%BE%E8%87%B3$GOROOT/bin%E3%80%82\" target=\"_blank\" rel=\"noopener\">https://github.com/Masterminds/glide/releases，将文件放至$GOROOT/bin。</a></p>\n<p>使用代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t. <span class=\"string\">\"gitlab.com/Utils/ErrCode\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlog.Println(<span class=\"string\">\"test\"</span>, ERROR[<span class=\"string\">\"OK\"</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"使用glide\">使用Glide</span></h3>\n<p><strong>注意</strong>：Glide与其他利用Vendor特性的工具一样，工程项目必须要放在GOPATH目录下。</p>\n<h4><span id=\"大概流程\">大概流程：</span></h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">进入到项目目录</span></span><br><span class=\"line\">cd ~/src/testDep</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">glide初始化，初始化配置文件glide.yaml</span></span><br><span class=\"line\">glide init</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">glide加载依赖包，自动归档到vendor目录</span></span><br><span class=\"line\">glide up -v</span><br></pre></td></tr></table></figure>\n<h4><span id=\"示例\">示例：</span></h4>\n<p>在项目顶层目录运行：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ glide.exe init testDep  <span class=\"comment\"># specify project name</span></span><br></pre></td></tr></table></figure>\n<p>该工具会将项目依赖自动扫入配置文件（glide.yaml）中。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">package:</span> <span class=\"string\">testDep</span></span><br><span class=\"line\"><span class=\"attr\">import:</span></span><br><span class=\"line\"><span class=\"attr\">- package:</span> <span class=\"string\">gitlab.com/Utils</span></span><br></pre></td></tr></table></figure>\n<p>接下来可以使用&quot;glide.exe install&quot;，但对于私有库，若直接安装将无法正常clone到git项目，需要手动对配置文件进行改造：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">package:</span> <span class=\"string\">testDep</span></span><br><span class=\"line\"><span class=\"attr\">import:</span></span><br><span class=\"line\"><span class=\"attr\">- package:</span> <span class=\"string\">gitlab.com/Utils</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span>    <span class=\"string\">git@172.16.8.189:third-party/Utils.git</span></span><br><span class=\"line\"><span class=\"attr\">  version:</span> <span class=\"string\">branch</span></span><br></pre></td></tr></table></figure>\n<p>repo：指定真实仓库地址；</p>\n<p>version：指定tag，branch等其他参数，具体可参考文档。</p>\n<p>完成后，可使用：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ glide.exe install // 或者是glide up -v，配置文件更改后使用，一般第一次使用install，后面使用up</span><br></pre></td></tr></table></figure>\n<p>正常情况下，会自动下载Git项目到vendor目录中，且生成&quot;glide.lock&quot;。</p>\n<h3><span id=\"其他操作\">其他操作</span></h3>\n<h3><span id=\"手动更新包依赖\">手动更新包依赖</span></h3>\n<p>glide get操作通过手动维护Git包，使用此命令，包配置会自动配置到配置文件中，但对于私有仓库的操作是无法成功的。</p>\n<p>示例，#后面跟tag，branch。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glide get github.com/go-sql-driver/mysql#v1.2</span><br></pre></td></tr></table></figure>\n<h3><span id=\"包被墙\">包被墙</span></h3>\n<p>包若因为网络因素被墙，可使用glide的mirror命令绕过一些包访问的问题。</p>\n<p>例如https://golang.org/x/net。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> glide mirror <span class=\"built_in\">set</span> https://golang.org/x/net https://github.com/golang/net --vcs git</span></span><br></pre></td></tr></table></figure>\n<p>然后使用update。</p>\n<p>这里glide无法处理包的子包，那可以参考：<a href=\"https://zhuanlan.zhihu.com/p/31402004\" target=\"_blank\" rel=\"noopener\">让golang依赖也走mirror</a>，参考https://github.com/jokimina/glide-mirrors-yaml，一些常用的mirror，将文件放到~/.glide/。</p>\n<p>对包被墙的一些解决办法：<a href=\"https://blog.csdn.net/fenglailea/article/details/79107124\" target=\"_blank\" rel=\"noopener\">golang 包管理工具</a>，综合来看，唯有代理才能彻底解决这个痛点。</p>\n<h2><span id=\"项目管理\">项目管理</span></h2>\n<p>上传git项目一般是只需上传glide.lock，glide.yaml即可，vendor目录可不做上传，若网络包被本地修改，或包需翻墙进行下载，此时建议一并上传。</p>\n<p>若依赖需要更新，或者配置更改，则可使用update。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ glide.exe update</span><br></pre></td></tr></table></figure>\n<h2><span id=\"add-2019-3-19\">Add 2019-3-19</span></h2>\n<p>go如今已经发布到1.12了，之前说过Go1.11强势发布了gomodule特性，以此来统一整个包管理的江湖，但在之前刚发布时，对这个的使用实在是有点搞不明白，不过在不经意间就找到了一个Go的包代理网站，以此来使用gomodule即可应对各类<code>墙</code>包。<a href=\"https://goproxy.io\" target=\"_blank\" rel=\"noopener\">https://goproxy.io</a>。</p>\n<p>1、升级Go1.12，启用GO111MODULE</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export GO111MODULE=on</span><br></pre></td></tr></table></figure>\n<p>2、配置GOPROXY</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export GOPROXY=https://goproxy.io</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"go mod","slug":"go-mod","permalink":"chunlife.top/tags/go-mod/"},{"name":"Glide","slug":"Glide","permalink":"chunlife.top/tags/Glide/"},{"name":"包依赖管理","slug":"包依赖管理","permalink":"chunlife.top/tags/包依赖管理/"}]},{"title":"Go打印结构体的field","date":"2018-10-12T03:12:20.000Z","path":"2018/10/12/Go打印结构体的field/","content":"<p>Go可以很方便的打印出结构体的<code>field</code>，不同于<code>json.Marshal()</code>操作，<code>json</code>操作有很多局限性，首先其要求结构体字段为大写字段，否则没有访问权限，其二，其会多出一步函数调用，比较麻烦。</p>\n<a id=\"more\"></a>\n<p>这里又很方便既可以将结构体<code>field</code>打印出来的方法，不用区分大小写。</p>\n<p>printf的关键字：<code>%+v</code>，其中v不加<code>+</code>也是有所区别的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> info <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tKey   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tValue <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := info&#123;<span class=\"string\">\"键值\"</span>, <span class=\"string\">\"数据\"</span>&#125;</span><br><span class=\"line\">\tbytes, _ := json.Marshal(v)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"%v\\n\"</span>, v)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"%+v\\n\"</span>, v)</span><br><span class=\"line\">\tfmt.Println(<span class=\"keyword\">string</span>(bytes))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// output</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;键值 数据&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;Key:键值 Value:数据&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;\"Key\":\"键值\",\"Value\":\"数据\"&#125;</span></span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"}]},{"title":"国庆回家","date":"2018-10-11T11:10:50.000Z","path":"2018/10/11/国庆回家/","content":"<p>因家里有点事，本来准备窝在深圳，手撸几行代码的想法是泡汤了，一想到国庆路上千军万马，心里只能是七零八落之后，做好长期的心理防线，免得在路上对生活失去信心，毕竟还有远方的苟且。</p>\n<a id=\"more\"></a>\n<h2><span id=\"出发\">出发</span></h2>\n<p>临时起意的情况下，对于火车票，基本就没有其他奢望了，于是联系了我表哥，搭一趟顺风车回家，原定是9月30号中午出发，不过我哥表示没睡醒，晚上需要开夜路，那得多睡一会。</p>\n<p>六点钟，东莞开车出发；</p>\n<p>十点钟，深圳南山区西丽，上车。</p>\n<h2><span id=\"在路上\">在路上</span></h2>\n<p>在出深圳的路上，一路都很顺畅，深深的怀疑是要回去的都已经回去了，没回去的已经躺在家里了。</p>\n<p>出了深圳就开始出现堵车到爆炸的现象了，事故不断，堵车不断，总之两者都是相关的，让我也是第一次感受到宛如春运的感觉，这对我一个之前在武汉，从没感受到春运人流，对国家的特质缺少了一块体验，虽然不是什么好的体验。</p>\n<p>大概是跑了14个小时，才完整的出了广东省，这里只能说广东是深深的爱着外乡人的，连离别的前戏都是这么充足。</p>\n<p>出来了才会发现广东省的富足，这点感觉是从通信基建上感受到的，出广东省前，一路上4G网都是妥妥的，手机玩个游戏延迟基本不会太高；出了广东，就会发现4G信号还是一个飘忽的东西，时有时无。一路上的车流变得越来越少，过了岳阳，到湖北来，几乎是无法构成车流，这点数量上也是欠缺的。</p>\n<p>难得回趟家，快要回到家，还是感觉家里比较亲切的，整个道路上都是亮起的路灯，迎国庆的气息弥漫到各个角落里，荆州这座古城…。</p>\n<h2><span id=\"家\">家</span></h2>\n<p>一回家，那只有沙发能够托住我整个身体，撑住我疲惫的身体，将满足感满满的给予我，深怕是辜负了我辛苦的路程，家里的沙发是如此可爱。</p>\n<p>简练的打理了一下自己，就将自己摔到床上休息了，重重的倒下，暖暖的幸福。</p>\n<h2><span id=\"生活\">生活</span></h2>\n<p>回家后，去看了外婆，也去了看了爷爷。</p>\n<p>外婆的身体相比过年，真是无法形容的变法，一个夏天和冬天的感觉，外婆性子硬，不愿意去医院，整个人可以很好的对照着一个老人的样子，一点都不像是从一个大户人家过来的女人，让人心疼。</p>\n<p>爷爷的身体依然如此，一年中大病小病，一个人辛苦的生活，听着爷爷说，一个人生病了，用一把椅子慢慢的把自己挪到医院，300米的距离，走了两个小时，这时候我只能无话可说，即使明白老人最需要的是什么，但也只能是沉默，静静听着爷爷的讲述。</p>\n<p>生活的路很奇怪，好好的一段路，走着的人走一段歇一段，下一个路口，人流总需要被分化，往前的人不断，可没有人在原地。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/03/29/重新见面，请多指教/\">重新见面，请多指教</a></li><li><a href=\"chunlife.top/2019/12/31/科学需要谨慎，知识需要校校验/\">科学需要谨慎，知识需要校验</a></li><li><a href=\"chunlife.top/2019/03/19/搜集赏/\">搜集赏</a></li><li><a href=\"http://yoursite.com/2020/03/28/swing/Shell-Script%E6%9D%A5%E6%96%B0%E5%8D%9A%E5%AE%A2/\">Shell Script更新博客</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"chunlife.top/tags/随笔/"}]},{"title":"KSDK USB 例程分析","date":"2018-09-22T08:17:51.000Z","path":"2018/09/22/KSDK USB 例程分析/","content":"<p>在USB example里面文件：</p>\n<a id=\"more\"></a>\n<p><img src=\"28180756_Z7bj.png\" alt=\"img\"></p>\n<p>lite为精简版，省略了很多USB枝干上的功能，保留了USB通讯部分的主干功能，我使用的是全功能版。</p>\n<p><img src=\"28180756_hylo.png\" alt=\"img\"></p>\n<p>函数 BOARD_InitPins()中，主要是PORT以及GPIO相关的初始化。</p>\n<p><img src=\"28180757_A6DK.png\" alt=\"img\"></p>\n<ol>\n<li>使能PORT的时钟，当外设时钟没有打开时，程序不能读出外设寄存器的值，同时也不能使用外设。</li>\n<li>通过PORT设置GPIO引脚功能，此处为设置LPUART功能。芯片手册P115。</li>\n<li>将键盘涉及到的GPIO引脚统统都设为GPIO引脚（自己定义的函数）。</li>\n<li>进行UART相关配置。</li>\n<li>将USB 键盘对应的相关引脚都设置为输入引脚。</li>\n</ol>\n<p>BOARD_BootClockRUN()，设置芯片时钟为48MHZ，总线时钟为24MHZ。</p>\n<p>BOARD_InitDebugConsole()，主要是初始化UART相关的配置，例入波特率等等。</p>\n<p>USB_DeviceApplicationInit()，这个函数很重要，应用初始化，这里的设置关乎于后面程序的成功与否，不过这里是KSDK已经实现了的，我们仅仅是需要做一下了解即可。</p>\n<p>使能USB工作时钟。</p>\n<p><img src=\"28180757_tFJa.png\" alt=\"img\"></p>\n<p>这段代码是由宏定义给包裹起来的，根据注释可以粗略判断出，主要是针对KHCI USB中的RAM特定的，将RAM里面的数据全部清0。</p>\n<p><img src=\"28180758_yCrm.png\" alt=\"img\"></p>\n<p>对composite结构体进行简单的初始化。</p>\n<p><img src=\"28180759_16WL.png\" alt=\"img\"></p>\n<p>USB_DeviceClassInit，这个函数比较重要，在上一个步骤中被初始化的g_UsbDeviceComposite.deviceHandle，将被在这个函数中重新赋予新的含义，里面设计到很多函数指针，推荐使用source insight可以看得清楚些。</p>\n<p>另外，我这里将Mouse的相关函数给屏蔽掉了，因为我需要实现的是Keyboard。</p>\n<p><img src=\"28180759_16WL-1552581570473.png\" alt=\"img\"></p>\n<p>USB_DeviceClassInit</p>\n<p><img src=\"28180759_wwDU.png\" alt=\"img\"></p>\n<p>configList也就是g_UsbDeviceCompositeConfigList</p>\n<p><img src=\"28180800_V8GF.png\" alt=\"img\"></p>\n<p><img src=\"28180800_YwY2.png\" alt=\"img\"></p>\n<p>可以看到USB_DeviceHidKeyboardCallback显然是个很重要的主，我们进去look look。</p>\n<p><img src=\"28180801_ghw8.png\" alt=\"img\"></p>\n<p>从这个函数里面又会碰到另一个很重要的函数，USB_DeviceHidKeyboardAction()，这个函数里面也就是KSDK中需要我们自己写的用户处理操作函数。</p>\n<p><img src=\"28180801_9eAr.png\" alt=\"img\"></p>\n<p>这个案例默认键盘是不断发出PAGEUP和PAGEDOWN键值，这里只是演示，所以若是要实现真正的产品，那是必须要把这段代码注释掉，来从新写一段新的功能函数代码的。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/10/14/计算机大小端/\">计算机大小端</a></li><li><a href=\"chunlife.top/2016/06/07/strcat函数引起的血案/\">strcat函数引起的血案</a></li><li><a href=\"chunlife.top/2016/06/01/串口终端没有打印字符/\">串口终端没有打印字符</a></li><li><a href=\"https://thelighter.github.io/2020/02/22/joke-3/\">c语言如何实现</a></li></ul></div>","categories":[{"name":"系统","slug":"系统","permalink":"chunlife.top/categories/系统/"}],"tags":[{"name":"Freescale","slug":"Freescale","permalink":"chunlife.top/tags/Freescale/"},{"name":"C语言","slug":"C语言","permalink":"chunlife.top/tags/C语言/"}]},{"title":"MySQL翻页查询","date":"2018-09-22T08:17:51.000Z","path":"2018/09/22/MySQL查询/","content":"<h2><span id=\"问题的出现\">问题的出现</span></h2>\n<p>分页查询，其中数据量变大后导致查询速度变慢。</p>\n<a id=\"more\"></a>\n<h2><span id=\"分页查询\">分页查询</span></h2>\n<p>在查询操作能够做到优化的地方，也是效果最明显的地方应该就是索引的优化，建立好索引能够有效的提高数据查询的速度。</p>\n<p>首先，了解下一个比较有意思的讨论：<a href=\"https://www.v2ex.com/t/443491\" target=\"_blank\" rel=\"noopener\">分页查询，查个 total 很难吗？</a></p>\n<p>通过链接能够看到不同的开发者对分页的理解和提供的解决问题的方法，对了解这个问题的具体含义很有帮助。单单的分页查询其实是涉及到了数据库的一些优化问题，并非表面上看起来那么简单。</p>\n<h2><span id=\"分页方式\">分页方式</span></h2>\n<p>参考链接：<a href=\"https://blog.csdn.net/SpeedMe/article/details/45690027%3E\" target=\"_blank\" rel=\"noopener\">分页性能探索-mysql</a></p>\n<p>1、扶梯分页法：</p>\n<p><img src=\"20150512171006.png\" alt=\"扶梯方式\"></p>\n<p>扶梯分页方式实现简单，操作高效，以当前页为起始页预取下一页。</p>\n<p>2、电梯分页法：</p>\n<p><img src=\"1538187698007.png\" alt=\"电梯分页法\"></p>\n<p>此方法其实是一种精准分页的方式，能够通过前端按键精确跳转页面，精确跳转的前提是需要排除需要跳转的页面（page*count），然后才会获取页面，这个偏移的过程就是一个非常慢的过程，经常是无法用到索引操作。</p>\n<h2><span id=\"电梯分页优化\">电梯分页优化</span></h2>\n<p>博文中提到了一种常见的优化方式，可以说一种&quot;万金油&quot;优化方式，也就是常见的“查两次”：</p>\n<p>先查找出主键ID，利用ID去查询数据（“查两次”）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from production_recorder.6 inner join (select id from production_recorder.6 WHERE errcode like &apos;86:54:37:00:00:%&apos; LIMIT 150000,10) as ids using(id);</span><br></pre></td></tr></table></figure>\n<p>先使用较少IO查找来拿到主键id，然后利用主键id即可超快的获取数据了。</p>\n<p>但是这种方式还是会受到数据库数据持续变大带来的查询效率变低的影响。我们可以使用explain来对mysql语句进行分析：对explain的参数的了解参考链接<a href=\"https://www.cnblogs.com/zhanjindong/p/3439042.html\" target=\"_blank\" rel=\"noopener\">MySQL优化—工欲善其事，必先利其器之EXPLAIN</a>，</p>\n<p>explain分析结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">           id: 1</span><br><span class=\"line\">  select_type: PRIMARY</span><br><span class=\"line\">        table: &lt;derived2&gt;</span><br><span class=\"line\">         type: ALL</span><br><span class=\"line\">possible_keys: NULL</span><br><span class=\"line\">          key: NULL</span><br><span class=\"line\">      key_len: NULL</span><br><span class=\"line\">          ref: NULL</span><br><span class=\"line\">         rows: 10</span><br><span class=\"line\">        Extra: </span><br><span class=\"line\">*************************** 2. row ***************************</span><br><span class=\"line\">           id: 1</span><br><span class=\"line\">  select_type: PRIMARY</span><br><span class=\"line\">        table: 6</span><br><span class=\"line\">         type: eq_ref</span><br><span class=\"line\">possible_keys: PRIMARY</span><br><span class=\"line\">          key: PRIMARY</span><br><span class=\"line\">      key_len: 4</span><br><span class=\"line\">          ref: id.id</span><br><span class=\"line\">         rows: 1</span><br><span class=\"line\">        Extra: </span><br><span class=\"line\">*************************** 3. row ***************************</span><br><span class=\"line\">           id: 2</span><br><span class=\"line\">  select_type: DERIVED</span><br><span class=\"line\">        table: 6</span><br><span class=\"line\">         type: range</span><br><span class=\"line\">possible_keys: idx_6_errcode</span><br><span class=\"line\">          key: idx_6_errcode</span><br><span class=\"line\">      key_len: 768</span><br><span class=\"line\">          ref: NULL</span><br><span class=\"line\">         rows: 518056</span><br><span class=\"line\">        Extra: Using where; Using index</span><br><span class=\"line\">3 rows in set (0.10 sec)</span><br></pre></td></tr></table></figure>\n<p>对电梯分页的性能下降，经过百度与Google的查找，一个疑似的答案是，当数据库偏移一个相对于表数据量来说也是比较大的数据时，那么mysql优化器可能就会不选择走索引，而是走全表扫描，这相当于是mysql优化器在权衡索引与全表扫描后的做出的选择。</p>\n<h2><span id=\"扶梯分页的优化\">扶梯分页的优化</span></h2>\n<p>参考链接：<a href=\"https://blog.jamespan.me/2015/01/22/trick-of-paging-query\" target=\"_blank\" rel=\"noopener\">分页查询的那些坑和各种技巧</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from product.record WHERE errcode in (&quot;2134&quot;,&quot;13253&quot;) and id &gt; 10000 LIMIT 10;</span><br></pre></td></tr></table></figure>\n<p>这里使用id进行直接跳转，能够非常快速的越过已查询的数据，对未查询的数据进行查询，速度非常稳定。</p>\n<p>为了检测下一页是否有数据，在查询时可以</p>\n<p>查询完成后，计算结果集中ID的最大值，作为下一次id的起始值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">requiredResultMaxId</span><span class=\"params\">(recordList []models.Record)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tlens := <span class=\"built_in\">len</span>(recordList)</span><br><span class=\"line\">\tidArr := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, lens)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index, record := <span class=\"keyword\">range</span> recordList &#123;</span><br><span class=\"line\">\t\tidArr[index] = <span class=\"keyword\">int</span>(record.Id)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !sort.IntsAreSorted(idArr) &#123;</span><br><span class=\"line\">\t\tsort.Ints(idArr)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> idArr[lens<span class=\"number\">-1</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"总数\">总数</span></h2>\n<p>除了获取具体的数量，分页还有一个就是获取查询的总数，这样前端才能很好的进行渲染工作。</p>\n<p>这里也是有几种方法：</p>\n<p>1、若取全表，则可以直接取自增主键的最大值（数据不会变化，且ID为自增主键）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select max(id) from tablename</span><br></pre></td></tr></table></figure>\n<p>2、使用explain获取近似主键。</p>\n<p>3、在另外一张表中维护一个总数，插入一个加1。</p>\n<h2><span id=\"选择\">选择</span></h2>\n<p>就像参考博客中说的，根据业务对分页方式进行选择。当然作为开发者那得根据整体的设计来进行选择，有时候也会身不由己。</p>\n<h2><span id=\"总结\">总结</span></h2>\n<p>对于分页好像没有想象中那么简单，分页具体到细节其实是查询，对于查询有分区，分库分表，这样的操作，这些东西现在还不太了解，借此机会还是需要去好好了解了解的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">分表以后只有一种查询方式会效率高，那就是根据分表键查。其他查询条件相反会慢于没分表前的正表查询。 所以能不分尽量不要分表。大数据量的查询可以使用读写分离，旧数据归档。（取自某一篇博客）</span><br></pre></td></tr></table></figure>\n<p>上述中，参考的博客都写得非常不错，具有可观的参考价值，感谢这些前辈的意见。</p>\n<p>如果有相关信息违反任何版权，请直接联系我进行删除。</p>\n<h2><span id=\"2018年11月20日\">2018年11月20日</span></h2>\n<p>分页中其实可以采取一种取巧的方式：</p>\n<p>如何将分页方法过渡到电梯分页的方法上呢？</p>\n<p>这里需要与前端进行配合。例如：</p>\n<p><img src=\"clip_image002.jpg\" alt=\"img\"></p>\n<p>这种分页是大多数电梯分页的选择，可以看到用户在选择分页时，其实是只能选择7页的，例如用户在点击第5页后的变化。</p>\n<p><img src=\"clip_image004.jpg\" alt=\"img\"></p>\n<p>等于说，在当前页，用户最多能看见第一页和最后一页，以及当前页的前两页和后两页数据，那么也就可以将查询范围给控制在7页的范围内。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> current_id; <span class=\"comment\">// id of first record on current page.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// go to page current+N</span></span><br><span class=\"line\">db.collection.find(&#123;_id: &#123;$gte: current_id&#125;&#125;).</span><br><span class=\"line\">              skip(N * page_size).</span><br><span class=\"line\">              limit(page_size).</span><br><span class=\"line\">              sort(&#123;_id: <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// go to page current-N</span></span><br><span class=\"line\"><span class=\"comment\">// note that due to the nature of skipping back,</span></span><br><span class=\"line\"><span class=\"comment\">// this query will get you records in reverse order </span></span><br><span class=\"line\"><span class=\"comment\">// (last records on the page being first in the resultset)</span></span><br><span class=\"line\"><span class=\"comment\">// You should reverse them in the app.</span></span><br><span class=\"line\">db.collection.find(&#123;_id: &#123;$lt: current_id&#125;&#125;).</span><br><span class=\"line\">              skip((N<span class=\"number\">-1</span>)*page_size).</span><br><span class=\"line\">              limit(page_size).</span><br><span class=\"line\">              sort(&#123;_id: <span class=\"number\">-1</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> inputs.CurrentPage-inputs.NextPage &lt;= <span class=\"number\">0</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> CurrentPosition != <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// CurrentPosition 取的是上次一个数组中的样品编号，样品编号即是_id</span></span><br><span class=\"line\">        findConditionsMap.SampleSearchCondition[<span class=\"string\">\"_id\"</span>] = bson.M&#123;<span class=\"string\">\"$lte\"</span>: bson.ObjectIdHex(inputs.CurrentPosition)&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    err = db.C(coll).Find(findConditionsMap.SampleSearchCondition).</span><br><span class=\"line\">    Select(needCharMap).</span><br><span class=\"line\">    Skip((inputs.NextPage - inputs.CurrentPage) * inputs.PageSize).</span><br><span class=\"line\">    Limit(inputs.PageSize).Sort(<span class=\"string\">\"-_id\"</span>).All(&amp;sampleInfoArr)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> inputs.CurrentPage-inputs.NextPage &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> CurrentPosition != <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">        findConditionsMap.SampleSearchCondition[<span class=\"string\">\"_id\"</span>] = bson.M&#123;<span class=\"string\">\"$gt\"</span>: bson.ObjectIdHex(CurrentPosition)&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    err = db.C(coll).Find(findConditionsMap.SampleSearchCondition).</span><br><span class=\"line\">    Select(needCharMap).</span><br><span class=\"line\">    Skip(((inputs.CurrentPage - inputs.NextPage) - <span class=\"number\">1</span>) * inputs.PageSize).</span><br><span class=\"line\">    Limit(inputs.PageSize).Sort(<span class=\"string\">\"_id\"</span>).All(&amp;sampleInfoArr)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 因排序倒置,倒转数组后再发送,统一操作逻辑</span></span><br><span class=\"line\">    infoStart := <span class=\"number\">0</span></span><br><span class=\"line\">    infoEnd := <span class=\"built_in\">len</span>(sampleInfoArr) - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> infoStart &lt; infoEnd &#123;</span><br><span class=\"line\">        sampleInfoArr[infoStart], sampleInfoArr[infoEnd] =</span><br><span class=\"line\">        sampleInfoArr[infoEnd], sampleInfoArr[infoStart]</span><br><span class=\"line\">        infoStart++</span><br><span class=\"line\">        infoEnd--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://stackoverflow.com/questions/9703319/mongodb-ranged-pagination\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/9703319/mongodb-ranged-pagination</a></p>\n<p>MySQL同样可以使用这种方式进行分页，分页效率非常稳定可靠。</p>\n<p>而对总数信息的获取，则可以使用：SHOW TABLE STATUS或者是explain。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"DB","slug":"DB","permalink":"chunlife.top/categories/DB/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"mongoDB","slug":"mongoDB","permalink":"chunlife.top/tags/mongoDB/"},{"name":"mysql","slug":"mysql","permalink":"chunlife.top/tags/mysql/"},{"name":"翻页","slug":"翻页","permalink":"chunlife.top/tags/翻页/"}]},{"title":"网关选择","date":"2018-09-22T08:11:30.000Z","path":"2018/09/22/网关选择/","content":"<h2><span id=\"可选择\">可选择</span></h2>\n<p><a href=\"https://github.com/TykTechnologies/tyk\" target=\"_blank\" rel=\"noopener\">https://github.com/TykTechnologies/tyk</a></p>\n<p><a href=\"https://github.com/fagongzi/gateway\" target=\"_blank\" rel=\"noopener\">https://github.com/fagongzi/gateway</a></p>\n<p><a href=\"https://github.com/hellofresh/janus\" target=\"_blank\" rel=\"noopener\">https://github.com/hellofresh/janus</a></p>\n<p><a href=\"https://github.com/Netflix/zuul\" target=\"_blank\" rel=\"noopener\">https://github.com/Netflix/zuul</a></p>\n<a id=\"more\"></a>\n<p><a href=\"https://aws.amazon.com/api-gateway\" target=\"_blank\" rel=\"noopener\">https://aws.amazon.com/api-gateway</a></p>\n<p><a href=\"https://getkong.org/\" target=\"_blank\" rel=\"noopener\">https://getkong.org/</a></p>\n<p><a href=\"https://github.com/adobe-apiplatform/apigateway\" target=\"_blank\" rel=\"noopener\">https://github.com/adobe-apiplatform/apigateway</a></p>\n<p><a href=\"https://github.com/claudiajs/claudia\" target=\"_blank\" rel=\"noopener\">https://github.com/claudiajs/claudia</a></p>\n<p><a href=\"http://orange.sumory.com/\" target=\"_blank\" rel=\"noopener\">http://orange.sumory.com/</a></p>\n<p>主要可使用的网关大概是上述的这些（不包括某些专业级网关以及名气不够且star数量低于1K的项目）。</p>\n<h2><span id=\"分析\">分析</span></h2>\n<p>用的最多的是网关kong，使用的是Nginx-Lua，Gateway开源，使用的插件部分免费，属于基本可用的范畴，考虑到技术栈使用的是Go，考虑使用相同语言的插件便于后期进行改造，节省人力。（虽然微服务提倡的观念是对特定的服务使用其最适合的语言进行编写，但是在考虑到不同技术栈的同步问题，使用同一技术栈在前期可能会好一点）。</p>\n<p>在此想法的前提下，可以考虑的网关包括：</p>\n<p><a href=\"https://github.com/TykTechnologies/tyk\" target=\"_blank\" rel=\"noopener\">https://github.com/TykTechnologies/tyk</a></p>\n<p><a href=\"https://github.com/fagongzi/gateway\" target=\"_blank\" rel=\"noopener\">https://github.com/fagongzi/gateway</a></p>\n<p><a href=\"https://github.com/hellofresh/janus\" target=\"_blank\" rel=\"noopener\">https://github.com/hellofresh/janus</a></p>\n<p>tyk也算是比较好的，同样是该有的都有，根据使用的人数，可能是仅次于kong的，tyk是需要收取费用来进行使用的，当然若需求只需要进行单节点布置，那也可以使用Tyk，若考虑到以后进行分布式部署的情况，Tyk显然就不太适合进行后续部署了（若是能够花钱的话，当然也是没有问题的，俩节点$600每月）。</p>\n<p>那这样就剩下gateway和janus。</p>\n<p>gateway与Janus两者较相似，都是轻量级网关，故功能相对于一个成熟的网关来说都各有各的缺失，具体上如果针对于小型需求来说，其基本都能满足；</p>\n<ul>\n<li>GitHub star均超过1.2K；</li>\n<li>资料，两者都属于较少，不过根据官方文档部署和基础使用没有太大问题；</li>\n<li>部署，支持docker部署，官方文档都有基础的介绍。</li>\n<li>功能，两者基本功能可能都有（例如限流，断路器等），高级功能可能都缺失，例如日志收集和消息队列，两者的文档里面好像都没有提到。</li>\n<li>周边，两者都是没有社区存在的，janus star数量会超过gateway一些；</li>\n<li>配置，janus设置使用json文件，gateway通过client模块API调用进行配置，两者都不需要重启网关；</li>\n<li>分布式支持；</li>\n</ul>\n<p>根据分析来看，在项目的部署上使用哪一种，主要是看在网关本身的部署难度和使用难度上。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"Gateway","slug":"Gateway","permalink":"chunlife.top/tags/Gateway/"}]},{"title":"mysql操作","date":"2018-09-14T09:40:39.000Z","path":"2018/09/14/mysql操作-不定时持续补充/","content":"<p>mysql操作是不区分大小写的。</p>\n<h1><span id=\"mysql安装后若出现问题\">Mysql安装后若出现问题</span></h1>\n<p>ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/run/mysqld/mysqld.sock’ (2)</p>\n<a id=\"more\"></a>\n<p>解决方式：</p>\n<p>touch /var/run/mysqld/mysqld.sock</p>\n<p>ls -lart /var/run/mysqld/</p>\n<p>chown -R mysql /var/run/mysqld</p>\n<p>ls -lart /var/run/mysqld/</p>\n<p>mysql restart</p>\n<p>/etc/init.d/mysql restart</p>\n<h1><span id=\"基础操作\">基础操作</span></h1>\n<p>1 添加表字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table table1 add transactor varchar(10) not Null;</span><br><span class=\"line\"></span><br><span class=\"line\">alter table table1 add id int unsigned not Null auto_increment primary key</span><br></pre></td></tr></table></figure>\n<p>2 如果要删除某一字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE mytable DROP 字段名;</span><br></pre></td></tr></table></figure>\n<p>3 修改数据表字段的默认值：</p>\n<p>修改字段默认值：role_id默认值设置为：1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; alter table users_info alter column role_id set default 1;</span><br></pre></td></tr></table></figure>\n<p>修改字段默认值语法：</p>\n<p>alter table 表名 alter column 字段名 drop default; (若本身存在默认值，则先删除)</p>\n<p>alter table 表名 alter column 字段名 set default 默认值;(若本身不存在则可以直接设定)</p>\n<h1><span id=\"预处理\">预处理</span></h1>\n<p><a href=\"https://cloud.tencent.com/developer/article/1066988\" target=\"_blank\" rel=\"noopener\">数据库操作, 关于stmt, prepare</a></p>\n<h1><span id=\"join\">JOIN</span></h1>\n<p>使用Join， Inner join取得两表间类似的数据，<a href=\"https://blog.csdn.net/w348399060/article/details/70158125\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<p><img src=\"1.png\" alt=\"命令\"></p>\n<p><img src=\"2.png\" alt=\"432\"></p>\n<h1><span id=\"mysql隐式转换\">mysql隐式转换</span></h1>\n<p>mysql隐式转换，会造成SQL慢查询，因为SQL转化后，即使使用索引查询，SQL也不会认为其是索引。</p>\n<p>也就是说，若字段为字符串数字，则需要使用字符串类型作为<code>where</code>查询条件去查询数据，若使用整型数据，则会发生隐式转换，这相当于在字段前加上了<code>to_int(xxx)</code>，类似于：<code>where to_int(xxx) = xxx</code>，在字段前加函数，其将无法使用索引，这是条准则。</p>\n<p><a href=\"http://xiaorui.cc/2018/04/13/%e8%ae%b0%e4%b8%80%e6%ac%a1%e9%9a%90%e5%bc%8f%e8%bd%ac%e6%8d%a2%e5%bc%95%e8%b5%b7%e7%9a%84sql%e6%85%a2%e6%9f%a5%e8%af%a2/\" target=\"_blank\" rel=\"noopener\">记一次隐式转换引起的sql慢查询</a></p>\n<h1><span id=\"日期索引\">日期索引</span></h1>\n<p><a href=\"https://blog.csdn.net/spider_zhcl/article/details/53323166\" target=\"_blank\" rel=\"noopener\">Mysql 索引问题-日期索引使用</a></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在查询数据条数约占总条数五分之一以下时能够使用到索引，但超过五分之一时，则使用全表扫描了。</span><br></pre></td></tr></table></figure>\n<h1><span id=\"查询缓存\">查询缓存</span></h1>\n<p><a href=\"https://www.cnblogs.com/gimin/p/5459689.html\" target=\"_blank\" rel=\"noopener\">MySQL查询缓存打开、设置、参数查询、性能变量</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW VARIABLES LIKE &apos;%query_cache%&apos;;</span><br><span class=\"line\">+------------------------------+---------+</span><br><span class=\"line\">| Variable_name                | Value   |</span><br><span class=\"line\">+------------------------------+---------+</span><br><span class=\"line\">| have_query_cache             | YES     |</span><br><span class=\"line\">| query_cache_limit            | 1048576 |</span><br><span class=\"line\">| query_cache_min_res_unit     | 4096    |</span><br><span class=\"line\">| query_cache_size             | 1048576 |</span><br><span class=\"line\">| query_cache_type             | OFF     |</span><br><span class=\"line\">| query_cache_wlock_invalidate | OFF     |</span><br><span class=\"line\">+------------------------------+---------+</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show global status like &apos;QCache%&apos;;</span><br><span class=\"line\">+-------------------------+---------+</span><br><span class=\"line\">| Variable_name           | Value   |</span><br><span class=\"line\">+-------------------------+---------+</span><br><span class=\"line\">| Qcache_free_blocks      | 1       |</span><br><span class=\"line\">| Qcache_free_memory      | 1031832 |</span><br><span class=\"line\">| Qcache_hits             | 0       |</span><br><span class=\"line\">| Qcache_inserts          | 0       |</span><br><span class=\"line\">| Qcache_lowmem_prunes    | 0       |</span><br><span class=\"line\">| Qcache_not_cached       | 106     |</span><br><span class=\"line\">| Qcache_queries_in_cache | 0       |</span><br><span class=\"line\">| Qcache_total_blocks     | 1       |</span><br><span class=\"line\">+-------------------------+---------+</span><br></pre></td></tr></table></figure>\n<h1><span id=\"mysql调试\">mysql调试</span></h1>\n<p>慢查询可以将mysql执行慢的语句记录下来。</p>\n<p><a href=\"http://blog.51yip.com/mysql/972.html%3E\" target=\"_blank\" rel=\"noopener\">linux下开启mysql慢查询，分析查询语句</a></p>\n<p><a href=\"http://www.cnblogs.com/luyucheng/p/6265594.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/luyucheng/p/6265594.html</a></p>\n<p>慢查询使用pt-query-digest进行分析：</p>\n<p>安装过程：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# wget percona.com/get/pt-query-digest</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]# chmod u+x pt-query-digest</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost ~]# mv /root/pt-query-digest /usr/bin/</span><br></pre></td></tr></table></figure>\n<p>开启慢查询后，会有慢查询的日志，对日志使用工具：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pt-query-digest --explain h=127.0.0.1,u=root,p=123 mysql_slow.log &gt; pt.ref</span><br></pre></td></tr></table></figure>\n<p>开启实时查询，能够得到每一次SQL语句的完整执行语句。</p>\n<p><a href=\"https://blog.csdn.net/qidaif/article/details/80931703\" target=\"_blank\" rel=\"noopener\">MySQL查看实时执行的SQL语句</a></p>\n<h1><span id=\"mysql插入csv文件\">mysql插入CSV文件</span></h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOAD DATA LOCAL INFILE &apos;./dbtestdata.csv&apos; INTO TABLE production_recorder.6 CHARACTER SET UTF8 FIELDS TERMINATED BY &apos;,&apos; LINES TERMINATED BY &apos;\\n&apos;;</span><br></pre></td></tr></table></figure>\n<h1><span id=\"gorm使用\">GORM使用</span></h1>\n<h2><span id=\"查找最大值\">查找最大值</span></h2>\n<p><img src=\"3.png\" alt=\"查询\"></p>\n<h2><span id=\"时间戳跟踪\">时间戳跟踪</span></h2>\n<p>Gorm里面有个结构体：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// gorm.Model definition</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Model <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  ID        <span class=\"keyword\">uint</span> <span class=\"string\">`gorm:\"primary_key\"`</span></span><br><span class=\"line\">  CreatedAt time.Time</span><br><span class=\"line\">  UpdatedAt time.Time</span><br><span class=\"line\">  DeletedAt *time.Time</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这四个参数是Gorm固定的参数，例如，如果结构体中有“ID”成员，那么建表时它就是表中的主键。</p>\n<p>CreatedAt：也就是插入值时默认添加的时间戳；</p>\n<p>UpdatedAt：更新时添加的时间戳；</p>\n<p>DeletedAt：被删除时添加的时间戳。（有一个软删除的概念）</p>\n<p>GORM默认是使用蛇形命名，也就是CreatedAt成员将被命名为“created_at”。</p>\n<p>select * from production_recorder.6  WHERE errcode like “86:54:37%” LIMIT 1000000,10;</p>\n<h2><span id=\"子查询\">子查询</span></h2>\n<p><a href=\"https://stackoverflow.com/questions/46807891/using-a-subquery-in-from-in-gorm?rq=1\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/46807891/using-a-subquery-in-from-in-gorm?rq=1</a></p>\n<p><img src=\"count%E8%87%AA%E5%8A%A01.png\" alt=\"count自加1\"></p>\n<p><img src=\"1538015777465.png\" alt=\"子查询\"></p>\n<p>从手册上摘出来的子查询使用方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Where(<span class=\"string\">\"amount &gt; ?\"</span>, DB.Table(<span class=\"string\">\"orders\"</span>).Select(<span class=\"string\">\"AVG(amount)\"</span>).Where(<span class=\"string\">\"state = ?\"</span>, <span class=\"string\">\"paid\"</span>).QueryExpr()).Find(&amp;orders)</span><br><span class=\"line\"><span class=\"comment\">// SELECT * FROM \"orders\"  WHERE \"orders\".\"deleted_at\" IS NULL AND (amount &gt; (SELECT AVG(amount) FROM \"orders\"  WHERE (state = 'paid')));</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"打印gorm执行语句包含时间\">打印Gorm执行语句（包含时间）</span></h2>\n<p>将执行的语句打印出来。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Debug a single operation, show detailed log for this operation</span></span><br><span class=\"line\">db.Debug().Where(<span class=\"string\">\"name = ?\"</span>, <span class=\"string\">\"jinzhu\"</span>).First(&amp;User&#123;&#125;)</span><br></pre></td></tr></table></figure>\n<h2><span id=\"gorm拼接sql语句\">gorm拼接SQL语句</span></h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dt = dt.Table(models.TableRecords)</span><br><span class=\"line\"></span><br><span class=\"line\">scope := dt.NewScope(dt.Value)</span><br><span class=\"line\">scope.InstanceSet(<span class=\"string\">\"skip_bindvar\"</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">scope.Raw(fmt.Sprintf(<span class=\"string\">\"explain SELECT %v FROM %v %v\"</span>, <span class=\"string\">\"count(*)\"</span>,</span><br><span class=\"line\">\tscope.QuotedTableName(),</span><br><span class=\"line\">\tscope.CombinedConditionSql()))</span><br><span class=\"line\"></span><br><span class=\"line\">dbs.DbRecords.Raw(scope.SQL, scope.SQLVars...).Scan(&amp;test)</span><br></pre></td></tr></table></figure>\n<p>Gorm的官方文档其实已经比较详细了，想跟深入的了解，可以直接去看官方文档：</p>\n<p><a href=\"http://gorm.io/docs/conventions.html#Timestamp-Tracking\" target=\"_blank\" rel=\"noopener\">http://gorm.io/docs/conventions.html#Timestamp-Tracking</a></p>\n<p><a href=\"https://jasperxu.github.io/gorm-zh/\" target=\"_blank\" rel=\"noopener\">https://jasperxu.github.io/gorm-zh/</a></p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"DB","slug":"DB","permalink":"chunlife.top/categories/DB/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"mysql","slug":"mysql","permalink":"chunlife.top/tags/mysql/"}]},{"title":"interface转换结构体数组","date":"2018-09-14T07:29:01.000Z","path":"2018/09/14/interface对结构体数组/","content":"<p>interface非常好用，相当于一个空类型，什么类型都可以被它接受，可以说在传参上是非常方便的，那问题来了，什么类型它都能转得回去吗，结果是不能的。</p>\n<p>这个问题，我自己碰到了两次，每次都没记录，每次都很干脆的忘了。</p>\n<a id=\"more\"></a>\n<p>一个API接口上可以接受好几个结构体数组，我使用interface来进行接受，此时我使用断言来进行类型转换，很显然无法成功进行断言。</p>\n<p>这个问题呢，我们先看看官方对interfaceSlice做出的一个解释。</p>\n<p><a href=\"https://github.com/golang/go/wiki/InterfaceSlice\" target=\"_blank\" rel=\"noopener\">https://github.com/golang/go/wiki/InterfaceSlice</a></p>\n<p>也可以看此篇博客的中文，和原文大概意思相同，建议两篇都看，毕竟原文才是官方的原意。</p>\n<p><a href=\"https://www.jianshu.com/p/e0abcbc220a4\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/e0abcbc220a4</a></p>\n<p>其中说的其实是interfaceSlice的问题，这里我们知道了interface的结构组成，再来解决问题。</p>\n<p><a href=\"https://stackoverflow.com/questions/12753805/type-converting-slices-of-interfaces-in-go\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/12753805/type-converting-slices-of-interfaces-in-go</a></p>\n<p>楼主的问题：</p>\n<p><img src=\"question.png\" alt=\"问题\"></p>\n<p>得分最高的回答：</p>\n<p><img src=\"1536911326824.png\" alt=\"解答\"></p>\n<p>这里我翻译一下：</p>\n<p>在Go中，一般语法是不应该隐藏那些复杂或耗费资源的操作的，转换string类型到interface类型算法可以O（1）时间内完成。切片[]string依然可以被视作是一个值（译者：我感觉这里可以将切片看做是一个连续内存的结构来将其视作一个值），转换到interface依然可以在O（1）时间内完成。</p>\n<p>此规则有一个例外——就是转换字符串，当转换变量string a，[]byte a或者是[]rune a，虽然算法难度为O（n），但还是可以视作正常操作。</p>\n<p>其实到这里就可以解决我们的问题了，interface用断言来做类型转换是官方干脆就没想过要做到那么复杂的程度，若是开发者需要做，可以采用反射来自己去实现这种操作的。</p>\n<p>这里贴一个实现过程的帖子：</p>\n<p><a href=\"https://github.com/issue9/conv/blob/master/obj.go#L75\" target=\"_blank\" rel=\"noopener\">https://github.com/issue9/conv/blob/master/obj.go#L75</a></p>\n<p>另外，还附上一个对讲解interface断言的博客文章：</p>\n<p><a href=\"https://medium.com/golangspec/type-assertions-in-go-e609759c42e1\" target=\"_blank\" rel=\"noopener\">Type assertions in Go</a></p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"interface","slug":"interface","permalink":"chunlife.top/tags/interface/"}]},{"title":"json操作","date":"2018-09-14T06:07:42.000Z","path":"2018/09/14/json操作/","content":"<p>json算是比较好理解的组织结构方式了，现在RESTful那一套基本也是使用json来作为传输的数据格式了。</p>\n<a id=\"more\"></a>\n<h1><span id=\"json库\">json库</span></h1>\n<p>我使用的是https://github.com/json-iterator/go，号称是非常快的，与Java的库类似。</p>\n<p>还有一些其他的，摘自json-iterator/go。</p>\n<table>\n<thead>\n<tr>\n<th>ns/op</th>\n<th>allocation bytes</th>\n<th>allocation times</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>std decode</td>\n<td>35510 ns/op</td>\n<td>1960 B/op</td>\n<td>99 allocs/op</td>\n</tr>\n<tr>\n<td>easyjson decode</td>\n<td>8499 ns/op</td>\n<td>160 B/op</td>\n<td>4 allocs/op</td>\n</tr>\n<tr>\n<td>jsoniter decode</td>\n<td>5623 ns/op</td>\n<td>160 B/op</td>\n<td>3 allocs/op</td>\n</tr>\n<tr>\n<td>std encode</td>\n<td>2213 ns/op</td>\n<td>712 B/op</td>\n<td>5 allocs/op</td>\n</tr>\n<tr>\n<td>easyjson encode</td>\n<td>883 ns/op</td>\n<td>576 B/op</td>\n<td>3 allocs/op</td>\n</tr>\n<tr>\n<td>jsoniter encode</td>\n<td>837 ns/op</td>\n<td>384 B/op</td>\n<td>4 allocs/op</td>\n</tr>\n</tbody>\n</table>\n<p>当然，这是开发者提供的，golang json库还有很多，性能差距感觉不会是最影响项目的因素，若是代码本身出了问题，那不是单单是一个好库能够解决的。</p>\n<h1><span id=\"json格式\">json格式</span></h1>\n<p><img src=\"json%E6%A0%BC%E5%BC%8F.png\" alt=\"json格式\"></p>\n<h1><span id=\"json-解析\">json 解析</span></h1>\n<p>库是怎么找到结构体对应的字段进行解析的呢？</p>\n<p><img src=\"1536908063319.png\" alt=\"1536908063319\"></p>\n<p>json的tag是库用来响应使用者提前预设的操作的，用来控制库的编码解码操作。</p>\n<p><img src=\"1536908018808.png\" alt=\"json解析\"></p>\n<p>我常用到的tag：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Message struct &#123;  </span><br><span class=\"line\">    Name string `json:\"msg_name\"`       // 对应JSON的msg_name  </span><br><span class=\"line\">    Body string `json:\"body,omitempty\"` // 如果为空置则忽略字段  </span><br><span class=\"line\">    Time int64  `json:\"-\"`              // 直接忽略字段  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用omitempty，如果该字段为nil或0值（数字0,字符串&quot;&quot;,空数组[]等），则打包的JSON结果不会有这个字段。</p>\n<p>golang官方库中其实没有对“required”字段的支持，这个字段表示被标识的字段没有接受到值则报错（数字0,字符串&quot;&quot;,空数组[]等也会报错）。</p>\n<p>使用web gin有这个tag，</p>\n<p><img src=\"clip_image001.png\" alt=\"gin required\"></p>\n<p>我还查到过一个很有意思的解决字段是否被传递的方法：</p>\n<p>若需要使用encoding/json来检查缺少的字段，则必须使用指针来区分missing/null和zero值：</p>\n<p><a href=\"https://stackoverflow.com/questions/19633763/unmarshaling-json-in-golang-required-field\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/19633763/unmarshaling-json-in-golang-required-field</a></p>\n<p><img src=\"clip_image001.png\" alt=\"指针方式\"></p>\n<h1><span id=\"序列化美化json数据\">序列化美化json数据</span></h1>\n<p><code>json.MarshalIndent(data, &quot;&quot;, &quot; &quot;)</code>将会使用四个空格进行缩进。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://kezunlin.me/post/77697d8d/\">python useful tools and code snippets</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"gin","slug":"gin","permalink":"chunlife.top/tags/gin/"},{"name":"json","slug":"json","permalink":"chunlife.top/tags/json/"}]},{"title":"gin的学习框架","date":"2018-09-11T06:22:14.000Z","path":"2018/09/11/gin的学习框架/","content":"<p>为了以后的开发便利，这里添加一个gin的框架结构。</p>\n<a id=\"more\"></a>\n<p>gin现在已经有自己的中文帮助手册，那直接参考它的中文手册就好了，<a href=\"https://gin-gonic.com/zh-cn/docs/#contents\" target=\"_blank\" rel=\"noopener\">文档</a>。</p>\n<p><a href=\"https://github.com/younglifestyle/goexamples/tree/master/gin-demo\" target=\"_blank\" rel=\"noopener\">https://github.com/younglifestyle/goexamples/tree/master/gin-demo</a></p>\n<p>gin中还有对session的中间库，很多中间库和beego很类似，还是很方便的。</p>\n<h3><span id=\"gin-http-server启动时自定义参数\">gin HTTP Server启动时自定义参数</span></h3>\n<p>例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\trouter := gin.Default()</span><br><span class=\"line\">\thttp.ListenAndServe(<span class=\"string\">\":8080\"</span>, router)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\trouter := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">\ts := &amp;http.Server&#123;</span><br><span class=\"line\">\t\tAddr:           <span class=\"string\">\":8080\"</span>,</span><br><span class=\"line\">\t\tHandler:        router,</span><br><span class=\"line\">\t\tReadTimeout:    <span class=\"number\">10</span> * time.Second,</span><br><span class=\"line\">\t\tWriteTimeout:   <span class=\"number\">10</span> * time.Second,</span><br><span class=\"line\">\t\tMaxHeaderBytes: <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">20</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts.ListenAndServe()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"参数支持\">参数支持</span></h3>\n<p>gin可以直接对URL query、json以及form进行序列化。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用gin可以猜测传递的参数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tmp <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">c.ShouldBind(&amp;tmp)   </span><br><span class=\"line\">c.Bind(&amp;tmp)</span><br></pre></td></tr></table></figure>\n<h3><span id=\"json-tag\">json Tag</span></h3>\n<p><code>binding:&quot;required&quot;</code>，gin框架会对此tag进行检查，添加后，意味着在接受数据时，query、表单或者body中必须要匹配到该字段。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> UserToken <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tUserId <span class=\"keyword\">string</span> <span class=\"string\">`json:\"userid\" form:\"userid\" binding:\"required\"`</span></span><br><span class=\"line\">\tToken  <span class=\"keyword\">string</span> <span class=\"string\">`json:\"token\" form:\"token\" binding:\"required\"`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"请求中使用goroutine\">请求中使用Goroutine</span></h3>\n<p>在中间件或处理程序中启动新的Goroutines时，不应该使用其中的原始上下文，必须使用只读副本。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">\tr.GET(<span class=\"string\">\"/long_async\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// create copy to be used inside the goroutine</span></span><br><span class=\"line\">\t\tcCp := c.Copy()</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// simulate a long task with time.Sleep(). 5 seconds</span></span><br><span class=\"line\">\t\t\ttime.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// note that you are using the copied context \"cCp\", IMPORTANT</span></span><br><span class=\"line\">\t\t\tlog.Println(<span class=\"string\">\"Done! in path \"</span> + cCp.Request.URL.Path)</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\tr.GET(<span class=\"string\">\"/long_sync\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// simulate a long task with time.Sleep(). 5 seconds</span></span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// since we are NOT using a goroutine, we do not have to copy the context</span></span><br><span class=\"line\">\t\tlog.Println(<span class=\"string\">\"Done! in path \"</span> + c.Request.URL.Path)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Listen and serve on 0.0.0.0:8080</span></span><br><span class=\"line\">\tr.Run(<span class=\"string\">\":8080\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"gin","slug":"gin","permalink":"chunlife.top/tags/gin/"}]},{"title":"服务器上传下载问题","date":"2018-09-02T12:34:19.000Z","path":"2018/09/02/服务器上传下载问题/","content":"<p>做过服务器上传下载的一个接口，将其整理整理写出来备忘吧。</p>\n<a id=\"more\"></a>\n<h1><span id=\"上传文件\">上传文件</span></h1>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 上传时，前端需要使用form对文件进行上传</span></span><br><span class=\"line\">r.Body = http.MaxBytesReader(w, r.Body, MAX_UPLOAD_SIZE)  <span class=\"comment\">// 设置文件限制大小</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> err := r.ParseMultipartForm(MAX_UPLOAD_SIZE); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    sendErrorResponse(w, http.StatusBadRequest, <span class=\"string\">\"File is too big\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">file, _, err := r.FormFile(<span class=\"string\">\"file\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Printf(<span class=\"string\">\"Error when try to get file: %v\"</span>, err)</span><br><span class=\"line\">    sendErrorResponse(w, http.StatusInternalServerError, <span class=\"string\">\"Internal Error\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">data, err := ioutil.ReadAll(file)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Printf(<span class=\"string\">\"Read file error: %v\"</span>, err)</span><br><span class=\"line\">    sendErrorResponse(w, http.StatusInternalServerError, <span class=\"string\">\"Internal Error\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">err = ioutil.WriteFile(<span class=\"string\">\"./store\"</span><span class=\"string\">\"\"</span>, data, <span class=\"number\">0666</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Printf(<span class=\"string\">\"write file error: %v\"</span>, err)</span><br><span class=\"line\">    sendErrorResponse(w, http.StatusInternalServerError, <span class=\"string\">\"Internal Error\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1><span id=\"下载文件gin\">下载文件（Gin）</span></h1>\n<p>下载前端可直接使用windows.location.href，该函数会发出“Get”请求到服务器，不过这里就会要求将通信参数都置于URL中，若别人拿着链接就可以直接进行下载操作了。</p>\n<p>此处是可以将请求变为POST的，也就是不使用windows.location.href来做，这里我就不做太多介绍了。</p>\n<p>后端核心代码，Header参数填写来自beego，见文章末尾。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">downloadFileToClient</span><span class=\"params\">(c *gin.Context, filePath <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置浏览器是否为直接下载文件，且为浏览器指定下载文件的名字</span></span><br><span class=\"line\">        c.Header(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"attachment; filename=\"</span>+url.QueryEscape(path.Base(filePath)))</span><br><span class=\"line\">        c.Header(<span class=\"string\">\"Content-Description\"</span>, <span class=\"string\">\"File Transfer\"</span>)</span><br><span class=\"line\">        c.Header(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/octet-stream\"</span>)</span><br><span class=\"line\">        c.Header(<span class=\"string\">\"Content-Transfer-Encoding\"</span>, <span class=\"string\">\"binary\"</span>)</span><br><span class=\"line\">        c.Header(<span class=\"string\">\"Expires\"</span>, <span class=\"string\">\"0\"</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 如果缓存过期了，会再次和原来的服务器确定是否为最新数据，而不是和中间的proxy</span></span><br><span class=\"line\">        c.Header(<span class=\"string\">\"Cache-Control\"</span>, <span class=\"string\">\"must-revalidate\"</span>)</span><br><span class=\"line\">        c.Header(<span class=\"string\">\"Pragma\"</span>, <span class=\"string\">\"public\"</span>)</span><br><span class=\"line\">        c.File(filePath)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1><span id=\"其他\">其他</span></h1>\n<h2><span id=\"指定浏览器直接下载文件不进行打开操作\">指定浏览器直接下载文件，不进行打开操作</span></h2>\n<p><a href=\"https://segmentfault.com/q/1010000000692593\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/q/1010000000692593</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">最好的解决方案是通过后台的service来做，返回不同的http header来达到不同的目的。</span><br><span class=\"line\">需要用的就是“Content-disposition”，解释如下：</span><br><span class=\"line\"></span><br><span class=\"line\">Content-disposition: inline; filename=foobar.pdf</span><br><span class=\"line\">表示浏览器内嵌显示一个文件</span><br><span class=\"line\">Content-disposition: attachment; filename=foobar.pdf</span><br><span class=\"line\">表示会下载文件 </span><br><span class=\"line\"></span><br><span class=\"line\">友情提示：这样的话，请求url就没有必要带上.pdf后缀了。</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://golangtc.com/t/54d9ca47421aa9170200000f\" target=\"_blank\" rel=\"noopener\">https://golangtc.com/t/54d9ca47421aa9170200000f</a></p>\n<p><img src=\"clip_image001.png\" alt=\"下载Header设置\"></p>\n<h2><span id=\"go作为客户端下载文件实现类似于wget的效果\">Go作为客户端下载文件，实现类似于Wget的效果</span></h2>\n<p>Downloading large files in Go  <a href=\"https://github.com/cavaliercoder/grab\" target=\"_blank\" rel=\"noopener\">https://github.com/cavaliercoder/grab</a></p>\n<p>来自 &lt;<a href=\"http://cavaliercoder.com/blog/downloading-large-files-in-go.html\" target=\"_blank\" rel=\"noopener\">http://cavaliercoder.com/blog/downloading-large-files-in-go.html</a>&gt;</p>\n<h2><span id=\"文件读写的问题\">文件读写的问题：</span></h2>\n<p>ReadAll后，再去读文件数据，为空，使用seek重新回到文件头位置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Seek 设置下一次 Read 或 Write 的偏移量为 offset，它的解释取决于 whence： 0 表示相对于文件的起始处，1 表示相对于当前的偏移，而 2 表示相对于其结尾处。 Seek 返回新的偏移量和一个错误，如果有的话。</span><br></pre></td></tr></table></figure>\n<p><img src=\"clip_image001-1535892856347.png\" alt=\"读写文件\"></p>\n<h2><span id=\"go-删除文件和文件夹\">Go 删除文件和文件夹</span></h2>\n<p>删除空目录</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Remove</span><span class=\"params\">(name <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span></span><br></pre></td></tr></table></figure>\n<p>强制删除目录，无论目录是否有文件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RemoveAll</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span></span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"服务器","slug":"服务器","permalink":"chunlife.top/tags/服务器/"},{"name":"上传下载","slug":"上传下载","permalink":"chunlife.top/tags/上传下载/"}]},{"title":"服务器限流问题","date":"2018-09-02T11:47:34.000Z","path":"2018/09/02/服务器限流问题/","content":"<p>在观看慕课网的<a href=\"https://coding.imooc.com/class/227.html\" target=\"_blank\" rel=\"noopener\">Go语言实战流媒体视频网站</a> ，里面有提高bucket token算法，也就是令牌桶算法，用于服务器限流。因为我刚好在做一个包含上传和下载的服务器接口，貌似会需要到这一块地方，就多加了一些了解，这里主要是将结果进行粘贴。</p>\n<a id=\"more\"></a>\n<h1><span id=\"服务器限流介绍\">服务器限流介绍</span></h1>\n<p>服务治理之限流</p>\n<p>来自 &lt;<a href=\"https://blog.frognew.com/2017/06/rate-limiting.html\" target=\"_blank\" rel=\"noopener\">https://blog.frognew.com/2017/06/rate-limiting.html</a>&gt;</p>\n<p>如何测试服务器带宽？</p>\n<p>来自 &lt;<a href=\"https://www.zhihu.com/question/20561349\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/20561349</a>&gt;</p>\n<h1><span id=\"简单的限流方法\">简单的限流方法</span></h1>\n<p>贴上视频中老师写的方法（代码出处为老师视频）。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ConnLimiter <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tconcurrentConn <span class=\"keyword\">int</span></span><br><span class=\"line\">\tbucket         <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// concurrentConn可以连接的数量，channel满了则</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewConnLimiter</span><span class=\"params\">(cc <span class=\"keyword\">int</span>)</span> *<span class=\"title\">ConnLimiter</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;ConnLimiter&#123;</span><br><span class=\"line\">\t\tconcurrentConn: cc,</span><br><span class=\"line\">\t\tbucket:         <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, cc),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(cl *ConnLimiter)</span> <span class=\"title\">GetConn</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(cl.bucket) &gt;= cl.concurrentConn &#123;</span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">\"Reached the rate limitation\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcl.bucket &lt;- <span class=\"number\">1</span></span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">\"Successfully got connection\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(cl *ConnLimiter)</span> <span class=\"title\">ReleaseConn</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc := &lt;-cl.bucket</span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">\"New connection coming: %d\"</span>, c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过封装ServeHTTP方法，达到嵌入限流代码的目的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> middleWareHandler <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tr *httprouter.Router</span><br><span class=\"line\">\tl *ConnLimiter</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//NewMiddleWareHandler def</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewMiddleWareHandler</span><span class=\"params\">(r *httprouter.Router, cc <span class=\"keyword\">int</span>)</span> <span class=\"title\">http</span>.<span class=\"title\">Handler</span></span> &#123;</span><br><span class=\"line\">\tm := middleWareHandler&#123;&#125;</span><br><span class=\"line\">\tm.r = r</span><br><span class=\"line\">\tm.l = NewConnLimiter(cc)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> m</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RegisterHandlers</span><span class=\"params\">()</span> *<span class=\"title\">httprouter</span>.<span class=\"title\">Router</span></span> &#123;</span><br><span class=\"line\">\trouter := httprouter.New()</span><br><span class=\"line\"></span><br><span class=\"line\">\trouter.GET(<span class=\"string\">\"/videos/:vid-id\"</span>, streamHandler)</span><br><span class=\"line\"></span><br><span class=\"line\">\trouter.POST(<span class=\"string\">\"/upload/:vid-id\"</span>, uploadHandler)</span><br><span class=\"line\"></span><br><span class=\"line\">\trouter.GET(<span class=\"string\">\"/testpage\"</span>, testPageHandler)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> router</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Handler最终会调用httprouter.Router接口方法中的ServeHTTP，这里对Go方法进行DIY封装</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m middleWareHandler)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !m.l.GetConn() &#123;</span><br><span class=\"line\">\t\tsendErrorResponse(w, http.StatusTooManyRequests, <span class=\"string\">\"Too many requests\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> m.l.ReleaseConn()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 调用router起作用ServeHTTP</span></span><br><span class=\"line\">\tm.r.ServeHTTP(w, r)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tr := RegisterHandlers()</span><br><span class=\"line\">\tmh := NewMiddleWareHandler(r, <span class=\"number\">2</span>)</span><br><span class=\"line\">\thttp.ListenAndServe(<span class=\"string\">\":9000\"</span>, mh)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1><span id=\"复杂的限流方法介绍\">复杂的限流方法介绍</span></h1>\n<p>服务器下载限流操作（使用token bucket）：</p>\n<p>各种类似算法实现：</p>\n<p><a href=\"https://hustcat.github.io/rate-limit-example-in-go/\" target=\"_blank\" rel=\"noopener\">https://hustcat.github.io/rate-limit-example-in-go/</a></p>\n<p>HTTP限速中间件：</p>\n<p><a href=\"https://github.com/didip/tollbooth\" target=\"_blank\" rel=\"noopener\">https://github.com/didip/tollbooth</a></p>\n<p>修改servefile来实现（用到https://github.com/juju/ratelimit）：</p>\n<p><a href=\"https://stackoverflow.com/questions/29445173/how-to-limit-download-speed-with-go\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/29445173/how-to-limit-download-speed-with-go</a></p>\n<p>使用包来实现：</p>\n<p><a href=\"https://www.0value.com/throttled--guardian-of-the-web-server\" target=\"_blank\" rel=\"noopener\">https://www.0value.com/throttled--guardian-of-the-web-server</a></p>\n<p><a href=\"https://github.com/throttled/throttled\" target=\"_blank\" rel=\"noopener\">https://github.com/throttled/throttled</a></p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"服务器","slug":"服务器","permalink":"chunlife.top/tags/服务器/"},{"name":"限流","slug":"限流","permalink":"chunlife.top/tags/限流/"},{"name":"bucket token","slug":"bucket-token","permalink":"chunlife.top/tags/bucket-token/"},{"name":"rate limit","slug":"rate-limit","permalink":"chunlife.top/tags/rate-limit/"},{"name":"令牌桶","slug":"令牌桶","permalink":"chunlife.top/tags/令牌桶/"}]},{"title":"组件与语言特性的学习","date":"2018-08-26T03:03:53.000Z","path":"2018/08/26/组件与语言特性的学习/","content":"<h2><span id=\"syncmap\">sync.Map</span></h2>\n<p>这是一种线程安全的map用法，在版本1.9时出现，按照以前的用法，多协程情况下，需要使用将map和锁一起使用才可以做到线程安全，而现在可直接使用该类型。</p>\n<a id=\"more\"></a>\n<p>以下内容取自<a href=\"https://blog.csdn.net/champly/article/details/77622328\" target=\"_blank\" rel=\"noopener\">Go1.9 安全map用法</a>。</p>\n<p><img src=\"1535253147536.png\" alt=\"1535253147536\"></p>\n<h2><span id=\"gin框架\">Gin框架</span></h2>\n<p>encoding/json 貌似不支持required json tag，实际验证好像也不支持，这个字段表示传递的json数据没有这个字段就会报错。</p>\n<p>GIN框架补充了这个字段，使用binding tag，如果没有该字段，直接报错。</p>\n<p><img src=\"clip_image001.png\" alt=\"img\"></p>\n<p>c.BindQuery可以直接把Query映射出来，当然可以操作form表单的数据，操作及其方便，涉及到反射操作，还有检查的时间。</p>\n<h2><span id=\"文件下载\">文件下载</span></h2>\n<p>指定浏览器直接下载文件，且使用文件下载原名，其不进行打开操作。</p>\n<p><a href=\"https://segmentfault.com/q/1010000000692593\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/q/1010000000692593</a></p>\n<p><a href=\"https://golangtc.com/t/54d9ca47421aa9170200000f\" target=\"_blank\" rel=\"noopener\">https://golangtc.com/t/54d9ca47421aa9170200000f</a></p>\n<p><img src=\"clip_image002.png\" alt=\"指定下载文件名\"></p>\n<p>golang filepath.Ext  获取文件后缀名</p>\n<h2><span id=\"时间戳格式变换为yyyymmdd\">时间戳格式变换为YYYYMMDD</span></h2>\n<p>//返回现在时间</p>\n<p>tNow:=time.Now()</p>\n<p>//时间转化为string，layout必须为&quot;2006-01-0215:04:05&quot;</p>\n<p>timeNow:=tNow.Format(“20060102”)</p>\n<p>fmt.Println(“tNow(timeformat):”,tNow)</p>\n<p>fmt.Println(“tNow(stringformat):”,timeNow)</p>\n<h2><span id=\"数据库操作\">数据库操作</span></h2>\n<p>Gorm使用first、find查询单个参数时，没有查到会返回not found错误，当Find使用数组去接数据时，没有找到也不会报错。</p>\n<p><strong>MySQL时间类型：</strong></p>\n<p><img src=\"1535287076868.png\" alt=\"MySQL时间类参数\"></p>\n<p>MySQL 中timestamp 类型使用默认值CURRENT_TIMESTAMP创建成功，使用datetime则不行。</p>\n<p>时间戳和时间格式的转换：</p>\n<p><img src=\"first.png\" alt=\"1535287353268\"></p>\n<p>转换成：</p>\n<p><img src=\"1535287393700.png\" alt=\"时间戳\"></p>\n<p><img src=\"1535287745538.png\" alt=\"as用法\"></p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2018/12/24/技术博客的重要性/\">技术博客的重要性</a></li><li><a href=\"chunlife.top/2018/12/14/程序员的简历之道/\">程序员的简历就该这样写</a></li><li><a href=\"https://abelsu7.top/2019/05/29/python-quick-reference/\">Python 速查</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"学习","slug":"学习","permalink":"chunlife.top/tags/学习/"}]},{"title":"Go Goroutine运行切换","date":"2018-08-19T02:32:59.000Z","path":"2018/08/19/Go-Goroutine运行切换/","content":"<p>Goroutine称呼上一般被我们理解为协程（Coroutine），类似于轻量级“线程”。</p>\n<a id=\"more\"></a>\n<ul>\n<li>Goroutine是一种编译器/解释器/虚拟机层面的多任务，并不属于操作系统。</li>\n<li>多个协程可能在一个或多个线程上运行（由调度器决定）</li>\n</ul>\n<p>对比操作系统（*nix）的进程或线程来说，Goroutine作为<strong>非抢占式</strong>多任务处理，由协程主动交出控制权，也就是说，要么协程自动运行完毕，或者调度器主动来进行切换，否则，协程不会主动交出运行控制的。</p>\n<p>什么情况下，调度器会参与呢？</p>\n<ul>\n<li>I/O操作，类似于阻塞的系统的调用（异步唤醒）。</li>\n<li>select Channel</li>\n<li>等待锁</li>\n<li>函数调用</li>\n<li>Runtime.Gosched()</li>\n<li>其他地方也有可能会切换</li>\n</ul>\n<p>总的来说，当Goroutine不能继续向下执行时，需要等待时，调度器都有可能参与调度（根据以上状况和查Google得出，未结合源码进行分析验证）。</p>\n<blockquote>\n<p>更新，更为详细的介绍，附加一篇博客：<a href=\"https://changkun.de/golang/zh-cn/part2runtime/ch06sched/preemption/\" target=\"_blank\" rel=\"noopener\">6.7 协作与抢占</a>。</p>\n</blockquote>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"Goroutine","slug":"Goroutine","permalink":"chunlife.top/tags/Goroutine/"}]},{"title":"创建CSV，数据导入excel文件","date":"2018-08-15T07:45:25.000Z","path":"2018/08/15/创建CSV，数据导入excel文件/","content":"<p>代码：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create a csv file</span></span><br><span class=\"line\">f, err := os.OpenFile(facNFileName, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, os.ModePerm)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">wsv := csv.NewWriter(f)</span><br><span class=\"line\"><span class=\"comment\">// write csv</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> facNo, count := <span class=\"keyword\">range</span> facNMap &#123;</span><br><span class=\"line\">\twsv.Write([]<span class=\"keyword\">string</span>&#123;facNo, strconv.FormatInt(<span class=\"keyword\">int64</span>(count), <span class=\"number\">10</span>)&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">wsv.Flush()     <span class=\"comment\">// 需要将数据写入文件系统中</span></span><br></pre></td></tr></table></figure>\n<p><code>func (w *Writer) Write(record []string) error</code>，一次就是写一行数据；</p>\n<p>使用<code>Write</code>进行写数据，需要显示调用<code>Flush</code>函数将数据真实写入目标中。</p>\n<p><code>func (w *Writer) Flush()</code>，</p>\n<p>一次性写多行数据，<code>func (w *Writer) WriteAll(records [][]string) error</code>，一次即写多行数据。</p>\n<p><strong>中文乱码</strong>，若文件写入有中文，那么打开<code>.csv</code>文件时将会出现乱码的现象，可以写入UTF-8 BOM，防止中文乱码。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f.WriteString(<span class=\"string\">\"\\xEF\\xBB\\xBF\"</span>)</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"excel","slug":"excel","permalink":"chunlife.top/tags/excel/"},{"name":"CSV文件","slug":"CSV文件","permalink":"chunlife.top/tags/CSV文件/"}]},{"title":"EE小白到CS小白","date":"2018-08-12T09:50:22.000Z","path":"2018/08/12/EE小白到CS小白/","content":"<p>从武汉来到深圳，怀揣着一个傲娇的想法走出来，纯粹就是想要看看世界，毕业呆了四年的城市毕竟太过熟悉了。同时，之前做的是嵌入式开发，在公司当个软件组长太过安逸，而且在武汉工资和前景感觉都不是太好看，于是在毕业又做了大半年后，于公司辞职后，来到了深圳。</p>\n<a id=\"more\"></a>\n<h2><span id=\"五一\">五一</span></h2>\n<p>五月一号到的深圳，听着《飞得更高》，一路忐忑。</p>\n<p>一个陌生的城市，感受当然是深圳各个方面都是666，什么都是新样式。（实际感受和武汉没有啥一样）</p>\n<p>到深圳肯定是先叫同学一顿约约约，过个五一再说，然后就是忙碌的面试过程了。</p>\n<p>工作基本方向都是嵌入式，因为自己之前就是从事的嵌入式军工行业，对Linux、VxWorks比较熟悉，找工作当然也是跟这方面息息相关的，工资普遍会比在武汉高出一个3-4K的额度，对于我这样毕业一年的人，主要还是想定一个好点的行业与公司好好的发展发展，这样手上才有个屠龙技。非常感谢面试的那些公司，对我都比较友善，知道我刚来深圳，有的面试官在面试完后还会告诉我一些</p>\n<p>在第三天的时候面了一家做存储的公司，面的是嵌入式软件工程师，安排职位时是给的Go开发（后端开发）岗位，面试得比较愉快，当时手里已经拿了有几份offer了，所以对工作会有点自己的考虑。</p>\n<p>嵌入式对于我肯定是熟悉一点，在大学里，实习，工作所做的都是嵌入式开发，我也自学了Android开发，找的工作也有对Android方向的，这个方向的嵌入式虽没有互联网一些热门方向霸道，但不会太差，现在手里工作的offer工资也很好看。</p>\n<p>后端的职位，是使用Go开发，对比Java来说，足够小众，所做的内容我也可以说出其各种不好，但换个角度，我将其视作一个机会，一个我尝试的机会，在做嵌入式时，已经听闻很多CS方面的事了，单纯的，我想过去看看，可能不成功，大不了我就滚回去做嵌入式就可以了，谁还不允许我犯错了。</p>\n<p>心理足够忐忑，即使到了现在还是那么忐忑，想想这个决定可能对我的影响，中间还有大华的邀约，现在想来做出这个决定依然是很刺激的。</p>\n<h2><span id=\"五一前\">五一前</span></h2>\n<p>在武汉，出学校后，自己就不断的懈怠了，并没有在学校那种冲劲，对自己的发展比较迷茫，不知道路在哪里。</p>\n<p>之前是在一家做军工产品的公司工作，做的也是比较安逸，算是平静的发展吧。但我自己逐渐不太满足，因为我对自己的要求在逐渐下降，这让我自己很苦恼，我标准应该是一直提高啊。</p>\n<p>对于出去，我就想着出去走走，见见世面嘛，外面不见得会有多好，但没在外面待一段时间，哪里来的深刻对比呢？所以，还是出来走走比较靠谱。</p>\n<h2><span id=\"如今\">如今</span></h2>\n<p>对于两个方向，我都是个小白，嵌入式工作了两年，后端才刚开始，小白摸着石头过个河，路上见见更多的前辈恩师，还有更多的风景，求个快活。</p>\n<p>现在，我也是迷茫的，但我知道自己还是向前的，对自己是要求的。毕竟我还有追求。</p>\n<p>我追求嘛，谁都需要，谁都可以去实现。毕竟有一句话是，和尚摸得，我摸不得？</p>\n<p>哈哈，不怎么应景。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/03/29/重新见面，请多指教/\">重新见面，请多指教</a></li><li><a href=\"chunlife.top/2019/12/31/科学需要谨慎，知识需要校校验/\">科学需要谨慎，知识需要校验</a></li><li><a href=\"chunlife.top/2019/03/19/搜集赏/\">搜集赏</a></li><li><a href=\"http://yoursite.com/2020/03/28/swing/Shell-Script%E6%9D%A5%E6%96%B0%E5%8D%9A%E5%AE%A2/\">Shell Script更新博客</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"chunlife.top/tags/随笔/"}]},{"title":"使用Gateway","date":"2018-08-12T09:50:22.000Z","path":"2018/08/12/Gateway初次使用/","content":"<h2><span id=\"部署gateway\">部署Gateway</span></h2>\n<p>参考：<a href=\"http://github.com\" target=\"_blank\" rel=\"noopener\">github.com</a>\\fagongzi\\gateway\\docs\\<a href=\"http://build.md\" target=\"_blank\" rel=\"noopener\">build.md</a></p>\n<a id=\"more\"></a>\n<p>网关依赖于ETCD，用于设备发现服务，可使用如下命令进行安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> wget https://github.com/coreos/etcd/releases/download/v3.3.9/etcd-v3.3.9-linux-amd64.tar.gz </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span> tar -xzvf etcd-v3.3.9-linux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span> ./etcd  (默认配置运行即可)</span><br></pre></td></tr></table></figure>\n<p>根据build.md文档，生成apiserver和proxy可执行文件后，将两者启动。</p>\n<p>proxy使用的是80接口，可能会被占用，可使用“–addr”参数进行设置，apiserver默认使用9092作为HTTP Server接口，9093作为Rpc Server接口，可保持不变，若接口依然被占用，则可参考build.md文档中参数进行设置。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> ./apiserver &amp;</span><br><span class=\"line\"><span class=\"meta\">$</span> ./proxy --addr=:8088  &amp;</span><br></pre></td></tr></table></figure>\n<p>程序运行失败将打印error信息。</p>\n<h2><span id=\"docker部署gateway\">docker部署gateway</span></h2>\n<ul>\n<li>8080:80，将本机的8080端口映射至docker的80端口；</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -d -p 0.0.0.0:8080:80 -p 9095:9092 -p 9093:9093 fagongzi/gateway</span><br></pre></td></tr></table></figure>\n<h2><span id=\"编写测试\">编写测试</span></h2>\n<p>编写程序进行测试，用到gateway的client接口：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/fagongzi/gateway/pkg/pb/metapb\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/fagongzi/gateway/pkg/client\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/gin-gonic/gin\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> clusterA <span class=\"keyword\">uint64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\trouter := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">\trouter.GET(<span class=\"string\">\"/hello/1\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tc.JSON(http.StatusOK, <span class=\"string\">\"yes, this is hello\"</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">// 第一步： 创建Cluster，类似于服务分类</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := createCluster1(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Println(<span class=\"string\">\"1 error,\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">// 第二步： 对应真正的业务服务器</span></span><br><span class=\"line\">\terr := createServer1()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Println(<span class=\"string\">\"2 error,\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">// 第三步： 创建API，该API会被转发到ClusterA</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := createAPI1(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Println(<span class=\"string\">\"3 error,\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\trouter.Run(<span class=\"string\">\":8068\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">createCluster1</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tc, err := getClient()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tclusterA, err = c.NewClusterBuilder().Name(<span class=\"string\">\"cluster-A\"</span>).</span><br><span class=\"line\">\t\tLoadbalance(metapb.RoundRobin).Commit()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">createServer1</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tc, err := getClient()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsb := c.NewServerBuilder()</span><br><span class=\"line\">\t<span class=\"comment\">// 必选项</span></span><br><span class=\"line\">\tsb.Addr(<span class=\"string\">\"127.0.0.1:8068\"</span>).HTTPBackend().MaxQPS(<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tid, err := sb.Commit()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 把这个server加入到cluster A</span></span><br><span class=\"line\">\tc.AddBind(clusterA, id)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">createAPI1</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tc, err := getClient()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsb := c.NewAPIBuilder()</span><br><span class=\"line\">\t<span class=\"comment\">// 必选项</span></span><br><span class=\"line\">\tsb.Name(<span class=\"string\">\"用户API\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 设置URL规则，匹配所有开头为/api/user的请求</span></span><br><span class=\"line\">\tsb.MatchURLPattern(<span class=\"string\">\"/hello/(.+)\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 匹配GET请求</span></span><br><span class=\"line\">\tsb.MatchMethod(<span class=\"string\">\"GET\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 匹配所有请求</span></span><br><span class=\"line\">\t<span class=\"comment\">//sb.MatchMethod(\"*\")</span></span><br><span class=\"line\">\t<span class=\"comment\">// 不启动</span></span><br><span class=\"line\">\t<span class=\"comment\">//sb.Down()</span></span><br><span class=\"line\">\t<span class=\"comment\">// 启用</span></span><br><span class=\"line\">\tsb.UP()</span><br><span class=\"line\">\t<span class=\"comment\">// 分发到Cluster A</span></span><br><span class=\"line\">\tsb.AddDispatchNode(clusterA)</span><br><span class=\"line\"></span><br><span class=\"line\">\tid, err := sb.Commit()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"api id is: %d\"</span>, id)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果你的api server使用了\"--discovery\"参数启动</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getClientWithDiscovery</span><span class=\"params\">()</span> <span class=\"params\">(client.Client, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> client.NewClientWithEtcdDiscovery(<span class=\"string\">\"/services\"</span>,</span><br><span class=\"line\">\t\ttime.Second*<span class=\"number\">10</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"127.0.0.1:2379\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果你的api server没有使用\"--discovery\"参数启动</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getClient</span><span class=\"params\">()</span> <span class=\"params\">(client.Client, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> client.NewClient(time.Second*<span class=\"number\">10</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"127.0.0.1:9091\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"运行测试程序\">运行测试程序</span></h2>\n<p>若程序出现如下打印，代表程序运行成功。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2018/09/17 19:16:08.755386 [info] cluster &lt;1&gt; added, data &lt;id:1 name:\"cluster-A\" &gt;</span><br><span class=\"line\">2018/09/17 19:16:08.763781 [info] analysis: added, key=&lt;2&gt; interval=&lt;1s&gt;</span><br><span class=\"line\">2018/09/17 19:16:08.763872 [info] server &lt;2&gt; added, data &lt;id:2 addr:\"127.0.0.1:8068\" maxQPS:100 &gt;</span><br><span class=\"line\">2018/09/17 19:16:08.763883 [warning] server &lt;2&gt; heath check not setting</span><br><span class=\"line\">2018/09/17 19:16:08.763887 [info] server &lt;2&gt; UP</span><br><span class=\"line\">2018/09/17 19:16:08.771950 [info] bind &lt;1,2&gt; created</span><br><span class=\"line\">2018/09/17 19:16:08.771957 [info] bind &lt;1,2&gt; actived</span><br></pre></td></tr></table></figure>\n<p>可使用curl命令去测试接口：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> curl http://localhost:8088/hello/1</span><br></pre></td></tr></table></figure>\n<p>出现&quot;yes, this is hello&quot;，代表程序测试成功。</p>\n<h2><span id=\"部署gateway_ui\">部署gateway_ui</span></h2>\n<p>gateway有两个UI管理界面，这里我只部署了一个，gateway_ui。</p>\n<p><a href=\"https://github.com/archfish/gateway_ui\" target=\"_blank\" rel=\"noopener\">https://github.com/archfish/gateway_ui</a></p>\n<p><a href=\"https://github.com/wilehos/gateway_admin_ui\" target=\"_blank\" rel=\"noopener\">https://github.com/wilehos/gateway_admin_ui</a></p>\n<p>拉取镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull hub.c.163.com/weihailang/gateway_ui:latest</span><br></pre></td></tr></table></figure>\n<p>使用docker进行部署：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -d --restart always -p 3000:3000 --name gateway_ui -u 1001:1001 -h gateway.ui.production -e RAILS_ENV=production -e GATEWAY_BACKEND=172.31.242.128:9093 hub.c.163.com/weihailang/gateway_ui</span><br></pre></td></tr></table></figure>\n<p>由于没有登录鉴权接口（可以使用Nginx密码登录验证来代替），所以管理界面是不建立部署在外网环境中。</p>\n<p>UI使用docker部署是最为方便的，若UI使用docker部署，那么gateway也得使用docker进行部署，因为docker内的应用是无法访问到外网的，需要使用NAT技术进行桥接。以后的服务也是需要统一部署到docker中的。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"Gateway","slug":"Gateway","permalink":"chunlife.top/tags/Gateway/"}]},{"title":"比特币—-挖矿","date":"2018-08-11T14:42:02.000Z","path":"2018/08/11/比特币—-挖矿/","content":"<p>以前做嵌入式智能感叹比特币价格的疯狂，曾突破到一万多美元一枚的价格，让我流下了没有技术的泪水，现在却是可以理解理解到底啥玩意叫个区块链，啥叫个比特币了。</p>\n<a id=\"more\"></a>\n<h1><span id=\"区块链与比特币\">区块链与比特币</span></h1>\n<p>区块链可以说是类比特币技术的一个大的集合，囊括了其一个整体的技术演变而来，并不与比特币相等同。</p>\n<p>比特币的出现很多地方应该是吸收了很多“密码朋克”这个组织的很多成果，对于这个组织里面的人，我只能表示佩服，很了不起。2008年中本聪发表的比特币白皮书——《比特币：一个点对点的电子现金系统》，其提出的去中心化思想确实厉害，更应该让我感到佩服的是，这个东西不仅仅是一个白皮书一样的存在，它让这个思想具象化了。</p>\n<h2><span id=\"比特币\">比特币</span></h2>\n<p>比特币是一种数字货币。</p>\n<p>当我们共同承认它具有价值时，它就具有了购买力。举个例子：RMB是国家给予其价值，那么其就被赋予了价值，那数字货币也一样。</p>\n<h3><span id=\"区块\">区块</span></h3>\n<p>比特币使用Hash进行校验，使用Hash对内容进行Hash计算，得出Hash值，拿这个值进行内容校验。</p>\n<p><img src=\"1534000072795.png\" alt=\"1534000072795\"></p>\n<p>拿以后的区块，会将前一个Hash值与当前内容一起进行Hash计算，得到一个现在区块持有的Hash值。</p>\n<p><img src=\"1534000007496.png\" alt=\"1534000007496\"></p>\n<p>区块不断在累加，逐渐累积成链。我们若是需要验证区块，那么只需要抽取链最后一个区块Hash进行校验即可。</p>\n<p><img src=\"1533999959460.png\" alt=\"1533999959460\"></p>\n<h3><span id=\"账户所有权\">账户所有权</span></h3>\n<p>比特币很安全，安全的原因是分布式账本上没有存储任何个人信息，交易信息的对接使用的是“地址”（账号），也就是地址对地址间的通信，那地址是什么呢？</p>\n<p>一个“地址”对应于一个私钥，私钥是唯一的，其不可重置。地址与私钥为非对称关系，也就是说私钥可进行两次Hash计算后得到地址，而地址是不可进行逆推的（可查看RSA加密解密）。</p>\n<p><img src=\"1534000622004.png\" alt=\"1534000622004\"></p>\n<p>利用非对称密钥，公钥是开放出去的，验证私钥的过程既是使用公钥验证的过程。</p>\n<p><img src=\"1534061724465.png\" alt=\"1534061724465\"></p>\n<p>然后将个交易记录广播给其他节点，由其他节点去验证信息的正确。</p>\n<h3><span id=\"挖矿\">挖矿</span></h3>\n<p>挖矿的过程既是记账的过程，记账需要提供算力，使用Hash算法打包记录，而比特币作为记账的奖励分发给用户。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"http://ssrshare.github.io/2020/02/19/darkweb-42/\">暗网洗钱——价值超过35个比特币</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"区块链","slug":"区块链","permalink":"chunlife.top/tags/区块链/"},{"name":"比特币","slug":"比特币","permalink":"chunlife.top/tags/比特币/"}]},{"title":"RSA加密解密","date":"2018-07-29T13:43:46.000Z","path":"2018/07/29/RSA加密解密/","content":"<p>因为项目需要，最近做一个RSA加密解密的接口，使用Go进行开发，接口使用jsonrpc，go 对RSA加密解密有很好的支持，不过由于受限于底层单片机，所以上层应用需要做一些稍微的调整。</p>\n<h2><span id=\"一-概要\">一、概要</span></h2>\n<p>RSA是一种非对称加密算法，什么是非对称加密算法呢，那就是公钥、私钥可互相进行加密解密：公钥加密—私钥解密，私钥加密—公钥解密。</p>\n<p>了解RSA算法的实现原理，可参考：<a href=\"https://www.cnblogs.com/fangxupeng/p/4128990.html\" target=\"_blank\" rel=\"noopener\">非对称加密过程详解（基于RSA非对称加密算法实现）</a></p>\n<p>RSA算法的基本原理（截图的来源没有保留链接，若侵权请直接告诉我，我会直接删除的）：</p>\n<p><img src=\"1537603491913.png\" alt=\"1537603491913\"></p>\n<h2><span id=\"三-rsa一些名词的解释\">三、RSA一些名词的解释</span></h2>\n<p>什么是PKCS#1，PKCS（公钥密码标准），而#1就是RSA的标准。</p>\n<p>PEM文件，也就是公私钥的编码格式。</p>\n<p>RSA算法的原理：<a href=\"https://blog.csdn.net/starryheavens/article/details/8536238\" target=\"_blank\" rel=\"noopener\">RSA算法详解</a>，从这篇博客主要是提取出RSA算法的公式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C=(P^e)%n</span><br></pre></td></tr></table></figure>\n<p>N是公钥私钥共同使用的，其为模数。另外还有公钥的指数E，私钥的指数E。</p>\n<p>公钥的指数一般是65537，私钥的指数则是一个极大的数，想想一个极大的数作为指数，计算时间是会耗费很长时间的。故公钥加密解密都很快，私钥则会慢很多</p>\n<h2><span id=\"二-go中的rsa加密解密\">二、Go中的RSA加密解密</span></h2>\n<p>RSA标准是通过公钥加密，私钥解密 ，没有私钥加密，公钥解密。为什么会这样呢？</p>\n<p>Go设计库一般会严格按照标准来进行设计（在很多地方都见过相似做法），那是RSA标准中没有后一种情况的使用场景吗？其实是有的，只不过这个过程不要加密解密，而是RSA签名与验签。所以按照标准，RSA标准库也就不会有私钥加密，公钥解密的方法了。</p>\n<p>这个问题想想应该是很多人的问题了，那么在Google上进行搜索了下，还是发现了解决方法。</p>\n<p><a href=\"https://github.com/wenzhenxi/gorsa\" target=\"_blank\" rel=\"noopener\">https://github.com/wenzhenxi/gorsa</a></p>\n<p>库中实现了公钥加解密的方法。</p>\n<p>还有其他解决方法吗？是有的，在Google上进行搜索就可以找到，记得还有人使用CGO调用C库来解决。</p>\n<h2><span id=\"四-go-rsa库的使用\">四、Go RSA库的使用</span></h2>\n<p>标准库的使用者很多，博客也很多，这里不做多的介绍，放上一个博主的链接。</p>\n<p><a href=\"http://blog.studygolang.com/2013/01/go%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E4%B9%8Brsa/\" target=\"_blank\" rel=\"noopener\">GO加密解密之RSA</a></p>\n<h2><span id=\"五-项目中的问题\">五、项目中的问题</span></h2>\n<p>此处，由于我的问题比较特殊，所以到此并没完全解决我的问题，还记得上面说的RSA指数与模数的东西吗，因为上层是与<code>stm32</code>进行通信，<code>stm32</code>RSA的库是需要自己手动将指数与模数填入结构体中的，那么上层就应该将生成的私钥进行分解开来，得到<code>stm32</code>所需要的指数和模数，那么怎么得到这些数据呢。</p>\n<p>我使用的方法是借用OpenSSL，理论上来说像Python就可以做到，但是我并不想将事情复杂化，直接借用现有的工具是最省事的。</p>\n<p>参考：<a href=\"https://blog.csdn.net/junkie0901/article/details/40539857\" target=\"_blank\" rel=\"noopener\">如何用 openssl 生成RSA双密匙；签名证书；加密文件邮件</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl rsa -in private.pem -text -noout</span><br></pre></td></tr></table></figure>\n<p>-noout : 表示不显示密钥</p>\n<p>运行结果：</p>\n<p><img src=\"1533047035026.png\" alt=\"1533047035026\"></p>\n<p><code>modulus</code>、<code>publicExponent</code>、<code>privateExponent</code>，这三个数就是我们所需要的数据（<code>publicExponent</code>一般算法会设为<code>65537</code>）。</p>\n<p>那么此处就很简单的进行字符串截取就可以做到拿出这三个数据了。</p>\n<blockquote>\n<p>那通过库可以获取到这些数据吗？</p>\n<p>答案：那是当然可以的，因为秘钥就是由这些大数组成的，以之前提到的库为例，在结构体<code>RSASecurity</code>中，prikey.D即为<code>privateExponent</code>，prikey.N即为<code>modulus</code>。</p>\n</blockquote>\n<h2><span id=\"六-aes加密解密\">六、AES加密解密</span></h2>\n<p>既然提到了RSA，不对称加密算法了，那么也去了解了解AES对称加密算法吧。</p>\n<p><a href=\"https://blog.csdn.net/yue7603835/article/details/73395580\" target=\"_blank\" rel=\"noopener\">golang实现AES ECB模式的加密和解密</a></p>\n<p>Go的实现可参考贴出来的链接，不过此处给出我遇到的一个问题。</p>\n<p>截取自博客中的原文：</p>\n<p><img src=\"1533047635959.png\" alt=\"1533047635959\"></p>\n<p>标记出来的话，其实是有问题的，AES算法，区块长度是固定的，为128bit。</p>\n<p>摘抄自<a href=\"https://baike.baidu.com/item/aes/5903?fr=aladdin\" target=\"_blank\" rel=\"noopener\">百度百科</a>：严格地说，AES和Rijndael加密法并不完全一样（虽然在实际应用中二者可以互换），因为Rijndael加密法可以支持更大范围的区块和密钥长度：AES的区块长度固定为128比特，密钥长度则可以是128、192、256比特；而Rijndael使用的密钥和区块长度可以是32位的整数倍，以128位为下限，256比特为上限。加密过程中使用的密钥是由Rijndael密钥生成方案产生。</p>\n<p>在golang的源码设计中也可以证明这点，其blocksize设定为const，其值为16(byte)，显然，标准库是并不允许使用者去修改这个值的，那么AES-128/192/256，其实是针对的密钥长度来说的。</p>\n<p>另外，使用go AES库需要注意的是，go aes输入的密钥不满足16、24、32的要求，会直接返回错误，其并没有设计补全机制，需要自己实现。</p>\n<p>数据块长度不足128bit，其同样也需要补全；很遗憾的是go依然没有帮助自动补全。补全方式有多种，一般常见的是zeropadding，pkcs5padding，pkcs7padding。</p>\n<p>参考<a href=\"https://studygolang.com/articles/6662\" target=\"_blank\" rel=\"noopener\">golang AES/ECB/PKCS5 加密解密 url-safe-base64</a></p>\n<p>博客使用的是pkcs5padding，这里补上zeropadding。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ZeroPadding</span><span class=\"params\">(ciphertext []<span class=\"keyword\">byte</span>, blockSize <span class=\"keyword\">int</span>)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">\tpadding := blockSize - <span class=\"built_in\">len</span>(ciphertext)%blockSize</span><br><span class=\"line\">\tpadtext := bytes.Repeat([]<span class=\"keyword\">byte</span>&#123;<span class=\"number\">0</span>&#125;, padding) </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">append</span>(ciphertext, padtext...)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ZeroUnPadding</span><span class=\"params\">(origData []<span class=\"keyword\">byte</span>)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> bytes.TrimFunc(origData,</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(r <span class=\"keyword\">rune</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> r == <span class=\"keyword\">rune</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>附上我写的填充key的代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">KeyPadding</span><span class=\"params\">(key <span class=\"keyword\">string</span>)</span> <span class=\"params\">(keyByte []<span class=\"keyword\">byte</span>)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tkeyLen := <span class=\"built_in\">len</span>(key)</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> keyLen &lt; <span class=\"number\">16</span>:</span><br><span class=\"line\">\t\tkeyByte = ZeroPadding([]<span class=\"keyword\">byte</span>(key), <span class=\"number\">16</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> keyLen &gt; <span class=\"number\">16</span> &amp;&amp; keyLen &lt; <span class=\"number\">24</span>:</span><br><span class=\"line\">\t\tkeyByte = ZeroPadding([]<span class=\"keyword\">byte</span>(key), <span class=\"number\">24</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> keyLen &gt; <span class=\"number\">24</span> &amp;&amp; keyLen &lt; <span class=\"number\">32</span>:</span><br><span class=\"line\">\t\tkeyByte = ZeroPadding([]<span class=\"keyword\">byte</span>(key), <span class=\"number\">32</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> keyLen &gt; <span class=\"number\">32</span>:</span><br><span class=\"line\">\t\tkeyByte = []<span class=\"keyword\">byte</span>(key)[:<span class=\"number\">32</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\tkeyByte = []<span class=\"keyword\">byte</span>(key)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> keyByte</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"七-使用的方法\">七、使用的方法</span></h2>\n<h3><span id=\"bytesjoin将byte数组的数组进行组合\">bytes.Join将byte数组的数组进行组合</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bytes.Join(pBytes, []<span class=\"keyword\">byte</span>(<span class=\"string\">\"\"</span>))</span><br></pre></td></tr></table></figure>\n<p>第二个参数表示数组间用什么去间隔</p>\n<h3><span id=\"将一个大数按大小端转换为byte数组模式\">将一个大数按大小端转换为byte数组模式</span></h3>\n<p>binary.BigEndian.PutUint64</p>\n<p><a href=\"https://blog.csdn.net/coledaddy/article/details/71195528\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/coledaddy/article/details/71195528</a></p>\n<h3><span id=\"返回子串在字符串中的索引\">返回子串在字符串中的索引</span></h3>\n<p>例如strings.Index(str, “modules”)，返回的是开始出现&quot;modules&quot;的位置，即&quot;m&quot;。</p>\n<h3><span id=\"将数组转换为以分割的字符串\">将数组转换为以“,”分割的字符串</span></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings.Replace(strings.Trim(fmt.Sprint(byteArr),<span class=\"string\">\"[]\"</span>), <span class=\"string\">\" \"</span>, <span class=\"string\">\",\"</span>, <span class=\"number\">-1</span>)</span><br></pre></td></tr></table></figure>\n<h3><span id=\"将十六进制的字符转换为整数\">将十六进制的字符，转换为整数</span></h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strconv.ParseUint(data, 16, 8)</span><br></pre></td></tr></table></figure>\n<p>data：字符，16：进制，8：转换数据的大小，8则是8bit。</p>\n<h3><span id=\"openssl\">OpenSSL</span></h3>\n<p>1）生成RSA私钥：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">genrsa -out rsa_private_key.pem 1024</span><br></pre></td></tr></table></figure>\n<p>2）把RSA私钥转换成PKCS8格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM –nocrypt</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>生成RSA公钥</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem</span><br></pre></td></tr></table></figure>\n<p><strong>将文件数据转为一行字符串：</strong></p>\n<p><em>awk BEGIN{RS=EOF}’{gsub(/\\n/,&quot;_&quot;);print}’ file</em></p>\n<h2><span id=\"2018年8月22日173832\">2018年8月22日17:38:32</span></h2>\n<p>本来以为rsa加密解密的事都要翻篇了，谁知道底层突然和我说交互出了问题，<code>stm32</code>使用的RSA是官方库，Go使用的是官方库，理论上不应该有什么问题的，但实际上就是出了问题。</p>\n<p>问题是这样的，Go使用私钥加密，<code>stm32</code>无法使用公钥进行解密；<code>stm32</code>使用私钥加密，Go无法进行公钥解密。但双方公钥加密，对方都可以进行私钥解密。</p>\n<p>然后花了一天的时间的去细细的琢磨这个事，觉得这个过程还是很有意思的。</p>\n<blockquote>\n<p>首先，则是两方都去检查源码是否出现使用错误，在互相review代码确认无误，这样不会造成总是去怀疑对方的代码，至少在使用上都是按照官方文档进行的操作。</p>\n</blockquote>\n<blockquote>\n<p>第二步，再三确认私钥加密，公钥解密这个种非标用法是可行的。因为RSA签名和验证过程是包含有私钥加密，公钥解密的，这个点是不需要再去考虑正确性的。</p>\n</blockquote>\n<blockquote>\n<p>第三步，双方通讯无法通过对方，那么很自然的就会想到，先抛弃掉对方，使用另外一种标准库，或者是语言的标准库来佐证自己的库的正确性，这里我选择的是使用OpenSSL的接口，使用CGo，调用的OpenSSL的接口，放上借用的库链接https://github.com/dgkang/rsa，最终测试结果是与Go库中的结果是一样的。我这里用的库是https://github.com/wenzhenxi/gorsa，因为官方库并没有将RSA私钥加密暴露出来，若需要使用的话就需要自己动手了。</p>\n</blockquote>\n<blockquote>\n<p>第四步，我单方面的证明了Go库没有问题，此时怀疑的方向就只能是<code>stm32</code>官方库出了问题，哪里出了问题呢。偶然地，在使用https://github.com/dgkang/rsa库时，OpenSSL上报错信息是：error:0407006A:rsa routines:RSA_padding_check_PKCS1_type_1:block type is not 01。这个报错信息很关键，<code>stm32</code>库上说的是PKCS1 padding方式，那现在OpenSSL又报出了type方式不同，那只能说明这是有点问题。使用了库的nopadding方式，可以解密出来的数据都打印出来（PKCS1会直接返回数据，填充的信息会直接过滤掉）。</p>\n</blockquote>\n<p><img src=\"clip_image001.png\" alt=\"img\"></p>\n<p>在调试时，这些数据也是一头雾水的，实际打印的信息是下面的，我实际想要的是后面的数字，这个byte数组和string乱码看的也是脑袋大，为了搞清楚这个，需要了解加密填充信息。</p>\n<p><img src=\"clip_image002.png\" alt=\"img\"></p>\n<hr>\n<blockquote>\n<p>以下介绍填充方式的知识皆参考自：</p>\n<p>RSA_PKCS1_PADDING</p>\n<p>来自 &lt;<a href=\"https://www.douban.com/note/338531480/\" target=\"_blank\" rel=\"noopener\">https://www.douban.com/note/338531480/</a>&gt;</p>\n<p>padding的三种方式：</p>\n<p>RSA加密常用的填充方式有下面3种：</p>\n<p>1.RSA_PKCS1_PADDING 填充模式，最常用的模式</p>\n<p>要求:</p>\n<p>输入：必须 比 RSA 钥模长(modulus) 短至少11个字节, 也就是　RSA_size(rsa) – 11</p>\n<p>如果输入的明文过长，必须切割，然后填充</p>\n<p>输出：和modulus一样长</p>\n<p>2.RSA_PKCS1_OAEP_PADDING</p>\n<p>输入：RSA_size(rsa) – 41</p>\n<p>输出：和modulus一样长</p>\n<p>3.RSA_NO_PADDING　　不填充</p>\n<p>输入：可以和RSA钥模长一样长（因为不填充，必须要填入模长），如果输入的明文过长，必须切割，然后填充</p>\n<p>输出：和modulus一样长</p>\n<p>其中PKCS1需要遵守的填充规则是</p>\n<p><img src=\"clip_image003.png\" alt=\"img\"></p>\n<p>可以看到数据组成方式是有着固定的规则的。</p>\n<p>那再看看我们从<code>stm32</code>解密出来的数据，可以看到这个数据有点问题，明明是私钥加的密，开头确实0 2，大概率这里有问题。</p>\n<p><img src=\"clip_image001-1534941259919.png\" alt=\"img\"></p>\n<p>于是我在我的私钥加密中，将这位修改成2，将数据发给<code>stm32</code>,32那边随即便将数据返回出来了。</p>\n<p>还有一个问题，那就是为什么PKCS标准需要留11个字节呢。</p>\n<p><img src=\"clip_image004.png\" alt=\"img\"></p>\n<p>这11个字长那么大概率就是为了增加秘钥安全性所预留的随机数了。</p>\n<p>至此，算是终于将问题找到，并找到解决的办法了，解决问题大概是经历了那几个步骤，中间夹杂着各种尝试，当然写出来的却是每一步走得都很正确，中间与人沟通的成本不低，沟通愉快的时候解决问题的方法就会非常的多。</p>\n</blockquote>\n<h3><span id=\"golang实现nopadding模式\">Golang实现Nopadding模式</span></h3>\n<p><a href=\"https://stackoverflow.com/questions/40870178/golang-rsa-decrypt-no-padding\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/40870178/golang-rsa-decrypt-no-padding</a></p>\n<p><img src=\"123.png\" alt=\"Nopadding\"></p>\n<p>提供解决方法的人特意提醒了，若用户有选择，请尽量不要使用这种填充方式，并给出了提供意见的链接。（不得不说，做事真的严谨）</p>\n<p><a href=\"https://crypto.stackexchange.com/a/15184\" target=\"_blank\" rel=\"noopener\">https://crypto.stackexchange.com/a/15184</a></p>\n<p>我这里直接截取出结论来，具体如何得出结论的，还是希望大家能够读一读原文。</p>\n<p><img src=\"1234.png\" alt=\"Do Not use RSA\"></p>\n<p>不要使用RSA不填充方式，其是一种裸RSA加密方式，</p>\n<p>① 在任何公钥加密场合，当明文具有低熵（低混乱度）时，它是不安全的。</p>\n<p>② 短明文易受到攻击。</p>\n<p>其中，作者还建议为了保证算法的加密性，那么就应该保护算法的随机性，加密的数据不应该太多，2048bit key，最好只加密0-190字节的数据，如果不能满足，应该考虑使用混合加密算法。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"OpenSSL","slug":"OpenSSL","permalink":"chunlife.top/tags/OpenSSL/"},{"name":"RSA加密解密","slug":"RSA加密解密","permalink":"chunlife.top/tags/RSA加密解密/"}]},{"title":"搭建博客——使用Hexo","date":"2018-07-22T15:32:05.000Z","path":"2018/07/22/搭建博客——使用Hexo/","content":"<h2><span id=\"搭建博客\">搭建博客</span></h2>\n<p>使用GitHub和Hexo搭建博客其实是非常顺畅的，毕竟工具到现在都已经经历很多版本的迭代了，已经很傻瓜式了。</p>\n<p>推荐搭建的教程：</p>\n<p>关于Hexo6.0搭建个人博客(github+Google-收录篇)，博主还有教我们怎么收录百度的博客，道理是一样的。</p>\n<p><a href=\"https://www.imooc.com/article/31085\" target=\"_blank\" rel=\"noopener\">https://www.imooc.com/article/31085</a></p>\n<p>这里提一点绑定的事，附上我的DNS解析：</p>\n<p><img src=\"1532523945344.png\" alt=\"DNS解析\"></p>\n<h2><span id=\"插入图片\">插入图片</span></h2>\n<h3><span id=\"遇到的问题\">遇到的问题</span></h3>\n<p>这里主要是提一下我遇到的一个插入图片的问题，这里我使用的Hexo主题是yilia。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure>\n<p>yilia需要会提示我们安装一个插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-generator-json-content --save</span><br></pre></td></tr></table></figure>\n<p>但很奇怪的是，我在安装完这个插件后，我的hexo-asset-image——图片链接转换插件就不见了，导致我莫名其妙的图片无法显示了，Google多次无果，重新部署时才发现这个问题（没有细心去找），实在是没想到会出现这个问题，所以在装完这个插件后，又手动将hexo-asset-image插件给安装了回来，之后网页和本地都没有显示问题了，撒花。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n<p>当然，我还看到有人遇到图片显示不出来的其他问题，如果和你的问题对上了，可以看看：</p>\n<p>hexo中完美插入本地图片</p>\n<p><a href=\"http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/\" target=\"_blank\" rel=\"noopener\">http://etrd.org/2017/01/23/hexo中完美插入本地图片/</a></p>\n<p><strong>方便的做法：</strong><a href=\"https://hexo.io/zh-cn/docs/asset-folders.html\" target=\"_blank\" rel=\"noopener\">HERE</a>。</p>\n<img src=\"image-20210625110123310.png\" alt=\"相对路径引用图片\" style=\"zoom:67%;\">\n<h3><span id=\"2018年7月25日205420\">2018年7月25日20:54:20</span></h3>\n<p>在这个时候又添加上这段话，是因为博客无法显示图片了，hexo-asset-image好像无法替我正常转换图片路径了，对JS的源码无法分析，只能提一个issue，同时在网上查找答案，在白天的时候找到一个方法，将其截图，准备晚上试试，发现这个方法好像确实好使。</p>\n<p><strong>注意</strong>：使用该方法则不能保留hexo-asset-image，直接去module目录删除即可。</p>\n<p><img src=\"1532523531403.png\" alt=\"Hexo插入图片方法\"></p>\n<p>原链接没有保存，故无法放出链接了，需要的可自行Google。</p>\n<p>修改后可配合Typora使用，其在“编辑”——“图片工具”中，可设置图片根目录，将其定位到图片所在即可。</p>\n<p>也就是使用Markdown插入图片的语法即可，当然，图片得放在相对路径上。</p>\n<h3><span id=\"2020年11月23日\">2020年11月23日</span></h3>\n<p>换了主题：Maupassant，非常好用，<a href=\"https://www.haomwei.com/technology/maupassant-hexo.html\" target=\"_blank\" rel=\"noopener\">大道至简——Hexo简洁主题推荐</a>。简单纯粹，一些具体的操作，可以看博主的issue，大概率都能找到解决方法。</p>\n<p>若需要增加广告，这里有一篇：<a href=\"http://conxz.net/2019/12/25/google-adsense-add-to-hexo/\" target=\"_blank\" rel=\"noopener\">添加Google AdSense到Hexo博客</a>。</p>\n<h3><span id=\"参考的博客\">参考的博客</span></h3>\n<p><a href=\"https://www.voidking.com/2018/06/11/deve-hexo-categories/\" target=\"_blank\" rel=\"noopener\">Hexo添加categories页面</a>，<a href=\"https://yanxin152133.github.io/2019/03/21/Hexo%20yilia%20%E6%B7%BB%E5%8A%A0%E7%9B%AE%E5%BD%95%E9%A1%B5%E9%9D%A2/\" target=\"_blank\" rel=\"noopener\">Hexo Yilia 添加目录页面</a></p>\n<p>Hexo——Yilia主题添加文章置顶</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall hexo-generator-index --save</span><br><span class=\"line\">npm install hexo-generator-index-pin-top --save</span><br><span class=\"line\"></span><br><span class=\"line\">// 文章头加入</span><br><span class=\"line\">Top: True</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://lonepatient.top/2018/02/03/hexo_yilia_2.html\" target=\"_blank\" rel=\"noopener\">GitHub+Hexo+yilia文章浏览量统计</a></p>\n<p><a href=\"https://lonepatient.top/2018/02/02/hexo_yilia_1.html\" target=\"_blank\" rel=\"noopener\">GitHub+Hexo+yilia评论插件</a></p>\n<p><a href=\"http://veronachiu.site/2018/08/03/Hexo-Yilia%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%EF%BC%9AHexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-Hexo%E6%96%87%E7%AB%A0%E4%B9%A6%E5%86%99-Yilia%E9%85%8D%E7%BD%AE/\" target=\"_blank\" rel=\"noopener\">Hexo+Yilia博客搭建：Hexo常用命令+Hexo文章书写+Yilia配置</a></p>\n<p><a href=\"http://lawlite.me/2017/04/13/Hexo-Github%E5%AE%9E%E7%8E%B0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/\" target=\"_blank\" rel=\"noopener\">Hexo+Github实现相册功能</a></p>\n<p><a href=\"http://lawlite.me/2017/04/17/Hexo-yilia%E4%B8%BB%E9%A2%98%E5%AE%9E%E7%8E%B0%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95%E5%92%8C%E6%B7%BB%E5%8A%A0%E8%A7%86%E9%A2%91/\" target=\"_blank\" rel=\"noopener\">Hexo+yilia主题实现文章目录和添加视频</a></p>\n<p><a href=\"https://www.jianshu.com/p/cb0a105d7a81\" target=\"_blank\" rel=\"noopener\">Hexo Yilia主题增加分享以及访问统计</a></p>\n<p><a href=\"https://ziven.cc/2018/07/03/Hexo%E4%B8%BB%E9%A2%98yilia%E5%A2%9E%E5%8A%A0gitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/\" target=\"_blank\" rel=\"noopener\">Hexo主题yilia增加gitalk评论插件</a></p>\n<p><a href=\"https://github.com/litten/hexo-theme-yilia/pull/767\" target=\"_blank\" rel=\"noopener\">Yilia Pull Request</a></p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"www.chunlife.top/2018/07/22/搭建博客——使用Hexo/\">搭建博客——使用Hexo</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"搭建博客","slug":"搭建博客","permalink":"chunlife.top/tags/搭建博客/"}]},{"title":"go里面的io Writer操作","date":"2018-07-12T10:17:59.000Z","path":"2018/07/12/go里面的io-Writerr操作/","content":"<p>将string转换成 io.Writer，可以进行类似于write的操作，类似于写文件一样。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s := <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\">buf := bytes.NewBufferString(s)</span><br><span class=\"line\">fmt.Fprint(buf, <span class=\"string\">\", World!\"</span>)</span><br><span class=\"line\">fmt.Println(buf.String())</span><br></pre></td></tr></table></figure>\n<p>同样的，打开的文件也可以被转换成 io.Writer，继而直接向其写入数据。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f, err := os.OpenFile(fileName, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, os.ModePerm)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">w := bufio.NewWriter(f)</span><br><span class=\"line\">fmt.Fprintln(w, fmt.Sprintf(<span class=\"string\">\"start analysis log at the %s \\r\\n\"</span>, <span class=\"string\">`\"`</span>+logFileDir+<span class=\"string\">`\"`</span>))</span><br></pre></td></tr></table></figure>\n<p>以上不管是写文件还是写字符串，在需要大量写时，效率即会体现出来。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/04/09/服务器文件分片合并下载/\">服务器文件分片合并下载</a></li><li><a href=\"chunlife.top/2020/04/01/json-tag-中的inline属性/\">json tag 中的inline属性</a></li><li><a href=\"chunlife.top/2020/04/01/json-解析int到string类型中/\">json 解析int到string类型中</a></li><li><a href=\"https://abelsu7.top/2019/11/10/gops-intro/\">gops：Go 程序查看和诊断分析工具简介</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"Go","slug":"Go","permalink":"chunlife.top/tags/Go/"},{"name":"write","slug":"write","permalink":"chunlife.top/tags/write/"}]},{"title":"对如今手机的看法——仅兴趣","date":"2017-12-01T13:43:46.000Z","path":"2017/12/01/对如今手机的看法——仅兴趣/","content":"<p>现在手机大概已经细分成了两大阵营，Android和iOS。</p>\n<a id=\"more\"></a>\n<p>当然国内的Android大多是安卓，称得上Android的倒是一些国外原生，例如HTC、索尼大法等，当然要说国内使用原生就是好用那就是太尴尬了，总体来说，国内的系统大体上应该都是差不多的水平（系统稳定性方面，当然还有底层功耗的控制和系统UI的设计方面），主要是看各大厂商对系统易用性的把控，这里面功力深厚的一批是：MIUI、Flyme、EMUI（UI不行外其实还可以），手机系统界的新贵则是smartisan os，个人是比较喜欢锤子的，现在手机牌桌上的玩家越来越少了，能有个创新的玩家是用户们的希望啊。</p>\n<p>IOS阵营就不说了，其优点可能并不是一个真正意义上的创新者，但它从来都不缺顶尖的技术，通过顶尖的技术对当下的热门领域进行加工，即可得到远超行业大众水平，甚至直接就变成行业第一，从技术的布道上，apple喜欢进行一些新尝试时，又拿出另一些东西，以此来构成一套完整的解决方案。（比如，取消3.5mm耳机接口，发布AirPods）。</p>\n<p>两大系统的整体趋势来看，Android比之前是越来越好用了，开源导致生态混乱同时，丰富的代码量的优势也在体现；iOS比之前没那么好用了也是一个事实，毕竟系统最新版的稳定性是有目共睹，但这并不说明Android就已经干倒iOS，至少在认知上Android还是有一段距离才能赶上iOS的。老实说，抛开硬件来说，在易用性上，Android和iOS应该是没有太大的差距的。</p>\n<p>为啥要抛开硬件呢，额，这个对Android阵营来说实在是个忧伤的话题，每年科技春晚（苹果发布会）发布的芯片基本是默秒全，根本不管你Android阵营到底来了神马黑科技，反正都没我黑，基本对比硬件提升，苹果也是只和自家产品比。到现在，Android阵营理由跟上来几个拼桌子的玩家了，华为，联发科，Samsung，高通等等，至少现在高通晓龙835性能还是很强的，配合Android在用户体验上至少不会因为实际应用上出现芯片翻车的情况，具体使用的发挥就是看各家软件体验的优化了。在基础硬件堆砌时代基本过去后，现在大家都忙着建立手机优质标签，避免手机同质化的产生，做到我有你无的地步，最低也是至少要让别人一段时间有不了，比如买断某款芯片几个月，或者买一套比较狠的拍照算法，最狠就是自己研发一套迥异的技术，华为的莱卡，锤子的软件创新等，都是用心的地方，打马后炮说，应该就是他们成功的一小部分原因吧（可能）。</p>\n<p>以用户视角来看现在的手机行业，很明显的感觉是手机同质化已经非常严重了，大家的敌人也很明确，冒尖的那个且引领潮流的玩法，大家就一起去玩；行业领导者怎么玩，大家就一起去玩。如果不这么做，结局估计会不怎么好，向大佬低头，你不会变成大佬，但至少你不会死。像现在，手机大牌玩家已经基本准备完毕，也就说供应链的大主顾已经基本确定，小玩家品牌不被主流人群认可，不被顶尖供货商认可，而且还有名牌厂商的贴牌机在低端市场以非常细分的价格收割不同的人群，那还有啥可以玩的。</p>\n<p>手机同质化是一个问题，但是好歹顶尖厂商都有自家的黑科技，但是Android阵营中的特色软件生态不太令人满意，说起来Android用的和之前能有啥区别呢，我们用户在使用时，用户体验并不是完全是硬件决定的，软件的使用也是个问题，各种毒瘤，崩溃，上传隐私数据等，都是让人恼火的问题，这个时候得拿出信仰之锤——锤子科技了，希望它能走下去，它做的软件创新让我们用户可以为之欢呼。各大厂商也在做，希望能做得快一些，赶紧把竞争战场换到这里来，这样，我们用户估计就有福想了哦。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2020/03/29/重新见面，请多指教/\">重新见面，请多指教</a></li><li><a href=\"chunlife.top/2019/12/31/科学需要谨慎，知识需要校校验/\">科学需要谨慎，知识需要校验</a></li><li><a href=\"chunlife.top/2019/03/19/搜集赏/\">搜集赏</a></li><li><a href=\"http://yoursite.com/2020/03/28/swing/Shell-Script%E6%9D%A5%E6%96%B0%E5%8D%9A%E5%AE%A2/\">Shell Script更新博客</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"chunlife.top/tags/随笔/"}]},{"title":"PCI串口编程","date":"2017-11-03T08:17:51.000Z","path":"2017/11/03/PCI串口编程/","content":"<h2><span id=\"一-硬件环境\">一、硬件环境</span></h2>\n<p>硬件开发环境是PCI9054+FPGA，16串口或8串口。</p>\n<a id=\"more\"></a>\n<p>软件开发平台则是linux、VxWorks。</p>\n<p>主要是运用在工控领域，在一般商用平台可能用不到这玩意。</p>\n<h2><span id=\"二-pci相关知识\">二、PCI相关知识</span></h2>\n<p>PCI相关知识主要是参考了网上一些前辈写的博文，这里将其贴出来，以免后来人继续收集。</p>\n<p>PCI 总线学习笔记-PCI9054  <a href=\"http://blog.csdn.net/lg2lh/article/details/8042008\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/lg2lh/article/details/8042008</a></p>\n<p>PCI设备的地址空间               <a href=\"http://www.cnblogs.com/zszmhd/archive/2012/05/08/2490105.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/zszmhd/archive/2012/05/08/2490105.html</a></p>\n<p>另外《linux设备驱动开发详解》（宋宝华）也有附带讲一些PCI驱动的编程，可以去瞄一瞄。</p>\n<p>第一篇博文主要是介绍PCI9054的相关信息，知道这个片子是怎么做的，以及其是如何将FPGA和PC机连接起来，熟悉硬件原理。在实际的编程中，我们可能根本感觉不到这个片子，作为一个“桥片”，操作系统其实都已经将厂商的驱动给集成了，并不会说还需要我们来进行过多的编程。</p>\n<p>第二篇博文具体内容很重要，是PCI设备的特性属性，但作为使用者，其实我们用到的只是PCI的地址空间，其他的暂时不用理会，PCI地址空间即是系统在启动时，PCI设备向CPU大佬申请的一段独有的地址空间以供自己使用，这段地址的相关信息也就存储在PCI配置空间的BAR(Base Address Registers)中。</p>\n<p>在linux中，需要调用相关的API函数就能将BAR的信息取出进行使用了。</p>\n<p>三、编程相关信息</p>\n<p>Linux中，PCI设备的编程其实和普通设备的编程很相似，没有什么特别不同，主要的不同应该是映射PCI设备的地址空间。</p>\n<p>UART设备，在编程中使用uart_register_driver注册tty设备，同时使用platform_driver_register注册平台总线。PCI-UART则是一实际总线，所以在注册时，我们选择注册为实际的总线——pci_register_driver。（参考Linux xr17v35x.c）</p>\n<p><img src=\"20171203174156903\" alt=\"img\"></p>\n<p><img src=\"20171203174158230\" alt=\"image\"></p>\n<p><img src=\"20171203174159008\" alt=\"image\"></p>\n<p>xr_uart_driver为驱动特殊的信息，xrserial_pci_driver为驱动匹配提供操作方法，在probe方法中，对串口相关资源进行初始化（还未对硬件进行相关设置），为该设备关联文件操作方法（uart_ops）。</p>\n<p>先来看看probe中主要做的事情。</p>\n<p><img src=\"20171203174159459\" alt=\"image\"></p>\n<p>在一个pci设备可以被使用之前，必须调用pci_enable_device进行激活，该函数会调用底层代码激活PCI设备上的I/O和内存，使之可用。而pci_disable_device所做的事情刚好相反，告诉系统该PCI设备不再使用，同时，禁用相关的一些资源。</p>\n<p>经过一系列调用进入函数setup_port。</p>\n<p><img src=\"20171203174200245\" alt=\"image\"></p>\n<p>图中的bar是在xrpciserial_boards数组中flags指定，此处是BAR0。（根据实际产品来，比如，我这里是BAR2）</p>\n<p><img src=\"20171203174200919\" alt=\"image\"></p>\n<p>若是我们的硬件没有预先跟软件这边说，那软件这边有能力得到这个信息吗？答案肯定是可以的。可以使用pci_select_bars来确定该PCI设备是否有申请到地址空间。（若没有肯定是有错误了）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bars = pci_select_bars(pdev, IORESOURCE_MEM);</span><br></pre></td></tr></table></figure>\n<p>返回值若是0x5，则是代表BAR0，BAR2满足select条件的，其条件就是函数的第二个参数IORESOURCE_MEM，因为PCI设备申请的地址空间有两种访问方式，一个是MEM，另一个是以IO方式访问，（第二篇博文中有介绍）。</p>\n<p>这个时候我们可以使用这个返回值来映射这些BAR，若PCI设备使用了BAR0，那软件就使用BAR0去操作特定的内存地址（寄存器）就可以了，一个PCI设备一般不会使用很多BAR的，最多一两个就不得了了，要那么多，FPGA那边也受不了。</p>\n<p>当然，有一些是强制性的就指定了该设备是使用哪一个BAR作为内存映射的基址，其他的BAR则是用于自定义用途，那软件这边强制性映射BAR0就好了。</p>\n<p>看图片上，其实还调用了一个ioremap，BAR中的基址是属于物理地址的，软件想直接访问物理地址是做不到，那么，就需要使用ioremap将物理地址转化为虚拟地址，以供软件来使用。映射完后，使用priv-&gt;remapped_bar[bar]就可以来操作设备上的寄存器了。</p>\n<p>分析完setup后（其实上面主要的工作是内存映射，其他的代码比较繁琐，在实际编程中可以适当简洁）。</p>\n<p>进入serialxr_register_port。</p>\n<p>填充 uart_port 结构体。</p>\n<p><img src=\"20171203174201698\" alt=\"image\"></p>\n<p>填充ops操作方法，也就是在应用层在使用open、write等，底层驱动最终会被调用的方法。使用uart_add_one_port将驱动与串口链接到一起，这样，在应用层操作/dev/tty*时，相应的ops就会被调用了。</p>\n<p><img src=\"20171203174202320\" alt=\"image\"></p>\n<p>到这里，probe函数大体就完成了，再之后的工作就是对ops的接口进行实现了，这里其实就可以参考一般串口设备到底在干嘛了，例如参考S3C2440的串口驱动。</p>\n<p>参考至<a href=\"http://blog.csdn.net/lizuobin2/article/details/51773305\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/lizuobin2/article/details/51773305</a>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uart_ops</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"title\">int</span>\t<span class=\"params\">(*tx_empty)</span><span class=\"params\">(struct uart_port *)</span></span>;\t <span class=\"comment\">/* 串口的Tx FIFO缓存是否为空 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*set_mctrl)(struct uart_port *, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> mctrl);\t<span class=\"comment\">/* 设置串口modem控制 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"title\">int</span>\t<span class=\"params\">(*get_mctrl)</span><span class=\"params\">(struct uart_port *)</span></span>;\t<span class=\"comment\">/* 获取串口modem控制 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*stop_tx)(struct uart_port *);\t\t<span class=\"comment\">/* 禁止串口发送数据 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*start_tx)(struct uart_port *);\t<span class=\"comment\">/* 使能串口发送数据 */</span>\t</span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*send_xchar)(struct uart_port *, <span class=\"keyword\">char</span> ch);\t<span class=\"comment\">/* 发送xChar */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*stop_rx)(struct uart_port *);\t\t<span class=\"comment\">/* 禁止串口接收数据 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*enable_ms)(struct uart_port *);\t<span class=\"comment\">/* 使能modem的状态信号 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*break_ctl)(struct uart_port *, <span class=\"keyword\">int</span> ctl);\t<span class=\"comment\">/* 设置break信号 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>\t\t\t(*startup)(struct uart_port *);\t\t<span class=\"comment\">/* 启动串口,应用程序打开串口设备文件时,该函数会被调用 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*shutdown)(struct uart_port *);<span class=\"comment\">/* 关闭串口,应用程序关闭串口设备文件时,该函数会被调用 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*flush_buffer)(struct uart_port *);</span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*set_termios)(struct uart_port *, struct ktermios *<span class=\"keyword\">new</span>,</span><br><span class=\"line\">\t\t\t\t       struct ktermios *old);\t<span class=\"comment\">/* 设置串口参数 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*set_ldisc)(struct uart_port *);<span class=\"comment\">/* 设置线路规程 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*pm)(struct uart_port *, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> state,</span><br><span class=\"line\">\t\t\t      <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> oldstate);\t<span class=\"comment\">/* 串口电源管理 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>\t\t(*set_wake)(struct uart_port *, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> state);</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return a string describing the type of the port</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *(*type)(struct uart_port *);</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * Release IO and memory resources used by the port.</span></span><br><span class=\"line\"><span class=\"comment\">\t * This includes iounmap if necessary.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*release_port)(struct uart_port *);</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * Request IO and memory resources used by the port.</span></span><br><span class=\"line\"><span class=\"comment\">\t * This includes iomapping the port if necessary.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>\t\t(*request_port)(struct uart_port *);\t<span class=\"comment\">/* 申请必要的IO端口/IO内存资源,必要时还可以重新映射串口端口 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t\t(*config_port)(struct uart_port *, <span class=\"keyword\">int</span>); <span class=\"comment\">/* 执行串口所需的自动配置 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>\t\t(*verify_port)(struct uart_port *, struct serial_struct *); <span class=\"comment\">/* 核实新串口的信息 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>\t\t(*ioctl)(struct uart_port *, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_CONSOLE_POLL</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>\t(*poll_put_char)(struct uart_port *, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>\t\t(*poll_get_char)(struct uart_port *);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>特别说明下，其中set_termios，与串口数据，流控开关，以及波特率设置相关。应用层若需要操控这些格式或者是打开流控等，需要使用tcgetattr函数得到对应串口的termios结构体。通过tcsetattr函数将设置后termios结构体传递给对应的串口。</p>\n<p>startup则与open函数相关，在串口进行open操作时，上层会调用uart_open（serial_core.c），然后调用打开的设备的文件操作函数方法的startup。shutdown则与之相对。</p>\n<p>ioctl则是支持一些该串口特殊的操作（若没有，则不设置就可以了）。</p>\n<p><img src=\"20171203174202999\" alt=\"image\"></p>\n<p>config_port是在驱动调用uart_add_one_port，链接驱动和串口端口时就被调用的一个函数，这个函数调用的真是早啊，主要的作用也是做一些在串口还没打开时需要处理的一些事，例如，设置串口的模式（232\\485\\422）。</p>\n<p>大概就是这些了，其实VxWorks的驱动与之类似，可以参考vxbTemplateSio.c或者是templateSio.c，应该不会遇到啥比较可怕的大坑 。</p>\n<p>另外需要注意的是VxWorks映射PCI BAR空间的问题，这些个代码网上有很多，可以去直接搜索下，不必去从源码上扣，别人已经整理出来了，我们就不必要花这个功夫了呗！</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"www.chunlife.top/2017/11/03/PCI串口编程/\">PCI串口编程</a></li></ul></div>","categories":[{"name":"系统","slug":"系统","permalink":"chunlife.top/categories/系统/"}],"tags":[{"name":"串口","slug":"串口","permalink":"chunlife.top/tags/串口/"},{"name":"PCI","slug":"PCI","permalink":"chunlife.top/tags/PCI/"}]},{"title":"Linux搭建小型服务器——文件共享以及邮件服务器","date":"2017-10-29T08:17:51.000Z","path":"2017/10/29/Linux搭建小型服务器——文件共享以及邮件服务器/","content":"<p>因为公司搬家，之前后又采用了新的服务器，所以之前的服务器的东西需要移动到新的服务器上，而且趁着这次机会，搭建了一个局域网使用的邮件服务器使用，虽然不知道别人怎么搭建的，但是把自己的经验记录下来，因为这个邮件服务器确实花了我不少时间去琢磨，因为它这玩意可能还会干扰我的文件共享功能。</p>\n<a id=\"more\"></a>\n<p>邮件服务器是IRedMail，文件共享服务是Samba，环境是centos。</p>\n<h3><span id=\"iredmail安装\">IRedMail安装：</span></h3>\n<p>网上搜索很容易搜索到使用Postfix+Dovecot搭建邮件服务器，不过我没有搭建成功，很遗憾，所以我找到了使用IRedMail去搭建这个服务器，比之前的操作简单多了。</p>\n<p>搭建的步骤主要是参考了这个：<a href=\"https://www.tecmint.com/install-iredmail-on-centos-7-for-samba4-ad-integration/\" target=\"_blank\" rel=\"noopener\">How to Install iRedMail on CentOS 7 for Samba4 AD Integration – Part 10</a></p>\n<p>首先你得有一个centos的系统，这里选择的是centos 7最小化安装，非常快速简洁的便会安装完成。</p>\n<ol>\n<li>\n<p>进入系统，准备设置系统主机名。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># hostnamectl set-hostname mail.demo.com</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>主机名在hosts中设置一下，设置这个东西主要是IRedMail在安装时会需要使用到，所以自定义一下。vim /etc/hosts。</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1 mail.demo.com mail localhost localhost.localdomain</span><br></pre></td></tr></table></figure>\n<p>先后格式错误的话，IRedMail在安装时也会提醒安装错误的。</p>\n<ol start=\"3\">\n<li>在我参考的那个英文文章里说，需要关闭<a href=\"https://www.baidu.com/s?wd=selinux&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd\" target=\"_blank\" rel=\"noopener\">selinux</a>，我试了下，不关闭也是照样好使的，不过别人的说的是推荐，不是强制。vim /etc/selinux/config。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELINUX=disabled</span><br><span class=\"line\"># setenforce 0</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>接下来需要安装些必要的Linux工具了，使用yum命令。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum install bzip2 net-tools bash-completion wget</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>获取IRedMail的安装包，并解压。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># wget https://bitbucket.org/zhb/iredmail/downloads/iRedMail-0.9.6.tar.bz2</span><br><span class=\"line\"></span><br><span class=\"line\"># tar xjf iRedMail-0.9.6.tar.bz2</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>接下来就可以运行IRedMail里面的脚本了，并不需要认为设置，很是方便。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># IREDMAIL_MIRROR=&apos;http://106.187.51.47&apos; bash iRedMail.sh</span><br></pre></td></tr></table></figure>\n<p>如果你直接运行bash <a href=\"http://iRedMail.sh\" target=\"_blank\" rel=\"noopener\">iRedMail.sh</a>，是没啥结果的，查了下，好像是因为其下载地址被强了吧，所以需要加入前面的环境设置。</p>\n<ol start=\"7\">\n<li>安装过程基本上选择默认，除了在选择web server上选择Apache，后端选择OpenLDAP外（我之前选择了MariaDB，Samba就死活通不了了，OpenLDAP我实验成功），其他基本上是默认的。</li>\n</ol>\n<p><img src=\"13163018_Uf7x.png\" alt=\"image\"></p>\n<p><img src=\"13163018_RZvU.jpg\" alt=\"clip_image004\"></p>\n<ol start=\"8\">\n<li>\n<p>在需要输入些什么时候稍微看下软件给的提示英文，设置起来应该是没什么问题的。</p>\n</li>\n<li>\n<p>设置完后，就是开始安装了，保证系统可以上网即可，安装完成后，软件将提示重启所有服务，</p>\n</li>\n<li>\n<p>在软件目录的下的iRedMail.tips，其保存了很多服务器设置的内容，包括邮件服务器里面的管理员密码，所以，需要保管好。iRedMail-0.9.6/iRedMail.tips</p>\n</li>\n<li>\n<p>在同一局域网的浏览器上，输入https://192.168.0.254，此处的IP是服务器IP，这样即可连接到邮件服务器了，注意：浏览器可能静止访问，或者兼容模式访问起来有些问题，这个时候需要测试者多整整浏览器的问题，以免误认为安装失败。</p>\n<p><a href=\"httpS://192.168.0.254/mail/\" target=\"_blank\" rel=\"noopener\">httpS://192.168.0.254/mail/</a> 邮箱登录</p>\n<p><a href=\"httpS://192.168.0.254/iredadmin/\" target=\"_blank\" rel=\"noopener\">httpS://192.168.0.254/iredadmin/</a> 管理邮箱账户，添加邮箱</p>\n</li>\n</ol>\n<h3><span id=\"samba安装\">Samba安装</span></h3>\n<p>这个Samba我主要是参考了：<a href=\"http://www.cnblogs.com/linuxprobe/p/5658735.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/linuxprobe/p/5658735.html</a></p>\n<h4><span id=\"步骤1在fedora和centos上安装samba\"><strong>步骤1：在Fedora和CentOS上安装Samba</strong></span></h4>\n<p>首先，安装Samba以及进行一些基本的配置。</p>\n<p>检验Samba是否已经安装在您的系统中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rpm -q samba samba-common samba-client</span><br></pre></td></tr></table></figure>\n<p>如果上面的命令没有任何输出，这意味着Samba并未安装。这时，应使用下面的命令来安装Samba。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install samba samba-common samba-client</span><br></pre></td></tr></table></figure>\n<p>接下来，创建一个用于在网络中共享的本地文件夹。这个文件夹应该以Samba共享的方式导出到远程的用户。在这个指南中，我们会在顶层文件夹’/'中创建这个文件夹，因此，请确保您有相应的权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo mkdir /shared</span><br></pre></td></tr></table></figure>\n<p>如果您想在您的home文件夹内创建共享文件夹（例如，~/shared），您必须激活SELinux中Samba的home文件夹共享选项，具体将在后面提到。</p>\n<p>在创建/shared文件夹后，设置文件夹权限以保证其余用户可以访问它。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo chmod o+rw /shared</span><br></pre></td></tr></table></figure>\n<p>如果您不想其他用户对该文件夹拥有写权限，您需要移除命令中的’w’选项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo chmod o+r /shared</span><br></pre></td></tr></table></figure>\n<p>接下来，创建一个空文件来测试。这个文件可以被用来验证Samba的共享已经被挂载。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo touch /shared/file1</span><br></pre></td></tr></table></figure>\n<h4><span id=\"步骤2为samba配置防火墙\"><strong>步骤2：为Samba配置防火墙</strong></span></h4>\n<p>下面的命令用来打开防火墙中Samba共享所需的TCP/UDP端口。</p>\n<p>如果您在使用firewalld（例如，在Fedora和CentOS7下），接下来的命令将会永久的修改Samba相关的防火墙规则。</p>\n<h4><span id=\"步骤3更改samba配置\"><strong>步骤3：更改Samba配置</strong></span></h4>\n<p>后面的步骤用来配置Samba以将本地文件夹导出为Samba共享文件夹。</p>\n<p>使用文件编辑器打开Samba配置文件，并将下面的行添加到文件的末尾。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo nano /etc/samba/smb.conf</span><br><span class=\"line\">[myshare]</span><br><span class=\"line\"></span><br><span class=\"line\">comment=my shared files</span><br><span class=\"line\"></span><br><span class=\"line\">path=/shared</span><br><span class=\"line\"></span><br><span class=\"line\">public=yes</span><br><span class=\"line\"></span><br><span class=\"line\">writeable=yes</span><br></pre></td></tr></table></figure>\n<p>上面在括号内的文本（例如，“myshare”）是Samba共享的资源的名字，它被用来从远程主机存取Samba共享。</p>\n<p>创建Samba用户账户，这是挂载和导出Samba文件系统所必须的。我们可以使用smbpasswd工具来创建一个Samba用户。注意，Samba用户帐户必须是已有的Linux用户。如果您尝试使用smbpasswd添加一个不存在的用户，它会返回一个错误的消息。</p>\n<p>如果您不想使用任何已存在的Linux用户作为Samba用户，您可以在您的系统中创建一个新的用户。为安全起见，设置新用户的登录脚本为/sbin/nologin，并且不创建该用户的home文件夹。</p>\n<p>在这个例子中，我们创建了一个名叫&quot;sambaguest&quot;的用户，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo useradd -M -s /sbin/nologin sambaguest</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo passwd sambaguest</span><br></pre></td></tr></table></figure>\n<p>在创建一个新用户后，使用smbpasswd命令添加Samba用户。当这个命令询问一个密码时，您可以键入一个与其用户密码不同的密码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo smbpasswd -a sambaguest</span><br></pre></td></tr></table></figure>\n<p>激活Samba服务，并检测Samba服务是否在运行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl enable smb.service</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo systemctl start smb.service</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo systemctl is-active smb</span><br></pre></td></tr></table></figure>\n<p>使用下面的命令来查看Samba中共享的文件夹列表。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ smbclient -U sambaguest -L localhost</span><br></pre></td></tr></table></figure>\n<p>Linux之间Samba远程挂载的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount //192.168.1.58/demo /mnt/ -o username=samba</span><br></pre></td></tr></table></figure>\n<p>附在末尾：</p>\n<p>Linux关于权限：例如777，rwx(Owner)  r-x(Group)    r-x(Other)。</p>\n<p><img src=\"13163019_vmLd.jpg\" alt=\"clip_image002[5]\"></p>\n<p>cat /etc/passwd 可以查看所有用户的列表</p>\n<p>w 可以查看当前活跃的用户列表</p>\n<p>cat /etc/group 查看用户组</p>\n<h5><span id=\"1-建工作组\">1. 建工作组</span></h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd test //新建test工作组</span><br></pre></td></tr></table></figure>\n<h5><span id=\"2-新建用户同时增加工作组\">2. 新建用户同时增加工作组</span></h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd -g test one //新建one用户并增加到test工作组</span><br></pre></td></tr></table></figure>\n<h5><span id=\"3-给已有的用户增加工作组\">3. 给已有的用户增加工作组</span></h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usermod -G groupname username</span><br><span class=\"line\"></span><br><span class=\"line\">或者：gpasswd -a user group</span><br></pre></td></tr></table></figure>\n<h5><span id=\"4-将一个已有用户添加到一个已有的工作组中可以使用带-a参数的指令\">4. 将一个已有用户添加到一个已有的工作组中，可以使用带-a参数的指令。</span></h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usermod -a -G groupname username</span><br><span class=\"line\"></span><br><span class=\"line\">若需要顺便改变主要用户组，则可以使用：</span><br><span class=\"line\"></span><br><span class=\"line\">usermod -g groupname username</span><br></pre></td></tr></table></figure>\n<h5><span id=\"5-修改文件或目录所属的用户\">5. 修改文件或目录所属的用户。</span></h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown one /home/one （把home目录下的one目录的有者改为one用户）</span><br></pre></td></tr></table></figure>\n<h5><span id=\"6-修改文件或目录所属的组\">6. 修改文件或目录所属的组。</span></h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chgrp one /home/one （把home目录下的one目录的有者改为one组）</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/11/11/linux解压文件的命令/\">linux解压文件的命令</a></li><li><a href=\"chunlife.top/2019/11/05/linux-windows-go打开应用/\">linux-windows-go打开系统各类应用</a></li><li><a href=\"chunlife.top/2016/11/17/磁盘组RAID 5/\">磁盘组RAID 5</a></li><li><a href=\"https://lyonger.cn/article/websocket的几种测试方式/\">websocket的几种测试方式</a></li></ul></div>","categories":[{"name":"系统","slug":"系统","permalink":"chunlife.top/categories/系统/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"chunlife.top/tags/Linux/"},{"name":"文件共享_邮件","slug":"文件共享-邮件","permalink":"chunlife.top/tags/文件共享-邮件/"}]},{"title":"vxworks中断处理程序不能使用printf的本质","date":"2017-10-27T12:56:26.000Z","path":"2017/10/27/vxworks中断处理程序不能使用printf的本质/","content":"<p>因为之前面试有被人提到，中断处理程序中为什么不能使用printf，在回答的时候一想，Linux驱动里面不是就可以使用打印吗，有啥不能用的（那是printk，当时搞混了）。在vxworks上用的都是logMsg进行打印，至于为啥没使用printf也没去深究，现在正好把它记一下。</p>\n<a id=\"more\"></a>\n<p>我的理解是：printf是对IO进行操作，有“信号量”进行加持，也就是所谓的“锁机制”，如果有在uboot上移植过printf的经历，就知道，printf是使用了全局变量的，这也是它申请锁保护的原因吧，但关键就是“锁”这个玩意有点儿危险的是，它是一个需要等待的操作，也就是说·在申请它和使用它的时候，有可能会被“锁”给阻塞，但是vxworks是一个实时操作系统，当发生阻塞时，它的调度就会出现问题，可能就会导致死机的现象。</p>\n<p>下面是我转载的一篇文章，帮助大家进行理解。</p>\n<p><em>本文章转载自：<a href=\"http://blog.csdn.net/mao0514/article/details/32700835\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/mao0514/article/details/32700835</a></em><a href=\"http://http//blog.csdn.net/mao0514/article/details/32700835\" target=\"_blank\" rel=\"noopener\">点击打开链接</a></p>\n<p>vxworks 中断处理程序之所以不用printf，本质在于printf是将信息输出到标准输出设备(STDOUT)中, 整个标准输出设备是一个全局变量，由于有semTake操作，那么就会发生阻塞，vxworks属于硬实时操作系统，不能在规定的时间内完成操作即会死机或复位。所以vxworks不用printf的原因在于阻塞。 网上说printf 因为引用全局变量stdout，所以是不可重入的。这个稍微解释一下。如果用到了全局变量，但是用信号量保护，是线程安全的，但是不可重入的（会导致死锁，譬如一个任务或中断处理程序调用了printf，被另一个高优先级中断打断，那么就会形成死锁而导致系统复位）。 所以这里的阻塞和不可重入都是因为对共享变量的保护而采用互斥锁引起的，而这里的阻塞是不可重入的一个真子集。（例如：可能有些函数对静态或全局变量没有锁保护，因此是非线程安全，也是非可重入的，此时并没有阻塞在静态或全局变量上，所以不可重入的概念要大。）。因此printf不能用在中断处理程序中的根本原因在于使用了全局变量后采用了锁机制，而锁机制会导致阻塞，阻塞是不可重入的真子集。 所以网上说printf因为不可重入，也会说得过去的（但不可重入还有其他非阻塞的场景）。更准确的说法是因为阻塞在全局变量STDOUT上）。关于可重入和线程安全的区别，下文会有详细解释：</p>\n<p>线程安全函数<br>\n• 概念：<br>\n线程安全的概念比较直观。一般说来，一个函数被称为线程安全的，当且仅当被多个并发线程反复调用时，它会一直产生正确的结果。<br>\n• 确保线程安全：<br>\n要确保函数线程安全，主要需要考虑的是线程之间的共享变量。属于同一进程的不同线程会共享进程内存空间中的全局区和堆，而私有的线程空间则主要包括栈和寄 存器。因此，对于同一进程的不同线程来说，每个线程的局部变量都是私有的，而全局变量、局部静态变量、分配于堆的变量都是共享的。在对这些共享变量进行访 问时，如果要保证线程安全，则必须通过加锁的方式。<br>\n• 线程不安全的后果：<br>\n线程不安全可能导致的后果是显而易见的——共享变量的值由于不同线程的访问，可能发生不可预料的变化，进而导致程序的错误，甚至崩溃。</p>\n<p>可重入函数<br>\n• 概念：<br>\n可重入的概念基本没有比较正式的完整解释，多数的文档都只是说明什么样的情况才能保证函数可重入，但没有完整定义。按照Wiki上的说法，“A computer program or routine is described as reentrant if it can be safely executed concurrently; that is, the routine can be re-entered while it is already running.”根据笔者的经验，所谓“重入”，常见的情况是，程序执行到某个函数foo()时，收到信号，于是暂停目前正在执行的函数，转到信号处理 函数，而这个信号处理函数的执行过程中，又恰恰也会进入到刚刚执行的函数foo()，这样便发生了所谓的重入。此时如果foo()能够正确的运行，而且处理完成后，之前暂停的foo()也能够正确运行，则说明它是可重入的。<br>\n• 确保可重入：<br>\n要确保函数可重入，需满足以下几个条件：<br>\n1、不在函数内部使用静态或全局数据<br>\n2、不返回静态或全局数据，所有数据都由函数的调用者提供。<br>\n3、使用本地数据，或者通过制作全局数据的本地拷贝来保护全局数据。<br>\n4、不调用不可重入函数。<br>\n• 不可重入的后果：<br>\n不可重入的后果主要体现在象信号处理函数这样需要重入的情况中。如果信号处理函数中使用了不可重入的函数，则可能导致程序的错误甚至崩溃。</p>\n<p>可重入与线程安全<br>\n可重入与线程安全并不等同。一般说来，可重入的函数一定是线程安全的，但反过来不一定成立。<br>\n- 如果一个函数中用到了全局或静态变量，那么它不是线程安全的，也不是可重入的；<br>\n- 如果我们对它加以改进，在访问全局或静态变量时使用互斥量或信号量等方式加锁，则可以使它变成线程安全的，但此时它仍然是不可重入的，因为通常加锁方式是针对不同线程的访问，而对同一线程可能出现问题；这里举例说明：假设函数func() 在执行过程中需要访问某个共享资源，因此为了实现线程安全，在使用该资源前加锁，在不需要资源解锁。<br>\n假设该函数在某次执行过程中，在已经获得资源锁之后，有异步信号发生，程序的执行流转交给对应的信号处理函数；再假设在该信号处理函数中也需要调用函数 func() ，那么func() 在这次执行中仍会在访问共享资源前试图获得资源锁，然而我们知道前一个func() 实例已然获得该锁，因此信号处理函数阻塞。另一方面，信号处理函数结束前被信号中断的线程是无法恢复执行的，当然也没有释放资源的机会，这样就出现了线程和信号处理函数之间的死锁局面。</p>\n<p>因此，func() 尽管通过加锁的方式能保证线程安全，但是由于函数体对共享资源的访问，因此是非可重入。如果将函数中的全局或静态变量去掉，改成函数参数等其他形式，则有可能使函数变成既线程安全，又可重入。比如：strtok函数是既不可重入的，也不是线程安全的；加锁的strtok不是可重入的，但线程安全；而strtok_r既是可重入的，也是线程安全的。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"www.chunlife.top/2017/10/27/vxworks中断处理程序不能使用printf的本质/\">vxworks中断处理程序不能使用printf的本质</a></li></ul></div>","categories":[{"name":"系统","slug":"系统","permalink":"chunlife.top/categories/系统/"}],"tags":[{"name":"VxWorks","slug":"VxWorks","permalink":"chunlife.top/tags/VxWorks/"}]},{"title":"学PPT时的作品","date":"2017-10-18T08:17:51.000Z","path":"2017/10/18/学PPT时的作品/","content":"<p><img src=\"20171018161922485.jpg\" alt=\"作品\"></p>\n<a id=\"more\"></a>\n<p>当年在学校时，就靠这个为（zhuang）生（bi），以为自己会成为一个设计师，迷恋PPT这种简单的软件制作出大师的设计，当然PS这玩意你还是得用，都是工具嘛。</p>\n<p>这些图片单纯的使用PPT是很难达到的，这其中使用到了PPT的插件——OK插件，当然现在PPT的插件还是有一些的，使用插件可以省却很多麻烦，这是在你本身很熟悉的前提下，有兴趣的同学可以去微博找找“只为设计”姥爷的微博，OK插件就是这位大神开发的，PPT当然也是玩得飞起，我反正是很尊敬这位大拿的。</p>\n<p>说多了啊，简单的就把作品放这里就可以了，我还是那个程序员。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"https://abelsu7.top/2019/10/23/go-present-ppt/\">Go 语言使用 present 展示 PPT</a></li></ul></div>","categories":[{"name":"杂项","slug":"杂项","permalink":"chunlife.top/categories/杂项/"}],"tags":[{"name":"PPT","slug":"PPT","permalink":"chunlife.top/tags/PPT/"}]},{"title":"QT 中的Event事件函数","date":"2017-01-16T09:50:22.000Z","path":"2017/01/16/QT 中的Event事件函数/","content":"<p>Event函数是一个Virtual Protected函数，它响应于用户触发的事件，事件多种多类，可以参考help帮助文档。</p>\n<a id=\"more\"></a>\n<p>之所以要提到它，是因为我需要实现一个实时显示鼠标坐标的功能，网上实现的方式都是使用<code>setmousetracking()</code>，但是对于我这种情况来说，这并不能实现，我在一篇博客上，也恰好看到了博主跟我同样的问题。</p>\n<p><img src=\"clip_image001.png\" alt=\"123\"></p>\n<p><a href=\"http://lps-683.iteye.com/blog/2260091\" target=\"_blank\" rel=\"noopener\">http://lps-683.iteye.com/blog/2260091</a></p>\n<p>博主是使用的事件过滤器，但是我在实验过后，并没有使用博主的方法（我木有搞成功），于是我在试验鼠标移动是否触发事件时，发现了在event函数中能够响应鼠标移动的事件，所以据此，我采用了另外一种情况。</p>\n<p>那就是，首先，设置<code>setmousetracking(true)</code>，开启鼠标跟踪。第二，构造event事件，判断当前的鼠标坐标与先前的坐标是否不同，以确认是否发生了改变，以免重复操作。</p>\n<p><strong>2017年5月18日11:28:02</strong></p>\n<p>我使用<code>setmousetracking</code>不成功，因为之前使用的界面类是<code>QTabWidget</code>，但是转换为<code>QStackedWidget</code>后，即可使用<code>setmousetracking</code>进行鼠标的实时跟踪了。</p>\n<p><img src=\"clip_image011.png\" alt=\"代码\"></p>\n<p>代码中，为何加入一个“i”来累加呢？</p>\n<p>不加这段代码，将会被判断程序出错，可以实际试试。我调试时的错误：</p>\n<p><img src=\"clip_image101.png\" alt=\"错误\"></p>\n<p>我发现这可能是因为UI的界面的创造时间位于event函数被建立起来之后，所以在event里直接调用界面，此时传送字符串将引发内存泄露的危害，造成程序崩溃。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2017/01/15/发布QT程序/\">发布QT程序</a></li><li><a href=\"chunlife.top/2016/12/19/QT多线程/\">QT多线程</a></li><li><a href=\"www.chunlife.top/2017/01/16/QT 中的Event事件函数/\">QT 中的Event事件函数</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"QT","slug":"QT","permalink":"chunlife.top/tags/QT/"}]},{"title":"发布QT程序","date":"2017-01-15T09:50:22.000Z","path":"2017/01/15/发布QT程序/","content":"<p>qt程序需要包含很多依赖，并不会编译成一个<code>.exe</code>文件，为了方便程序分发，最好的就是将qt程序进行一下简单的打包操作。</p>\n<a id=\"more\"></a>\n<p>一、使用QT自带的windeployqt.exe，进入到D:\\Qt5.7.1\\5.7\\mingw53_32\\bin，在此打开qt自带的”cmd“命令窗口，然后输入后面多加个<code>--release</code>。</p>\n<p><img src=\"clip_image001.png\" alt=\"qt CMD命令窗口\"></p>\n<p>运行命令：</p>\n<p><img src=\"1552644204832.png\" alt=\"1552644204832\"></p>\n<p>它能把大多数依赖文件都拉入到QT生成到的EXE文件夹目录中。</p>\n<p>二、在上一步的基础上直接运行EXE文件，查看具体缺少什么，去QT的安装目录下，查找需要的库文件。（<em><strong>多在几台没有安装任何IDE的电脑上跑一跑</strong></em>）</p>\n<p>在windows下，使用<code>FilePacker</code>将需要的文件打包成一个<code>EXE</code>文件，这样利于发布。</p>\n<p>在Linux下，则估计只有将其压缩成包<code>.tar.gz</code>。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2017/01/16/QT 中的Event事件函数/\">QT 中的Event事件函数</a></li><li><a href=\"chunlife.top/2016/12/19/QT多线程/\">QT多线程</a></li><li><a href=\"www.chunlife.top/2017/01/16/QT 中的Event事件函数/\">QT 中的Event事件函数</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"QT","slug":"QT","permalink":"chunlife.top/tags/QT/"}]},{"title":"QT多线程","date":"2016-12-19T09:50:22.000Z","path":"2016/12/19/QT多线程/","content":"<p>问题是这样的：我需要使用一个界面类的方法，不过呢，QT帮助文档里也说了，咱啊，不能在界面类之外操作UI，那关键是怎么滴也需要操作啊，有方法的，那就是通过signals与slot联合操作，线程发出信号，主线程得到信号后来操作界面函数即可。</p>\n<a id=\"more\"></a>\n<p><img src=\"clip_image001.png\" alt=\"QT 线程代码\"></p>\n<p>我出了什么问题呢，即程序运行短时间内卡死了，我猜想是递归过深，导致栈溢出崩溃了，我的系统整个资源消耗非常巨大，我检查了我的槽函数。</p>\n<p><img src=\"clip_image001-1552644779835.png\" alt=\"槽函数\"></p>\n<p>看着像没啥问题的，毕竟我还加上了打印。再瞧瞧connect连接是否出错。</p>\n<p><img src=\"clip_image0012.png\" alt=\"connect连接函数\"></p>\n<p>这也没啥问题啊。</p>\n<p>不过我一直在猜想在线程run函数里面的emit发送信号是否是有问题，但无法得到正确的解决方法，毕竟槽是可重入的，按理说，信号不应该是等待上一个信号处理完再发送的吗？难道是，发送者只负责发，不管对象槽怎么个处理法？？有疑惑。</p>\n<p>这里有篇博客是个合理的理论说法。虽然和信号、槽不一样，但是原理却类似。</p>\n<p><a href=\"http://www.xuebuyuan.com/2041299.html\" target=\"_blank\" rel=\"noopener\"><strong>Qt学习之系列[9] – QCoreApplication:processEvents()可能会引起递归，导致栈溢出崩溃</strong></a></p>\n<p><img src=\"clip_image011.png\" alt=\"博客截图\"></p>\n<p>另外我看到了这篇博客对线程的讲解。</p>\n<p><a href=\"https://www.devbean.net/2013/12/qt-study-road-2-thread-and-qobject/\" target=\"_blank\" rel=\"noopener\">Qt 学习之路 2（74）：线程和 QObject</a></p>\n<p><img src=\"clip_image111.png\" alt=\"信号与槽连接方式\"></p>\n<p>故而我使用了Qt::BlockingQueuedConnection。</p>\n<p><img src=\"1552645124448.png\" alt=\"代码\"></p>\n<p><strong>2016年12月21日22:58:31</strong></p>\n<p>今天我为了使用OpenGL，移植QT的移植例程到自己的程序里面，OpenGL确实是个大学问的，这里暂且不表，3D图形显示嘛，这里涉及到了一个QTime定时器的东西，因为它要刷新图像，但是我的主线程里面时间可是个娇贵的东西（会妨碍界面的响应，影响交互），我不想让定时器这东西出现在我的主线程里面，所以，我还是需要想想怎么将其挪移到我的子线程里面去，这里需要使用到moveToThread。</p>\n<p>将我OpenGLWindow的类运行环境移动到次线程去。</p>\n<p>这里可以参考QT的help文档，它主要介绍了两种方式使用QThread。</p>\n<p>第一种：</p>\n<p><img src=\"clip_image1001.png\" alt=\"第一种方式\"></p>\n<p>第二种：</p>\n<p><img src=\"clip_image11001.png\" alt=\"第二种方式\"></p>\n<p>第一种方式是让整个类都生存在线程之下，使用<code>movetoThread</code>函数；第二种方式则是只有QThread派生出来的那个子类的run函数是运行在次线程中的，使用<code>while(1)</code>固定整个线程。</p>\n<ul>\n<li>run函数是线程的起点，调用start后，新线程会默认调用run函数。</li>\n</ul>\n<p>可以用实验来证明，我的这个工程中使用的是第二种方式，run函数是阻塞的，使用了<code>while(1)</code>，但是在程序将主线程的信号和次线程的槽连接，然后在实际使用中，次线程的槽完全没受影响，照样可以使用，当然，此处我们可以直接打印当前线程的ID，不过网上大多都已经证明了。</p>\n<p>另外，第一种方式情况下，照样连接槽和信号，然后在其中一个函数中实现<code>while(1)</code>，在尝试着去调用其他槽，发现无法调用。</p>\n<p>若我想用第一种方式恐怕还是有点问题，因为我的槽连接方式选择的是<code>Qt::BlockingQueuedConnection</code>，阻塞发送信号的进程，直到接受信号的槽返回，那样的话，我的界面显示不就捉瞎了吗。所以，还是实现一个模态的窗口，强行锁死这个界面看看，但是效果会不太好，可以再想想其他的方法。</p>\n<p><strong>2017年5月23日15:52:45</strong></p>\n<p>VxWorks上，需要显示的设置线程优先级为low。</p>\n<p>线程是有优先级的，就比如在windows和linux上跑该软件，不设置线程优先级则是默认的普通的优先级，但是在VxWorks上则会导致软件卡死，无法运行，这就是系统体系结构不同，线程的实质也不会相同。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2017/01/16/QT 中的Event事件函数/\">QT 中的Event事件函数</a></li><li><a href=\"chunlife.top/2017/01/15/发布QT程序/\">发布QT程序</a></li><li><a href=\"www.chunlife.top/2017/01/16/QT 中的Event事件函数/\">QT 中的Event事件函数</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"QT","slug":"QT","permalink":"chunlife.top/tags/QT/"}]},{"title":"磁盘组RAID 5","date":"2016-11-17T06:58:52.000Z","path":"2016/11/17/磁盘组RAID 5/","content":"<p>在组建公司的服务器时，需要加上raid管理，raid管理能够帮助数据冗余，防错，但是代价是磁盘的存储不会达到最大的利用率。这里我们使用的是raid5，磁盘利用率能够达到(n - 1) / n。</p>\n<p>在创建raid时主要是参考了这两篇博客：</p>\n<a id=\"more\"></a>\n<p>一篇主要是讲究怎么创建的，</p>\n<p><a href=\"http://wqmsl.blog.51cto.com/847418/468700/\" target=\"_blank\" rel=\"noopener\">Linux软raid创建和维护</a></p>\n<p>另外一篇则包含了，怎么将已创建的raid设置为开机自启。</p>\n<p><a href=\"http://blog.chinaunix.net/uid-28267411-id-3522610.html\" target=\"_blank\" rel=\"noopener\">LINUX下软RAID 5实现</a></p>\n<p>但很悲剧的是这两篇博客都没详细介绍怎么分区的，软RAID需要的是至少3块分区，在安装系统时，我们所需要做就是自定义分区，留下一块足够大的地方以满足在安装系统后进行分区的操作，若是全部被分配完成，就没有裕量以供我们进行分区操作。</p>\n<p>2017年5月8日17:25:17</p>\n<p>补充上面，当留有大量空间，保证了raid的空间后，需要先使用<code>fdisk /dev/sda</code>，对硬件进行分区，将容量利用起来，使用n，选择extended分区，先将所有容量都用作扩展分区，然后再使用n，选择logical分区，raid至少是三个分区组成，所以我们这里建立大于三个分区即可。</p>\n<p><img src=\"clip_image001-1552643069543.png\" alt=\"1241\"></p>\n<p><img src=\"clip_image001.png\" alt=\"123\"></p>\n<p>然后再根据博客中的，将分区格式使用t命令设置为fd的raid格式，w为保存。</p>\n<p><strong>Samba远程挂载：</strong> <code>mount //192.168.8.58/hdxw /mnt/op -o username=superfile</code></p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/11/11/linux解压文件的命令/\">linux解压文件的命令</a></li><li><a href=\"chunlife.top/2019/11/05/linux-windows-go打开应用/\">linux-windows-go打开系统各类应用</a></li><li><a href=\"chunlife.top/2017/10/29/Linux搭建小型服务器——文件共享以及邮件服务器/\">Linux搭建小型服务器——文件共享以及邮件服务器</a></li><li><a href=\"https://lyonger.cn/article/websocket的几种测试方式/\">websocket的几种测试方式</a></li></ul></div>","categories":[{"name":"系统","slug":"系统","permalink":"chunlife.top/categories/系统/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"chunlife.top/tags/Linux/"},{"name":"raid","slug":"raid","permalink":"chunlife.top/tags/raid/"}]},{"title":"矢量字体字形分布图","date":"2016-06-28T08:17:51.000Z","path":"2016/06/28/矢量字体字形分布图/","content":"<p><img src=\"20160628074647627\" alt=\"image\"></p>\n<a id=\"more\"></a>\n<p>origin是字形显示开始的地方，下一个字体开始的位置是：origin + advance的位置，即是指定了下一个字符的origin出现的位置。advance有x方向的，当然有y方向的，不过这里没有使用，使用y方向将会使字体倾斜。</p>\n<p>虽然有坐标基准线，但是英文字体不像汉字方方正正，如果把所有英文字体搞得像汉字一样，那么会很不好看，所以即使在已经订好基准线后，还是会另外设置字体的xmin、xmax和ymin、ymax这四个参数。</p>\n<p>Freetype API的使用</p>\n<p>我们来总结一下显示一个矢量字符我们都做了什么：</p>\n<p>1、初始化一个库</p>\n<p>2、加载字体，并用创建一个face来描述字体</p>\n<p>3、设置字体的像素大小</p>\n<p>4、设置字体的旋转角度以及显示位置</p>\n<p>5、找到字型的点阵信息并记录下来</p>\n<p>6、显示点阵</p>\n<p>要得到上图的信息，我们需要将从face将glyph给取出来，得到box的一些数据，主要是坐标的XY最大、最小值。</p>\n<p>首先，从face中拿到放入字体插槽里面的glyph（此操作并不影响origin glyph）。（函数API名 Extracting the glyph image）</p>\n<p>error = FT_Get_Glyph( face-&gt;glyph, &amp;glyph );</p>\n<p>然后再拿出box里面的数据。（函数API名 Measuring the glyph image）</p>\n<p>FT_Glyph_Get_CBox(glyph, FT_GLYPH_BBOX_TRUNCATE, &amp;bbox );</p>\n<p>一些API函数：</p>\n<p>①：FT_Init_FreeType( &amp;library );</p>\n<p>功能：这是初始化一个库，所谓库我们可以简单的理解为一个空间，用来存放所有的资源。</p>\n<p>②：FT_New_Face( library, argv[1], 0, &amp;face );</p>\n<p>功能：读取字体文件中指定类型的字体，并用face来描述它</p>\n<p>参数1：表示库</p>\n<p>参数2：要打开的文件</p>\n<p>参数3：表示要加载的字体的类型，0表示任何类型都可以</p>\n<p>参数4：face</p>\n<p>一个文件里面可能会含有多种字体，每个字体对应着一个face，也就是说face用来描述某一种字体。</p>\n<p>③：FT_Set_Pixel_Sizes(face, 24, 0);</p>\n<p>功能：设置字符的像素大小</p>\n<p>参数1：face</p>\n<p>参数2：每行多少像素，0表示与列相同</p>\n<p>参数3：每列多少像素，0表示与行相同</p>\n<p>④：FT_Set_Transform( face, &amp;matrix, &amp;pen );</p>\n<p>功能：设置传输</p>\n<p>参数1：face</p>\n<p>参数2：用于设置字体的旋转角度</p>\n<p>参数3：用于设置字体的平显示位置，freetype文档里面的参数提示给的delta，也就是数学里面△符号，即然后把它显示到LCD中间位置，但是“我爱你”三个字符之间位置没发生改变，那么坐标(0,0)和(pen.x, pen.y)之间的位置就是delta。</p>\n<p><img src=\"20160628074648846\" alt=\"image\"></p>\n<p>⑤：FT_Load_Char( face, text[n], FT_LOAD_RENDER );</p>\n<p>功能：将一个字型的点阵信息记录在face-&gt;glyph中</p>\n<p>参数1：face</p>\n<p>参数2：要记录的字型的编码</p>\n<p>参数3：参数</p>\n<p>⑥：draw_bitmap( &amp;slot-&gt;bitmap , slot-&gt;bitmap_left , target_height - slot-&gt;bitmap_top );</p>\n<p>功能：将字符的点阵存放在一个结构体里面</p>\n<p>参数1：用于描述点阵信息的结构体</p>\n<p>参数2：x坐标</p>\n<p>参数3：y坐标</p>\n<p>注意：我们这里的坐标是笛卡尔坐标系，也就是y坐标向上，x坐标向右！而在LCD上的显示坐标系y轴是反向的，所以显示的时候需要将y轴处理一下！</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/11/11/linux解压文件的命令/\">linux解压文件的命令</a></li><li><a href=\"chunlife.top/2019/11/05/linux-windows-go打开应用/\">linux-windows-go打开系统各类应用</a></li><li><a href=\"chunlife.top/2017/10/29/Linux搭建小型服务器——文件共享以及邮件服务器/\">Linux搭建小型服务器——文件共享以及邮件服务器</a></li><li><a href=\"https://lyonger.cn/article/websocket的几种测试方式/\">websocket的几种测试方式</a></li></ul></div>","categories":[{"name":"系统","slug":"系统","permalink":"chunlife.top/categories/系统/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"chunlife.top/tags/Linux/"}]},{"title":"strcat函数引起的血案","date":"2016-06-07T03:34:40.000Z","path":"2016/06/07/strcat函数引起的血案/","content":"<p>/*</p>\n<p><a href=\"http://www.cnblogs.com/kaituorensheng/archive/2012/10/23/2736069.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/kaituorensheng/archive/2012/10/23/2736069.html</a><br>\n参考这篇文章</p>\n<ul>\n<li>\n<p>char *a = “Hello”;Hello存放在常量区，是无法修改的。</p>\n</li>\n<li>\n<p>通过指针只可以访问字符串常量，而不可以去改变它</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li></li>\n<li>\n<p>char a[] = “Hello”;而数组存放在栈中，是可以修改的</p>\n</li>\n<li>\n<p>Hello存放在栈中，可以通过指针去访问和修改数组内容</p>\n</li>\n</ul>\n<p>*/</p>\n<p>sizeof和strlen两个函数的随想：</p>\n<p>①sizeof的参数是数组，返回的是编译时分配的数组空间 （sizeof是运算符，值在编译时已计算好）</p>\n<p>②strlen的参数是字符型指针（char *），当数组名作为参数传入时，实际上数组就退化为指针了。</p>\n<p>（strlen是函数，值需要在运行时才能得出）</p>\n<p>该函数的实际功能从代表字符串的第一个地址开始遍历，知道遇到结束符’\\0’,返回长度不包括’\\0’</p>\n<p>这也就说明下面的函数为什么会将数组越界的字符串也一起显示了，strlen的限制就只是’\\0’，而</p>\n<p>且数组传入后即退化为指针，指针只是在读这些地址的值，没有修改，所以也不“违法”。</p>\n<p><em>总的来说就是，数组可以越界，编译器也不会报警，至于越界使用的地址会造成什么，谁也不知道</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> *a= <span class=\"string\">\"Hello, \"</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> b[]= <span class=\"string\">\"World!\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">strcat</span>(b, a);     <span class=\"comment\">//  这样是可行的，但是将b和a互换位置后，将导致段错误</span></span><br><span class=\"line\">                 a是常量，不可被更改</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>,b);</span><br><span class=\"line\"> </span><br><span class=\"line\">*/</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">voidstrcat(<span class=\"keyword\">char</span> a[], <span class=\"keyword\">char</span> b[]);</span><br><span class=\"line\">intstrlen(<span class=\"keyword\">char</span> *s);</span><br><span class=\"line\"> </span><br><span class=\"line\">intmain()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> a[] = <span class=\"string\">\"Hello, \"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> b[] = <span class=\"string\">\"World!\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">strcat</span>(a, b);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, <span class=\"built_in\">strlen</span>(a));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, <span class=\"keyword\">sizeof</span>(a));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>, a);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">strcat</span><span class=\"params\">(<span class=\"keyword\">char</span> a[], <span class=\"keyword\">char</span> b[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(a[i] != <span class=\"string\">'\\0'</span>)</span><br><span class=\"line\">\t\ti++;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>( (a[i++] = b[j++]) != <span class=\"string\">'\\0'</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">strlen</span><span class=\"params\">(<span class=\"keyword\">char</span> *s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *p = s;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(*p != <span class=\"string\">'\\0'</span>)</span><br><span class=\"line\">\t\tp++;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p-s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/10/14/计算机大小端/\">计算机大小端</a></li><li><a href=\"chunlife.top/2018/09/22/KSDK USB 例程分析/\">KSDK USB 例程分析</a></li><li><a href=\"chunlife.top/2016/06/01/串口终端没有打印字符/\">串口终端没有打印字符</a></li><li><a href=\"https://thelighter.github.io/2020/02/22/joke-3/\">c语言如何实现</a></li></ul></div>","categories":[{"name":"编程技术","slug":"编程技术","permalink":"chunlife.top/categories/编程技术/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"chunlife.top/tags/C语言/"}]},{"title":"听韦东山老师公开课的理解","date":"2016-06-07T03:34:40.000Z","path":"2016/06/07/听韦东山老师公开课的理解/","content":"<p><strong>为什么需要数据段、代码段和BBS段？这么多的段是干什么用的。</strong></p>\n<a id=\"more\"></a>\n<p>程序的指令等是只读的，可以把它们归为一类，以便运行时可以把它们放到ROM等设备上去，当然也可以是内存上，只不过是这段内存时只读的。<br>\n程序的全局变量等是可读可写的，可以把他们归为一类，放在内存里面去。<br>\n那么我们来假设一个事，若是我们编写了一个程序中，包含大量的初始值为0的全局变量，那么编译出来的.bin文件是不是会很大，很显然根据日常经验来看，编译的文件中并没有存放这些数据，那么这是怎么回事呢。<br>\n将它们这些数据归为一类，只记录它们的内存起始地址和结束地址，在程序运行前将这块内存清零。清零BSS段（BSS段通常是指用来存放程序中未初始化的全局变量和静态变量的一块内存区域）。<br>\n栈的作用？<br>\n从汇编跃进到C前，调用C函数需要有栈（栈是一种操纵内存的数据结构类型，至于你说为什么不是其他的数据结构，那你得去想想操作系统方面的知识了），至于栈的好处，我参开这篇文章上：<br>\n<a href=\"http://www.cnblogs.com/xmphoenix/archive/2012/04/28/2475399.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/xmphoenix/archive/2012/04/28/2475399.html</a><br>\n<strong>一.栈的整体作用</strong><br>\n(1)保存现场/上下文</p>\n<p>(2)传递参数:汇编代码调用c函数时，需传递参数</p>\n<p>(3)保存临时变量:包括函数的非静态局部变量以及编译器自动生成的其他临时变量。</p>\n<p>这些需要保存在内存的值呢，大家就约定用CPU的sp指针指明位置，这块内存也就是栈。</p>\n<p><strong>SDRAM那么大，程序被复制到了哪里？</strong></p>\n<p>对于2440来说，Nand启动时，CPU会自动将Nand上前4K的程序复制到片内SRAM上运行，而这段代码中就有一个功能就是将Nand上的程序复制到SDRAM上去运行的，而复制到哪里呢，以前的Uboot是采用的把链接地址写死，然后复制代码到SDRAM上的地址也是定死了，但是，现在的Uboot采用的是重定位的方法，那么也就是说，现在的程序猿把代码复制到哪里都可以，主要也是为了适配如今大量不同的板子。</p>\n<p>之所以要复制到链接地址上去使用，是因为程序上的全局变量、函数等都是以链接地址来访问的，在程序运行之前，这些地址都应该有确定的值。</p>\n<p>总结下bootloader的第一阶段大概框架：</p>\n<p>a. 必要的硬件初始化：关看门狗，时钟，SDRAM</p>\n<p>b. 重定位，将程序从Flash上读到内存相应的链接地址上</p>\n<p>c. 清除BSS段</p>\n<p>d. 调用C函数</p>\n<p><strong>前4K所使用的是位置无关码所编写的程序，也就是说为什么没有在链接地址上，还能正确运行着程序，没有上面说的限制</strong></p>\n<p>何为位置无关， ① 不去访问全局变量/静态变量； ② 跳转指令均是采用相对跳转，例如b, bl。</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/11/11/linux解压文件的命令/\">linux解压文件的命令</a></li><li><a href=\"chunlife.top/2019/11/05/linux-windows-go打开应用/\">linux-windows-go打开系统各类应用</a></li><li><a href=\"chunlife.top/2017/10/29/Linux搭建小型服务器——文件共享以及邮件服务器/\">Linux搭建小型服务器——文件共享以及邮件服务器</a></li><li><a href=\"https://lyonger.cn/article/websocket的几种测试方式/\">websocket的几种测试方式</a></li></ul></div>","categories":[{"name":"系统","slug":"系统","permalink":"chunlife.top/categories/系统/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"chunlife.top/tags/Linux/"},{"name":"ARM","slug":"ARM","permalink":"chunlife.top/tags/ARM/"}]},{"title":"Tiny6410 的NandFlash（K9GAG08U0E）","date":"2016-06-03T13:43:46.000Z","path":"2016/06/03/Tiny6410 的NandFlash（K9GAG08U0E）/","content":"<p>学的实在是揪心，一开始以为的8K每页读，才发现前4页为2K，但当以前4页2K读，后面8K读，又发现坑爹的来了，这个问题的引出主要是我读取内核并启动没有成功，然后基于这样的一个考虑，我以2K每页读取NandFlash，代码运行成功，我以8K每页读取NandFlash，代码运行一样成功，问题就在这里，如果这样考虑，代码到底是每页多少被写到NandFlash的？事实证明的是，这篇文章给了我答案，看来还真是。</p>\n<a id=\"more\"></a>\n<p>以下文章转载自：<strong><a href=\"http://blog.csdn.net/o0Avalon0o/article/details/49644553\" target=\"_blank\" rel=\"noopener\">Tiny6410+K9GAG08U0E</a></strong></p>\n<h3><span id=\"tiny6410k9gag08u0e使用小记\">Tiny6410(K9GAG08U0E)使用小记</span></h3>\n<p>友善采用这颗8K Page的Nand，在6410上面搭配使用，确实给用户添加了不少麻烦，再加上ecc部分使用软件实现，代码不开源，学到块驱动的时候确实揪心啊~~</p>\n<h3><span id=\"内部sram的大小\">内部SRAM的大小</span></h3>\n<p>先从启动说起，Tiny6410启动选用的是用户手册里面屏蔽掉的一种直接Nand启动方式，如下图，根据友善原理图的OM[4:0]电平，对应表中的RESERVED，这种启动方式就是上电后直接将Nand的前面一部分代码映射到片内SRAM中，开始启动。</p>\n<p><img src=\"clip_image001.png\" alt=\"123\"></p>\n<p>而三星官方推荐的启动方式应该是从IROM中启动，然后通过IROM将NAND中的代码拷贝到片内SRAM，再跳转到SRAM中启动。</p>\n<p>这里看了网上很多资料，有的人说SRAM是8K，有的说是4K，这里我看到用户手册里面是说有4K，但是我用Tiny6410调试裸板程序的时候，发现确实是拷贝了8K代码：</p>\n<p><img src=\"clip_image001-1552580396633.png\" alt=\"1231\"></p>\n<p>这里自己有个猜测：对于友善使用的这种隐藏的启动方式，就是直接将代码放到SRAM空间运行，此时当然就有8K RAM空间了；但是当使用三星推荐的从IROM中运行，那么IROM中运行的代码的临时变量都是保存在SRAM上面的，所以可能是官方想保留上半4K RAM用于IROM启动。</p>\n<h3><span id=\"8k页大小问题\">8K页大小问题</span></h3>\n<p>从上面启动选择那张图片可以看到，其实上6410最大仅支持4K页，并不支持8K页，而对于友善使用的被保留启动方式更是最多支持large page(2K)。</p>\n<p>所以在开始的8K SRAM代码拷贝中需要注意，系统只会拷贝每个8K页中的前2K数据，而友善配套提供的superboot升级程序在烧写U-boot镜像的时候都只是操作每页中前2K空间。</p>\n<p>而对应的在U-Boot源码中也可以看到拷贝U-boot到SDRAM中运行的函数，仅操作了前2K数据：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">nandll_read_blocks</span> <span class=\"params\">(ulong dst_addr, ulong size, <span class=\"keyword\">int</span> large_block)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        uchar *buf = (uchar *)dst_addr;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    \tuint page_shift = <span class=\"number\">9</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (large_block)</span><br><span class=\"line\">        \tpage_shift = <span class=\"number\">11</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* Read pages */</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; (<span class=\"number\">0x3c000</span>&gt;&gt;page_shift); i++, buf+=(<span class=\"number\">1</span>&lt;&lt;page_shift)) &#123;</span><br><span class=\"line\">                nandll_read_page(buf, i, large_block);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到在整个启动到U-boot代码搬运过程中，都没有启动ecc，所以在这个过程中数据都是不可靠的，而在友善的论坛里面也看到过他们承认，有掉U-boot固件的可能性。这也不能全怪人家，硬件决定6410拷贝8K代码的时候已经不安全了，那么后面Uboot重定向的时候做不做ecc都不是太重要了。。。</p>\n<p>在进入U-boot第二阶段start_armboot中之后，通过调用nand_scan()跟友善不开源的NAND_Init()，从这里之后即对K9GAG08U0E完成初始化，开启软件ECC，此后对Kernel、Rootfs的数据操作都是变为可靠了。</p>\n<p>这里再吐槽一下，调用NAND_Init()竟然会改变U-Boot的环境变量，搞的我每次通过mini6410.h文件设置的环境变量都无效，这也是醉了。。。P.S.经过验证，友善应该是在Nand上面开辟了一段空间用于保存环境变量，调用NAND_Init之后，系统将直接从Nand的这段地址中还原环境参数，也就是说修改/include/configs/mini6410.h下面的环境变量屁用都没有，对于一块全新的开发板只要在Uboot中调用一次setenv、saveenv，保存到Nand中，下次如果仅更新Uboot固件时，则不需要再重新设置环境变量了(确保你用的Uboot是最新版，旧版本Uboot命令行下不支持saveenv保存参数)。</p>\n<p>推荐解决方法可以在NAND_Init()后面使用void setenv (char *varname, char *varvalue)重新设置。</p>\n<h3><span id=\"tiny6410中的nand命令\">Tiny6410中的nand命令</span></h3>\n<p>友善提供的最新U-Boot终于支持对K9GAG08U0E进行写入操作了，分析cmd_nand.c中的do_nand()：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/* read write */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">strncmp</span>(cmd, <span class=\"string\">\"read\"</span>, <span class=\"number\">4</span>) == <span class=\"number\">0</span> || <span class=\"built_in\">strncmp</span>(cmd, <span class=\"string\">\"write\"</span>, <span class=\"number\">5</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> read;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">4</span>)</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> usage;</span><br><span class=\"line\">\taddr = (ulong)simple_strtoul(argv[<span class=\"number\">2</span>], <span class=\"literal\">NULL</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">\tread = <span class=\"built_in\">strncmp</span>(cmd, <span class=\"string\">\"read\"</span>, <span class=\"number\">4</span>) == <span class=\"number\">0</span>; <span class=\"comment\">/* 1 = read, 0 = write */</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\nNAND %s: \"</span>, read ? <span class=\"string\">\"read\"</span> : <span class=\"string\">\"write\"</span>);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (arg_off_size(argc - <span class=\"number\">3</span>, argv + <span class=\"number\">3</span>, nand, &amp;off, &amp;size) != <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\ts = <span class=\"built_in\">strchr</span>(cmd, <span class=\"string\">'.'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s != <span class=\"literal\">NULL</span> &amp;&amp;</span><br><span class=\"line\">            (!<span class=\"built_in\">strcmp</span>(s, <span class=\"string\">\".jffs2\"</span>) || !<span class=\"built_in\">strcmp</span>(s, <span class=\"string\">\".e\"</span>) || !<span class=\"built_in\">strcmp</span>(s, <span class=\"string\">\".i\"</span>))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (read) &#123;</span><br><span class=\"line\">                ret = FriendlyARMReadNand( (u_char*)addr, size, off);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">puts</span>(<span class=\"string\">\"offset should be multiple of page size\\n\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/* write */</span></span><br><span class=\"line\">                <span class=\"keyword\">nand_write_options_t</span> opts;</span><br><span class=\"line\">                <span class=\"built_in\">memset</span>(&amp;opts, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(opts));</span><br><span class=\"line\">                opts.buffer = (u_char*) addr;</span><br><span class=\"line\">                opts.length = size;</span><br><span class=\"line\">                opts.offset = off;</span><br><span class=\"line\">                <span class=\"comment\">/* opts.forcejffs2 = 1; */</span></span><br><span class=\"line\">                opts.pad    = <span class=\"number\">1</span>;</span><br><span class=\"line\">                opts.blockalign = <span class=\"number\">1</span>;</span><br><span class=\"line\">                opts.quiet      = quiet;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (NandIsMlc()) &#123;</span><br><span class=\"line\">                    ret = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                    <span class=\"built_in\">puts</span>(<span class=\"string\">\"write.jffs2/write.e/write.i is not supported\\n\"</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">                    ret = nand_write_opts(nand, &amp;opts);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CFG_NAND_YAFFS_WRITE</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!read &amp;&amp; s != <span class=\"literal\">NULL</span> &amp;&amp; + (!<span class=\"built_in\">strcmp</span>(s, <span class=\"string\">\".yaffs\"</span>) || !<span class=\"built_in\">strcmp</span>(s, <span class=\"string\">\".yaffs1\"</span>))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">nand_write_options_t</span> opts;</span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(&amp;opts, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(opts));</span><br><span class=\"line\">            opts.buffer = (u_char*) addr;</span><br><span class=\"line\">            opts.length = size;</span><br><span class=\"line\">            opts.offset = off;</span><br><span class=\"line\">            opts.pad = <span class=\"number\">0</span>;</span><br><span class=\"line\">            opts.blockalign = <span class=\"number\">1</span>;</span><br><span class=\"line\">            opts.quiet = quiet;</span><br><span class=\"line\">            opts.writeoob = <span class=\"number\">1</span>;</span><br><span class=\"line\">            opts.autoplace = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">/* jsgood */</span></span><br><span class=\"line\">            <span class=\"comment\">/* if (s[6] == '1')</span></span><br><span class=\"line\"><span class=\"comment\">                opts.forceyaffs = 1; */</span></span><br><span class=\"line\">ret = nand_write_opts(nand, &amp;opts);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (read) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!NandIsMlc()) &#123;</span><br><span class=\"line\">                    ret = nand_read(nand, off, &amp;size, (u_char *)addr);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    ret = FriendlyARMReadNand( (u_char*)addr, size, off);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">puts</span>(<span class=\"string\">\"offset should be multiple of page size\\n\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (NandIsMlc()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (off % NandBlockSizeInByte != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">puts</span>(<span class=\"string\">\"offset should be multiple of block size\\n\"</span>);</span><br><span class=\"line\">                        ret = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">                        ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; size; i += NandBlockSizeInByte) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">int</span> len = size - i;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (len &gt; NandBlockSizeInByte) &#123;</span><br><span class=\"line\">                                len = NandBlockSizeInByte;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            FriendlyARMWriteNand(((u_char *)addr) + i, len, off + i, NandBlockSizeInByte);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    ret = nand_write(nand, off, &amp;size, (u_char *)addr);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (ret == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        uint *magic = (uint*)(PHYS_SDRAM_1);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((<span class=\"number\">0x24564236</span> == magic[<span class=\"number\">0</span>]) &amp;&amp; (<span class=\"number\">0x20764316</span> == magic[<span class=\"number\">1</span>]))</span><br><span class=\"line\">                            magic[<span class=\"number\">0</span>] = <span class=\"number\">0x27051956</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>从代码可以看到，只有nand read.i == nand read可以完成K9GAG08U0E的读操作，且它们都要求操作地址必须是page对齐；</p>\n<p>而nand write可以完成K9GAG08U0E的写操作，同样，操作地址需要page对齐(8K)，且暂时还不支持带oob数据的文件系统镜像的烧写(yaffs)！！</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2016/06/07/听韦东山老师公开课的理解/\">听韦东山老师公开课的理解</a></li><li><a href=\"www.chunlife.top/2016/06/07/听韦东山老师公开课的理解/\">听韦东山老师公开课的理解</a></li></ul></div>","categories":[{"name":"系统","slug":"系统","permalink":"chunlife.top/categories/系统/"}],"tags":[{"name":"ARM","slug":"ARM","permalink":"chunlife.top/tags/ARM/"},{"name":"Tiny6410","slug":"Tiny6410","permalink":"chunlife.top/tags/Tiny6410/"}]},{"title":"改正国嵌Makefile对底层目录更改无响应的毛病","date":"2016-06-01T12:51:52.000Z","path":"2016/06/01/改正国嵌Makefile对底层目录更改无响应的毛病/","content":"<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OBJS := start.o mem.o main.o dev/dev.o lib/lib.o</span><br><span class=\"line\"></span><br><span class=\"line\">CFLAGS = -fno-builtin -I$(shell pwd)/include</span><br><span class=\"line\">export CFLAGS</span><br><span class=\"line\"></span><br><span class=\"line\">gbbot.bin : $(OBJS)</span><br><span class=\"line\">\tarm-linux-ld -Tgboot.lds -o gboot.elf $^</span><br><span class=\"line\">\tarm-linux-objcopy -O binary gboot.elf $@</span><br><span class=\"line\">\t</span><br><span class=\"line\">%.o : %.S</span><br><span class=\"line\">\tarm-linux-gcc -g -c $&lt;</span><br><span class=\"line\"></span><br><span class=\"line\">%.o : %.c</span><br><span class=\"line\">\tarm-linux-gcc -g $(CFLAGS) -c $&lt;</span><br><span class=\"line\"></span><br><span class=\"line\">.PHONY : lib/lib.o @  根据其他的Makefile琢磨出来的一种响应底层目录文件更改后Makefile不响应的解决之道</span><br><span class=\"line\">lib/lib.o:</span><br><span class=\"line\">\tcd lib; make; cd ..</span><br><span class=\"line\"></span><br><span class=\"line\">.PHONY : dev/dev.o</span><br><span class=\"line\">dev/dev.o:</span><br><span class=\"line\">\tcd dev; make; cd ..</span><br><span class=\"line\"></span><br><span class=\"line\">clean:</span><br><span class=\"line\">\trm -f *.o *.elf *.bin</span><br><span class=\"line\">\tmake clean -C lib</span><br><span class=\"line\"></span><br><span class=\"line\">make clean -C dev</span><br></pre></td></tr></table></figure>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/11/11/linux解压文件的命令/\">linux解压文件的命令</a></li><li><a href=\"chunlife.top/2019/11/05/linux-windows-go打开应用/\">linux-windows-go打开系统各类应用</a></li><li><a href=\"chunlife.top/2019/03/22/Go执行shell命令之copy/\">Go执行shell命令之copy命令</a></li><li><a href=\"https://lyonger.cn/article/websocket的几种测试方式/\">websocket的几种测试方式</a></li></ul></div>","categories":[{"name":"系统","slug":"系统","permalink":"chunlife.top/categories/系统/"}],"tags":[{"name":"Shell","slug":"Shell","permalink":"chunlife.top/tags/Shell/"},{"name":"Linux","slug":"Linux","permalink":"chunlife.top/tags/Linux/"}]},{"title":"串口终端没有打印字符","date":"2016-06-01T01:55:52.000Z","path":"2016/06/01/串口终端没有打印字符/","content":"<p>​         首先是UART.c上的错误，这个错误比较低级，由于将putc中的这个寄存器UFSTAT0写错了，还是写的以前那个没有开FIFO使用的寄存器，那也就导致了UART打印的字符乱码了，这个是根据源码一步一步找到的（替换文件，一个个来找），但是这个问题还不是最终需要解决的问题。</p>\n<a id=\"more\"></a>\n<p>​         Nand.c是我一开始就怀疑的代码，因为这段代码是我自己写的，但是似乎没有什么明显的现象指到这里来，而且将串口打印加到main函数中去后，按键中断还出现了问题，这让我实在摸不清楚代码到底在哪出现了BUG，通过替换代码才从这些繁杂中找到一点头绪。</p>\n<p>​          Nand.c有错误，那也只有一个地方的错误导致了串口打印的出错，那就是复制代码那个地方有问题。</p>\n<p>2016-6-1 16:35:08</p>\n<p>​          问题的症结出现了，copy_to_ram分为了两步，① 将NF那2K前4页复制到DDR中；②将后续的那些8K的页复制到内存。 第一步没有问题，这也是小灯可以点亮，但是按键中断却没有啥反应或者是反应几下就没了，还有UART控制台显示不出来的原因了，代码都找不到，bootloader死在了重定位上。</p>\n<p>​          问题的出现也是自己粗心大意了。buf[i]，i++，但是当i=0,重新循环时，buf地址并没有变化，也就造成了向一个重复内存里重复写数据的现象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(i=0; i &lt; page; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tbuff[i] = NFDATA;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解决方法：</p>\n<p>① buff[i++] = NFDATA;        修改前面的代码，去掉for里面的i++。</p>\n<p>② 修改buff[i] = NFDATA;为   *buff++ = NFDATA；</p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/11/11/linux解压文件的命令/\">linux解压文件的命令</a></li><li><a href=\"chunlife.top/2019/11/05/linux-windows-go打开应用/\">linux-windows-go打开系统各类应用</a></li><li><a href=\"chunlife.top/2019/10/14/计算机大小端/\">计算机大小端</a></li><li><a href=\"https://thelighter.github.io/2020/02/22/joke-3/\">c语言如何实现</a></li></ul></div>","categories":[{"name":"系统","slug":"系统","permalink":"chunlife.top/categories/系统/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"chunlife.top/tags/C语言/"},{"name":"Linux","slug":"Linux","permalink":"chunlife.top/tags/Linux/"},{"name":"uboot","slug":"uboot","permalink":"chunlife.top/tags/uboot/"}]},{"title":"Linux下的栈的实现","date":"2016-05-19T09:15:52.000Z","path":"2016/05/19/Linux下的栈的实现/","content":"<p>Linux下的栈是由glibc这个库，glibc其实是C运行库，它提供了Linux系统最底层的API（应用程序接口），glibc除了封装linux操作系统所提供的系统服务外，它本身也提供了许多其它一些必要功能服务的实现。</p>\n<a id=\"more\"></a>\n<p>​        例如堆的实现就是由它提供所提供的，那么堆是怎么被它所提供的呢，首先若是你使用malloc这个函数，就会向内核申请一块空间，Linux内存是以页框为单位，一个页框就是4K的大小，这么大的一块空间，若是我只申请malloc(16)，内核返回一大片空间（页框），多余的空间由glibc来管理。</p>\n<p>① 源头（申请）：malloc</p>\n<p>② 内核返回一大块空间（以页框为单位）</p>\n<p>③ glibc，从一大块的内存挖出程序需要的内存给程序，剩下来的进行管理。</p>\n<p><img src=\"1552641421054.png\" alt=\"malloc函数操作\"></p>\n<p><img src=\"1552641464939.png\" alt=\"1552641464939\"></p>\n<div><br><hr><h1 style=\"margin-top:0.7em; margin-bottom:0.7em\"><span id=\"推荐文章由hexo文章推荐插件驱动\">推荐文章<span style=\"font-size:0.45em; color:gray\">（由<a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo文章推荐插件</a>驱动）</span></span></h1><ul><li><a href=\"chunlife.top/2019/11/11/linux解压文件的命令/\">linux解压文件的命令</a></li><li><a href=\"chunlife.top/2019/11/05/linux-windows-go打开应用/\">linux-windows-go打开系统各类应用</a></li><li><a href=\"chunlife.top/2019/10/14/计算机大小端/\">计算机大小端</a></li><li><a href=\"https://thelighter.github.io/2020/02/22/joke-3/\">c语言如何实现</a></li></ul></div>","categories":[{"name":"系统","slug":"系统","permalink":"chunlife.top/categories/系统/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"chunlife.top/tags/C语言/"},{"name":"Linux","slug":"Linux","permalink":"chunlife.top/tags/Linux/"}]}]